{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1553662234514},{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1553662234514},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1553662234516},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1553662234515},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1553662234516},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1553662234515},{"_id":"source/_posts/库存.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553909001378},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1553662234517},{"_id":"themes/yilia/_config.yml","hash":"37696b09b9c929d6af92368f69f2f027c64e38c3","modified":1553781482579},{"_id":"themes/yilia/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1553662234540},{"_id":"source/_posts/logback.md","hash":"4833046c143c9410cd67ad1051b96da25c768a04","modified":1553914624914},{"_id":"source/_posts/springSecurity深度解析.md","hash":"6ad6b43b5349682c4fee2aa39ea6a3f4750697ef","modified":1554991847210},{"_id":"source/_posts/test.md","hash":"4578851cdcd660775a73c475985ed8e0590dfa73","modified":1553859773253},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1553662234494},{"_id":"themes/yilia/.git/config","hash":"316bc92d9936dc739c39161838a28fb4641cbea2","modified":1553662234502},{"_id":"source/_posts/netty学习笔记.md","hash":"8c523831abdaa4189f540f6ec6df3a2c3ead8708","modified":1554991847206},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1553662234580},{"_id":"themes/yilia/.git/index","hash":"ca272b7c3deaac88b2a69c005716242f439162ff","modified":1553790431058},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1553662039422},{"_id":"themes/yilia/.git/packed-refs","hash":"83644c3638dafa38c817265c9207f098dd8aeee6","modified":1553662234488},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1553662234518},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1553662234519},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1553662234519},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1553662234520},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1553662234520},{"_id":"source/_posts/hello-world.md","hash":"9d9b3df95a2b2f4e82650f8deedc97b7af96f961","modified":1553913342039},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1553662234520},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1553662234521},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1553662234536},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1553662234537},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1553662234537},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1553662234538},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1553662234539},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1553662234540},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1553662234538},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1553662234577},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1553662234541},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1553662234570},{"_id":"themes/yilia/source/slider.e37972.js","hash":"ce5eac88301fe4f2fce0fb6203adfd58eb8313ac","modified":1553662234579},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553662234535},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1553662039428},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1553662234522},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1553662234524},{"_id":"themes/yilia/.git/logs/HEAD","hash":"fddcfa6a98c2cae9fb20d1bbcb9af27df9fa079a","modified":1553662234498},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1553662234523},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"c70f367f54064a441e574c913f5e0ea121d0f899","modified":1553662234522},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1553662234525},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1553662234525},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1553662234526},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1553662234524},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"8dea8f5f93a60185439b330b0f1d1649a6ab4bd0","modified":1553662234523},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1553662234527},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"fb1b8457b9eb15b55da1bf7b133e12c375dd26f8","modified":1553662234527},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1553662234528},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1553662234528},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1553662234526},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1553662234536},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1553662039423},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1553662234536},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1553662039424},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1553662039423},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1553662039424},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1553662039425},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1553662039426},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1553662039427},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1553662039427},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1553662039426},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1553662234571},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1553662234572},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1553662234572},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1553662234574},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1553662234575},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1553662234576},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1553662234576},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1553662234573},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1553662234542},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1553662234541},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1553662234544},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1553662234543},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1553662234542},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"b85f344f2c66d43d7094746e0a9ccb21d0534201","modified":1553662234546},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1553662234545},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1553662234543},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1553662234553},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1553662234553},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1553662234545},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1553662234554},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"283ae27ea37ac3e0e45b2e05c2482a4c594b9c25","modified":1553662234578},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1553662234554},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1553662234556},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1553662234549},{"_id":"themes/yilia/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1553662234557},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1553662234557},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1553662234558},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1553662234559},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1553662234559},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1553662234560},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1553662234560},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1553662234561},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1553662234562},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1553662234561},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"2924fb6f77c4a9973cd928c2c7db0acb848ed483","modified":1553662234562},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1553662234563},{"_id":"themes/yilia/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1553662234565},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1553662234565},{"_id":"themes/yilia/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1553662234566},{"_id":"themes/yilia/source-src/js/fix.js","hash":"67b8819abb886c9d066fb3b0624ca15e06f63fe0","modified":1553662234566},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1553662234568},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1553662234564},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1553662234564},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1553662234568},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1553662234567},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"c699cf3c89409ec8f044258e0715a470861b5d5d","modified":1553662234570},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"1801ef448909ea23c0a48e9d63b80d0cfd5534ce","modified":1553662234579},{"_id":"themes/yilia/source-src/js/slider.js","hash":"0beaa112657ad57c723d9e773d5b79de60c1dd74","modified":1553662234569},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"e98ec0b3b56f14d1d79af99ceb42727719a584f3","modified":1553662234535},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1553662234569},{"_id":"themes/yilia/.git/objects/pack/pack-ca3518b8832ff0b837598185651e7204a2714001.idx","hash":"55bee19cda36005614f46d0fc0d58d4dfbd49f85","modified":1553662234406},{"_id":"themes/yilia/.git/refs/heads/master","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1553662234496},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1553662234530},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"e777cbf959b11c4dfda649c562799899b90ab4a3","modified":1553662234529},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"086c8a88fd3bcae7ec13258df58e25d6354af2fa","modified":1553662234529},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1553662234531},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"b60c42fbeb873fe3e2ed575c500f1b9ae85d53af","modified":1553762186078},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1553662234530},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1553662234533},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"345b262e3c3b75c0cd9a93d9ecabcf06e33e54ff","modified":1553662234532},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1553662234574},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1553662234533},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1553662234534},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1553662234547},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1553662234548},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1553662234546},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1553662234548},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1553662234547},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1553662234550},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1553662234551},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1553662234555},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1553662234551},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1553662234556},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1553662234555},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1553662234552},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"fddcfa6a98c2cae9fb20d1bbcb9af27df9fa079a","modified":1553662234497},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1553662234493},{"_id":"themes/yilia/test.jpg","hash":"48d08e9f9dcabfe22731fa1df084bf49e44f215f","modified":1551231087483},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"fddcfa6a98c2cae9fb20d1bbcb9af27df9fa079a","modified":1553662234493},{"_id":"themes/yilia/.git/objects/pack/pack-ca3518b8832ff0b837598185651e7204a2714001.pack","hash":"5005316ab51cc925e3f62adbb8dc2fdf002805aa","modified":1553662234435},{"_id":"public/content.json","hash":"ae17103903b881ccadd27be7af9188989b932a8c","modified":1554991889720},{"_id":"public/2019/03/28/hello-world/index.html","hash":"892d200075ee5e469d6bd77fcf86561a6195af7b","modified":1554991890587},{"_id":"public/2019/03/28/logback/index.html","hash":"0a13b76fd96a72495a4e12ab1b77aaa8f48c0ed7","modified":1554991890588},{"_id":"public/2019/03/27/test/index.html","hash":"f5baa5ecc579d4ac7c70df7f81dd9d0ee5a898a0","modified":1554991890588},{"_id":"public/archives/index.html","hash":"cac0ba80719acb03a4249a716211ada3b26e112f","modified":1554991890589},{"_id":"public/archives/2019/index.html","hash":"64484daf346eadd77f579046b89e9ea34fd18eb3","modified":1554991890589},{"_id":"public/archives/2019/03/index.html","hash":"371fac132b5686b925b913f32afc03fc1f04782c","modified":1554991890590},{"_id":"public/index.html","hash":"be27882ad6fdf0f45602206a36574714ac4c662b","modified":1554991890590},{"_id":"public/tags/瞎哔哔/index.html","hash":"3e6353c231a3eb42d9a14b94f98f98a59e327850","modified":1554991890591},{"_id":"public/2019/04/11/springSecurity深度解析/index.html","hash":"2ed3997d04d810337e162054bac4305eb0db3417","modified":1554991890586},{"_id":"public/2019/04/01/netty学习笔记/index.html","hash":"e4217abd469240f77546666808bc8340b70a2c5b","modified":1554991890587},{"_id":"public/2019/03/30/库存/index.html","hash":"26281f05bb1e52f2ea89946a6974ca39993c7b75","modified":1554991890587},{"_id":"public/archives/2019/04/index.html","hash":"7ab016e3f5ac4aa51f70f9328157318303c66506","modified":1554991890590},{"_id":"public/tags/springsecurity/index.html","hash":"41eea8f4bcbd17c848566d1548ced852ab26f084","modified":1554991890591},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1554991890599},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1554991890600},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1554991890600},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1554991890600},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1554991890600},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1554991890600},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1554991890600},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1554991890601},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1554991890601},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1554991890650},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1554991890651},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1554991890885},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1554991891384}],"Category":[],"Data":[],"Page":[],"Post":[{"_content":"","source":"_posts/库存.md","raw":"","slug":"库存","published":1,"date":"2019-03-30T01:23:21.378Z","updated":"2019-03-30T01:23:21.378Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjucok80t0000kcvm8xkh0y67","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":" logback","date":"2019-03-28T01:44:50.000Z","_content":"\n\n##### 作者：muggle\n\n&emsp;&emsp;之前写过一个logback模块的文章，但由于时间问题，写得比较凌乱；那篇文章完成的功能是记录请求日志，日志存储数据库，整合logstash；本来后续想加上elk的搭建补全成logback+elk+mysql的一个多功能的日志模块，但由于公司赶项目的原因，并且看的人也不是很多，后来就没什么动力写了。\n\n&emsp;&emsp;这次我打算重写那篇文章，把所有未写完的部分都写全；然后尽量简单明了，条理清晰。嫌太麻烦想直接上手用或者想先测试一下的小伙伴可以去我github上的poseidon项目中的poseidon-request模块翻看源码测试；开始正题。\n\n#### logback介绍\nLogback是由log4j创始人设计的另一个开源日志系统,官方网站： http://logback.qos.ch。其模块分为：\n\n1. logback-core：其它两个模块的基础模块\n2. logback-classic：它是log4j的一个改良版本，同时它完整实现了slf4j API使你可以很方便地更换成其它日志系统如log4j或JDK14 Logging\n3. logback-access：访问模块与Servlet容器集成提供通过Http来访问日志的功能\n\n#### logback的使用\n&emsp;&emsp;主要介绍在springboot中的使用，springboot中logback的默认配置文件名称为logback-spring.xml，若需要指定xml名称，需在application.properties（application.yml）中配置logging.config=xxxx.xml。在该xml中通过配置一些节点来配置logbcak，想要\n","source":"_posts/logback.md","raw":"---\ntitle: ' logback'\ndate: 2019-03-28 09:44:50\ntags:\n---\n\n\n##### 作者：muggle\n\n&emsp;&emsp;之前写过一个logback模块的文章，但由于时间问题，写得比较凌乱；那篇文章完成的功能是记录请求日志，日志存储数据库，整合logstash；本来后续想加上elk的搭建补全成logback+elk+mysql的一个多功能的日志模块，但由于公司赶项目的原因，并且看的人也不是很多，后来就没什么动力写了。\n\n&emsp;&emsp;这次我打算重写那篇文章，把所有未写完的部分都写全；然后尽量简单明了，条理清晰。嫌太麻烦想直接上手用或者想先测试一下的小伙伴可以去我github上的poseidon项目中的poseidon-request模块翻看源码测试；开始正题。\n\n#### logback介绍\nLogback是由log4j创始人设计的另一个开源日志系统,官方网站： http://logback.qos.ch。其模块分为：\n\n1. logback-core：其它两个模块的基础模块\n2. logback-classic：它是log4j的一个改良版本，同时它完整实现了slf4j API使你可以很方便地更换成其它日志系统如log4j或JDK14 Logging\n3. logback-access：访问模块与Servlet容器集成提供通过Http来访问日志的功能\n\n#### logback的使用\n&emsp;&emsp;主要介绍在springboot中的使用，springboot中logback的默认配置文件名称为logback-spring.xml，若需要指定xml名称，需在application.properties（application.yml）中配置logging.config=xxxx.xml。在该xml中通过配置一些节点来配置logbcak，想要\n","slug":"logback","published":1,"updated":"2019-03-30T02:57:04.914Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjucok8270001kcvme62cbcpo","content":"<h5 id=\"作者：muggle\"><a href=\"#作者：muggle\" class=\"headerlink\" title=\"作者：muggle\"></a>作者：muggle</h5><p>&emsp;&emsp;之前写过一个logback模块的文章，但由于时间问题，写得比较凌乱；那篇文章完成的功能是记录请求日志，日志存储数据库，整合logstash；本来后续想加上elk的搭建补全成logback+elk+mysql的一个多功能的日志模块，但由于公司赶项目的原因，并且看的人也不是很多，后来就没什么动力写了。</p>\n<p>&emsp;&emsp;这次我打算重写那篇文章，把所有未写完的部分都写全；然后尽量简单明了，条理清晰。嫌太麻烦想直接上手用或者想先测试一下的小伙伴可以去我github上的poseidon项目中的poseidon-request模块翻看源码测试；开始正题。</p>\n<h4 id=\"logback介绍\"><a href=\"#logback介绍\" class=\"headerlink\" title=\"logback介绍\"></a>logback介绍</h4><p>Logback是由log4j创始人设计的另一个开源日志系统,官方网站： <a href=\"http://logback.qos.ch。其模块分为：\" target=\"_blank\" rel=\"noopener\">http://logback.qos.ch。其模块分为：</a></p>\n<ol>\n<li>logback-core：其它两个模块的基础模块</li>\n<li>logback-classic：它是log4j的一个改良版本，同时它完整实现了slf4j API使你可以很方便地更换成其它日志系统如log4j或JDK14 Logging</li>\n<li>logback-access：访问模块与Servlet容器集成提供通过Http来访问日志的功能</li>\n</ol>\n<h4 id=\"logback的使用\"><a href=\"#logback的使用\" class=\"headerlink\" title=\"logback的使用\"></a>logback的使用</h4><p>&emsp;&emsp;主要介绍在springboot中的使用，springboot中logback的默认配置文件名称为logback-spring.xml，若需要指定xml名称，需在application.properties（application.yml）中配置logging.config=xxxx.xml。在该xml中通过配置一些节点来配置logbcak，想要</p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"作者：muggle\"><a href=\"#作者：muggle\" class=\"headerlink\" title=\"作者：muggle\"></a>作者：muggle</h5><p>&emsp;&emsp;之前写过一个logback模块的文章，但由于时间问题，写得比较凌乱；那篇文章完成的功能是记录请求日志，日志存储数据库，整合logstash；本来后续想加上elk的搭建补全成logback+elk+mysql的一个多功能的日志模块，但由于公司赶项目的原因，并且看的人也不是很多，后来就没什么动力写了。</p>\n<p>&emsp;&emsp;这次我打算重写那篇文章，把所有未写完的部分都写全；然后尽量简单明了，条理清晰。嫌太麻烦想直接上手用或者想先测试一下的小伙伴可以去我github上的poseidon项目中的poseidon-request模块翻看源码测试；开始正题。</p>\n<h4 id=\"logback介绍\"><a href=\"#logback介绍\" class=\"headerlink\" title=\"logback介绍\"></a>logback介绍</h4><p>Logback是由log4j创始人设计的另一个开源日志系统,官方网站： <a href=\"http://logback.qos.ch。其模块分为：\" target=\"_blank\" rel=\"noopener\">http://logback.qos.ch。其模块分为：</a></p>\n<ol>\n<li>logback-core：其它两个模块的基础模块</li>\n<li>logback-classic：它是log4j的一个改良版本，同时它完整实现了slf4j API使你可以很方便地更换成其它日志系统如log4j或JDK14 Logging</li>\n<li>logback-access：访问模块与Servlet容器集成提供通过Http来访问日志的功能</li>\n</ol>\n<h4 id=\"logback的使用\"><a href=\"#logback的使用\" class=\"headerlink\" title=\"logback的使用\"></a>logback的使用</h4><p>&emsp;&emsp;主要介绍在springboot中的使用，springboot中logback的默认配置文件名称为logback-spring.xml，若需要指定xml名称，需在application.properties（application.yml）中配置logging.config=xxxx.xml。在该xml中通过配置一些节点来配置logbcak，想要</p>\n"},{"title":" test","date":"2019-03-27T05:53:23.000Z","_content":"\n## 搭嘎后\n 这是一个测试\n","source":"_posts/test.md","raw":"---\ntitle: ' test'\ndate: 2019-03-27 13:53:23\ntags:\n---\n\n## 搭嘎后\n 这是一个测试\n","slug":"test","published":1,"updated":"2019-03-29T11:42:53.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjucok82a0002kcvm6iq8zo9n","content":"<h2 id=\"搭嘎后\"><a href=\"#搭嘎后\" class=\"headerlink\" title=\"搭嘎后\"></a>搭嘎后</h2><p> 这是一个测试</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"搭嘎后\"><a href=\"#搭嘎后\" class=\"headerlink\" title=\"搭嘎后\"></a>搭嘎后</h2><p> 这是一个测试</p>\n"},{"title":" netty学习笔记","date":"2019-04-01T10:02:04.000Z","_content":"","source":"_posts/netty学习笔记.md","raw":"---\ntitle: ' netty学习笔记'\ndate: 2019-04-01 18:02:04\ntags:\n---\n","slug":"netty学习笔记","published":1,"updated":"2019-04-11T14:10:47.206Z","_id":"cjucok82d0003kcvmtn93dq7q","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"胡思乱想","date":"2019-03-28T02:44:50.000Z","_content":"\n&emsp;&emsp;我是猿家枪第十八代传人，第十八代是我爹告诉我的，他说多少代就是多少代————等我有了儿子了，我也会告诉他，他是猿家第十八代传人；因为，我觉得十八这个数字挺顺。我妈告诉我，我爸以前是走镖的，武艺高强，好打抱不平。半辈子结交了不少好汉，也得罪了不少人；因为害怕报复，回老家花钱买了栋宅院做起了小生意，退出了江湖。\n\n&emsp;&emsp;我六岁就开始站桩，每天都要早起站一炷香。要是哪天起晚了我爹踢开门就是一耳刮子，他手上全是老茧，呼脸上生疼；我见过我爹一拳把木头桩子给打折了，我常想，要是我爹一耳刮子把我头给打折了，我还能不能活？我小时候就很怕死怕疼，所以我从不敢赖床，鸡一打鸣我就起来了；上武场练我爹教我的那几个起手式，我爹管这叫晨练一口气，具体什么意思我就不太清楚了。\n\n<!--more-->\n&emsp;&emsp;我的童年相较而言，略显凄惨。当别人都去逮青蛙捉知了的时候我被我爹摁在家里学武式架子，甩枪花。到了读书的年龄，我也要站一会桩才能去上学，私塾放学了我又要早早回家；这导致了我童年玩伴很少，只有一个————狗子。不过练武也是有好处的，我不怕被私塾老师打板子，我也不用做家务，家务活都是家里的张妈来做（我家在老家算是乡绅级别）。别人都要去农耕摘花生豆子割猪草啥的，而我不用。\n\n&emsp;&emsp;说一下狗子：前面说了，狗子是我童年唯一玩伴，\n","source":"_posts/hello-world.md","raw":"---\ntitle: 胡思乱想\ndate: 2019-03-28 10:44:50\ntags: 瞎哔哔\n---\n\n&emsp;&emsp;我是猿家枪第十八代传人，第十八代是我爹告诉我的，他说多少代就是多少代————等我有了儿子了，我也会告诉他，他是猿家第十八代传人；因为，我觉得十八这个数字挺顺。我妈告诉我，我爸以前是走镖的，武艺高强，好打抱不平。半辈子结交了不少好汉，也得罪了不少人；因为害怕报复，回老家花钱买了栋宅院做起了小生意，退出了江湖。\n\n&emsp;&emsp;我六岁就开始站桩，每天都要早起站一炷香。要是哪天起晚了我爹踢开门就是一耳刮子，他手上全是老茧，呼脸上生疼；我见过我爹一拳把木头桩子给打折了，我常想，要是我爹一耳刮子把我头给打折了，我还能不能活？我小时候就很怕死怕疼，所以我从不敢赖床，鸡一打鸣我就起来了；上武场练我爹教我的那几个起手式，我爹管这叫晨练一口气，具体什么意思我就不太清楚了。\n\n<!--more-->\n&emsp;&emsp;我的童年相较而言，略显凄惨。当别人都去逮青蛙捉知了的时候我被我爹摁在家里学武式架子，甩枪花。到了读书的年龄，我也要站一会桩才能去上学，私塾放学了我又要早早回家；这导致了我童年玩伴很少，只有一个————狗子。不过练武也是有好处的，我不怕被私塾老师打板子，我也不用做家务，家务活都是家里的张妈来做（我家在老家算是乡绅级别）。别人都要去农耕摘花生豆子割猪草啥的，而我不用。\n\n&emsp;&emsp;说一下狗子：前面说了，狗子是我童年唯一玩伴，\n","slug":"hello-world","published":1,"updated":"2019-03-30T02:35:42.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjucok82f0004kcvmaltcp7oq","content":"<p>&emsp;&emsp;我是猿家枪第十八代传人，第十八代是我爹告诉我的，他说多少代就是多少代————等我有了儿子了，我也会告诉他，他是猿家第十八代传人；因为，我觉得十八这个数字挺顺。我妈告诉我，我爸以前是走镖的，武艺高强，好打抱不平。半辈子结交了不少好汉，也得罪了不少人；因为害怕报复，回老家花钱买了栋宅院做起了小生意，退出了江湖。</p>\n<p>&emsp;&emsp;我六岁就开始站桩，每天都要早起站一炷香。要是哪天起晚了我爹踢开门就是一耳刮子，他手上全是老茧，呼脸上生疼；我见过我爹一拳把木头桩子给打折了，我常想，要是我爹一耳刮子把我头给打折了，我还能不能活？我小时候就很怕死怕疼，所以我从不敢赖床，鸡一打鸣我就起来了；上武场练我爹教我的那几个起手式，我爹管这叫晨练一口气，具体什么意思我就不太清楚了。</p>\n<a id=\"more\"></a>\n<p>&emsp;&emsp;我的童年相较而言，略显凄惨。当别人都去逮青蛙捉知了的时候我被我爹摁在家里学武式架子，甩枪花。到了读书的年龄，我也要站一会桩才能去上学，私塾放学了我又要早早回家；这导致了我童年玩伴很少，只有一个————狗子。不过练武也是有好处的，我不怕被私塾老师打板子，我也不用做家务，家务活都是家里的张妈来做（我家在老家算是乡绅级别）。别人都要去农耕摘花生豆子割猪草啥的，而我不用。</p>\n<p>&emsp;&emsp;说一下狗子：前面说了，狗子是我童年唯一玩伴，</p>\n","site":{"data":{}},"excerpt":"<p>&emsp;&emsp;我是猿家枪第十八代传人，第十八代是我爹告诉我的，他说多少代就是多少代————等我有了儿子了，我也会告诉他，他是猿家第十八代传人；因为，我觉得十八这个数字挺顺。我妈告诉我，我爸以前是走镖的，武艺高强，好打抱不平。半辈子结交了不少好汉，也得罪了不少人；因为害怕报复，回老家花钱买了栋宅院做起了小生意，退出了江湖。</p>\n<p>&emsp;&emsp;我六岁就开始站桩，每天都要早起站一炷香。要是哪天起晚了我爹踢开门就是一耳刮子，他手上全是老茧，呼脸上生疼；我见过我爹一拳把木头桩子给打折了，我常想，要是我爹一耳刮子把我头给打折了，我还能不能活？我小时候就很怕死怕疼，所以我从不敢赖床，鸡一打鸣我就起来了；上武场练我爹教我的那几个起手式，我爹管这叫晨练一口气，具体什么意思我就不太清楚了。</p>","more":"<p>&emsp;&emsp;我的童年相较而言，略显凄惨。当别人都去逮青蛙捉知了的时候我被我爹摁在家里学武式架子，甩枪花。到了读书的年龄，我也要站一会桩才能去上学，私塾放学了我又要早早回家；这导致了我童年玩伴很少，只有一个————狗子。不过练武也是有好处的，我不怕被私塾老师打板子，我也不用做家务，家务活都是家里的张妈来做（我家在老家算是乡绅级别）。别人都要去农耕摘花生豆子割猪草啥的，而我不用。</p>\n<p>&emsp;&emsp;说一下狗子：前面说了，狗子是我童年唯一玩伴，</p>"},{"title":" springSecurity深度解析","date":"2019-04-11T13:27:31.000Z","_content":"作者：muggle\n\n#### 从一个基础的springsecurity开始，进行代码跟踪分析其原理\n\nspringsecurity是一个典型的责任链模式；我们先新建一个springboot项目，进行最基本的springsecurity配置，然后debug;我这里使用的开发工具是idea.建议大家也使用idea来进行日常开发。好了话不多说，开始：\n\n第一步\n\n新建springboot项目 maven依赖：\n```xml\n<dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.security</groupId>\n            <artifactId>spring-security-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n```\n\n启动项目，控制台上会输出这样一段字符串：\n```java\n2019-04-11 09:47:40.388  INFO 16716 --- [           main] .s.s.UserDetailsServiceAutoConfiguration :\n\nUsing generated security password: a6d55bc6-49fb-4241-a5ae-527e5e644731\n\n```\n\n<!--more-->\n现在我们访问 http://localhost:8080 会自动跳转到 http://localhost:8080/login，并弹出一个登陆页面，用户名输user,密码输上面的字符串： a6d55bc6-49fb-4241-a5ae-527e5e644731，每次字符串都是随机的，要留意你的控制台打印的字符串，登陆成功了，现在我们开始debug,看看一次登陆和一次登陆后访问一次不登陆访问这三种情况security都做了哪些事情。\n\n先写一个接口：\n```java\n\n@RestController\npublic class TestController {\n    @GetMapping(\"test\")\n    public String test(){\n        return \"hi 你好啊\";\n    }\n}\n```\nspringsecurity 执行过程是走一条过滤器链，所以我们要先明白，有哪些过滤器，并在过滤器上打上断点追踪，下面贴出各个过滤器名称及作用：\n\n>1、WebAsyncManagerIntegrationFilter\n将Security上下文与Spring Web中用于处理异步请求映射的 WebAsyncManager 进行集成。\n2、SecurityContextPersistenceFilter\n在每次请求处理之前将该请求相关的安全上下文信息加载到SecurityContextHolder中，然后在该次请求处理完成之后，将SecurityContextHolder中关于这次请求的信息存储到一个“仓储”中，然后将SecurityContextHolder中的信息清除\n例如在Session中维护一个用户的安全信息就是这个过滤器处理的。\n3、HeaderWriterFilter\n用于将头信息加入响应中\n4、CsrfFilter\n用于处理跨站请求伪造\n5、LogoutFilter\n用于处理退出登录\n6、UsernamePasswordAuthenticationFilter\n用于处理基于表单的登录请求，从表单中获取用户名和密码。默认情况下处理来自“/login”的请求。\n从表单中获取用户名和密码时，默认使用的表单name值为“username”和“password”，这两个值可以通过设置这个过滤器的usernameParameter 和 passwordParameter 两个参数的值进行修改。\n7、DefaultLoginPageGeneratingFilter\n如果没有配置登录页面，那系统初始化时就会配置这个过滤器，并且用于在需要进行登录时生成一个登录表单页面。\n8、BasicAuthenticationFilter\n处理请求头信息，DigestAuthenticationFilter\n9、RequestCacheAwareFilter\n用来处理请求的缓存\n10、SecurityContextHolderAwareRequestFilter\n11、AnonymousAuthenticationFilter\n12、SessionManagementFilter\n13、ExceptionTranslationFilter\n处理 AccessDeniedException 和 AuthenticationException 异常\n14、FilterSecurityInterceptor\nAbstractInterceptUrlConfigurer.createFilterSecurityInterceptor\n15、RememberMeAuthenticationFilter的作用是, 当用户没有登录而直接访问资源时, 从cookie里找出用户的信息, 如果Spring Security能够识别出用户提供的remember me cookie, 用户将不必填写用户名和密码, 而是直接登录进入系统.\n\n先不管那么多，ctr+alt+shift+t（或者按两下shift） 输入类名找到类，打断点，开始debug\n\n#### springsecurity 的默认登陆url是/login:我们访问一下来捋一捋：\n其代码顺序是：\n`WebAsyncManagerIntegrationFilter`  -> `SecurityContextPersistenceFilter` -> `HeaderWriterFilter` -> `CsrfFilter` -> `LogoutFilter` -> `DefaultLoginPageGeneratingFilter`\n\n然后浏览器会返回一个登陆页面：\n![image.png](https://upload-images.jianshu.io/upload_images/13612520-d6e336c80cbf30c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 说明：\n这其实是发起了一个请求登陆页面的请求，请求首先进入`WebAsyncManagerIntegrationFilter` 这个过滤器做了什么我们不必去关系，它下一个过滤器`SecurityContextPersistenceFilter` 通过request的attribute来上了一次请求锁，并且对SecurityContextHolder进行了管理；而SecurityContextHolder是对用户信息进行管理的一套系统，分为三大类\n\n1. SecurityContextHolder 对用户信息增删改查的操作\n 2. SecurityContext 将用户名，权限等封装成该对象\n 3. SecurityContextHolderStrategy 用于存储 SecurityContext\n\n默认的SecurityContextHolderStrategy 实现类是ThreadLocalSecurityContextHolderStrategy 它使用了ThreadLocal来存储了用户信息。\n下一个过滤器`HeaderWriterFilter`请求和响应封装了一下，用于`CsrfFilter`鉴别csrf攻击 `LogoutFilter`判断是不是登出操作，如果是则不执行下面的过滤器，而执行登出的相关操作，DefaultLoginPageGeneratingFilter生成登录页\n\n我们先输入正确的代码登陆一次\n\n通过跟踪代码发现其执行顺序是：\n`WebAsyncManagerIntegrationFilter` -> `SecurityContextPersistenceFilter` -> `HeaderWriterFilter`->`CsrfFilter`-> `LogoutFilter`->`UsernamePasswordAuthenticationFilter`->`WebAsyncManagerIntegrationFilter`->`SecurityContextPersistenceFilter`->`HeaderWriterFilter`->`CsrfFilter`->`LogoutFilter`->`DefaultLoginPageGeneratingFilter`->`BasicAuthenticationFilter`->`RequestCacheAwareFilter`->`SecurityContextHolderAwareRequestFilter`->`AnonymousAuthenticationFilter`->`SessionManagementFilter`->`ExceptionTranslationFilter`->`FilterSecurityInterceptor`->`SecurityContextPersistenceFilter`->`LogoutFilter`->`DefaultLoginPageGeneratingFilter`->`RequestCacheAwareFilter`->`SecurityContextHolderAwareRequestFilter`->`AnonymousAuthenticationFilter`->`SessionManagementFilter`->`ExceptionTranslationFilter`->`FilterSecurityInterceptor`\n\n这一次之所以过滤器链跑这么长是因为，这里可以认为发起了三次请求，第一次请求是登陆，登陆成功后转发到 url 为“/”的接口，而我没有这个接口，发生了重定向到“/error” 而“/error”页面是springboot请求失败的错误页面返回机制。\n`WebAsyncManagerIntegrationFilter` -> `SecurityContextPersistenceFilter` -> `HeaderWriterFilter`->`CsrfFilter`-> `LogoutFilter`->`UsernamePasswordAuthenticationFilter` 这一过程登陆请求。\n\n`WebAsyncManagerIntegrationFilter`->`SecurityContextPersistenceFilter`->`HeaderWriterFilter`->`CsrfFilter`->`LogoutFilter`->`DefaultLoginPageGeneratingFilter`->`BasicAuthenticationFilter`->`RequestCacheAwareFilter`->`SecurityContextHolderAwareRequestFilter`->`AnonymousAuthenticationFilter`->`SessionManagementFilter`->`ExceptionTranslationFilter`->`FilterSecurityInterceptor`\n这是转发到“/”的过程\n\n`SecurityContextPersistenceFilter`->`LogoutFilter`->`DefaultLoginPageGeneratingFilter`->`RequestCacheAwareFilter`->`SecurityContextHolderAwareRequestFilter`->`AnonymousAuthenticationFilter`->`SessionManagementFilter`->`ExceptionTranslationFilter`->`FilterSecurityInterceptor`\n这是重定向到error的过程\n\n接下来访问一下我们的/test接口\n看看执行顺序：\n`WebAsyncManagerIntegrationFilter`->`SecurityContextPersistenceFilter`->`HeaderWriterFilter`->`CsrfFilter`->`LogoutFilter`->`DefaultLoginPageGeneratingFilter`->`BasicAuthenticationFilter`->`RequestCacheAwareFilter`->`SecurityContextHolderAwareRequestFilter`->`AnonymousAuthenticationFilter`->`SessionManagementFilter`->`ExceptionTranslationFilter`->`FilterSecurityInterceptor`\n#### 说明：\nBasicAuthenticationFilter就是看你请求头里面有没有basic开头的东西，有的话做一些处理，对我们来说没啥用，不必去关心，RequestCacheAwareFilter对请求和响应做了额外处理 SecurityContextHolderAwareRequestFilter 也是对请求做了一些额外处理，我们同样不去关心它。AnonymousAuthenticationFilter过滤器是当securitycontext为null时填充一个匿名权限，这里被执行的原因因为security未配置完全，后面进一步配置了之后再回来详解。ExceptionTranslationFilter是对鉴权或者登陆异常的处理过滤器，FilterSecurityInterceptor可以看做是过滤器链的出口：\n```java\n public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        FilterInvocation fi = new FilterInvocation(request, response, chain);\n        this.invoke(fi);\n    }\n```\n这个fi就是请求的url值。\n\n现在我们完善一下security配置，让它复杂一点\n实现 GrantedAuthority：\n```java\n@Data\npublic class MyGrantedAuthority implements GrantedAuthority {\n    private String authority;\n}\n```\n实现UserDetails\n```java\n@Data\n@Accessors(chain = true)\npublic class MyUserDetail implements UserDetails {\n\n    private List<MyGrantedAuthority> authorities;\n\n    private String password;\n\n    private String username;\n\n    private boolean accountNonExpired;\n\n    private boolean accountNonLocked;\n\n    private boolean credentialsNonExpired;\n\n    private boolean enabled;\n\n}\n\n```\n\n实现UserDetailsService\n```java\n@Service\npublic class MyUserDetailService implements UserDetailsService {\n    @Override\n    public UserDetails loadUserByUsername(String s) throws UsernameNotFoundException {\n        List<MyGrantedAuthority> authorities = new ArrayList<>();\n        MyGrantedAuthority myGrantedAuthority = new MyGrantedAuthority();\n        myGrantedAuthority.setAuthority(\"ROLE_test\");\n        BCryptPasswordEncoder bCryptPasswordEncoder = new BCryptPasswordEncoder();\n        String test = bCryptPasswordEncoder.encode(\"test\");\n        authorities.add(myGrantedAuthority);\n        return new MyUserDetail().setAuthorities(authorities).setAccountNonExpired(true)\n                .setAccountNonLocked(true).setCredentialsNonExpired(true).setEnabled(true)\n                .setPassword(test).setUsername(\"test\");\n    }\n}\n```\n\n重写security适配器WebSecurityConfigurerAdapter：\n```java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Autowired\n    MyUserDetailService userDetailService;\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.userDetailsService(userDetailService).passwordEncoder(new BCryptPasswordEncoder());\n    }\n    @Override\n    public void configure(WebSecurity web) throws Exception {\n\n        web.ignoring().antMatchers(\"/resources/**/*.html\", \"/resources/**/*.js\",\n                \"/resources/**/*.css\", \"/resources/**/*.txt\",\n                \"/resources/**/*.png\", \"/**/*.bmp\", \"/**/*.gif\", \"/**/*.png\", \"/**/*.jpg\", \"/**/*.ico\");\n//        super.configure(web);\n    }\n\n   @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       http.formLogin().loginPage(\"/login_page\").passwordParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/sign_in\").permitAll()\n               .and().authorizeRequests().antMatchers(\"/test\").hasRole(\"test\").anyRequest().authenticated().and().csrf().disable();\n    }\n\n}\n```\n这里比开始又要复杂一点了，我先对相关操作进行说明一下：\n先从SecurityConfig说起\n\n重写了三个config方法\n1.第一个config涉及到的问题比较深——security的认证鉴权系统；\n先说认证的过程，当过滤器跑到usernamepasswordFilter的时候就开始做认证了\n#### security认证原理\n认证的工作是交给AuthenticationManager去做，AuthenticationManager下有多个认证器 AuthenticationProvider\n只要其中一个AuthenticationProvider通过认证就算登陆成功，而且在认证器中抛出异常，无法终止认证流程只是算该认证器未通过。\n第一个config就算配置了一个AuthenticationManagerBuilder 这个类会生成一个 AuthenticationManager和DaoAuthenticationProvider认证器，认证调用userdetailservice 的loadUserByUsername方法来和你传入的username passworde做比较，password 是通过BCryptPasswordEncoder来做编码后比较的，这样做是为了提高安全性。\n\n2.第二个config是对静态资源的放行；\n\n3.第三个config 配置了登录页请求路径，登陆认证路径，用户名密码属性，和一个test权限，注意一点：我在config配的是hasRole(\"test\")，我设置的权限是  myGrantedAuthority.setAuthority(\"ROLE_test\");为什么这样弄后面会说。\n接下来完善一下，边边角角，写个登陆的HTML,一个登陆页面请求接口:\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<form method=\"post\" action=\"/sign_in\">\n    用户名：<input type=\"text\" name=\"username\" value=\"test\"><br>\n    密码：<input type=\"text\" name=\"password\" value=\"test\"><br>\n    <input type=\"text\" name=\"verification\"><br>\n    <input type=\"submit\" name=\"test\">\n</form>\n</body>\n</html>\n```\n\n```java\n@Controller\npublic class LoginController {\n    @GetMapping(\"/login_page\")\n    public String loginPage(){\n        return \"loginPage.html\";\n    }\n}\n\n```\n启动项目，访问localhost:8080/test\n跳转到了/login_page\n![image.png](https://upload-images.jianshu.io/upload_images/13612520-40e8574ede6fdade.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点登陆，debug看看有什么不同 新增的断点DaoAuthenticationProvider和MyUserDetailService\n前面执行顺序还是一样，到SecurityContextHolderAwareRequestFilter的时候我们注意一下\n```java\npublic class SecurityContextHolderAwareRequestFilter extends GenericFilterBean {\n    private String rolePrefix = \"ROLE_\";\n\n```\n我们权限设置的前缀就是从这来的 到后面讲投票器的时候再细说。\n到UsernamePasswordAuthenticationFilter这个过滤器后 下一步到了DaoAuthenticationProvider验证器，验证器执行的是其父类AbstractUserDetailsAuthenticationProvider的authenticate（）方法同时我们看到MyUserDetailService的loadUserByUsername被调用，最后，认证结束转发到访问前路径/test 重新走过滤器。流程和一开始的简单配置一样，走到FilterSecurityInterceptor的时候进入WebExpressionVoter了投票器；\n#### security的投票器：\n当过滤器链走到尽头（FilterSecurityInterceptor）下一步就是鉴权了，鉴权功能会交给AccessDecisionManager去处理，而AccessDecisionManager下又有多个投票器，其中WebExpressionVoter是security的一个默认投票器，我们来分析一下这个类：\n其有个这样的方法\n```java\n public int vote(Authentication authentication, FilterInvocation fi, Collection<ConfigAttribute> attributes)\n```\n返回int类型，1表示赞成，0表示弃权，-1表示反对。当所有投票器的vote执行结束，如果最终结果小于0表示不通过，\n方法的参数说明：\n1. FilterInvocation  可获得请求的相关信息，比如请求方式（get post）url 等\n2.authentication 是从securitycontext中拿出来的用户信息\n3.Collection<ConfigAttribute> 是可以访问该路径的权限集合。也就是前面SecurityContextHolderAwareRequestFilter 查找出来的权限，对于在WebSecurityConfigurerAdapter config方法中的hasRole(\"test\")权限规则并不是直接取权限 test,而是加了前缀rolePrefix（“ROLE_”），这个前缀也是可配置的配置方式：[https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/reference/htmlsingle/#appendix-faq-role-prefix](https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/reference/htmlsingle/#appendix-faq-role-prefix)\n\n\n一些基本的知识点交代的差不多了，现在，我进行下一步\n#### security魔改\n需求：我希望后端能做验证码校验，没通过校验的直接登录失败；\n实现方式：security给我们提供了在各个过滤器上追加过滤器的方法，我们在UsernamePasswordAuthenticationFilter追加一个过滤器\n```java\n\npublic class MyUsernamePasswordAuthenticationFilte extends UsernamePasswordAuthenticationFilter {\n    private RedisService redisService;\n    private boolean postOnly = true;\n\n    public MyUsernamePasswordAuthenticationFilte(RedisService redisService){\n        this.redisService=redisService;\n    }\n\n    @Override\n    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {\n        redisService.getcCode(request);\n        return super.attemptAuthentication(request,response);\n    }\n}\n\n```\n这里redisService 就是你要弄的验证逻辑，其他代码还是从父类那复制过来，不去动它。\n为什么要继承UsernamePasswordAuthenticationFilter 而不是继承AbstractAuthenticationProcessingFilter，这样做的好处是可以少写代码少踩坑。\n然后修改config\n```java\n @Autowired\n RedisService redisService;\n\n @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       http.formLogin().loginPage(\"/login_page\").passwordParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/sign_in\").permitAll()\n               .and().authorizeRequests().antMatchers(\"/test\").hasRole(\"test\").anyRequest().authenticated().and().csrf().disable();\n        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);\n    }\n\n\n    MyUsernamePasswordAuthenticationFilte getAuthenticationFilter(){\n        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = new MyUsernamePasswordAuthenticationFilte(redisService);\n        return myUsernamePasswordAuthenticationFilte;\n    }\n```\n我在加两个处理器，当我登陆成功或者失败，由我自己弄；\n登陆成功处理器\n```java\npublic class MyAuthenticationSuccessHandler extends SimpleUrlAuthenticationSuccessHandler {\n    @Override\n    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {\n\n        response.setContentType(\"application/json;charset=UTF-8\");\n        final PrintWriter writer = response.getWriter();\n        writer.write(\"{\\\"code\\\":\\\"200\\\",\\\"msg\\\":\\\"登录成功\\\"}\");\n        writer.close();\n    }\n}\n\n```\n登陆失败的处理器\n```java\npublic class MyUrlAuthenticationFailureHandler extends SimpleUrlAuthenticationFailureHandler {\n    @Override\n    public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException, ServletException {\n        response.setContentType(\"application/json;charset=UTF-8\");\n        final PrintWriter writer = response.getWriter();\n        if(exception.getMessage().equals(\"坏的凭证\")){\n            writer.write(\"{\\\"code\\\":\\\"401\\\",\\\"msg\\\":\\\"登录失败,用户名或者密码有误\\\"}\");\n            writer.close();\n        }else {\n            writer.write(\"{\\\"code\\\":\\\"401\\\",\\\"msg\\\":\\\"登录失败,\"+exception.getMessage()+\"\\\"}\");\n            writer.close();\n        }\n\n    }\n}\n\n```\n\n#### 说明：\n为什么要继承SimpleUrlAuthenticationFailureHandler和SimpleUrlAuthenticationSuccessHandler 而不是实现AuthenticationFailureHandler，还是那句话，为了少写代码少踩坑，我这里是返回json字符串，你也可以弄成重定向啥的，也比较容易。\nconfig再改一下：\n```java\n MyUsernamePasswordAuthenticationFilte getAuthenticationFilter(){\n        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = new MyUsernamePasswordAuthenticationFilte(redisService);\n        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(new MyUrlAuthenticationFailureHandler());\n        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(new MyAuthenticationSuccessHandler());\n        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(\"/sign_in\");\n        return myUsernamePasswordAuthenticationFilte;\n    }\n```\n这里要注意 myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(\"/sign_in\"); 因为 http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);并不是替换掉UsernamePasswordAuthenticationFilter，而是和你自己添加的过滤器同时存在，security会根据url判断该走哪个过滤器，如果loginProcessingUrl还是“/login”的话走的是UsernamePasswordAuthenticationFilter，这里要留意一下。\n\n\n现在再加需求，我不仅需要普通登录方式，我想其他登录方式；\n实现方式：加多个认证器，每个认证器对应一种登录方式\n```java\npublic class MyAuthenticationProvider  implements AuthenticationProvider {\n    private UserDetailsService userDetailsService;\n    private BCryptPasswordEncoder bCryptPasswordEncoder;\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n//       这里写验证逻辑\n        return null;\n    }\n\n    @Override\n    public boolean supports(Class<?> aClass) {\n        return false;\n    }\n}\n\n```\n在改SecurityConfig\n```java\n @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       http.formLogin().loginPage(\"/login_page\").passwordParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/sign_in\").permitAll()\n               .and().authorizeRequests().antMatchers(\"/test\").hasRole(\"test\").anyRequest().authenticated().and().csrf().disable();\n        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);\n    }\n\n\n    MyUsernamePasswordAuthenticationFilte getAuthenticationFilter(){\n        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = new MyUsernamePasswordAuthenticationFilte(redisService);\n        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(new MyUrlAuthenticationFailureHandler());\n        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(new MyAuthenticationSuccessHandler());\n        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(\"/sign_in\");\n        myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());\n        return myUsernamePasswordAuthenticationFilte;\n    }\n    MyAuthenticationProvider getMyAuthenticationProvider(){\n        MyAuthenticationProvider myAuthenticationProvider = new MyAuthenticationProvider(userDetailService,new BCryptPasswordEncoder());\n        return myAuthenticationProvider;\n    }\n    DaoAuthenticationProvider daoAuthenticationProvider(){\n        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();\n        daoAuthenticationProvider.setPasswordEncoder(new BCryptPasswordEncoder());\n        daoAuthenticationProvider.setUserDetailsService(userDetailService);\n        return daoAuthenticationProvider;\n    }\n    protected AuthenticationManager getAuthenticationManager()  {\n        ProviderManager authenticationManager = new ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));\n        return authenticationManager;\n    }\n```\n我再加需求：\n根据不同的客服端做不同的鉴权策略；\n实现方式：加投票器；\n```java\npublic class MyExpressionVoter extends WebExpressionVoter {\n    @Override\n    public int vote(Authentication authentication, FilterInvocation fi, Collection<ConfigAttribute> attributes) {\n//        这里写鉴权逻辑\n        return 0;\n    }\n}\n\n```\n\n再次改动config\n```java\n @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       http.formLogin().loginPage(\"/login_page\").passwordParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/sign_in\").permitAll()\n               .and().authorizeRequests().antMatchers(\"/test\").hasRole(\"test\").anyRequest().authenticated().accessDecisionManager(accessDecisionManager()).and().csrf().disable();\n        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);\n    }\n\n\n    MyUsernamePasswordAuthenticationFilte getAuthenticationFilter(){\n        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = new MyUsernamePasswordAuthenticationFilte(redisService);\n        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(new MyUrlAuthenticationFailureHandler());\n        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(new MyAuthenticationSuccessHandler());\n        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(\"/sign_in\");\n        myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());\n        return myUsernamePasswordAuthenticationFilte;\n    }\n    MyAuthenticationProvider getMyAuthenticationProvider(){\n        MyAuthenticationProvider myAuthenticationProvider = new MyAuthenticationProvider(userDetailService,new BCryptPasswordEncoder());\n        return myAuthenticationProvider;\n    }\n    DaoAuthenticationProvider daoAuthenticationProvider(){\n        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();\n        daoAuthenticationProvider.setPasswordEncoder(new BCryptPasswordEncoder());\n        daoAuthenticationProvider.setUserDetailsService(userDetailService);\n        return daoAuthenticationProvider;\n    }\n    protected AuthenticationManager getAuthenticationManager()  {\n        ProviderManager authenticationManager = new ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));\n        return authenticationManager;\n    }\n\n    public AccessDecisionManager accessDecisionManager(){\n        List<AccessDecisionVoter<? extends Object>> decisionVoters\n                = Arrays.asList(\n                new MyExpressionVoter(),\n                new WebExpressionVoter(),\n                new RoleVoter(),\n                new AuthenticatedVoter());\n        return new UnanimousBased(decisionVoters);\n    }\n```\n在加两个鉴权失败处理器\n```java\npublic class MyAccessDeniedHandler implements AccessDeniedHandler {\n    @Override\n    public void handle(HttpServletRequest httpServletRequest, HttpServletResponse response, AccessDeniedException e) throws IOException, ServletException {\n        response.setContentType(\"application/json;charset=UTF-8\");\n        PrintWriter writer = response.getWriter();\n        writer.write(\"{\\\"code\\\":\\\"403\\\",\\\"msg\\\":\\\"没有权限\\\"}\");\n        writer.close();\n    }\n}\n\n```\n再加一个登出处理器\n\n```java\n\npublic class MyLogoutSuccessHandler implements LogoutSuccessHandler {\n    @Override\n    public void onLogoutSuccess(HttpServletRequest httpServletRequest, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {\n        final PrintWriter writer = response.getWriter();\n\n        writer.write(\"{\\\"code\\\":\\\"200\\\",\\\"msg\\\":\\\"登出成功\\\"}\");\n        writer.close();\n    }\n}\n\n```\n最后修改SecurityConfig，最终模样为\n```java\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Autowired\n    RedisService redisService;\n    @Autowired\n    MyUserDetailService userDetailService;\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.userDetailsService(userDetailService).passwordEncoder(new BCryptPasswordEncoder());\n    }\n    @Override\n    public void configure(WebSecurity web) throws Exception {\n\n        web.ignoring().antMatchers(\"/resources/**/*.html\", \"/resources/**/*.js\",\n                \"/resources/**/*.css\", \"/resources/**/*.txt\",\n                \"/resources/**/*.png\", \"/**/*.bmp\", \"/**/*.gif\", \"/**/*.png\", \"/**/*.jpg\", \"/**/*.ico\");\n//        super.configure(web);\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       http.formLogin().loginPage(\"/login_page\").passwordParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/sign_in\").permitAll()\n               .and().authorizeRequests().antMatchers(\"/test\").hasRole(\"test\").anyRequest().authenticated().accessDecisionManager(accessDecisionManager())\n               .and().logout().logoutSuccessHandler(new MyLogoutSuccessHandler())\n               .and().csrf().disable();\n        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);\n        http.exceptionHandling().accessDeniedHandler(new MyAccessDeniedHandler());\n    }\n\n\n    MyUsernamePasswordAuthenticationFilte getAuthenticationFilter(){\n        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = new MyUsernamePasswordAuthenticationFilte(redisService);\n        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(new MyUrlAuthenticationFailureHandler());\n        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(new MyAuthenticationSuccessHandler());\n        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(\"/sign_in\");\n        myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());\n        return myUsernamePasswordAuthenticationFilte;\n    }\n    MyAuthenticationProvider getMyAuthenticationProvider(){\n        MyAuthenticationProvider myAuthenticationProvider = new MyAuthenticationProvider(userDetailService,new BCryptPasswordEncoder());\n        return myAuthenticationProvider;\n    }\n    DaoAuthenticationProvider daoAuthenticationProvider(){\n        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();\n        daoAuthenticationProvider.setPasswordEncoder(new BCryptPasswordEncoder());\n        daoAuthenticationProvider.setUserDetailsService(userDetailService);\n        return daoAuthenticationProvider;\n    }\n    protected AuthenticationManager getAuthenticationManager()  {\n        ProviderManager authenticationManager = new ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));\n        return authenticationManager;\n    }\n\n    public AccessDecisionManager accessDecisionManager(){\n        List<AccessDecisionVoter<? extends Object>> decisionVoters\n                = Arrays.asList(\n                new MyExpressionVoter(),\n                new WebExpressionVoter(),\n                new RoleVoter(),\n                new AuthenticatedVoter());\n        return new UnanimousBased(decisionVoters);\n\n    }\n}\n```\n\n你可能想要用jwtToken 做token鉴权的方式；\n也好做，我这里提一下思路，鉴权都是在投票器里面，那我们在投票器之前填充好securitycontext就成，然后实现一个自己的投票器；填充securitycontext随便找个过滤器http.addFilterAfter() 然后在过滤器里面填充好就行，至于拿token的接口，在config里用.permitAll()放行就行了，比上面的改法还简单，我就不写了。\n\n#### 题外话\n\n具体的代码可以参考我的项目[poseindon](https://github.com/muggle0/poseidon/wiki)，这种security改动方式我经过生产实践的，不会有问题。另外篇幅有点长 感谢大佬的阅读。\n","source":"_posts/springSecurity深度解析.md","raw":"---\ntitle: ' springSecurity深度解析'\ndate: 2019-04-11 21:27:31\ntags: springsecurity\n---\n作者：muggle\n\n#### 从一个基础的springsecurity开始，进行代码跟踪分析其原理\n\nspringsecurity是一个典型的责任链模式；我们先新建一个springboot项目，进行最基本的springsecurity配置，然后debug;我这里使用的开发工具是idea.建议大家也使用idea来进行日常开发。好了话不多说，开始：\n\n第一步\n\n新建springboot项目 maven依赖：\n```xml\n<dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.security</groupId>\n            <artifactId>spring-security-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n```\n\n启动项目，控制台上会输出这样一段字符串：\n```java\n2019-04-11 09:47:40.388  INFO 16716 --- [           main] .s.s.UserDetailsServiceAutoConfiguration :\n\nUsing generated security password: a6d55bc6-49fb-4241-a5ae-527e5e644731\n\n```\n\n<!--more-->\n现在我们访问 http://localhost:8080 会自动跳转到 http://localhost:8080/login，并弹出一个登陆页面，用户名输user,密码输上面的字符串： a6d55bc6-49fb-4241-a5ae-527e5e644731，每次字符串都是随机的，要留意你的控制台打印的字符串，登陆成功了，现在我们开始debug,看看一次登陆和一次登陆后访问一次不登陆访问这三种情况security都做了哪些事情。\n\n先写一个接口：\n```java\n\n@RestController\npublic class TestController {\n    @GetMapping(\"test\")\n    public String test(){\n        return \"hi 你好啊\";\n    }\n}\n```\nspringsecurity 执行过程是走一条过滤器链，所以我们要先明白，有哪些过滤器，并在过滤器上打上断点追踪，下面贴出各个过滤器名称及作用：\n\n>1、WebAsyncManagerIntegrationFilter\n将Security上下文与Spring Web中用于处理异步请求映射的 WebAsyncManager 进行集成。\n2、SecurityContextPersistenceFilter\n在每次请求处理之前将该请求相关的安全上下文信息加载到SecurityContextHolder中，然后在该次请求处理完成之后，将SecurityContextHolder中关于这次请求的信息存储到一个“仓储”中，然后将SecurityContextHolder中的信息清除\n例如在Session中维护一个用户的安全信息就是这个过滤器处理的。\n3、HeaderWriterFilter\n用于将头信息加入响应中\n4、CsrfFilter\n用于处理跨站请求伪造\n5、LogoutFilter\n用于处理退出登录\n6、UsernamePasswordAuthenticationFilter\n用于处理基于表单的登录请求，从表单中获取用户名和密码。默认情况下处理来自“/login”的请求。\n从表单中获取用户名和密码时，默认使用的表单name值为“username”和“password”，这两个值可以通过设置这个过滤器的usernameParameter 和 passwordParameter 两个参数的值进行修改。\n7、DefaultLoginPageGeneratingFilter\n如果没有配置登录页面，那系统初始化时就会配置这个过滤器，并且用于在需要进行登录时生成一个登录表单页面。\n8、BasicAuthenticationFilter\n处理请求头信息，DigestAuthenticationFilter\n9、RequestCacheAwareFilter\n用来处理请求的缓存\n10、SecurityContextHolderAwareRequestFilter\n11、AnonymousAuthenticationFilter\n12、SessionManagementFilter\n13、ExceptionTranslationFilter\n处理 AccessDeniedException 和 AuthenticationException 异常\n14、FilterSecurityInterceptor\nAbstractInterceptUrlConfigurer.createFilterSecurityInterceptor\n15、RememberMeAuthenticationFilter的作用是, 当用户没有登录而直接访问资源时, 从cookie里找出用户的信息, 如果Spring Security能够识别出用户提供的remember me cookie, 用户将不必填写用户名和密码, 而是直接登录进入系统.\n\n先不管那么多，ctr+alt+shift+t（或者按两下shift） 输入类名找到类，打断点，开始debug\n\n#### springsecurity 的默认登陆url是/login:我们访问一下来捋一捋：\n其代码顺序是：\n`WebAsyncManagerIntegrationFilter`  -> `SecurityContextPersistenceFilter` -> `HeaderWriterFilter` -> `CsrfFilter` -> `LogoutFilter` -> `DefaultLoginPageGeneratingFilter`\n\n然后浏览器会返回一个登陆页面：\n![image.png](https://upload-images.jianshu.io/upload_images/13612520-d6e336c80cbf30c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 说明：\n这其实是发起了一个请求登陆页面的请求，请求首先进入`WebAsyncManagerIntegrationFilter` 这个过滤器做了什么我们不必去关系，它下一个过滤器`SecurityContextPersistenceFilter` 通过request的attribute来上了一次请求锁，并且对SecurityContextHolder进行了管理；而SecurityContextHolder是对用户信息进行管理的一套系统，分为三大类\n\n1. SecurityContextHolder 对用户信息增删改查的操作\n 2. SecurityContext 将用户名，权限等封装成该对象\n 3. SecurityContextHolderStrategy 用于存储 SecurityContext\n\n默认的SecurityContextHolderStrategy 实现类是ThreadLocalSecurityContextHolderStrategy 它使用了ThreadLocal来存储了用户信息。\n下一个过滤器`HeaderWriterFilter`请求和响应封装了一下，用于`CsrfFilter`鉴别csrf攻击 `LogoutFilter`判断是不是登出操作，如果是则不执行下面的过滤器，而执行登出的相关操作，DefaultLoginPageGeneratingFilter生成登录页\n\n我们先输入正确的代码登陆一次\n\n通过跟踪代码发现其执行顺序是：\n`WebAsyncManagerIntegrationFilter` -> `SecurityContextPersistenceFilter` -> `HeaderWriterFilter`->`CsrfFilter`-> `LogoutFilter`->`UsernamePasswordAuthenticationFilter`->`WebAsyncManagerIntegrationFilter`->`SecurityContextPersistenceFilter`->`HeaderWriterFilter`->`CsrfFilter`->`LogoutFilter`->`DefaultLoginPageGeneratingFilter`->`BasicAuthenticationFilter`->`RequestCacheAwareFilter`->`SecurityContextHolderAwareRequestFilter`->`AnonymousAuthenticationFilter`->`SessionManagementFilter`->`ExceptionTranslationFilter`->`FilterSecurityInterceptor`->`SecurityContextPersistenceFilter`->`LogoutFilter`->`DefaultLoginPageGeneratingFilter`->`RequestCacheAwareFilter`->`SecurityContextHolderAwareRequestFilter`->`AnonymousAuthenticationFilter`->`SessionManagementFilter`->`ExceptionTranslationFilter`->`FilterSecurityInterceptor`\n\n这一次之所以过滤器链跑这么长是因为，这里可以认为发起了三次请求，第一次请求是登陆，登陆成功后转发到 url 为“/”的接口，而我没有这个接口，发生了重定向到“/error” 而“/error”页面是springboot请求失败的错误页面返回机制。\n`WebAsyncManagerIntegrationFilter` -> `SecurityContextPersistenceFilter` -> `HeaderWriterFilter`->`CsrfFilter`-> `LogoutFilter`->`UsernamePasswordAuthenticationFilter` 这一过程登陆请求。\n\n`WebAsyncManagerIntegrationFilter`->`SecurityContextPersistenceFilter`->`HeaderWriterFilter`->`CsrfFilter`->`LogoutFilter`->`DefaultLoginPageGeneratingFilter`->`BasicAuthenticationFilter`->`RequestCacheAwareFilter`->`SecurityContextHolderAwareRequestFilter`->`AnonymousAuthenticationFilter`->`SessionManagementFilter`->`ExceptionTranslationFilter`->`FilterSecurityInterceptor`\n这是转发到“/”的过程\n\n`SecurityContextPersistenceFilter`->`LogoutFilter`->`DefaultLoginPageGeneratingFilter`->`RequestCacheAwareFilter`->`SecurityContextHolderAwareRequestFilter`->`AnonymousAuthenticationFilter`->`SessionManagementFilter`->`ExceptionTranslationFilter`->`FilterSecurityInterceptor`\n这是重定向到error的过程\n\n接下来访问一下我们的/test接口\n看看执行顺序：\n`WebAsyncManagerIntegrationFilter`->`SecurityContextPersistenceFilter`->`HeaderWriterFilter`->`CsrfFilter`->`LogoutFilter`->`DefaultLoginPageGeneratingFilter`->`BasicAuthenticationFilter`->`RequestCacheAwareFilter`->`SecurityContextHolderAwareRequestFilter`->`AnonymousAuthenticationFilter`->`SessionManagementFilter`->`ExceptionTranslationFilter`->`FilterSecurityInterceptor`\n#### 说明：\nBasicAuthenticationFilter就是看你请求头里面有没有basic开头的东西，有的话做一些处理，对我们来说没啥用，不必去关心，RequestCacheAwareFilter对请求和响应做了额外处理 SecurityContextHolderAwareRequestFilter 也是对请求做了一些额外处理，我们同样不去关心它。AnonymousAuthenticationFilter过滤器是当securitycontext为null时填充一个匿名权限，这里被执行的原因因为security未配置完全，后面进一步配置了之后再回来详解。ExceptionTranslationFilter是对鉴权或者登陆异常的处理过滤器，FilterSecurityInterceptor可以看做是过滤器链的出口：\n```java\n public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        FilterInvocation fi = new FilterInvocation(request, response, chain);\n        this.invoke(fi);\n    }\n```\n这个fi就是请求的url值。\n\n现在我们完善一下security配置，让它复杂一点\n实现 GrantedAuthority：\n```java\n@Data\npublic class MyGrantedAuthority implements GrantedAuthority {\n    private String authority;\n}\n```\n实现UserDetails\n```java\n@Data\n@Accessors(chain = true)\npublic class MyUserDetail implements UserDetails {\n\n    private List<MyGrantedAuthority> authorities;\n\n    private String password;\n\n    private String username;\n\n    private boolean accountNonExpired;\n\n    private boolean accountNonLocked;\n\n    private boolean credentialsNonExpired;\n\n    private boolean enabled;\n\n}\n\n```\n\n实现UserDetailsService\n```java\n@Service\npublic class MyUserDetailService implements UserDetailsService {\n    @Override\n    public UserDetails loadUserByUsername(String s) throws UsernameNotFoundException {\n        List<MyGrantedAuthority> authorities = new ArrayList<>();\n        MyGrantedAuthority myGrantedAuthority = new MyGrantedAuthority();\n        myGrantedAuthority.setAuthority(\"ROLE_test\");\n        BCryptPasswordEncoder bCryptPasswordEncoder = new BCryptPasswordEncoder();\n        String test = bCryptPasswordEncoder.encode(\"test\");\n        authorities.add(myGrantedAuthority);\n        return new MyUserDetail().setAuthorities(authorities).setAccountNonExpired(true)\n                .setAccountNonLocked(true).setCredentialsNonExpired(true).setEnabled(true)\n                .setPassword(test).setUsername(\"test\");\n    }\n}\n```\n\n重写security适配器WebSecurityConfigurerAdapter：\n```java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Autowired\n    MyUserDetailService userDetailService;\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.userDetailsService(userDetailService).passwordEncoder(new BCryptPasswordEncoder());\n    }\n    @Override\n    public void configure(WebSecurity web) throws Exception {\n\n        web.ignoring().antMatchers(\"/resources/**/*.html\", \"/resources/**/*.js\",\n                \"/resources/**/*.css\", \"/resources/**/*.txt\",\n                \"/resources/**/*.png\", \"/**/*.bmp\", \"/**/*.gif\", \"/**/*.png\", \"/**/*.jpg\", \"/**/*.ico\");\n//        super.configure(web);\n    }\n\n   @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       http.formLogin().loginPage(\"/login_page\").passwordParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/sign_in\").permitAll()\n               .and().authorizeRequests().antMatchers(\"/test\").hasRole(\"test\").anyRequest().authenticated().and().csrf().disable();\n    }\n\n}\n```\n这里比开始又要复杂一点了，我先对相关操作进行说明一下：\n先从SecurityConfig说起\n\n重写了三个config方法\n1.第一个config涉及到的问题比较深——security的认证鉴权系统；\n先说认证的过程，当过滤器跑到usernamepasswordFilter的时候就开始做认证了\n#### security认证原理\n认证的工作是交给AuthenticationManager去做，AuthenticationManager下有多个认证器 AuthenticationProvider\n只要其中一个AuthenticationProvider通过认证就算登陆成功，而且在认证器中抛出异常，无法终止认证流程只是算该认证器未通过。\n第一个config就算配置了一个AuthenticationManagerBuilder 这个类会生成一个 AuthenticationManager和DaoAuthenticationProvider认证器，认证调用userdetailservice 的loadUserByUsername方法来和你传入的username passworde做比较，password 是通过BCryptPasswordEncoder来做编码后比较的，这样做是为了提高安全性。\n\n2.第二个config是对静态资源的放行；\n\n3.第三个config 配置了登录页请求路径，登陆认证路径，用户名密码属性，和一个test权限，注意一点：我在config配的是hasRole(\"test\")，我设置的权限是  myGrantedAuthority.setAuthority(\"ROLE_test\");为什么这样弄后面会说。\n接下来完善一下，边边角角，写个登陆的HTML,一个登陆页面请求接口:\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<form method=\"post\" action=\"/sign_in\">\n    用户名：<input type=\"text\" name=\"username\" value=\"test\"><br>\n    密码：<input type=\"text\" name=\"password\" value=\"test\"><br>\n    <input type=\"text\" name=\"verification\"><br>\n    <input type=\"submit\" name=\"test\">\n</form>\n</body>\n</html>\n```\n\n```java\n@Controller\npublic class LoginController {\n    @GetMapping(\"/login_page\")\n    public String loginPage(){\n        return \"loginPage.html\";\n    }\n}\n\n```\n启动项目，访问localhost:8080/test\n跳转到了/login_page\n![image.png](https://upload-images.jianshu.io/upload_images/13612520-40e8574ede6fdade.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点登陆，debug看看有什么不同 新增的断点DaoAuthenticationProvider和MyUserDetailService\n前面执行顺序还是一样，到SecurityContextHolderAwareRequestFilter的时候我们注意一下\n```java\npublic class SecurityContextHolderAwareRequestFilter extends GenericFilterBean {\n    private String rolePrefix = \"ROLE_\";\n\n```\n我们权限设置的前缀就是从这来的 到后面讲投票器的时候再细说。\n到UsernamePasswordAuthenticationFilter这个过滤器后 下一步到了DaoAuthenticationProvider验证器，验证器执行的是其父类AbstractUserDetailsAuthenticationProvider的authenticate（）方法同时我们看到MyUserDetailService的loadUserByUsername被调用，最后，认证结束转发到访问前路径/test 重新走过滤器。流程和一开始的简单配置一样，走到FilterSecurityInterceptor的时候进入WebExpressionVoter了投票器；\n#### security的投票器：\n当过滤器链走到尽头（FilterSecurityInterceptor）下一步就是鉴权了，鉴权功能会交给AccessDecisionManager去处理，而AccessDecisionManager下又有多个投票器，其中WebExpressionVoter是security的一个默认投票器，我们来分析一下这个类：\n其有个这样的方法\n```java\n public int vote(Authentication authentication, FilterInvocation fi, Collection<ConfigAttribute> attributes)\n```\n返回int类型，1表示赞成，0表示弃权，-1表示反对。当所有投票器的vote执行结束，如果最终结果小于0表示不通过，\n方法的参数说明：\n1. FilterInvocation  可获得请求的相关信息，比如请求方式（get post）url 等\n2.authentication 是从securitycontext中拿出来的用户信息\n3.Collection<ConfigAttribute> 是可以访问该路径的权限集合。也就是前面SecurityContextHolderAwareRequestFilter 查找出来的权限，对于在WebSecurityConfigurerAdapter config方法中的hasRole(\"test\")权限规则并不是直接取权限 test,而是加了前缀rolePrefix（“ROLE_”），这个前缀也是可配置的配置方式：[https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/reference/htmlsingle/#appendix-faq-role-prefix](https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/reference/htmlsingle/#appendix-faq-role-prefix)\n\n\n一些基本的知识点交代的差不多了，现在，我进行下一步\n#### security魔改\n需求：我希望后端能做验证码校验，没通过校验的直接登录失败；\n实现方式：security给我们提供了在各个过滤器上追加过滤器的方法，我们在UsernamePasswordAuthenticationFilter追加一个过滤器\n```java\n\npublic class MyUsernamePasswordAuthenticationFilte extends UsernamePasswordAuthenticationFilter {\n    private RedisService redisService;\n    private boolean postOnly = true;\n\n    public MyUsernamePasswordAuthenticationFilte(RedisService redisService){\n        this.redisService=redisService;\n    }\n\n    @Override\n    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {\n        redisService.getcCode(request);\n        return super.attemptAuthentication(request,response);\n    }\n}\n\n```\n这里redisService 就是你要弄的验证逻辑，其他代码还是从父类那复制过来，不去动它。\n为什么要继承UsernamePasswordAuthenticationFilter 而不是继承AbstractAuthenticationProcessingFilter，这样做的好处是可以少写代码少踩坑。\n然后修改config\n```java\n @Autowired\n RedisService redisService;\n\n @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       http.formLogin().loginPage(\"/login_page\").passwordParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/sign_in\").permitAll()\n               .and().authorizeRequests().antMatchers(\"/test\").hasRole(\"test\").anyRequest().authenticated().and().csrf().disable();\n        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);\n    }\n\n\n    MyUsernamePasswordAuthenticationFilte getAuthenticationFilter(){\n        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = new MyUsernamePasswordAuthenticationFilte(redisService);\n        return myUsernamePasswordAuthenticationFilte;\n    }\n```\n我在加两个处理器，当我登陆成功或者失败，由我自己弄；\n登陆成功处理器\n```java\npublic class MyAuthenticationSuccessHandler extends SimpleUrlAuthenticationSuccessHandler {\n    @Override\n    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {\n\n        response.setContentType(\"application/json;charset=UTF-8\");\n        final PrintWriter writer = response.getWriter();\n        writer.write(\"{\\\"code\\\":\\\"200\\\",\\\"msg\\\":\\\"登录成功\\\"}\");\n        writer.close();\n    }\n}\n\n```\n登陆失败的处理器\n```java\npublic class MyUrlAuthenticationFailureHandler extends SimpleUrlAuthenticationFailureHandler {\n    @Override\n    public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException, ServletException {\n        response.setContentType(\"application/json;charset=UTF-8\");\n        final PrintWriter writer = response.getWriter();\n        if(exception.getMessage().equals(\"坏的凭证\")){\n            writer.write(\"{\\\"code\\\":\\\"401\\\",\\\"msg\\\":\\\"登录失败,用户名或者密码有误\\\"}\");\n            writer.close();\n        }else {\n            writer.write(\"{\\\"code\\\":\\\"401\\\",\\\"msg\\\":\\\"登录失败,\"+exception.getMessage()+\"\\\"}\");\n            writer.close();\n        }\n\n    }\n}\n\n```\n\n#### 说明：\n为什么要继承SimpleUrlAuthenticationFailureHandler和SimpleUrlAuthenticationSuccessHandler 而不是实现AuthenticationFailureHandler，还是那句话，为了少写代码少踩坑，我这里是返回json字符串，你也可以弄成重定向啥的，也比较容易。\nconfig再改一下：\n```java\n MyUsernamePasswordAuthenticationFilte getAuthenticationFilter(){\n        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = new MyUsernamePasswordAuthenticationFilte(redisService);\n        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(new MyUrlAuthenticationFailureHandler());\n        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(new MyAuthenticationSuccessHandler());\n        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(\"/sign_in\");\n        return myUsernamePasswordAuthenticationFilte;\n    }\n```\n这里要注意 myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(\"/sign_in\"); 因为 http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);并不是替换掉UsernamePasswordAuthenticationFilter，而是和你自己添加的过滤器同时存在，security会根据url判断该走哪个过滤器，如果loginProcessingUrl还是“/login”的话走的是UsernamePasswordAuthenticationFilter，这里要留意一下。\n\n\n现在再加需求，我不仅需要普通登录方式，我想其他登录方式；\n实现方式：加多个认证器，每个认证器对应一种登录方式\n```java\npublic class MyAuthenticationProvider  implements AuthenticationProvider {\n    private UserDetailsService userDetailsService;\n    private BCryptPasswordEncoder bCryptPasswordEncoder;\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n//       这里写验证逻辑\n        return null;\n    }\n\n    @Override\n    public boolean supports(Class<?> aClass) {\n        return false;\n    }\n}\n\n```\n在改SecurityConfig\n```java\n @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       http.formLogin().loginPage(\"/login_page\").passwordParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/sign_in\").permitAll()\n               .and().authorizeRequests().antMatchers(\"/test\").hasRole(\"test\").anyRequest().authenticated().and().csrf().disable();\n        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);\n    }\n\n\n    MyUsernamePasswordAuthenticationFilte getAuthenticationFilter(){\n        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = new MyUsernamePasswordAuthenticationFilte(redisService);\n        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(new MyUrlAuthenticationFailureHandler());\n        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(new MyAuthenticationSuccessHandler());\n        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(\"/sign_in\");\n        myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());\n        return myUsernamePasswordAuthenticationFilte;\n    }\n    MyAuthenticationProvider getMyAuthenticationProvider(){\n        MyAuthenticationProvider myAuthenticationProvider = new MyAuthenticationProvider(userDetailService,new BCryptPasswordEncoder());\n        return myAuthenticationProvider;\n    }\n    DaoAuthenticationProvider daoAuthenticationProvider(){\n        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();\n        daoAuthenticationProvider.setPasswordEncoder(new BCryptPasswordEncoder());\n        daoAuthenticationProvider.setUserDetailsService(userDetailService);\n        return daoAuthenticationProvider;\n    }\n    protected AuthenticationManager getAuthenticationManager()  {\n        ProviderManager authenticationManager = new ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));\n        return authenticationManager;\n    }\n```\n我再加需求：\n根据不同的客服端做不同的鉴权策略；\n实现方式：加投票器；\n```java\npublic class MyExpressionVoter extends WebExpressionVoter {\n    @Override\n    public int vote(Authentication authentication, FilterInvocation fi, Collection<ConfigAttribute> attributes) {\n//        这里写鉴权逻辑\n        return 0;\n    }\n}\n\n```\n\n再次改动config\n```java\n @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       http.formLogin().loginPage(\"/login_page\").passwordParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/sign_in\").permitAll()\n               .and().authorizeRequests().antMatchers(\"/test\").hasRole(\"test\").anyRequest().authenticated().accessDecisionManager(accessDecisionManager()).and().csrf().disable();\n        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);\n    }\n\n\n    MyUsernamePasswordAuthenticationFilte getAuthenticationFilter(){\n        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = new MyUsernamePasswordAuthenticationFilte(redisService);\n        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(new MyUrlAuthenticationFailureHandler());\n        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(new MyAuthenticationSuccessHandler());\n        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(\"/sign_in\");\n        myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());\n        return myUsernamePasswordAuthenticationFilte;\n    }\n    MyAuthenticationProvider getMyAuthenticationProvider(){\n        MyAuthenticationProvider myAuthenticationProvider = new MyAuthenticationProvider(userDetailService,new BCryptPasswordEncoder());\n        return myAuthenticationProvider;\n    }\n    DaoAuthenticationProvider daoAuthenticationProvider(){\n        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();\n        daoAuthenticationProvider.setPasswordEncoder(new BCryptPasswordEncoder());\n        daoAuthenticationProvider.setUserDetailsService(userDetailService);\n        return daoAuthenticationProvider;\n    }\n    protected AuthenticationManager getAuthenticationManager()  {\n        ProviderManager authenticationManager = new ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));\n        return authenticationManager;\n    }\n\n    public AccessDecisionManager accessDecisionManager(){\n        List<AccessDecisionVoter<? extends Object>> decisionVoters\n                = Arrays.asList(\n                new MyExpressionVoter(),\n                new WebExpressionVoter(),\n                new RoleVoter(),\n                new AuthenticatedVoter());\n        return new UnanimousBased(decisionVoters);\n    }\n```\n在加两个鉴权失败处理器\n```java\npublic class MyAccessDeniedHandler implements AccessDeniedHandler {\n    @Override\n    public void handle(HttpServletRequest httpServletRequest, HttpServletResponse response, AccessDeniedException e) throws IOException, ServletException {\n        response.setContentType(\"application/json;charset=UTF-8\");\n        PrintWriter writer = response.getWriter();\n        writer.write(\"{\\\"code\\\":\\\"403\\\",\\\"msg\\\":\\\"没有权限\\\"}\");\n        writer.close();\n    }\n}\n\n```\n再加一个登出处理器\n\n```java\n\npublic class MyLogoutSuccessHandler implements LogoutSuccessHandler {\n    @Override\n    public void onLogoutSuccess(HttpServletRequest httpServletRequest, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {\n        final PrintWriter writer = response.getWriter();\n\n        writer.write(\"{\\\"code\\\":\\\"200\\\",\\\"msg\\\":\\\"登出成功\\\"}\");\n        writer.close();\n    }\n}\n\n```\n最后修改SecurityConfig，最终模样为\n```java\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Autowired\n    RedisService redisService;\n    @Autowired\n    MyUserDetailService userDetailService;\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.userDetailsService(userDetailService).passwordEncoder(new BCryptPasswordEncoder());\n    }\n    @Override\n    public void configure(WebSecurity web) throws Exception {\n\n        web.ignoring().antMatchers(\"/resources/**/*.html\", \"/resources/**/*.js\",\n                \"/resources/**/*.css\", \"/resources/**/*.txt\",\n                \"/resources/**/*.png\", \"/**/*.bmp\", \"/**/*.gif\", \"/**/*.png\", \"/**/*.jpg\", \"/**/*.ico\");\n//        super.configure(web);\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       http.formLogin().loginPage(\"/login_page\").passwordParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/sign_in\").permitAll()\n               .and().authorizeRequests().antMatchers(\"/test\").hasRole(\"test\").anyRequest().authenticated().accessDecisionManager(accessDecisionManager())\n               .and().logout().logoutSuccessHandler(new MyLogoutSuccessHandler())\n               .and().csrf().disable();\n        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);\n        http.exceptionHandling().accessDeniedHandler(new MyAccessDeniedHandler());\n    }\n\n\n    MyUsernamePasswordAuthenticationFilte getAuthenticationFilter(){\n        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = new MyUsernamePasswordAuthenticationFilte(redisService);\n        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(new MyUrlAuthenticationFailureHandler());\n        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(new MyAuthenticationSuccessHandler());\n        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(\"/sign_in\");\n        myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());\n        return myUsernamePasswordAuthenticationFilte;\n    }\n    MyAuthenticationProvider getMyAuthenticationProvider(){\n        MyAuthenticationProvider myAuthenticationProvider = new MyAuthenticationProvider(userDetailService,new BCryptPasswordEncoder());\n        return myAuthenticationProvider;\n    }\n    DaoAuthenticationProvider daoAuthenticationProvider(){\n        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();\n        daoAuthenticationProvider.setPasswordEncoder(new BCryptPasswordEncoder());\n        daoAuthenticationProvider.setUserDetailsService(userDetailService);\n        return daoAuthenticationProvider;\n    }\n    protected AuthenticationManager getAuthenticationManager()  {\n        ProviderManager authenticationManager = new ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));\n        return authenticationManager;\n    }\n\n    public AccessDecisionManager accessDecisionManager(){\n        List<AccessDecisionVoter<? extends Object>> decisionVoters\n                = Arrays.asList(\n                new MyExpressionVoter(),\n                new WebExpressionVoter(),\n                new RoleVoter(),\n                new AuthenticatedVoter());\n        return new UnanimousBased(decisionVoters);\n\n    }\n}\n```\n\n你可能想要用jwtToken 做token鉴权的方式；\n也好做，我这里提一下思路，鉴权都是在投票器里面，那我们在投票器之前填充好securitycontext就成，然后实现一个自己的投票器；填充securitycontext随便找个过滤器http.addFilterAfter() 然后在过滤器里面填充好就行，至于拿token的接口，在config里用.permitAll()放行就行了，比上面的改法还简单，我就不写了。\n\n#### 题外话\n\n具体的代码可以参考我的项目[poseindon](https://github.com/muggle0/poseidon/wiki)，这种security改动方式我经过生产实践的，不会有问题。另外篇幅有点长 感谢大佬的阅读。\n","slug":"springSecurity深度解析","published":1,"updated":"2019-04-11T14:10:47.210Z","_id":"cjucok83d0007kcvm92b5pvy9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>作者：muggle</p>\n<h4 id=\"从一个基础的springsecurity开始，进行代码跟踪分析其原理\"><a href=\"#从一个基础的springsecurity开始，进行代码跟踪分析其原理\" class=\"headerlink\" title=\"从一个基础的springsecurity开始，进行代码跟踪分析其原理\"></a>从一个基础的springsecurity开始，进行代码跟踪分析其原理</h4><p>springsecurity是一个典型的责任链模式；我们先新建一个springboot项目，进行最基本的springsecurity配置，然后debug;我这里使用的开发工具是idea.建议大家也使用idea来进行日常开发。好了话不多说，开始：</p>\n<p>第一步</p>\n<p>新建springboot项目 maven依赖：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.security<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-security-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>启动项目，控制台上会输出这样一段字符串：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">04</span>-<span class=\"number\">11</span> <span class=\"number\">09</span>:<span class=\"number\">47</span>:<span class=\"number\">40.388</span>  INFO <span class=\"number\">16716</span> --- [           main] .s.s.UserDetailsServiceAutoConfiguration :</span><br><span class=\"line\"></span><br><span class=\"line\">Using generated security password: a6d55bc6-<span class=\"number\">49f</span>b-<span class=\"number\">4241</span>-a5ae-<span class=\"number\">527e5</span>e644731</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>现在我们访问 <a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a> 会自动跳转到 <a href=\"http://localhost:8080/login，并弹出一个登陆页面，用户名输user,密码输上面的字符串：\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/login，并弹出一个登陆页面，用户名输user,密码输上面的字符串：</a> a6d55bc6-49fb-4241-a5ae-527e5e644731，每次字符串都是随机的，要留意你的控制台打印的字符串，登陆成功了，现在我们开始debug,看看一次登陆和一次登陆后访问一次不登陆访问这三种情况security都做了哪些事情。</p>\n<p>先写一个接口：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"test\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"hi 你好啊\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>springsecurity 执行过程是走一条过滤器链，所以我们要先明白，有哪些过滤器，并在过滤器上打上断点追踪，下面贴出各个过滤器名称及作用：</p>\n<blockquote>\n<p>1、WebAsyncManagerIntegrationFilter<br>将Security上下文与Spring Web中用于处理异步请求映射的 WebAsyncManager 进行集成。<br>2、SecurityContextPersistenceFilter<br>在每次请求处理之前将该请求相关的安全上下文信息加载到SecurityContextHolder中，然后在该次请求处理完成之后，将SecurityContextHolder中关于这次请求的信息存储到一个“仓储”中，然后将SecurityContextHolder中的信息清除<br>例如在Session中维护一个用户的安全信息就是这个过滤器处理的。<br>3、HeaderWriterFilter<br>用于将头信息加入响应中<br>4、CsrfFilter<br>用于处理跨站请求伪造<br>5、LogoutFilter<br>用于处理退出登录<br>6、UsernamePasswordAuthenticationFilter<br>用于处理基于表单的登录请求，从表单中获取用户名和密码。默认情况下处理来自“/login”的请求。<br>从表单中获取用户名和密码时，默认使用的表单name值为“username”和“password”，这两个值可以通过设置这个过滤器的usernameParameter 和 passwordParameter 两个参数的值进行修改。<br>7、DefaultLoginPageGeneratingFilter<br>如果没有配置登录页面，那系统初始化时就会配置这个过滤器，并且用于在需要进行登录时生成一个登录表单页面。<br>8、BasicAuthenticationFilter<br>处理请求头信息，DigestAuthenticationFilter<br>9、RequestCacheAwareFilter<br>用来处理请求的缓存<br>10、SecurityContextHolderAwareRequestFilter<br>11、AnonymousAuthenticationFilter<br>12、SessionManagementFilter<br>13、ExceptionTranslationFilter<br>处理 AccessDeniedException 和 AuthenticationException 异常<br>14、FilterSecurityInterceptor<br>AbstractInterceptUrlConfigurer.createFilterSecurityInterceptor<br>15、RememberMeAuthenticationFilter的作用是, 当用户没有登录而直接访问资源时, 从cookie里找出用户的信息, 如果Spring Security能够识别出用户提供的remember me cookie, 用户将不必填写用户名和密码, 而是直接登录进入系统.</p>\n</blockquote>\n<p>先不管那么多，ctr+alt+shift+t（或者按两下shift） 输入类名找到类，打断点，开始debug</p>\n<h4 id=\"springsecurity-的默认登陆url是-login-我们访问一下来捋一捋：\"><a href=\"#springsecurity-的默认登陆url是-login-我们访问一下来捋一捋：\" class=\"headerlink\" title=\"springsecurity 的默认登陆url是/login:我们访问一下来捋一捋：\"></a>springsecurity 的默认登陆url是/login:我们访问一下来捋一捋：</h4><p>其代码顺序是：<br><code>WebAsyncManagerIntegrationFilter</code>  -&gt; <code>SecurityContextPersistenceFilter</code> -&gt; <code>HeaderWriterFilter</code> -&gt; <code>CsrfFilter</code> -&gt; <code>LogoutFilter</code> -&gt; <code>DefaultLoginPageGeneratingFilter</code></p>\n<p>然后浏览器会返回一个登陆页面：<br><img src=\"https://upload-images.jianshu.io/upload_images/13612520-d6e336c80cbf30c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h4 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h4><p>这其实是发起了一个请求登陆页面的请求，请求首先进入<code>WebAsyncManagerIntegrationFilter</code> 这个过滤器做了什么我们不必去关系，它下一个过滤器<code>SecurityContextPersistenceFilter</code> 通过request的attribute来上了一次请求锁，并且对SecurityContextHolder进行了管理；而SecurityContextHolder是对用户信息进行管理的一套系统，分为三大类</p>\n<ol>\n<li>SecurityContextHolder 对用户信息增删改查的操作<ol start=\"2\">\n<li>SecurityContext 将用户名，权限等封装成该对象</li>\n<li>SecurityContextHolderStrategy 用于存储 SecurityContext</li>\n</ol>\n</li>\n</ol>\n<p>默认的SecurityContextHolderStrategy 实现类是ThreadLocalSecurityContextHolderStrategy 它使用了ThreadLocal来存储了用户信息。<br>下一个过滤器<code>HeaderWriterFilter</code>请求和响应封装了一下，用于<code>CsrfFilter</code>鉴别csrf攻击 <code>LogoutFilter</code>判断是不是登出操作，如果是则不执行下面的过滤器，而执行登出的相关操作，DefaultLoginPageGeneratingFilter生成登录页</p>\n<p>我们先输入正确的代码登陆一次</p>\n<p>通过跟踪代码发现其执行顺序是：<br><code>WebAsyncManagerIntegrationFilter</code> -&gt; <code>SecurityContextPersistenceFilter</code> -&gt; <code>HeaderWriterFilter</code>-&gt;<code>CsrfFilter</code>-&gt; <code>LogoutFilter</code>-&gt;<code>UsernamePasswordAuthenticationFilter</code>-&gt;<code>WebAsyncManagerIntegrationFilter</code>-&gt;<code>SecurityContextPersistenceFilter</code>-&gt;<code>HeaderWriterFilter</code>-&gt;<code>CsrfFilter</code>-&gt;<code>LogoutFilter</code>-&gt;<code>DefaultLoginPageGeneratingFilter</code>-&gt;<code>BasicAuthenticationFilter</code>-&gt;<code>RequestCacheAwareFilter</code>-&gt;<code>SecurityContextHolderAwareRequestFilter</code>-&gt;<code>AnonymousAuthenticationFilter</code>-&gt;<code>SessionManagementFilter</code>-&gt;<code>ExceptionTranslationFilter</code>-&gt;<code>FilterSecurityInterceptor</code>-&gt;<code>SecurityContextPersistenceFilter</code>-&gt;<code>LogoutFilter</code>-&gt;<code>DefaultLoginPageGeneratingFilter</code>-&gt;<code>RequestCacheAwareFilter</code>-&gt;<code>SecurityContextHolderAwareRequestFilter</code>-&gt;<code>AnonymousAuthenticationFilter</code>-&gt;<code>SessionManagementFilter</code>-&gt;<code>ExceptionTranslationFilter</code>-&gt;<code>FilterSecurityInterceptor</code></p>\n<p>这一次之所以过滤器链跑这么长是因为，这里可以认为发起了三次请求，第一次请求是登陆，登陆成功后转发到 url 为“/”的接口，而我没有这个接口，发生了重定向到“/error” 而“/error”页面是springboot请求失败的错误页面返回机制。<br><code>WebAsyncManagerIntegrationFilter</code> -&gt; <code>SecurityContextPersistenceFilter</code> -&gt; <code>HeaderWriterFilter</code>-&gt;<code>CsrfFilter</code>-&gt; <code>LogoutFilter</code>-&gt;<code>UsernamePasswordAuthenticationFilter</code> 这一过程登陆请求。</p>\n<p><code>WebAsyncManagerIntegrationFilter</code>-&gt;<code>SecurityContextPersistenceFilter</code>-&gt;<code>HeaderWriterFilter</code>-&gt;<code>CsrfFilter</code>-&gt;<code>LogoutFilter</code>-&gt;<code>DefaultLoginPageGeneratingFilter</code>-&gt;<code>BasicAuthenticationFilter</code>-&gt;<code>RequestCacheAwareFilter</code>-&gt;<code>SecurityContextHolderAwareRequestFilter</code>-&gt;<code>AnonymousAuthenticationFilter</code>-&gt;<code>SessionManagementFilter</code>-&gt;<code>ExceptionTranslationFilter</code>-&gt;<code>FilterSecurityInterceptor</code><br>这是转发到“/”的过程</p>\n<p><code>SecurityContextPersistenceFilter</code>-&gt;<code>LogoutFilter</code>-&gt;<code>DefaultLoginPageGeneratingFilter</code>-&gt;<code>RequestCacheAwareFilter</code>-&gt;<code>SecurityContextHolderAwareRequestFilter</code>-&gt;<code>AnonymousAuthenticationFilter</code>-&gt;<code>SessionManagementFilter</code>-&gt;<code>ExceptionTranslationFilter</code>-&gt;<code>FilterSecurityInterceptor</code><br>这是重定向到error的过程</p>\n<p>接下来访问一下我们的/test接口<br>看看执行顺序：<br><code>WebAsyncManagerIntegrationFilter</code>-&gt;<code>SecurityContextPersistenceFilter</code>-&gt;<code>HeaderWriterFilter</code>-&gt;<code>CsrfFilter</code>-&gt;<code>LogoutFilter</code>-&gt;<code>DefaultLoginPageGeneratingFilter</code>-&gt;<code>BasicAuthenticationFilter</code>-&gt;<code>RequestCacheAwareFilter</code>-&gt;<code>SecurityContextHolderAwareRequestFilter</code>-&gt;<code>AnonymousAuthenticationFilter</code>-&gt;<code>SessionManagementFilter</code>-&gt;<code>ExceptionTranslationFilter</code>-&gt;<code>FilterSecurityInterceptor</code></p>\n<h4 id=\"说明：-1\"><a href=\"#说明：-1\" class=\"headerlink\" title=\"说明：\"></a>说明：</h4><p>BasicAuthenticationFilter就是看你请求头里面有没有basic开头的东西，有的话做一些处理，对我们来说没啥用，不必去关心，RequestCacheAwareFilter对请求和响应做了额外处理 SecurityContextHolderAwareRequestFilter 也是对请求做了一些额外处理，我们同样不去关心它。AnonymousAuthenticationFilter过滤器是当securitycontext为null时填充一个匿名权限，这里被执行的原因因为security未配置完全，后面进一步配置了之后再回来详解。ExceptionTranslationFilter是对鉴权或者登陆异常的处理过滤器，FilterSecurityInterceptor可以看做是过滤器链的出口：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">       FilterInvocation fi = <span class=\"keyword\">new</span> FilterInvocation(request, response, chain);</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.invoke(fi);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个fi就是请求的url值。</p>\n<p>现在我们完善一下security配置，让它复杂一点<br>实现 GrantedAuthority：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGrantedAuthority</span> <span class=\"keyword\">implements</span> <span class=\"title\">GrantedAuthority</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String authority;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>实现UserDetails<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Accessors</span>(chain = <span class=\"keyword\">true</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUserDetail</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDetails</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;MyGrantedAuthority&gt; authorities;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> accountNonExpired;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> accountNonLocked;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> credentialsNonExpired;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> enabled;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>实现UserDetailsService<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUserDetailService</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDetailsService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UserDetails <span class=\"title\">loadUserByUsername</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class=\"line\">        List&lt;MyGrantedAuthority&gt; authorities = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        MyGrantedAuthority myGrantedAuthority = <span class=\"keyword\">new</span> MyGrantedAuthority();</span><br><span class=\"line\">        myGrantedAuthority.setAuthority(<span class=\"string\">\"ROLE_test\"</span>);</span><br><span class=\"line\">        BCryptPasswordEncoder bCryptPasswordEncoder = <span class=\"keyword\">new</span> BCryptPasswordEncoder();</span><br><span class=\"line\">        String test = bCryptPasswordEncoder.encode(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\">        authorities.add(myGrantedAuthority);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyUserDetail().setAuthorities(authorities).setAccountNonExpired(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">                .setAccountNonLocked(<span class=\"keyword\">true</span>).setCredentialsNonExpired(<span class=\"keyword\">true</span>).setEnabled(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">                .setPassword(test).setUsername(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>重写security适配器WebSecurityConfigurerAdapter：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    MyUserDetailService userDetailService;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        auth.userDetailsService(userDetailService).passwordEncoder(<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(WebSecurity web)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        web.ignoring().antMatchers(<span class=\"string\">\"/resources/**/*.html\"</span>, <span class=\"string\">\"/resources/**/*.js\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"/resources/**/*.css\"</span>, <span class=\"string\">\"/resources/**/*.txt\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"/resources/**/*.png\"</span>, <span class=\"string\">\"/**/*.bmp\"</span>, <span class=\"string\">\"/**/*.gif\"</span>, <span class=\"string\">\"/**/*.png\"</span>, <span class=\"string\">\"/**/*.jpg\"</span>, <span class=\"string\">\"/**/*.ico\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//        super.configure(web);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">       http.formLogin().loginPage(<span class=\"string\">\"/login_page\"</span>).passwordParameter(<span class=\"string\">\"username\"</span>).passwordParameter(<span class=\"string\">\"password\"</span>).loginProcessingUrl(<span class=\"string\">\"/sign_in\"</span>).permitAll()</span><br><span class=\"line\">               .and().authorizeRequests().antMatchers(<span class=\"string\">\"/test\"</span>).hasRole(<span class=\"string\">\"test\"</span>).anyRequest().authenticated().and().csrf().disable();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里比开始又要复杂一点了，我先对相关操作进行说明一下：<br>先从SecurityConfig说起</p>\n<p>重写了三个config方法<br>1.第一个config涉及到的问题比较深——security的认证鉴权系统；<br>先说认证的过程，当过滤器跑到usernamepasswordFilter的时候就开始做认证了</p>\n<h4 id=\"security认证原理\"><a href=\"#security认证原理\" class=\"headerlink\" title=\"security认证原理\"></a>security认证原理</h4><p>认证的工作是交给AuthenticationManager去做，AuthenticationManager下有多个认证器 AuthenticationProvider<br>只要其中一个AuthenticationProvider通过认证就算登陆成功，而且在认证器中抛出异常，无法终止认证流程只是算该认证器未通过。<br>第一个config就算配置了一个AuthenticationManagerBuilder 这个类会生成一个 AuthenticationManager和DaoAuthenticationProvider认证器，认证调用userdetailservice 的loadUserByUsername方法来和你传入的username passworde做比较，password 是通过BCryptPasswordEncoder来做编码后比较的，这样做是为了提高安全性。</p>\n<p>2.第二个config是对静态资源的放行；</p>\n<p>3.第三个config 配置了登录页请求路径，登陆认证路径，用户名密码属性，和一个test权限，注意一点：我在config配的是hasRole(“test”)，我设置的权限是  myGrantedAuthority.setAuthority(“ROLE_test”);为什么这样弄后面会说。<br>接下来完善一下，边边角角，写个登陆的HTML,一个登陆页面请求接口:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/sign_in\"</span>&gt;</span></span><br><span class=\"line\">    用户名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"test\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"test\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"verification\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"test\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/login_page\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">loginPage</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"loginPage.html\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动项目，访问localhost:8080/test<br>跳转到了/login_page<br><img src=\"https://upload-images.jianshu.io/upload_images/13612520-40e8574ede6fdade.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>点登陆，debug看看有什么不同 新增的断点DaoAuthenticationProvider和MyUserDetailService<br>前面执行顺序还是一样，到SecurityContextHolderAwareRequestFilter的时候我们注意一下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityContextHolderAwareRequestFilter</span> <span class=\"keyword\">extends</span> <span class=\"title\">GenericFilterBean</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String rolePrefix = <span class=\"string\">\"ROLE_\"</span>;</span><br></pre></td></tr></table></figure></p>\n<p>我们权限设置的前缀就是从这来的 到后面讲投票器的时候再细说。<br>到UsernamePasswordAuthenticationFilter这个过滤器后 下一步到了DaoAuthenticationProvider验证器，验证器执行的是其父类AbstractUserDetailsAuthenticationProvider的authenticate（）方法同时我们看到MyUserDetailService的loadUserByUsername被调用，最后，认证结束转发到访问前路径/test 重新走过滤器。流程和一开始的简单配置一样，走到FilterSecurityInterceptor的时候进入WebExpressionVoter了投票器；</p>\n<h4 id=\"security的投票器：\"><a href=\"#security的投票器：\" class=\"headerlink\" title=\"security的投票器：\"></a>security的投票器：</h4><p>当过滤器链走到尽头（FilterSecurityInterceptor）下一步就是鉴权了，鉴权功能会交给AccessDecisionManager去处理，而AccessDecisionManager下又有多个投票器，其中WebExpressionVoter是security的一个默认投票器，我们来分析一下这个类：<br>其有个这样的方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">vote</span><span class=\"params\">(Authentication authentication, FilterInvocation fi, Collection&lt;ConfigAttribute&gt; attributes)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>返回int类型，1表示赞成，0表示弃权，-1表示反对。当所有投票器的vote执行结束，如果最终结果小于0表示不通过，<br>方法的参数说明：</p>\n<ol>\n<li>FilterInvocation  可获得请求的相关信息，比如请求方式（get post）url 等<br>2.authentication 是从securitycontext中拿出来的用户信息<br>3.Collection<configattribute> 是可以访问该路径的权限集合。也就是前面SecurityContextHolderAwareRequestFilter 查找出来的权限，对于在WebSecurityConfigurerAdapter config方法中的hasRole(“test”)权限规则并不是直接取权限 test,而是加了前缀rolePrefix（“ROLE_”），这个前缀也是可配置的配置方式：<a href=\"https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/reference/htmlsingle/#appendix-faq-role-prefix\" target=\"_blank\" rel=\"noopener\">https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/reference/htmlsingle/#appendix-faq-role-prefix</a></configattribute></li>\n</ol>\n<p>一些基本的知识点交代的差不多了，现在，我进行下一步</p>\n<h4 id=\"security魔改\"><a href=\"#security魔改\" class=\"headerlink\" title=\"security魔改\"></a>security魔改</h4><p>需求：我希望后端能做验证码校验，没通过校验的直接登录失败；<br>实现方式：security给我们提供了在各个过滤器上追加过滤器的方法，我们在UsernamePasswordAuthenticationFilter追加一个过滤器<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUsernamePasswordAuthenticationFilte</span> <span class=\"keyword\">extends</span> <span class=\"title\">UsernamePasswordAuthenticationFilter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisService redisService;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> postOnly = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyUsernamePasswordAuthenticationFilte</span><span class=\"params\">(RedisService redisService)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.redisService=redisService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Authentication <span class=\"title\">attemptAuthentication</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> AuthenticationException </span>&#123;</span><br><span class=\"line\">        redisService.getcCode(request);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.attemptAuthentication(request,response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里redisService 就是你要弄的验证逻辑，其他代码还是从父类那复制过来，不去动它。<br>为什么要继承UsernamePasswordAuthenticationFilter 而不是继承AbstractAuthenticationProcessingFilter，这样做的好处是可以少写代码少踩坑。<br>然后修改config<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">RedisService redisService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">      http.formLogin().loginPage(<span class=\"string\">\"/login_page\"</span>).passwordParameter(<span class=\"string\">\"username\"</span>).passwordParameter(<span class=\"string\">\"password\"</span>).loginProcessingUrl(<span class=\"string\">\"/sign_in\"</span>).permitAll()</span><br><span class=\"line\">              .and().authorizeRequests().antMatchers(<span class=\"string\">\"/test\"</span>).hasRole(<span class=\"string\">\"test\"</span>).anyRequest().authenticated().and().csrf().disable();</span><br><span class=\"line\">       http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\">MyUsernamePasswordAuthenticationFilte <span class=\"title\">getAuthenticationFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = <span class=\"keyword\">new</span> MyUsernamePasswordAuthenticationFilte(redisService);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> myUsernamePasswordAuthenticationFilte;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>我在加两个处理器，当我登陆成功或者失败，由我自己弄；<br>登陆成功处理器<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAuthenticationSuccessHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleUrlAuthenticationSuccessHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAuthenticationSuccess</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"application/json;charset=UTF-8\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> PrintWriter writer = response.getWriter();</span><br><span class=\"line\">        writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"200\\\",\\\"msg\\\":\\\"登录成功\\\"&#125;\"</span>);</span><br><span class=\"line\">        writer.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>登陆失败的处理器<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUrlAuthenticationFailureHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleUrlAuthenticationFailureHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAuthenticationFailure</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"application/json;charset=UTF-8\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> PrintWriter writer = response.getWriter();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(exception.getMessage().equals(<span class=\"string\">\"坏的凭证\"</span>))&#123;</span><br><span class=\"line\">            writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"401\\\",\\\"msg\\\":\\\"登录失败,用户名或者密码有误\\\"&#125;\"</span>);</span><br><span class=\"line\">            writer.close();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"401\\\",\\\"msg\\\":\\\"登录失败,\"</span>+exception.getMessage()+<span class=\"string\">\"\\\"&#125;\"</span>);</span><br><span class=\"line\">            writer.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"说明：-2\"><a href=\"#说明：-2\" class=\"headerlink\" title=\"说明：\"></a>说明：</h4><p>为什么要继承SimpleUrlAuthenticationFailureHandler和SimpleUrlAuthenticationSuccessHandler 而不是实现AuthenticationFailureHandler，还是那句话，为了少写代码少踩坑，我这里是返回json字符串，你也可以弄成重定向啥的，也比较容易。<br>config再改一下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">MyUsernamePasswordAuthenticationFilte <span class=\"title\">getAuthenticationFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = <span class=\"keyword\">new</span> MyUsernamePasswordAuthenticationFilte(redisService);</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(<span class=\"keyword\">new</span> MyUrlAuthenticationFailureHandler());</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(<span class=\"keyword\">new</span> MyAuthenticationSuccessHandler());</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(<span class=\"string\">\"/sign_in\"</span>);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> myUsernamePasswordAuthenticationFilte;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里要注意 myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(“/sign_in”); 因为 http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);并不是替换掉UsernamePasswordAuthenticationFilter，而是和你自己添加的过滤器同时存在，security会根据url判断该走哪个过滤器，如果loginProcessingUrl还是“/login”的话走的是UsernamePasswordAuthenticationFilter，这里要留意一下。</p>\n<p>现在再加需求，我不仅需要普通登录方式，我想其他登录方式；<br>实现方式：加多个认证器，每个认证器对应一种登录方式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAuthenticationProvider</span>  <span class=\"keyword\">implements</span> <span class=\"title\">AuthenticationProvider</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserDetailsService userDetailsService;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BCryptPasswordEncoder bCryptPasswordEncoder;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Authentication <span class=\"title\">authenticate</span><span class=\"params\">(Authentication authentication)</span> <span class=\"keyword\">throws</span> AuthenticationException </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//       这里写验证逻辑</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supports</span><span class=\"params\">(Class&lt;?&gt; aClass)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在改SecurityConfig<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">      http.formLogin().loginPage(<span class=\"string\">\"/login_page\"</span>).passwordParameter(<span class=\"string\">\"username\"</span>).passwordParameter(<span class=\"string\">\"password\"</span>).loginProcessingUrl(<span class=\"string\">\"/sign_in\"</span>).permitAll()</span><br><span class=\"line\">              .and().authorizeRequests().antMatchers(<span class=\"string\">\"/test\"</span>).hasRole(<span class=\"string\">\"test\"</span>).anyRequest().authenticated().and().csrf().disable();</span><br><span class=\"line\">       http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\">MyUsernamePasswordAuthenticationFilte <span class=\"title\">getAuthenticationFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = <span class=\"keyword\">new</span> MyUsernamePasswordAuthenticationFilte(redisService);</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(<span class=\"keyword\">new</span> MyUrlAuthenticationFailureHandler());</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(<span class=\"keyword\">new</span> MyAuthenticationSuccessHandler());</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(<span class=\"string\">\"/sign_in\"</span>);</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());</span><br><span class=\"line\">       <span class=\"keyword\">return</span> myUsernamePasswordAuthenticationFilte;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\">MyAuthenticationProvider <span class=\"title\">getMyAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       MyAuthenticationProvider myAuthenticationProvider = <span class=\"keyword\">new</span> MyAuthenticationProvider(userDetailService,<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">       <span class=\"keyword\">return</span> myAuthenticationProvider;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\">DaoAuthenticationProvider <span class=\"title\">daoAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       DaoAuthenticationProvider daoAuthenticationProvider = <span class=\"keyword\">new</span> DaoAuthenticationProvider();</span><br><span class=\"line\">       daoAuthenticationProvider.setPasswordEncoder(<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">       daoAuthenticationProvider.setUserDetailsService(userDetailService);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> daoAuthenticationProvider;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> AuthenticationManager <span class=\"title\">getAuthenticationManager</span><span class=\"params\">()</span>  </span>&#123;</span><br><span class=\"line\">       ProviderManager authenticationManager = <span class=\"keyword\">new</span> ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));</span><br><span class=\"line\">       <span class=\"keyword\">return</span> authenticationManager;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>我再加需求：<br>根据不同的客服端做不同的鉴权策略；<br>实现方式：加投票器；<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyExpressionVoter</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebExpressionVoter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">vote</span><span class=\"params\">(Authentication authentication, FilterInvocation fi, Collection&lt;ConfigAttribute&gt; attributes)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        这里写鉴权逻辑</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再次改动config<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">      http.formLogin().loginPage(<span class=\"string\">\"/login_page\"</span>).passwordParameter(<span class=\"string\">\"username\"</span>).passwordParameter(<span class=\"string\">\"password\"</span>).loginProcessingUrl(<span class=\"string\">\"/sign_in\"</span>).permitAll()</span><br><span class=\"line\">              .and().authorizeRequests().antMatchers(<span class=\"string\">\"/test\"</span>).hasRole(<span class=\"string\">\"test\"</span>).anyRequest().authenticated().accessDecisionManager(accessDecisionManager()).and().csrf().disable();</span><br><span class=\"line\">       http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\">MyUsernamePasswordAuthenticationFilte <span class=\"title\">getAuthenticationFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = <span class=\"keyword\">new</span> MyUsernamePasswordAuthenticationFilte(redisService);</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(<span class=\"keyword\">new</span> MyUrlAuthenticationFailureHandler());</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(<span class=\"keyword\">new</span> MyAuthenticationSuccessHandler());</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(<span class=\"string\">\"/sign_in\"</span>);</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());</span><br><span class=\"line\">       <span class=\"keyword\">return</span> myUsernamePasswordAuthenticationFilte;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\">MyAuthenticationProvider <span class=\"title\">getMyAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       MyAuthenticationProvider myAuthenticationProvider = <span class=\"keyword\">new</span> MyAuthenticationProvider(userDetailService,<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">       <span class=\"keyword\">return</span> myAuthenticationProvider;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\">DaoAuthenticationProvider <span class=\"title\">daoAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       DaoAuthenticationProvider daoAuthenticationProvider = <span class=\"keyword\">new</span> DaoAuthenticationProvider();</span><br><span class=\"line\">       daoAuthenticationProvider.setPasswordEncoder(<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">       daoAuthenticationProvider.setUserDetailsService(userDetailService);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> daoAuthenticationProvider;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> AuthenticationManager <span class=\"title\">getAuthenticationManager</span><span class=\"params\">()</span>  </span>&#123;</span><br><span class=\"line\">       ProviderManager authenticationManager = <span class=\"keyword\">new</span> ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));</span><br><span class=\"line\">       <span class=\"keyword\">return</span> authenticationManager;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> AccessDecisionManager <span class=\"title\">accessDecisionManager</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       List&lt;AccessDecisionVoter&lt;? extends Object&gt;&gt; decisionVoters</span><br><span class=\"line\">               = Arrays.asList(</span><br><span class=\"line\">               <span class=\"keyword\">new</span> MyExpressionVoter(),</span><br><span class=\"line\">               <span class=\"keyword\">new</span> WebExpressionVoter(),</span><br><span class=\"line\">               <span class=\"keyword\">new</span> RoleVoter(),</span><br><span class=\"line\">               <span class=\"keyword\">new</span> AuthenticatedVoter());</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UnanimousBased(decisionVoters);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>在加两个鉴权失败处理器<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAccessDeniedHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">AccessDeniedHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(HttpServletRequest httpServletRequest, HttpServletResponse response, AccessDeniedException e)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"application/json;charset=UTF-8\"</span>);</span><br><span class=\"line\">        PrintWriter writer = response.getWriter();</span><br><span class=\"line\">        writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"403\\\",\\\"msg\\\":\\\"没有权限\\\"&#125;\"</span>);</span><br><span class=\"line\">        writer.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再加一个登出处理器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLogoutSuccessHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">LogoutSuccessHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLogoutSuccess</span><span class=\"params\">(HttpServletRequest httpServletRequest, HttpServletResponse response, Authentication authentication)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> PrintWriter writer = response.getWriter();</span><br><span class=\"line\"></span><br><span class=\"line\">        writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"200\\\",\\\"msg\\\":\\\"登出成功\\\"&#125;\"</span>);</span><br><span class=\"line\">        writer.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后修改SecurityConfig，最终模样为<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    RedisService redisService;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    MyUserDetailService userDetailService;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        auth.userDetailsService(userDetailService).passwordEncoder(<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(WebSecurity web)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        web.ignoring().antMatchers(<span class=\"string\">\"/resources/**/*.html\"</span>, <span class=\"string\">\"/resources/**/*.js\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"/resources/**/*.css\"</span>, <span class=\"string\">\"/resources/**/*.txt\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"/resources/**/*.png\"</span>, <span class=\"string\">\"/**/*.bmp\"</span>, <span class=\"string\">\"/**/*.gif\"</span>, <span class=\"string\">\"/**/*.png\"</span>, <span class=\"string\">\"/**/*.jpg\"</span>, <span class=\"string\">\"/**/*.ico\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//        super.configure(web);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">       http.formLogin().loginPage(<span class=\"string\">\"/login_page\"</span>).passwordParameter(<span class=\"string\">\"username\"</span>).passwordParameter(<span class=\"string\">\"password\"</span>).loginProcessingUrl(<span class=\"string\">\"/sign_in\"</span>).permitAll()</span><br><span class=\"line\">               .and().authorizeRequests().antMatchers(<span class=\"string\">\"/test\"</span>).hasRole(<span class=\"string\">\"test\"</span>).anyRequest().authenticated().accessDecisionManager(accessDecisionManager())</span><br><span class=\"line\">               .and().logout().logoutSuccessHandler(<span class=\"keyword\">new</span> MyLogoutSuccessHandler())</span><br><span class=\"line\">               .and().csrf().disable();</span><br><span class=\"line\">        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\">        http.exceptionHandling().accessDeniedHandler(<span class=\"keyword\">new</span> MyAccessDeniedHandler());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">MyUsernamePasswordAuthenticationFilte <span class=\"title\">getAuthenticationFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = <span class=\"keyword\">new</span> MyUsernamePasswordAuthenticationFilte(redisService);</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(<span class=\"keyword\">new</span> MyUrlAuthenticationFailureHandler());</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(<span class=\"keyword\">new</span> MyAuthenticationSuccessHandler());</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(<span class=\"string\">\"/sign_in\"</span>);</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myUsernamePasswordAuthenticationFilte;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">MyAuthenticationProvider <span class=\"title\">getMyAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        MyAuthenticationProvider myAuthenticationProvider = <span class=\"keyword\">new</span> MyAuthenticationProvider(userDetailService,<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myAuthenticationProvider;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">DaoAuthenticationProvider <span class=\"title\">daoAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        DaoAuthenticationProvider daoAuthenticationProvider = <span class=\"keyword\">new</span> DaoAuthenticationProvider();</span><br><span class=\"line\">        daoAuthenticationProvider.setPasswordEncoder(<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">        daoAuthenticationProvider.setUserDetailsService(userDetailService);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> daoAuthenticationProvider;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> AuthenticationManager <span class=\"title\">getAuthenticationManager</span><span class=\"params\">()</span>  </span>&#123;</span><br><span class=\"line\">        ProviderManager authenticationManager = <span class=\"keyword\">new</span> ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> authenticationManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AccessDecisionManager <span class=\"title\">accessDecisionManager</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;AccessDecisionVoter&lt;? extends Object&gt;&gt; decisionVoters</span><br><span class=\"line\">                = Arrays.asList(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> MyExpressionVoter(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> WebExpressionVoter(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> RoleVoter(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> AuthenticatedVoter());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UnanimousBased(decisionVoters);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>你可能想要用jwtToken 做token鉴权的方式；<br>也好做，我这里提一下思路，鉴权都是在投票器里面，那我们在投票器之前填充好securitycontext就成，然后实现一个自己的投票器；填充securitycontext随便找个过滤器http.addFilterAfter() 然后在过滤器里面填充好就行，至于拿token的接口，在config里用.permitAll()放行就行了，比上面的改法还简单，我就不写了。</p>\n<h4 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h4><p>具体的代码可以参考我的项目<a href=\"https://github.com/muggle0/poseidon/wiki\" target=\"_blank\" rel=\"noopener\">poseindon</a>，这种security改动方式我经过生产实践的，不会有问题。另外篇幅有点长 感谢大佬的阅读。</p>\n","site":{"data":{}},"excerpt":"<p>作者：muggle</p>\n<h4 id=\"从一个基础的springsecurity开始，进行代码跟踪分析其原理\"><a href=\"#从一个基础的springsecurity开始，进行代码跟踪分析其原理\" class=\"headerlink\" title=\"从一个基础的springsecurity开始，进行代码跟踪分析其原理\"></a>从一个基础的springsecurity开始，进行代码跟踪分析其原理</h4><p>springsecurity是一个典型的责任链模式；我们先新建一个springboot项目，进行最基本的springsecurity配置，然后debug;我这里使用的开发工具是idea.建议大家也使用idea来进行日常开发。好了话不多说，开始：</p>\n<p>第一步</p>\n<p>新建springboot项目 maven依赖：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.security<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-security-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>启动项目，控制台上会输出这样一段字符串：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">04</span>-<span class=\"number\">11</span> <span class=\"number\">09</span>:<span class=\"number\">47</span>:<span class=\"number\">40.388</span>  INFO <span class=\"number\">16716</span> --- [           main] .s.s.UserDetailsServiceAutoConfiguration :</span><br><span class=\"line\"></span><br><span class=\"line\">Using generated security password: a6d55bc6-<span class=\"number\">49f</span>b-<span class=\"number\">4241</span>-a5ae-<span class=\"number\">527e5</span>e644731</span><br></pre></td></tr></table></figure></p>","more":"<p>现在我们访问 <a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a> 会自动跳转到 <a href=\"http://localhost:8080/login，并弹出一个登陆页面，用户名输user,密码输上面的字符串：\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/login，并弹出一个登陆页面，用户名输user,密码输上面的字符串：</a> a6d55bc6-49fb-4241-a5ae-527e5e644731，每次字符串都是随机的，要留意你的控制台打印的字符串，登陆成功了，现在我们开始debug,看看一次登陆和一次登陆后访问一次不登陆访问这三种情况security都做了哪些事情。</p>\n<p>先写一个接口：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"test\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"hi 你好啊\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>springsecurity 执行过程是走一条过滤器链，所以我们要先明白，有哪些过滤器，并在过滤器上打上断点追踪，下面贴出各个过滤器名称及作用：</p>\n<blockquote>\n<p>1、WebAsyncManagerIntegrationFilter<br>将Security上下文与Spring Web中用于处理异步请求映射的 WebAsyncManager 进行集成。<br>2、SecurityContextPersistenceFilter<br>在每次请求处理之前将该请求相关的安全上下文信息加载到SecurityContextHolder中，然后在该次请求处理完成之后，将SecurityContextHolder中关于这次请求的信息存储到一个“仓储”中，然后将SecurityContextHolder中的信息清除<br>例如在Session中维护一个用户的安全信息就是这个过滤器处理的。<br>3、HeaderWriterFilter<br>用于将头信息加入响应中<br>4、CsrfFilter<br>用于处理跨站请求伪造<br>5、LogoutFilter<br>用于处理退出登录<br>6、UsernamePasswordAuthenticationFilter<br>用于处理基于表单的登录请求，从表单中获取用户名和密码。默认情况下处理来自“/login”的请求。<br>从表单中获取用户名和密码时，默认使用的表单name值为“username”和“password”，这两个值可以通过设置这个过滤器的usernameParameter 和 passwordParameter 两个参数的值进行修改。<br>7、DefaultLoginPageGeneratingFilter<br>如果没有配置登录页面，那系统初始化时就会配置这个过滤器，并且用于在需要进行登录时生成一个登录表单页面。<br>8、BasicAuthenticationFilter<br>处理请求头信息，DigestAuthenticationFilter<br>9、RequestCacheAwareFilter<br>用来处理请求的缓存<br>10、SecurityContextHolderAwareRequestFilter<br>11、AnonymousAuthenticationFilter<br>12、SessionManagementFilter<br>13、ExceptionTranslationFilter<br>处理 AccessDeniedException 和 AuthenticationException 异常<br>14、FilterSecurityInterceptor<br>AbstractInterceptUrlConfigurer.createFilterSecurityInterceptor<br>15、RememberMeAuthenticationFilter的作用是, 当用户没有登录而直接访问资源时, 从cookie里找出用户的信息, 如果Spring Security能够识别出用户提供的remember me cookie, 用户将不必填写用户名和密码, 而是直接登录进入系统.</p>\n</blockquote>\n<p>先不管那么多，ctr+alt+shift+t（或者按两下shift） 输入类名找到类，打断点，开始debug</p>\n<h4 id=\"springsecurity-的默认登陆url是-login-我们访问一下来捋一捋：\"><a href=\"#springsecurity-的默认登陆url是-login-我们访问一下来捋一捋：\" class=\"headerlink\" title=\"springsecurity 的默认登陆url是/login:我们访问一下来捋一捋：\"></a>springsecurity 的默认登陆url是/login:我们访问一下来捋一捋：</h4><p>其代码顺序是：<br><code>WebAsyncManagerIntegrationFilter</code>  -&gt; <code>SecurityContextPersistenceFilter</code> -&gt; <code>HeaderWriterFilter</code> -&gt; <code>CsrfFilter</code> -&gt; <code>LogoutFilter</code> -&gt; <code>DefaultLoginPageGeneratingFilter</code></p>\n<p>然后浏览器会返回一个登陆页面：<br><img src=\"https://upload-images.jianshu.io/upload_images/13612520-d6e336c80cbf30c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h4 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h4><p>这其实是发起了一个请求登陆页面的请求，请求首先进入<code>WebAsyncManagerIntegrationFilter</code> 这个过滤器做了什么我们不必去关系，它下一个过滤器<code>SecurityContextPersistenceFilter</code> 通过request的attribute来上了一次请求锁，并且对SecurityContextHolder进行了管理；而SecurityContextHolder是对用户信息进行管理的一套系统，分为三大类</p>\n<ol>\n<li>SecurityContextHolder 对用户信息增删改查的操作<ol start=\"2\">\n<li>SecurityContext 将用户名，权限等封装成该对象</li>\n<li>SecurityContextHolderStrategy 用于存储 SecurityContext</li>\n</ol>\n</li>\n</ol>\n<p>默认的SecurityContextHolderStrategy 实现类是ThreadLocalSecurityContextHolderStrategy 它使用了ThreadLocal来存储了用户信息。<br>下一个过滤器<code>HeaderWriterFilter</code>请求和响应封装了一下，用于<code>CsrfFilter</code>鉴别csrf攻击 <code>LogoutFilter</code>判断是不是登出操作，如果是则不执行下面的过滤器，而执行登出的相关操作，DefaultLoginPageGeneratingFilter生成登录页</p>\n<p>我们先输入正确的代码登陆一次</p>\n<p>通过跟踪代码发现其执行顺序是：<br><code>WebAsyncManagerIntegrationFilter</code> -&gt; <code>SecurityContextPersistenceFilter</code> -&gt; <code>HeaderWriterFilter</code>-&gt;<code>CsrfFilter</code>-&gt; <code>LogoutFilter</code>-&gt;<code>UsernamePasswordAuthenticationFilter</code>-&gt;<code>WebAsyncManagerIntegrationFilter</code>-&gt;<code>SecurityContextPersistenceFilter</code>-&gt;<code>HeaderWriterFilter</code>-&gt;<code>CsrfFilter</code>-&gt;<code>LogoutFilter</code>-&gt;<code>DefaultLoginPageGeneratingFilter</code>-&gt;<code>BasicAuthenticationFilter</code>-&gt;<code>RequestCacheAwareFilter</code>-&gt;<code>SecurityContextHolderAwareRequestFilter</code>-&gt;<code>AnonymousAuthenticationFilter</code>-&gt;<code>SessionManagementFilter</code>-&gt;<code>ExceptionTranslationFilter</code>-&gt;<code>FilterSecurityInterceptor</code>-&gt;<code>SecurityContextPersistenceFilter</code>-&gt;<code>LogoutFilter</code>-&gt;<code>DefaultLoginPageGeneratingFilter</code>-&gt;<code>RequestCacheAwareFilter</code>-&gt;<code>SecurityContextHolderAwareRequestFilter</code>-&gt;<code>AnonymousAuthenticationFilter</code>-&gt;<code>SessionManagementFilter</code>-&gt;<code>ExceptionTranslationFilter</code>-&gt;<code>FilterSecurityInterceptor</code></p>\n<p>这一次之所以过滤器链跑这么长是因为，这里可以认为发起了三次请求，第一次请求是登陆，登陆成功后转发到 url 为“/”的接口，而我没有这个接口，发生了重定向到“/error” 而“/error”页面是springboot请求失败的错误页面返回机制。<br><code>WebAsyncManagerIntegrationFilter</code> -&gt; <code>SecurityContextPersistenceFilter</code> -&gt; <code>HeaderWriterFilter</code>-&gt;<code>CsrfFilter</code>-&gt; <code>LogoutFilter</code>-&gt;<code>UsernamePasswordAuthenticationFilter</code> 这一过程登陆请求。</p>\n<p><code>WebAsyncManagerIntegrationFilter</code>-&gt;<code>SecurityContextPersistenceFilter</code>-&gt;<code>HeaderWriterFilter</code>-&gt;<code>CsrfFilter</code>-&gt;<code>LogoutFilter</code>-&gt;<code>DefaultLoginPageGeneratingFilter</code>-&gt;<code>BasicAuthenticationFilter</code>-&gt;<code>RequestCacheAwareFilter</code>-&gt;<code>SecurityContextHolderAwareRequestFilter</code>-&gt;<code>AnonymousAuthenticationFilter</code>-&gt;<code>SessionManagementFilter</code>-&gt;<code>ExceptionTranslationFilter</code>-&gt;<code>FilterSecurityInterceptor</code><br>这是转发到“/”的过程</p>\n<p><code>SecurityContextPersistenceFilter</code>-&gt;<code>LogoutFilter</code>-&gt;<code>DefaultLoginPageGeneratingFilter</code>-&gt;<code>RequestCacheAwareFilter</code>-&gt;<code>SecurityContextHolderAwareRequestFilter</code>-&gt;<code>AnonymousAuthenticationFilter</code>-&gt;<code>SessionManagementFilter</code>-&gt;<code>ExceptionTranslationFilter</code>-&gt;<code>FilterSecurityInterceptor</code><br>这是重定向到error的过程</p>\n<p>接下来访问一下我们的/test接口<br>看看执行顺序：<br><code>WebAsyncManagerIntegrationFilter</code>-&gt;<code>SecurityContextPersistenceFilter</code>-&gt;<code>HeaderWriterFilter</code>-&gt;<code>CsrfFilter</code>-&gt;<code>LogoutFilter</code>-&gt;<code>DefaultLoginPageGeneratingFilter</code>-&gt;<code>BasicAuthenticationFilter</code>-&gt;<code>RequestCacheAwareFilter</code>-&gt;<code>SecurityContextHolderAwareRequestFilter</code>-&gt;<code>AnonymousAuthenticationFilter</code>-&gt;<code>SessionManagementFilter</code>-&gt;<code>ExceptionTranslationFilter</code>-&gt;<code>FilterSecurityInterceptor</code></p>\n<h4 id=\"说明：-1\"><a href=\"#说明：-1\" class=\"headerlink\" title=\"说明：\"></a>说明：</h4><p>BasicAuthenticationFilter就是看你请求头里面有没有basic开头的东西，有的话做一些处理，对我们来说没啥用，不必去关心，RequestCacheAwareFilter对请求和响应做了额外处理 SecurityContextHolderAwareRequestFilter 也是对请求做了一些额外处理，我们同样不去关心它。AnonymousAuthenticationFilter过滤器是当securitycontext为null时填充一个匿名权限，这里被执行的原因因为security未配置完全，后面进一步配置了之后再回来详解。ExceptionTranslationFilter是对鉴权或者登陆异常的处理过滤器，FilterSecurityInterceptor可以看做是过滤器链的出口：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">       FilterInvocation fi = <span class=\"keyword\">new</span> FilterInvocation(request, response, chain);</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.invoke(fi);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个fi就是请求的url值。</p>\n<p>现在我们完善一下security配置，让它复杂一点<br>实现 GrantedAuthority：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGrantedAuthority</span> <span class=\"keyword\">implements</span> <span class=\"title\">GrantedAuthority</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String authority;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>实现UserDetails<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Accessors</span>(chain = <span class=\"keyword\">true</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUserDetail</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDetails</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;MyGrantedAuthority&gt; authorities;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> accountNonExpired;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> accountNonLocked;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> credentialsNonExpired;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> enabled;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>实现UserDetailsService<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUserDetailService</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDetailsService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UserDetails <span class=\"title\">loadUserByUsername</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class=\"line\">        List&lt;MyGrantedAuthority&gt; authorities = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        MyGrantedAuthority myGrantedAuthority = <span class=\"keyword\">new</span> MyGrantedAuthority();</span><br><span class=\"line\">        myGrantedAuthority.setAuthority(<span class=\"string\">\"ROLE_test\"</span>);</span><br><span class=\"line\">        BCryptPasswordEncoder bCryptPasswordEncoder = <span class=\"keyword\">new</span> BCryptPasswordEncoder();</span><br><span class=\"line\">        String test = bCryptPasswordEncoder.encode(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\">        authorities.add(myGrantedAuthority);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyUserDetail().setAuthorities(authorities).setAccountNonExpired(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">                .setAccountNonLocked(<span class=\"keyword\">true</span>).setCredentialsNonExpired(<span class=\"keyword\">true</span>).setEnabled(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">                .setPassword(test).setUsername(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>重写security适配器WebSecurityConfigurerAdapter：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    MyUserDetailService userDetailService;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        auth.userDetailsService(userDetailService).passwordEncoder(<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(WebSecurity web)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        web.ignoring().antMatchers(<span class=\"string\">\"/resources/**/*.html\"</span>, <span class=\"string\">\"/resources/**/*.js\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"/resources/**/*.css\"</span>, <span class=\"string\">\"/resources/**/*.txt\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"/resources/**/*.png\"</span>, <span class=\"string\">\"/**/*.bmp\"</span>, <span class=\"string\">\"/**/*.gif\"</span>, <span class=\"string\">\"/**/*.png\"</span>, <span class=\"string\">\"/**/*.jpg\"</span>, <span class=\"string\">\"/**/*.ico\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//        super.configure(web);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">       http.formLogin().loginPage(<span class=\"string\">\"/login_page\"</span>).passwordParameter(<span class=\"string\">\"username\"</span>).passwordParameter(<span class=\"string\">\"password\"</span>).loginProcessingUrl(<span class=\"string\">\"/sign_in\"</span>).permitAll()</span><br><span class=\"line\">               .and().authorizeRequests().antMatchers(<span class=\"string\">\"/test\"</span>).hasRole(<span class=\"string\">\"test\"</span>).anyRequest().authenticated().and().csrf().disable();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里比开始又要复杂一点了，我先对相关操作进行说明一下：<br>先从SecurityConfig说起</p>\n<p>重写了三个config方法<br>1.第一个config涉及到的问题比较深——security的认证鉴权系统；<br>先说认证的过程，当过滤器跑到usernamepasswordFilter的时候就开始做认证了</p>\n<h4 id=\"security认证原理\"><a href=\"#security认证原理\" class=\"headerlink\" title=\"security认证原理\"></a>security认证原理</h4><p>认证的工作是交给AuthenticationManager去做，AuthenticationManager下有多个认证器 AuthenticationProvider<br>只要其中一个AuthenticationProvider通过认证就算登陆成功，而且在认证器中抛出异常，无法终止认证流程只是算该认证器未通过。<br>第一个config就算配置了一个AuthenticationManagerBuilder 这个类会生成一个 AuthenticationManager和DaoAuthenticationProvider认证器，认证调用userdetailservice 的loadUserByUsername方法来和你传入的username passworde做比较，password 是通过BCryptPasswordEncoder来做编码后比较的，这样做是为了提高安全性。</p>\n<p>2.第二个config是对静态资源的放行；</p>\n<p>3.第三个config 配置了登录页请求路径，登陆认证路径，用户名密码属性，和一个test权限，注意一点：我在config配的是hasRole(“test”)，我设置的权限是  myGrantedAuthority.setAuthority(“ROLE_test”);为什么这样弄后面会说。<br>接下来完善一下，边边角角，写个登陆的HTML,一个登陆页面请求接口:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/sign_in\"</span>&gt;</span></span><br><span class=\"line\">    用户名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"test\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"test\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"verification\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"test\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/login_page\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">loginPage</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"loginPage.html\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动项目，访问localhost:8080/test<br>跳转到了/login_page<br><img src=\"https://upload-images.jianshu.io/upload_images/13612520-40e8574ede6fdade.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>点登陆，debug看看有什么不同 新增的断点DaoAuthenticationProvider和MyUserDetailService<br>前面执行顺序还是一样，到SecurityContextHolderAwareRequestFilter的时候我们注意一下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityContextHolderAwareRequestFilter</span> <span class=\"keyword\">extends</span> <span class=\"title\">GenericFilterBean</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String rolePrefix = <span class=\"string\">\"ROLE_\"</span>;</span><br></pre></td></tr></table></figure></p>\n<p>我们权限设置的前缀就是从这来的 到后面讲投票器的时候再细说。<br>到UsernamePasswordAuthenticationFilter这个过滤器后 下一步到了DaoAuthenticationProvider验证器，验证器执行的是其父类AbstractUserDetailsAuthenticationProvider的authenticate（）方法同时我们看到MyUserDetailService的loadUserByUsername被调用，最后，认证结束转发到访问前路径/test 重新走过滤器。流程和一开始的简单配置一样，走到FilterSecurityInterceptor的时候进入WebExpressionVoter了投票器；</p>\n<h4 id=\"security的投票器：\"><a href=\"#security的投票器：\" class=\"headerlink\" title=\"security的投票器：\"></a>security的投票器：</h4><p>当过滤器链走到尽头（FilterSecurityInterceptor）下一步就是鉴权了，鉴权功能会交给AccessDecisionManager去处理，而AccessDecisionManager下又有多个投票器，其中WebExpressionVoter是security的一个默认投票器，我们来分析一下这个类：<br>其有个这样的方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">vote</span><span class=\"params\">(Authentication authentication, FilterInvocation fi, Collection&lt;ConfigAttribute&gt; attributes)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>返回int类型，1表示赞成，0表示弃权，-1表示反对。当所有投票器的vote执行结束，如果最终结果小于0表示不通过，<br>方法的参数说明：</p>\n<ol>\n<li>FilterInvocation  可获得请求的相关信息，比如请求方式（get post）url 等<br>2.authentication 是从securitycontext中拿出来的用户信息<br>3.Collection<configattribute> 是可以访问该路径的权限集合。也就是前面SecurityContextHolderAwareRequestFilter 查找出来的权限，对于在WebSecurityConfigurerAdapter config方法中的hasRole(“test”)权限规则并不是直接取权限 test,而是加了前缀rolePrefix（“ROLE_”），这个前缀也是可配置的配置方式：<a href=\"https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/reference/htmlsingle/#appendix-faq-role-prefix\" target=\"_blank\" rel=\"noopener\">https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/reference/htmlsingle/#appendix-faq-role-prefix</a></configattribute></li>\n</ol>\n<p>一些基本的知识点交代的差不多了，现在，我进行下一步</p>\n<h4 id=\"security魔改\"><a href=\"#security魔改\" class=\"headerlink\" title=\"security魔改\"></a>security魔改</h4><p>需求：我希望后端能做验证码校验，没通过校验的直接登录失败；<br>实现方式：security给我们提供了在各个过滤器上追加过滤器的方法，我们在UsernamePasswordAuthenticationFilter追加一个过滤器<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUsernamePasswordAuthenticationFilte</span> <span class=\"keyword\">extends</span> <span class=\"title\">UsernamePasswordAuthenticationFilter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisService redisService;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> postOnly = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyUsernamePasswordAuthenticationFilte</span><span class=\"params\">(RedisService redisService)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.redisService=redisService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Authentication <span class=\"title\">attemptAuthentication</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> AuthenticationException </span>&#123;</span><br><span class=\"line\">        redisService.getcCode(request);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.attemptAuthentication(request,response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里redisService 就是你要弄的验证逻辑，其他代码还是从父类那复制过来，不去动它。<br>为什么要继承UsernamePasswordAuthenticationFilter 而不是继承AbstractAuthenticationProcessingFilter，这样做的好处是可以少写代码少踩坑。<br>然后修改config<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">RedisService redisService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">      http.formLogin().loginPage(<span class=\"string\">\"/login_page\"</span>).passwordParameter(<span class=\"string\">\"username\"</span>).passwordParameter(<span class=\"string\">\"password\"</span>).loginProcessingUrl(<span class=\"string\">\"/sign_in\"</span>).permitAll()</span><br><span class=\"line\">              .and().authorizeRequests().antMatchers(<span class=\"string\">\"/test\"</span>).hasRole(<span class=\"string\">\"test\"</span>).anyRequest().authenticated().and().csrf().disable();</span><br><span class=\"line\">       http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\">MyUsernamePasswordAuthenticationFilte <span class=\"title\">getAuthenticationFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = <span class=\"keyword\">new</span> MyUsernamePasswordAuthenticationFilte(redisService);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> myUsernamePasswordAuthenticationFilte;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>我在加两个处理器，当我登陆成功或者失败，由我自己弄；<br>登陆成功处理器<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAuthenticationSuccessHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleUrlAuthenticationSuccessHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAuthenticationSuccess</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"application/json;charset=UTF-8\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> PrintWriter writer = response.getWriter();</span><br><span class=\"line\">        writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"200\\\",\\\"msg\\\":\\\"登录成功\\\"&#125;\"</span>);</span><br><span class=\"line\">        writer.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>登陆失败的处理器<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUrlAuthenticationFailureHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleUrlAuthenticationFailureHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAuthenticationFailure</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"application/json;charset=UTF-8\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> PrintWriter writer = response.getWriter();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(exception.getMessage().equals(<span class=\"string\">\"坏的凭证\"</span>))&#123;</span><br><span class=\"line\">            writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"401\\\",\\\"msg\\\":\\\"登录失败,用户名或者密码有误\\\"&#125;\"</span>);</span><br><span class=\"line\">            writer.close();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"401\\\",\\\"msg\\\":\\\"登录失败,\"</span>+exception.getMessage()+<span class=\"string\">\"\\\"&#125;\"</span>);</span><br><span class=\"line\">            writer.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"说明：-2\"><a href=\"#说明：-2\" class=\"headerlink\" title=\"说明：\"></a>说明：</h4><p>为什么要继承SimpleUrlAuthenticationFailureHandler和SimpleUrlAuthenticationSuccessHandler 而不是实现AuthenticationFailureHandler，还是那句话，为了少写代码少踩坑，我这里是返回json字符串，你也可以弄成重定向啥的，也比较容易。<br>config再改一下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">MyUsernamePasswordAuthenticationFilte <span class=\"title\">getAuthenticationFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = <span class=\"keyword\">new</span> MyUsernamePasswordAuthenticationFilte(redisService);</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(<span class=\"keyword\">new</span> MyUrlAuthenticationFailureHandler());</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(<span class=\"keyword\">new</span> MyAuthenticationSuccessHandler());</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(<span class=\"string\">\"/sign_in\"</span>);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> myUsernamePasswordAuthenticationFilte;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里要注意 myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(“/sign_in”); 因为 http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);并不是替换掉UsernamePasswordAuthenticationFilter，而是和你自己添加的过滤器同时存在，security会根据url判断该走哪个过滤器，如果loginProcessingUrl还是“/login”的话走的是UsernamePasswordAuthenticationFilter，这里要留意一下。</p>\n<p>现在再加需求，我不仅需要普通登录方式，我想其他登录方式；<br>实现方式：加多个认证器，每个认证器对应一种登录方式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAuthenticationProvider</span>  <span class=\"keyword\">implements</span> <span class=\"title\">AuthenticationProvider</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserDetailsService userDetailsService;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BCryptPasswordEncoder bCryptPasswordEncoder;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Authentication <span class=\"title\">authenticate</span><span class=\"params\">(Authentication authentication)</span> <span class=\"keyword\">throws</span> AuthenticationException </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//       这里写验证逻辑</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supports</span><span class=\"params\">(Class&lt;?&gt; aClass)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在改SecurityConfig<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">      http.formLogin().loginPage(<span class=\"string\">\"/login_page\"</span>).passwordParameter(<span class=\"string\">\"username\"</span>).passwordParameter(<span class=\"string\">\"password\"</span>).loginProcessingUrl(<span class=\"string\">\"/sign_in\"</span>).permitAll()</span><br><span class=\"line\">              .and().authorizeRequests().antMatchers(<span class=\"string\">\"/test\"</span>).hasRole(<span class=\"string\">\"test\"</span>).anyRequest().authenticated().and().csrf().disable();</span><br><span class=\"line\">       http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\">MyUsernamePasswordAuthenticationFilte <span class=\"title\">getAuthenticationFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = <span class=\"keyword\">new</span> MyUsernamePasswordAuthenticationFilte(redisService);</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(<span class=\"keyword\">new</span> MyUrlAuthenticationFailureHandler());</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(<span class=\"keyword\">new</span> MyAuthenticationSuccessHandler());</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(<span class=\"string\">\"/sign_in\"</span>);</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());</span><br><span class=\"line\">       <span class=\"keyword\">return</span> myUsernamePasswordAuthenticationFilte;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\">MyAuthenticationProvider <span class=\"title\">getMyAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       MyAuthenticationProvider myAuthenticationProvider = <span class=\"keyword\">new</span> MyAuthenticationProvider(userDetailService,<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">       <span class=\"keyword\">return</span> myAuthenticationProvider;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\">DaoAuthenticationProvider <span class=\"title\">daoAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       DaoAuthenticationProvider daoAuthenticationProvider = <span class=\"keyword\">new</span> DaoAuthenticationProvider();</span><br><span class=\"line\">       daoAuthenticationProvider.setPasswordEncoder(<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">       daoAuthenticationProvider.setUserDetailsService(userDetailService);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> daoAuthenticationProvider;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> AuthenticationManager <span class=\"title\">getAuthenticationManager</span><span class=\"params\">()</span>  </span>&#123;</span><br><span class=\"line\">       ProviderManager authenticationManager = <span class=\"keyword\">new</span> ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));</span><br><span class=\"line\">       <span class=\"keyword\">return</span> authenticationManager;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>我再加需求：<br>根据不同的客服端做不同的鉴权策略；<br>实现方式：加投票器；<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyExpressionVoter</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebExpressionVoter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">vote</span><span class=\"params\">(Authentication authentication, FilterInvocation fi, Collection&lt;ConfigAttribute&gt; attributes)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        这里写鉴权逻辑</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再次改动config<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">      http.formLogin().loginPage(<span class=\"string\">\"/login_page\"</span>).passwordParameter(<span class=\"string\">\"username\"</span>).passwordParameter(<span class=\"string\">\"password\"</span>).loginProcessingUrl(<span class=\"string\">\"/sign_in\"</span>).permitAll()</span><br><span class=\"line\">              .and().authorizeRequests().antMatchers(<span class=\"string\">\"/test\"</span>).hasRole(<span class=\"string\">\"test\"</span>).anyRequest().authenticated().accessDecisionManager(accessDecisionManager()).and().csrf().disable();</span><br><span class=\"line\">       http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\">MyUsernamePasswordAuthenticationFilte <span class=\"title\">getAuthenticationFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = <span class=\"keyword\">new</span> MyUsernamePasswordAuthenticationFilte(redisService);</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(<span class=\"keyword\">new</span> MyUrlAuthenticationFailureHandler());</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(<span class=\"keyword\">new</span> MyAuthenticationSuccessHandler());</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(<span class=\"string\">\"/sign_in\"</span>);</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());</span><br><span class=\"line\">       <span class=\"keyword\">return</span> myUsernamePasswordAuthenticationFilte;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\">MyAuthenticationProvider <span class=\"title\">getMyAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       MyAuthenticationProvider myAuthenticationProvider = <span class=\"keyword\">new</span> MyAuthenticationProvider(userDetailService,<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">       <span class=\"keyword\">return</span> myAuthenticationProvider;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\">DaoAuthenticationProvider <span class=\"title\">daoAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       DaoAuthenticationProvider daoAuthenticationProvider = <span class=\"keyword\">new</span> DaoAuthenticationProvider();</span><br><span class=\"line\">       daoAuthenticationProvider.setPasswordEncoder(<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">       daoAuthenticationProvider.setUserDetailsService(userDetailService);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> daoAuthenticationProvider;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> AuthenticationManager <span class=\"title\">getAuthenticationManager</span><span class=\"params\">()</span>  </span>&#123;</span><br><span class=\"line\">       ProviderManager authenticationManager = <span class=\"keyword\">new</span> ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));</span><br><span class=\"line\">       <span class=\"keyword\">return</span> authenticationManager;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> AccessDecisionManager <span class=\"title\">accessDecisionManager</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       List&lt;AccessDecisionVoter&lt;? extends Object&gt;&gt; decisionVoters</span><br><span class=\"line\">               = Arrays.asList(</span><br><span class=\"line\">               <span class=\"keyword\">new</span> MyExpressionVoter(),</span><br><span class=\"line\">               <span class=\"keyword\">new</span> WebExpressionVoter(),</span><br><span class=\"line\">               <span class=\"keyword\">new</span> RoleVoter(),</span><br><span class=\"line\">               <span class=\"keyword\">new</span> AuthenticatedVoter());</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UnanimousBased(decisionVoters);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>在加两个鉴权失败处理器<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAccessDeniedHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">AccessDeniedHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(HttpServletRequest httpServletRequest, HttpServletResponse response, AccessDeniedException e)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"application/json;charset=UTF-8\"</span>);</span><br><span class=\"line\">        PrintWriter writer = response.getWriter();</span><br><span class=\"line\">        writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"403\\\",\\\"msg\\\":\\\"没有权限\\\"&#125;\"</span>);</span><br><span class=\"line\">        writer.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再加一个登出处理器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLogoutSuccessHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">LogoutSuccessHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLogoutSuccess</span><span class=\"params\">(HttpServletRequest httpServletRequest, HttpServletResponse response, Authentication authentication)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> PrintWriter writer = response.getWriter();</span><br><span class=\"line\"></span><br><span class=\"line\">        writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"200\\\",\\\"msg\\\":\\\"登出成功\\\"&#125;\"</span>);</span><br><span class=\"line\">        writer.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后修改SecurityConfig，最终模样为<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    RedisService redisService;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    MyUserDetailService userDetailService;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        auth.userDetailsService(userDetailService).passwordEncoder(<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(WebSecurity web)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        web.ignoring().antMatchers(<span class=\"string\">\"/resources/**/*.html\"</span>, <span class=\"string\">\"/resources/**/*.js\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"/resources/**/*.css\"</span>, <span class=\"string\">\"/resources/**/*.txt\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"/resources/**/*.png\"</span>, <span class=\"string\">\"/**/*.bmp\"</span>, <span class=\"string\">\"/**/*.gif\"</span>, <span class=\"string\">\"/**/*.png\"</span>, <span class=\"string\">\"/**/*.jpg\"</span>, <span class=\"string\">\"/**/*.ico\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//        super.configure(web);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">       http.formLogin().loginPage(<span class=\"string\">\"/login_page\"</span>).passwordParameter(<span class=\"string\">\"username\"</span>).passwordParameter(<span class=\"string\">\"password\"</span>).loginProcessingUrl(<span class=\"string\">\"/sign_in\"</span>).permitAll()</span><br><span class=\"line\">               .and().authorizeRequests().antMatchers(<span class=\"string\">\"/test\"</span>).hasRole(<span class=\"string\">\"test\"</span>).anyRequest().authenticated().accessDecisionManager(accessDecisionManager())</span><br><span class=\"line\">               .and().logout().logoutSuccessHandler(<span class=\"keyword\">new</span> MyLogoutSuccessHandler())</span><br><span class=\"line\">               .and().csrf().disable();</span><br><span class=\"line\">        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\">        http.exceptionHandling().accessDeniedHandler(<span class=\"keyword\">new</span> MyAccessDeniedHandler());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">MyUsernamePasswordAuthenticationFilte <span class=\"title\">getAuthenticationFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = <span class=\"keyword\">new</span> MyUsernamePasswordAuthenticationFilte(redisService);</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(<span class=\"keyword\">new</span> MyUrlAuthenticationFailureHandler());</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(<span class=\"keyword\">new</span> MyAuthenticationSuccessHandler());</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(<span class=\"string\">\"/sign_in\"</span>);</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myUsernamePasswordAuthenticationFilte;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">MyAuthenticationProvider <span class=\"title\">getMyAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        MyAuthenticationProvider myAuthenticationProvider = <span class=\"keyword\">new</span> MyAuthenticationProvider(userDetailService,<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myAuthenticationProvider;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">DaoAuthenticationProvider <span class=\"title\">daoAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        DaoAuthenticationProvider daoAuthenticationProvider = <span class=\"keyword\">new</span> DaoAuthenticationProvider();</span><br><span class=\"line\">        daoAuthenticationProvider.setPasswordEncoder(<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">        daoAuthenticationProvider.setUserDetailsService(userDetailService);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> daoAuthenticationProvider;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> AuthenticationManager <span class=\"title\">getAuthenticationManager</span><span class=\"params\">()</span>  </span>&#123;</span><br><span class=\"line\">        ProviderManager authenticationManager = <span class=\"keyword\">new</span> ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> authenticationManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AccessDecisionManager <span class=\"title\">accessDecisionManager</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;AccessDecisionVoter&lt;? extends Object&gt;&gt; decisionVoters</span><br><span class=\"line\">                = Arrays.asList(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> MyExpressionVoter(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> WebExpressionVoter(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> RoleVoter(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> AuthenticatedVoter());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UnanimousBased(decisionVoters);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>你可能想要用jwtToken 做token鉴权的方式；<br>也好做，我这里提一下思路，鉴权都是在投票器里面，那我们在投票器之前填充好securitycontext就成，然后实现一个自己的投票器；填充securitycontext随便找个过滤器http.addFilterAfter() 然后在过滤器里面填充好就行，至于拿token的接口，在config里用.permitAll()放行就行了，比上面的改法还简单，我就不写了。</p>\n<h4 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h4><p>具体的代码可以参考我的项目<a href=\"https://github.com/muggle0/poseidon/wiki\" target=\"_blank\" rel=\"noopener\">poseindon</a>，这种security改动方式我经过生产实践的，不会有问题。另外篇幅有点长 感谢大佬的阅读。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjucok82f0004kcvmaltcp7oq","tag_id":"cjucok82j0005kcvmcqwor5pf","_id":"cjucok82o0006kcvmzhbh8zef"},{"post_id":"cjucok83d0007kcvm92b5pvy9","tag_id":"cjucok83g0008kcvm8wewd7yq","_id":"cjucok83h0009kcvmrgm1mbo2"}],"Tag":[{"name":"瞎哔哔","_id":"cjucok82j0005kcvmcqwor5pf"},{"name":"springsecurity","_id":"cjucok83g0008kcvm8wewd7yq"}]}}