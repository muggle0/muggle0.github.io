{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"c44c3538924d2ff9b19019cab752b2ce08302c05","modified":1557022923752},{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1553662234514},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1553662234514},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1553662234515},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1553662234515},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1553662234516},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1553662234516},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1553662234517},{"_id":"themes/yilia/_config.yml","hash":"edb0a8f13aa55bd6a928866098ffda2c9002d4f9","modified":1557389191055},{"_id":"themes/yilia/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1553662234540},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1553662234580},{"_id":"source/_posts/annotation.md","hash":"e440a1f1e533e4fb25731a681c795f5ec1f05e33","modified":1558055949871},{"_id":"source/_posts/design-1.md","hash":"63f82407813d92d78bc4fde2685c5d23743e984f","modified":1557364588020},{"_id":"source/_posts/blog-origin.md","hash":"ab4adbdf81a48691196b34a939c0109906435119","modified":1556268669011},{"_id":"source/_posts/dubbo-1.md","hash":"067317413cb52b4fae35a81b811d541f5e9d0257","modified":1557986589868},{"_id":"source/_posts/gclib.md","hash":"f4cc60bda407516deb92b503708613175767dddf","modified":1558055955238},{"_id":"source/_posts/git-subtree.md","hash":"2cfa65930ec02311de3f9196ae2977a1b2daff1a","modified":1557813225584},{"_id":"source/_posts/gradle.md","hash":"084a24de25ed68514b77748e1ea424cd51189530","modified":1557906626969},{"_id":"source/_posts/grpc-learn.md","hash":"9f68937286522707cccd1bbd4e279a6b9bee66e1","modified":1557907544441},{"_id":"source/_posts/hello-world.md","hash":"086aa555c08b7383da22b153c44bc33a6c3fdcc6","modified":1555921469110},{"_id":"source/_posts/home-2.md","hash":"34105068b3e167db57a2632aa1f6bc349d828eb8","modified":1557908788660},{"_id":"source/_posts/home.md","hash":"6fc5bbf1f0e631a77537f4d75a3bb703781d24db","modified":1557714338754},{"_id":"source/_posts/java8.md","hash":"43b67a1469b5eac5a55f10bf53d5b40a17e6eb7d","modified":1557910544021},{"_id":"source/_posts/javaee-1.md","hash":"96d97f0a4a12a0e36153f08f65819444876fffb3","modified":1557199016348},{"_id":"source/_posts/jvm-1.md","hash":"e672ffed07bcf952dd9736d56ee01ce90b8958d0","modified":1558055942679},{"_id":"source/_posts/jvm-2.md","hash":"42a7a407b27c89694bd4e80b248729bd80aada81","modified":1556011432580},{"_id":"source/_posts/jvm-3.md","hash":"1d0b0802dfc48d7aa57056c9c073ec97fe27c096","modified":1556075148441},{"_id":"source/_posts/jvm-4.md","hash":"fb0ffb7fefb036acf6c433a35e42ce967c35f75a","modified":1556075135759},{"_id":"source/_posts/jvm-6.md","hash":"06a65bc34dfba51353a7dfc5ff74a32c81a8ec85","modified":1557885841008},{"_id":"source/_posts/jvm-5.md","hash":"9c502455b2a3435eefb3e221b51bff0481dacbda","modified":1556162697294},{"_id":"source/_posts/kafka.md","hash":"031850145478fb315dc129be3b992535c574624d","modified":1557714487909},{"_id":"source/_posts/logback-2.md","hash":"140281bfa72f093ccb87b926f0985b1fc83b52db","modified":1557714494292},{"_id":"source/_posts/leetcode.md","hash":"cf82a9c0a172b7a75f0455141b9d1d33c6bebf3c","modified":1557222387464},{"_id":"source/_posts/logback.md","hash":"ace58844510b91e9b9cbbb80f0d7eaa2200371a8","modified":1557713682574},{"_id":"source/_posts/nacos.md","hash":"deb08a0a25c31a43d0b4d2967bb7f02b566abfa2","modified":1557668606234},{"_id":"source/_posts/netty学习笔记.md","hash":"1e89dc66bdaf0073f9deb79d90b82abdfb02edd3","modified":1556611924410},{"_id":"source/_posts/nio.md","hash":"3a539bc43475251aeb5daf6c2585970af0c48518","modified":1558056002878},{"_id":"source/_posts/photo.md","hash":"2f26f347ac5ebfc4f2359e5a359989a62a30529f","modified":1555736023069},{"_id":"source/_posts/redis-1.md","hash":"b1ac4df59c0e75b3bc36a316206c5a8fef7d09a4","modified":1558078315664},{"_id":"source/_posts/reptile.md","hash":"39e2dde119536414f089b429fe17c113c169f314","modified":1557714449314},{"_id":"source/_posts/security-oauth2学习笔记.md","hash":"7ddd6f81669b56aa156428650ed86b7aa1508456","modified":1556011454382},{"_id":"source/_posts/spi.md","hash":"b6a186dcbc07ae917e77998500516e31c2eff729","modified":1558077354189},{"_id":"source/_posts/sppringboot.md","hash":"27df667259979afe15da9cdde6fb1ea1a39df3c4","modified":1558077375741},{"_id":"source/_posts/spring-1.md","hash":"d02f89afa1e55f4387a336f37c2c0b9626f39587","modified":1558078740904},{"_id":"source/_posts/spring-boot-starter.md","hash":"1705b86c72243d4a5593cdcadc353f2fb16b209c","modified":1557910186493},{"_id":"source/_posts/springSecurity2.md","hash":"3265afd2b062e507c98c185faa36b42712184a77","modified":1556243114754},{"_id":"source/_posts/springSecurity深度解析.md","hash":"3ff69b6c4be11e0cf98893c6005f7bbfb8b55dd1","modified":1555050720472},{"_id":"source/_posts/springcloud-1.md","hash":"25cdd838a53a03b5931003fa953331f82c0cd153","modified":1556263775538},{"_id":"source/_posts/springcloud-2.md","hash":"e25b9f97b35bb8835dc108ead223a07c21411d5a","modified":1556263781619},{"_id":"source/_posts/test.md","hash":"cf955431ba56ded4fe5dca408f4f4f268ed4d3c2","modified":1557714460422},{"_id":"source/_posts/springcloud-3.md","hash":"f26e8e92ccb5e6725a608b089ab2b33517ba3b3e","modified":1556334294900},{"_id":"source/_posts/thread-1.md","hash":"0b6c746eee008fda3831cc890251eb7a03234f60","modified":1556354182233},{"_id":"source/_posts/thread-3.md","hash":"ed42596612a350bc3ac5f02cad5401c3825e0f9f","modified":1557712810096},{"_id":"source/_posts/windows.md","hash":"7fc92cce5103f653f2166e62cf096103307150d3","modified":1557828111781},{"_id":"source/_posts/thread-2.md","hash":"9eb9b60a57cd1397fbd6b4ba3a0e92c2eb861af6","modified":1557712911773},{"_id":"source/_posts/在vscode中编写markdown.md","hash":"bb3ff99de12f42b74858def4e8edea77e5cc3551","modified":1556011517340},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1553662234494},{"_id":"themes/yilia/.git/config","hash":"316bc92d9936dc739c39161838a28fb4641cbea2","modified":1553662234502},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1553662039422},{"_id":"themes/yilia/.git/index","hash":"ca272b7c3deaac88b2a69c005716242f439162ff","modified":1553790431058},{"_id":"themes/yilia/.git/packed-refs","hash":"83644c3638dafa38c817265c9207f098dd8aeee6","modified":1553662234488},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1553662234518},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1553662234519},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1553662234519},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1553662234520},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1553662234520},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1553662234520},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1553662234521},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1553662234536},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1553662234537},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1553662234537},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1553662234538},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1553662234538},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1553662234539},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1553662234540},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1553662234577},{"_id":"themes/yilia/source/slider.e37972.js","hash":"ce5eac88301fe4f2fce0fb6203adfd58eb8313ac","modified":1553662234579},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1553662234570},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1553662234541},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553662234535},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"283ae27ea37ac3e0e45b2e05c2482a4c594b9c25","modified":1553662234578},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"1801ef448909ea23c0a48e9d63b80d0cfd5534ce","modified":1553662234579},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1553662039423},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1553662039423},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1553662039424},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1553662039424},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1553662039425},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1553662039426},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1553662039426},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1553662039427},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1553662039427},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1553662039428},{"_id":"themes/yilia/.git/logs/HEAD","hash":"fddcfa6a98c2cae9fb20d1bbcb9af27df9fa079a","modified":1553662234498},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"c70f367f54064a441e574c913f5e0ea121d0f899","modified":1553662234522},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1553662234522},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1553662234523},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"8dea8f5f93a60185439b330b0f1d1649a6ab4bd0","modified":1553662234523},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1553662234524},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1553662234524},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1553662234525},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1553662234525},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1553662234526},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1553662234526},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1553662234527},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1553662234528},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1553662234528},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1553662234536},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"fb1b8457b9eb15b55da1bf7b133e12c375dd26f8","modified":1553662234527},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1553662234536},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1553662234571},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1553662234572},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1553662234573},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1553662234572},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1553662234574},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1553662234574},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1553662234564},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1553662234565},{"_id":"themes/yilia/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1553662234565},{"_id":"themes/yilia/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1553662234566},{"_id":"themes/yilia/source-src/js/fix.js","hash":"67b8819abb886c9d066fb3b0624ca15e06f63fe0","modified":1553662234566},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1553662234568},{"_id":"themes/yilia/source-src/js/slider.js","hash":"0beaa112657ad57c723d9e773d5b79de60c1dd74","modified":1553662234569},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1553662234568},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1553662234569},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"c699cf3c89409ec8f044258e0715a470861b5d5d","modified":1553662234570},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1553662234541},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1553662234542},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1553662234542},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1553662234543},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1553662234543},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1553662234544},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1553662234545},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1553662234545},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"b85f344f2c66d43d7094746e0a9ccb21d0534201","modified":1553662234546},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1553662234549},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1553662234553},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1553662234553},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1553662234554},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1553662234554},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1553662234556},{"_id":"themes/yilia/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1553662234557},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1553662234557},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1553662234558},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1553662234559},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1553662234559},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1553662234560},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1553662234560},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1553662234561},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1553662234562},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1553662234561},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"2924fb6f77c4a9973cd928c2c7db0acb848ed483","modified":1553662234562},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1553662234563},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1553662234575},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1553662234576},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1553662234576},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1553662234567},{"_id":"themes/yilia/.git/refs/heads/master","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1553662234496},{"_id":"themes/yilia/.git/objects/pack/pack-ca3518b8832ff0b837598185651e7204a2714001.idx","hash":"55bee19cda36005614f46d0fc0d58d4dfbd49f85","modified":1553662234406},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"e777cbf959b11c4dfda649c562799899b90ab4a3","modified":1553662234529},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"086c8a88fd3bcae7ec13258df58e25d6354af2fa","modified":1553662234529},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1553662234530},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"b60c42fbeb873fe3e2ed575c500f1b9ae85d53af","modified":1553762186078},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1553662234530},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1553662234531},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"345b262e3c3b75c0cd9a93d9ecabcf06e33e54ff","modified":1553662234532},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1553662234533},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1553662234534},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1553662234533},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"e98ec0b3b56f14d1d79af99ceb42727719a584f3","modified":1553662234535},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1553662234564},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1553662234546},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1553662234547},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1553662234547},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1553662234548},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1553662234548},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1553662234550},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1553662234551},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1553662234551},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1553662234552},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1553662234555},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1553662234555},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1553662234556},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"fddcfa6a98c2cae9fb20d1bbcb9af27df9fa079a","modified":1553662234497},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1553662234493},{"_id":"themes/yilia/test.jpg","hash":"48d08e9f9dcabfe22731fa1df084bf49e44f215f","modified":1551231087483},{"_id":"source/_posts/test.jpg","hash":"48d08e9f9dcabfe22731fa1df084bf49e44f215f","modified":1557885841038},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"fddcfa6a98c2cae9fb20d1bbcb9af27df9fa079a","modified":1553662234493},{"_id":"themes/yilia/.git/objects/pack/pack-ca3518b8832ff0b837598185651e7204a2714001.pack","hash":"5005316ab51cc925e3f62adbb8dc2fdf002805aa","modified":1553662234435},{"_id":"public/content.json","hash":"0b88181173a951363f3ea4080cce3d666efa78f3","modified":1558078751375},{"_id":"public/2019/05/17/spi/index.html","hash":"99116d8a36970826c375857404701d5473206d79","modified":1558078752641},{"_id":"public/2019/05/15/gradle/index.html","hash":"077c698aa7ddf89b15f99d1326c28e50ecade415","modified":1558078752641},{"_id":"public/2019/05/15/annotation/index.html","hash":"0033fe3ad7dc300792ce9c8187bb8099e0c45e4e","modified":1558078752641},{"_id":"public/2019/05/15/spring-boot-starter/index.html","hash":"f201a1e75a004cfb347a43a354887e29257a948d","modified":1558078752641},{"_id":"public/2019/05/14/grpc-learn/index.html","hash":"a7bbd29872164517b589dc7a48e5288dc087bfc7","modified":1558078752641},{"_id":"public/2019/05/13/windows/index.html","hash":"fbbcf5074429444c8b7b7bfefe1c402ee5170798","modified":1558078752641},{"_id":"public/2019/05/13/gclib/index.html","hash":"30621bcaa648a668ad5d2516f711fb3c932a3e17","modified":1558078752642},{"_id":"public/2019/05/09/jvm-6/index.html","hash":"df4ef38535305772917728d524031fa6a7e77938","modified":1558078752642},{"_id":"public/2019/05/08/spring-1/index.html","hash":"7522b2338341bb27ab95bf1ad3a06a0d1dcc3a9d","modified":1558078752642},{"_id":"public/2019/05/07/java8/index.html","hash":"cf15110d2428f493934971affcec3a1fda974cc3","modified":1558078752642},{"_id":"public/2019/05/06/redis-1/index.html","hash":"2ed81585b1b9f450d0fb503fbeaeb543c1513efe","modified":1558078752642},{"_id":"public/2019/05/05/git-subtree/index.html","hash":"b8edd290e6f3a3cf7946d90de929f0f2fe9f3076","modified":1558078752642},{"_id":"public/2019/04/30/reptile/index.html","hash":"39d68763ebbbd5882968e625f433321c27c0e6a8","modified":1558078752642},{"_id":"public/2019/04/28/kafka/index.html","hash":"8592ae784f3da456235f4e7f9c14cdf6e2e03817","modified":1558078752642},{"_id":"public/2019/04/27/home-2/index.html","hash":"fc4a4a114a34c41acc676b8f8feedcb621358bcd","modified":1558078752642},{"_id":"public/2019/04/27/leetcode/index.html","hash":"e178123e67fa2973dc2f652a43406fddb81ca504","modified":1558078752643},{"_id":"public/2019/04/27/nacos/index.html","hash":"f2fa4ef0f5d7f97f2cbf066fc86f6d7b24ecd906","modified":1558078752643},{"_id":"public/2019/04/27/springcloud-3/index.html","hash":"ee2d42b33cf6906a2ba1c5216da268a455cc9547","modified":1558078752643},{"_id":"public/2019/04/26/dubbo-1/index.html","hash":"1f5dddef25984e68530c8e2988250130dcaed88c","modified":1558078752643},{"_id":"public/2019/04/26/nio/index.html","hash":"edf2a721dfe6fd92b13e42dc6f693e1781e18ec5","modified":1558078752643},{"_id":"public/2019/04/26/springcloud-2/index.html","hash":"72a6af9150ab82964bf3a4cffaab39516ee1682c","modified":1558078752643},{"_id":"public/2019/04/26/springcloud-1/index.html","hash":"1252951993dc8a9923bcfa291e611628736ef4cb","modified":1558078752643},{"_id":"public/2019/04/25/design-1/index.html","hash":"516715109b3f34996faf93403481643ad5798a2a","modified":1558078752643},{"_id":"public/2019/04/24/jvm-5/index.html","hash":"25e36ce3044be4be0c19abd94dec73bc2b902702","modified":1558078752643},{"_id":"public/2019/04/24/jvm-4/index.html","hash":"6a254a8ed13af104600712dca6bf89138db5077e","modified":1558078752643},{"_id":"public/2019/04/24/jvm-3/index.html","hash":"4ea49bb497689f474e7f0d40723327dcc1d99c56","modified":1558078752644},{"_id":"public/2019/04/23/jvm-2/index.html","hash":"2938b90fdf802479e40d4e9d79a60e2f2e0ca180","modified":1558078752644},{"_id":"public/2019/04/23/jvm-1/index.html","hash":"283c363e6f45380823910c41aa0692057c5d472a","modified":1558078752644},{"_id":"public/2019/04/23/thread-3/index.html","hash":"c4b83cb16228b161f8dbf8f9c45394c9df2cc856","modified":1558078752644},{"_id":"public/2019/04/23/thread-2/index.html","hash":"12401d6ea2c95882b8931259a31f2f7277543a92","modified":1558078752644},{"_id":"public/2019/04/22/thread-1/index.html","hash":"87d3577998420d18915418422190ea71659a6d4d","modified":1558078752644},{"_id":"public/2019/04/22/blog-origin/index.html","hash":"219c654b54f8bd9d0849f2f32012475d421965f9","modified":1558078752644},{"_id":"public/2019/04/22/logback-2/index.html","hash":"8aff8fbc8e7e2511ec5dae2fe3f9c6dfa89c669d","modified":1558078752644},{"_id":"public/2019/04/20/springSecurity2/index.html","hash":"1789ccb4db66987316c277878acd3d82966f63a1","modified":1558078752644},{"_id":"public/2019/04/20/photo/index.html","hash":"a2e44798b35d1a4814b790a15866ce81439614d3","modified":1558078752644},{"_id":"public/2019/04/16/sppringboot/index.html","hash":"c93b966fc424d3f88c858a5233bac1626bee288e","modified":1558078752645},{"_id":"public/2019/04/12/在vscode中编写markdown/index.html","hash":"c6e09111d061acc580e5a199ef3cbb4474cec143","modified":1558078752645},{"_id":"public/2019/04/12/security-oauth2学习笔记/index.html","hash":"19cb1a6ac51cbde25160bc70b4ccd6adeea4199a","modified":1558078752645},{"_id":"public/2019/04/11/springSecurity深度解析/index.html","hash":"9f043d88e775d0c0d395b7bdc26c868f9aa2a41f","modified":1558078752645},{"_id":"public/2019/04/01/netty学习笔记/index.html","hash":"d873de3f88339521b4abf7cf4c6e9597fbd4cf21","modified":1558078752645},{"_id":"public/2019/03/28/hello-world/index.html","hash":"aae1b50c7a2ea20a59f60d2b6f7a988cbff6982e","modified":1558078752645},{"_id":"public/2019/03/28/logback/index.html","hash":"8697c4a56da7bbf52015c0860bd62dc64dedf038","modified":1558078752645},{"_id":"public/2019/03/20/javaee-1/index.html","hash":"c701ed5fdd9ec3e18b4965843f56df8357fc49d9","modified":1558078752645},{"_id":"public/2019/03/20/home/index.html","hash":"d977ac061e35c0bd447b4ceab4649990abd537af","modified":1558078752645},{"_id":"public/2019/02/07/test/index.html","hash":"fddde85ea5f121d40e0491f62e2e0c897ec4dee8","modified":1558078752646},{"_id":"public/archives/index.html","hash":"ed6061a22603c286f54c0ba8e8246f7011b53cb5","modified":1558078752646},{"_id":"public/archives/page/2/index.html","hash":"89af4a9a9a4495271b96bb9d30e0b63f46a7461f","modified":1558078752646},{"_id":"public/archives/page/3/index.html","hash":"29847375be1418e9810e87d87e806af75adcf03d","modified":1558078752646},{"_id":"public/archives/page/4/index.html","hash":"17c0304613ddc86b6f2826f21d3f271f1a196c48","modified":1558078752646},{"_id":"public/archives/page/5/index.html","hash":"69ebc8552806655571db4510404d6b4597730260","modified":1558078752646},{"_id":"public/archives/2019/index.html","hash":"fad436bd02e793521c96ee549dc5572e0289dd39","modified":1558078752646},{"_id":"public/archives/2019/page/2/index.html","hash":"115a56bf57662857b326fd91000b48a02f25443e","modified":1558078752646},{"_id":"public/archives/2019/page/3/index.html","hash":"55331b3e911f6ed813f6f28d4d3c60db0ca21747","modified":1558078752646},{"_id":"public/archives/2019/page/4/index.html","hash":"22316852376d4952076cd8c0a72c4854d55e712b","modified":1558078752646},{"_id":"public/archives/2019/02/index.html","hash":"a3c3e77a37ab3f58e4830f2cd82182a3d024dce2","modified":1558078752647},{"_id":"public/archives/2019/page/5/index.html","hash":"4763b494daf4e59b5dc3042e18a175c742eec970","modified":1558078752647},{"_id":"public/archives/2019/03/index.html","hash":"ef322ed6787d6479c0d0bc860362a6916a0696db","modified":1558078752647},{"_id":"public/archives/2019/04/index.html","hash":"ee9441d6bc531a3db795af13539c626913959be1","modified":1558078752647},{"_id":"public/archives/2019/04/page/2/index.html","hash":"a0b67d9328312b5b0c5ff053ed5671dab2ebdb3a","modified":1558078752647},{"_id":"public/archives/2019/04/page/3/index.html","hash":"d6d1c10397d7d07884ac806061dd00ac9b37ecc0","modified":1558078752647},{"_id":"public/archives/2019/05/index.html","hash":"79719de61e52fcb5ede164bd946c182cdb689d01","modified":1558078752647},{"_id":"public/archives/2019/05/page/2/index.html","hash":"185954a8275ee326ff579a7971312cd3193596df","modified":1558078752647},{"_id":"public/index.html","hash":"b8c3d52bf4f8c50ba176b05357bbac7fc1d5889d","modified":1558078752647},{"_id":"public/tags/javase/index.html","hash":"bc634b79509321f0825a3e84cccca3c718959f2d","modified":1558078752647},{"_id":"public/tags/设计模式/index.html","hash":"49cb01fc63b6df356c5293b195f1948e5cfae5bc","modified":1558078752648},{"_id":"public/tags/javaee/index.html","hash":"05423e507d568ee30d4654329e646edfb8cab94f","modified":1558078752648},{"_id":"public/tags/cloud/index.html","hash":"d66d0d2d03c827a298f81add1f3e169fa21e35fb","modified":1558078752648},{"_id":"public/tags/developing/index.html","hash":"d5948c855c116fd863c2ad71d49d90b1e15fbb44","modified":1558078752648},{"_id":"public/tags/苟？/index.html","hash":"c07a842fd7e6d30836d48d769a2d57b758a56eb1","modified":1558078752648},{"_id":"public/tags/home/index.html","hash":"f6f1c96a9585ec705d45bfe064807027047aad09","modified":1558078752648},{"_id":"public/tags/jvm/index.html","hash":"626c83e67e2ad5ec755d814934331a858f939fa4","modified":1558078752648},{"_id":"public/tags/中间件/index.html","hash":"340f2065fe98645a6484b405f385e6f55503f248","modified":1558078752648},{"_id":"public/tags/log/index.html","hash":"f91106c642d619728078224f2e4fc8cc246b7c8d","modified":1558078752648},{"_id":"public/tags/算法/index.html","hash":"cc637e3a0dac4d3811d4e8e6c795672c0b01806f","modified":1558078752648},{"_id":"public/tags/photo/index.html","hash":"9afc477ea8869f2bd2eb6f19fdf1c358fdd516c6","modified":1558078752648},{"_id":"public/tags/springboot/index.html","hash":"00fcde4d979ba5a49a1d42fb1cc56d39c079fcc8","modified":1558078752649},{"_id":"public/tags/security/index.html","hash":"d24b2caa618a14f06a3becb91d7c23f71bbe061b","modified":1558078752649},{"_id":"public/tags/spring/index.html","hash":"c9508a68ea951f321e67ca713197c16904a9e686","modified":1558078752649},{"_id":"public/tags/thread/index.html","hash":"f3d1cabef19ba4910602544b459a8bf8fc68261c","modified":1558078752649},{"_id":"public/tags/tool/index.html","hash":"a4002520975ad173af870f01acefe4c28c3ea0d1","modified":1558078752649},{"_id":"public/tags/netty/index.html","hash":"7f0e2a5ab6e5291cbedd699da3021733397cd7f3","modified":1558078752649},{"_id":"public/CNAME","hash":"c44c3538924d2ff9b19019cab752b2ce08302c05","modified":1558078752655},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1558078752655},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1558078752655},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1558078752655},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1558078752655},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1558078752655},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1558078752655},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1558078752655},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1558078752655},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1558078752655},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1558078753730},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1558078753730},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1558078753731},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1558078753737}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"注解及其反射机制","date":"2019-05-15T08:53:32.000Z","_content":"\n# 注解相关知识\n\n## 元注解\n\n1. @Retention：生命周期，RetentionPolicy.SOURCE 注解只在源码阶段保留，RetentionPolicy.CLASS 注解只被保留到编译进行的时候，它并不会被加载到 JVM中，RetentionPolicy.RUNTIME 注解可以保留到程序运行的时候\n2. @Documented：作用是能够将注解中的元素包含到 Javadoc 中去。\n3. @Target：指定了注解运用的地方。ElementType.ANNOTATION_TYPE 可以给一个注解进行注解，ElementType.CONSTRUCTOR 可以给构造方法，ElementType.FIELD 可以给属性，ElementType.LOCAL_VARIABLE 可以给局部变量，ElementType.METHOD 可以给方法，ElementType.PACKAGE 可以给一个包，ElementType.PARAMETER 可以给一个方法内的参数，ElementType.TYPE 可以给一个类型进行注解，比如类、接口、枚举\n4. @Inherited：一个超类被 @Inherited 注解过的注解进行注解的话，那么如果它的子类没有被任何注解应用的话，那么这个子类就继承了超类的注解。\n5. @Repeatable ：可重复注解\n\n<!--more-->\n\n## 注解的属性\n\n注解的属性也叫做成员变量。注解只有成员变量，没有方法。注解的成员变量在注解的定义中以“无形参的方法”形式来声明，其方法名定义了该成员变量的名字，其返回值定义了该成员变量的类型。\n\n```java\npublic class BootStaterTestApplicationTests {\n    @Test\n    public void contextLoads() {\n        @muggle(test = \"ss\")\n        String test=\"ss\";\n    }\n}\n\n@Target(ElementType.LOCAL_VARIABLE)\n@interface muggle{\n    String test();\n}\n```\n\n解中属性可以有默认值，默认值需要用 default 关键值指定。\n\n```java\n@Target(ElementType.LOCAL_VARIABLE)\n@interface muggle{\n    String test()default \"test\";\n}\n```\n\n一些缺省写法略\n\n## 反射获取注解\n\n类注解\n\n```java\n\t\ttest test = new test();\n        Class<? extends com.muggle.bootstatertest.test> aClass = test.getClass();\n        Class<Muggle> muggleClass = Muggle.class;\n        boolean annotationPresent = aClass.isAnnotationPresent(muggleClass);\n        System.out.println(annotationPresent);\n        Annotation[] annotations = aClass.getAnnotations();\n        Muggle annotation = aClass.getAnnotation(Muggle.class);\n```\n\n属性注解\n\n```java\nField[] fields = aClass.getFields();\nAnnotation[] annotations1 = fields[0].getAnnotations();\n```\n\n方法注解\n\n```java\nMethod[] methods = aClass.getMethods();\nMethod[] declaredMethod = aClass.getDeclaredMethods();\nAnnotation[] declaredAnnotations = methods[0].getDeclaredAnnotations();\n```\n\n","source":"_posts/annotation.md","raw":"---\ntitle: 注解及其反射机制\ndate: 2019-05-15 16:53:32\ntags: javase\n---\n\n# 注解相关知识\n\n## 元注解\n\n1. @Retention：生命周期，RetentionPolicy.SOURCE 注解只在源码阶段保留，RetentionPolicy.CLASS 注解只被保留到编译进行的时候，它并不会被加载到 JVM中，RetentionPolicy.RUNTIME 注解可以保留到程序运行的时候\n2. @Documented：作用是能够将注解中的元素包含到 Javadoc 中去。\n3. @Target：指定了注解运用的地方。ElementType.ANNOTATION_TYPE 可以给一个注解进行注解，ElementType.CONSTRUCTOR 可以给构造方法，ElementType.FIELD 可以给属性，ElementType.LOCAL_VARIABLE 可以给局部变量，ElementType.METHOD 可以给方法，ElementType.PACKAGE 可以给一个包，ElementType.PARAMETER 可以给一个方法内的参数，ElementType.TYPE 可以给一个类型进行注解，比如类、接口、枚举\n4. @Inherited：一个超类被 @Inherited 注解过的注解进行注解的话，那么如果它的子类没有被任何注解应用的话，那么这个子类就继承了超类的注解。\n5. @Repeatable ：可重复注解\n\n<!--more-->\n\n## 注解的属性\n\n注解的属性也叫做成员变量。注解只有成员变量，没有方法。注解的成员变量在注解的定义中以“无形参的方法”形式来声明，其方法名定义了该成员变量的名字，其返回值定义了该成员变量的类型。\n\n```java\npublic class BootStaterTestApplicationTests {\n    @Test\n    public void contextLoads() {\n        @muggle(test = \"ss\")\n        String test=\"ss\";\n    }\n}\n\n@Target(ElementType.LOCAL_VARIABLE)\n@interface muggle{\n    String test();\n}\n```\n\n解中属性可以有默认值，默认值需要用 default 关键值指定。\n\n```java\n@Target(ElementType.LOCAL_VARIABLE)\n@interface muggle{\n    String test()default \"test\";\n}\n```\n\n一些缺省写法略\n\n## 反射获取注解\n\n类注解\n\n```java\n\t\ttest test = new test();\n        Class<? extends com.muggle.bootstatertest.test> aClass = test.getClass();\n        Class<Muggle> muggleClass = Muggle.class;\n        boolean annotationPresent = aClass.isAnnotationPresent(muggleClass);\n        System.out.println(annotationPresent);\n        Annotation[] annotations = aClass.getAnnotations();\n        Muggle annotation = aClass.getAnnotation(Muggle.class);\n```\n\n属性注解\n\n```java\nField[] fields = aClass.getFields();\nAnnotation[] annotations1 = fields[0].getAnnotations();\n```\n\n方法注解\n\n```java\nMethod[] methods = aClass.getMethods();\nMethod[] declaredMethod = aClass.getDeclaredMethods();\nAnnotation[] declaredAnnotations = methods[0].getDeclaredAnnotations();\n```\n\n","slug":"annotation","published":1,"updated":"2019-05-17T01:19:09.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxrm0000vovma8jbyfj1","content":"<h1 id=\"注解相关知识\"><a href=\"#注解相关知识\" class=\"headerlink\" title=\"注解相关知识\"></a>注解相关知识</h1><h2 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h2><ol>\n<li>@Retention：生命周期，RetentionPolicy.SOURCE 注解只在源码阶段保留，RetentionPolicy.CLASS 注解只被保留到编译进行的时候，它并不会被加载到 JVM中，RetentionPolicy.RUNTIME 注解可以保留到程序运行的时候</li>\n<li>@Documented：作用是能够将注解中的元素包含到 Javadoc 中去。</li>\n<li>@Target：指定了注解运用的地方。ElementType.ANNOTATION_TYPE 可以给一个注解进行注解，ElementType.CONSTRUCTOR 可以给构造方法，ElementType.FIELD 可以给属性，ElementType.LOCAL_VARIABLE 可以给局部变量，ElementType.METHOD 可以给方法，ElementType.PACKAGE 可以给一个包，ElementType.PARAMETER 可以给一个方法内的参数，ElementType.TYPE 可以给一个类型进行注解，比如类、接口、枚举</li>\n<li>@Inherited：一个超类被 @Inherited 注解过的注解进行注解的话，那么如果它的子类没有被任何注解应用的话，那么这个子类就继承了超类的注解。</li>\n<li>@Repeatable ：可重复注解</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"注解的属性\"><a href=\"#注解的属性\" class=\"headerlink\" title=\"注解的属性\"></a>注解的属性</h2><p>注解的属性也叫做成员变量。注解只有成员变量，没有方法。注解的成员变量在注解的定义中以“无形参的方法”形式来声明，其方法名定义了该成员变量的名字，其返回值定义了该成员变量的类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BootStaterTestApplicationTests</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@muggle</span>(test = <span class=\"string\">\"ss\"</span>)</span><br><span class=\"line\">        String test=<span class=\"string\">\"ss\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.LOCAL_VARIABLE)</span><br><span class=\"line\"><span class=\"meta\">@interface</span> muggle&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">test</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解中属性可以有默认值，默认值需要用 default 关键值指定。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.LOCAL_VARIABLE)</span><br><span class=\"line\"><span class=\"meta\">@interface</span> muggle&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">test</span><span class=\"params\">()</span><span class=\"keyword\">default</span> \"test\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一些缺省写法略</p>\n<h2 id=\"反射获取注解\"><a href=\"#反射获取注解\" class=\"headerlink\" title=\"反射获取注解\"></a>反射获取注解</h2><p>类注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test test = <span class=\"keyword\">new</span> test();</span><br><span class=\"line\">      Class&lt;? extends com.muggle.bootstatertest.test&gt; aClass = test.getClass();</span><br><span class=\"line\">      Class&lt;Muggle&gt; muggleClass = Muggle.class;</span><br><span class=\"line\">      <span class=\"keyword\">boolean</span> annotationPresent = aClass.isAnnotationPresent(muggleClass);</span><br><span class=\"line\">      System.out.println(annotationPresent);</span><br><span class=\"line\">      Annotation[] annotations = aClass.getAnnotations();</span><br><span class=\"line\">      Muggle annotation = aClass.getAnnotation(Muggle.class);</span><br></pre></td></tr></table></figure>\n<p>属性注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Field[] fields = aClass.getFields();</span><br><span class=\"line\">Annotation[] annotations1 = fields[<span class=\"number\">0</span>].getAnnotations();</span><br></pre></td></tr></table></figure>\n<p>方法注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Method[] methods = aClass.getMethods();</span><br><span class=\"line\">Method[] declaredMethod = aClass.getDeclaredMethods();</span><br><span class=\"line\">Annotation[] declaredAnnotations = methods[<span class=\"number\">0</span>].getDeclaredAnnotations();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"注解相关知识\"><a href=\"#注解相关知识\" class=\"headerlink\" title=\"注解相关知识\"></a>注解相关知识</h1><h2 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h2><ol>\n<li>@Retention：生命周期，RetentionPolicy.SOURCE 注解只在源码阶段保留，RetentionPolicy.CLASS 注解只被保留到编译进行的时候，它并不会被加载到 JVM中，RetentionPolicy.RUNTIME 注解可以保留到程序运行的时候</li>\n<li>@Documented：作用是能够将注解中的元素包含到 Javadoc 中去。</li>\n<li>@Target：指定了注解运用的地方。ElementType.ANNOTATION_TYPE 可以给一个注解进行注解，ElementType.CONSTRUCTOR 可以给构造方法，ElementType.FIELD 可以给属性，ElementType.LOCAL_VARIABLE 可以给局部变量，ElementType.METHOD 可以给方法，ElementType.PACKAGE 可以给一个包，ElementType.PARAMETER 可以给一个方法内的参数，ElementType.TYPE 可以给一个类型进行注解，比如类、接口、枚举</li>\n<li>@Inherited：一个超类被 @Inherited 注解过的注解进行注解的话，那么如果它的子类没有被任何注解应用的话，那么这个子类就继承了超类的注解。</li>\n<li>@Repeatable ：可重复注解</li>\n</ol>","more":"<h2 id=\"注解的属性\"><a href=\"#注解的属性\" class=\"headerlink\" title=\"注解的属性\"></a>注解的属性</h2><p>注解的属性也叫做成员变量。注解只有成员变量，没有方法。注解的成员变量在注解的定义中以“无形参的方法”形式来声明，其方法名定义了该成员变量的名字，其返回值定义了该成员变量的类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BootStaterTestApplicationTests</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@muggle</span>(test = <span class=\"string\">\"ss\"</span>)</span><br><span class=\"line\">        String test=<span class=\"string\">\"ss\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.LOCAL_VARIABLE)</span><br><span class=\"line\"><span class=\"meta\">@interface</span> muggle&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">test</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解中属性可以有默认值，默认值需要用 default 关键值指定。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.LOCAL_VARIABLE)</span><br><span class=\"line\"><span class=\"meta\">@interface</span> muggle&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">test</span><span class=\"params\">()</span><span class=\"keyword\">default</span> \"test\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一些缺省写法略</p>\n<h2 id=\"反射获取注解\"><a href=\"#反射获取注解\" class=\"headerlink\" title=\"反射获取注解\"></a>反射获取注解</h2><p>类注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test test = <span class=\"keyword\">new</span> test();</span><br><span class=\"line\">      Class&lt;? extends com.muggle.bootstatertest.test&gt; aClass = test.getClass();</span><br><span class=\"line\">      Class&lt;Muggle&gt; muggleClass = Muggle.class;</span><br><span class=\"line\">      <span class=\"keyword\">boolean</span> annotationPresent = aClass.isAnnotationPresent(muggleClass);</span><br><span class=\"line\">      System.out.println(annotationPresent);</span><br><span class=\"line\">      Annotation[] annotations = aClass.getAnnotations();</span><br><span class=\"line\">      Muggle annotation = aClass.getAnnotation(Muggle.class);</span><br></pre></td></tr></table></figure>\n<p>属性注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Field[] fields = aClass.getFields();</span><br><span class=\"line\">Annotation[] annotations1 = fields[<span class=\"number\">0</span>].getAnnotations();</span><br></pre></td></tr></table></figure>\n<p>方法注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Method[] methods = aClass.getMethods();</span><br><span class=\"line\">Method[] declaredMethod = aClass.getDeclaredMethods();</span><br><span class=\"line\">Annotation[] declaredAnnotations = methods[<span class=\"number\">0</span>].getDeclaredAnnotations();</span><br></pre></td></tr></table></figure>"},{"title":"设计模式笔记","date":"2019-04-25T01:49:37.000Z","_content":"\n作者：muggle\n\n# 设计模式的分类\n\n## 创建型模式\n\n共五种：\n\n- 工厂方法模式\n- 抽象工厂模式\n- 单例模式\n- 建造者模式\n- 原型模式\n\n<!--more-->\n\n## 结构型模式\n\n共七种：\n\n- 适配器模式\n- 装饰器模式\n- 代理模式\n- 外观模式\n- 桥接模式\n- 组合模式\n- 享元模式\n\n## 行为型模式\n\n共十一种：\n\n- 策略模式\n\n- 模板方法模式\n\n- 观察者模式\n\n- 迭代子模式\n\n- 责任链模式\n\n- 命令模式\n\n- 备忘录模式\n\n- 状态模式\n\n- 访问者模式\n\n- 中介者模式\n\n- 解释器模式\n# 设计原则\n\n设计模式的最终目的是为了实现代码设计的六大基本原则的，我们在使用设计模式的时候千万要记住这一点，不用为了使用设计模式而去强行套设计模式\n\n## 单一职责原则\n\n不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。\n\n当需求变化时，将通过更改职责相关的类来体现。如果一个类拥有多于一个的职责，则多个职责耦合在一起，会有多于一个原因来导致这个类发生变化。一个职责的变化可能会影响到其他的职责，另外，把多个职责耦合在一起，影响复用性。\n\n单一职责原则解决的问题：\n\n> - 降低类的复杂度；\n> - 提高类的可读性，提高系统的可维护性；\n> - 降低变更引起的风险（降低对其他功能的影响）。\n\n## 里氏替换原则\n\n任何基类可以出现的地方，子类一定可以出现。\n\n只有当子类可以替换掉父类， 代码功能不受到影响时，父类才能真正被复用， 而子类也能够在父类的基础上增加新的行为；从而达到代码复用与扩展的目的；里氏替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。\n\n里氏替换原则解决的问题：\n\n> - 增强程序的健壮性， 版本升级时也可以保持非常好的兼容性。\n> - 提高代码复用率\n\n## 依赖倒置原则\n\n这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。\n\n\n\n\n\n\n\n-------\n\n`$ ssh-keygen -t rsa -C ``\"youremail@example.com\"`\n\n```shell\n$ git push -u origin master\ngit remote add -f <子仓库名> <子仓库地址>\ngit subtree add --prefix=<子目录名> <子仓库名> <分支> --squash\n$git subtree add --prefix=ai ai master --squash\n语法：git subtree pull --prefix=<子目录名> <远程分支> <分支> --squash\n```\n\n本地操作远程\n\n```\ngit remote\ngit  remote -v\ngit remote add origin ssh://software@172.16.0.30/~/yafeng/.git\n```","source":"_posts/design-1.md","raw":"---\ntitle: 设计模式笔记\ndate: 2019-04-25 09:49:37\ntags: 设计模式\n---\n\n作者：muggle\n\n# 设计模式的分类\n\n## 创建型模式\n\n共五种：\n\n- 工厂方法模式\n- 抽象工厂模式\n- 单例模式\n- 建造者模式\n- 原型模式\n\n<!--more-->\n\n## 结构型模式\n\n共七种：\n\n- 适配器模式\n- 装饰器模式\n- 代理模式\n- 外观模式\n- 桥接模式\n- 组合模式\n- 享元模式\n\n## 行为型模式\n\n共十一种：\n\n- 策略模式\n\n- 模板方法模式\n\n- 观察者模式\n\n- 迭代子模式\n\n- 责任链模式\n\n- 命令模式\n\n- 备忘录模式\n\n- 状态模式\n\n- 访问者模式\n\n- 中介者模式\n\n- 解释器模式\n# 设计原则\n\n设计模式的最终目的是为了实现代码设计的六大基本原则的，我们在使用设计模式的时候千万要记住这一点，不用为了使用设计模式而去强行套设计模式\n\n## 单一职责原则\n\n不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。\n\n当需求变化时，将通过更改职责相关的类来体现。如果一个类拥有多于一个的职责，则多个职责耦合在一起，会有多于一个原因来导致这个类发生变化。一个职责的变化可能会影响到其他的职责，另外，把多个职责耦合在一起，影响复用性。\n\n单一职责原则解决的问题：\n\n> - 降低类的复杂度；\n> - 提高类的可读性，提高系统的可维护性；\n> - 降低变更引起的风险（降低对其他功能的影响）。\n\n## 里氏替换原则\n\n任何基类可以出现的地方，子类一定可以出现。\n\n只有当子类可以替换掉父类， 代码功能不受到影响时，父类才能真正被复用， 而子类也能够在父类的基础上增加新的行为；从而达到代码复用与扩展的目的；里氏替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。\n\n里氏替换原则解决的问题：\n\n> - 增强程序的健壮性， 版本升级时也可以保持非常好的兼容性。\n> - 提高代码复用率\n\n## 依赖倒置原则\n\n这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。\n\n\n\n\n\n\n\n-------\n\n`$ ssh-keygen -t rsa -C ``\"youremail@example.com\"`\n\n```shell\n$ git push -u origin master\ngit remote add -f <子仓库名> <子仓库地址>\ngit subtree add --prefix=<子目录名> <子仓库名> <分支> --squash\n$git subtree add --prefix=ai ai master --squash\n语法：git subtree pull --prefix=<子目录名> <远程分支> <分支> --squash\n```\n\n本地操作远程\n\n```\ngit remote\ngit  remote -v\ngit remote add origin ssh://software@172.16.0.30/~/yafeng/.git\n```","slug":"design-1","published":1,"updated":"2019-05-09T01:16:28.020Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxrr0001vovmaq9wcgpc","content":"<p>作者：muggle</p>\n<h1 id=\"设计模式的分类\"><a href=\"#设计模式的分类\" class=\"headerlink\" title=\"设计模式的分类\"></a>设计模式的分类</h1><h2 id=\"创建型模式\"><a href=\"#创建型模式\" class=\"headerlink\" title=\"创建型模式\"></a>创建型模式</h2><p>共五种：</p>\n<ul>\n<li>工厂方法模式</li>\n<li>抽象工厂模式</li>\n<li>单例模式</li>\n<li>建造者模式</li>\n<li>原型模式</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"结构型模式\"><a href=\"#结构型模式\" class=\"headerlink\" title=\"结构型模式\"></a>结构型模式</h2><p>共七种：</p>\n<ul>\n<li>适配器模式</li>\n<li>装饰器模式</li>\n<li>代理模式</li>\n<li>外观模式</li>\n<li>桥接模式</li>\n<li>组合模式</li>\n<li>享元模式</li>\n</ul>\n<h2 id=\"行为型模式\"><a href=\"#行为型模式\" class=\"headerlink\" title=\"行为型模式\"></a>行为型模式</h2><p>共十一种：</p>\n<ul>\n<li><p>策略模式</p>\n</li>\n<li><p>模板方法模式</p>\n</li>\n<li><p>观察者模式</p>\n</li>\n<li><p>迭代子模式</p>\n</li>\n<li><p>责任链模式</p>\n</li>\n<li><p>命令模式</p>\n</li>\n<li><p>备忘录模式</p>\n</li>\n<li><p>状态模式</p>\n</li>\n<li><p>访问者模式</p>\n</li>\n<li><p>中介者模式</p>\n</li>\n<li><p>解释器模式</p>\n<h1 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h1></li>\n</ul>\n<p>设计模式的最终目的是为了实现代码设计的六大基本原则的，我们在使用设计模式的时候千万要记住这一点，不用为了使用设计模式而去强行套设计模式</p>\n<h2 id=\"单一职责原则\"><a href=\"#单一职责原则\" class=\"headerlink\" title=\"单一职责原则\"></a>单一职责原则</h2><p>不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。</p>\n<p>当需求变化时，将通过更改职责相关的类来体现。如果一个类拥有多于一个的职责，则多个职责耦合在一起，会有多于一个原因来导致这个类发生变化。一个职责的变化可能会影响到其他的职责，另外，把多个职责耦合在一起，影响复用性。</p>\n<p>单一职责原则解决的问题：</p>\n<blockquote>\n<ul>\n<li>降低类的复杂度；</li>\n<li>提高类的可读性，提高系统的可维护性；</li>\n<li>降低变更引起的风险（降低对其他功能的影响）。</li>\n</ul>\n</blockquote>\n<h2 id=\"里氏替换原则\"><a href=\"#里氏替换原则\" class=\"headerlink\" title=\"里氏替换原则\"></a>里氏替换原则</h2><p>任何基类可以出现的地方，子类一定可以出现。</p>\n<p>只有当子类可以替换掉父类， 代码功能不受到影响时，父类才能真正被复用， 而子类也能够在父类的基础上增加新的行为；从而达到代码复用与扩展的目的；里氏替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</p>\n<p>里氏替换原则解决的问题：</p>\n<blockquote>\n<ul>\n<li>增强程序的健壮性， 版本升级时也可以保持非常好的兼容性。</li>\n<li>提高代码复用率</li>\n</ul>\n</blockquote>\n<h2 id=\"依赖倒置原则\"><a href=\"#依赖倒置原则\" class=\"headerlink\" title=\"依赖倒置原则\"></a>依赖倒置原则</h2><p>这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。</p>\n<hr>\n<p><code>$ ssh-keygen -t rsa -C `</code>“<a href=\"mailto:youremail@example.com\" target=\"_blank\" rel=\"noopener\">youremail@example.com</a>“`</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git push -u origin master</span><br><span class=\"line\">git remote add -f &lt;子仓库名&gt; &lt;子仓库地址&gt;</span><br><span class=\"line\">git subtree add --prefix=&lt;子目录名&gt; &lt;子仓库名&gt; &lt;分支&gt; --squash</span><br><span class=\"line\"><span class=\"meta\">$</span>git subtree add --prefix=ai ai master --squash</span><br><span class=\"line\">语法：git subtree pull --prefix=&lt;子目录名&gt; &lt;远程分支&gt; &lt;分支&gt; --squash</span><br></pre></td></tr></table></figure>\n<p>本地操作远程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote</span><br><span class=\"line\">git  remote -v</span><br><span class=\"line\">git remote add origin ssh://software@172.16.0.30/~/yafeng/.git</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>作者：muggle</p>\n<h1 id=\"设计模式的分类\"><a href=\"#设计模式的分类\" class=\"headerlink\" title=\"设计模式的分类\"></a>设计模式的分类</h1><h2 id=\"创建型模式\"><a href=\"#创建型模式\" class=\"headerlink\" title=\"创建型模式\"></a>创建型模式</h2><p>共五种：</p>\n<ul>\n<li>工厂方法模式</li>\n<li>抽象工厂模式</li>\n<li>单例模式</li>\n<li>建造者模式</li>\n<li>原型模式</li>\n</ul>","more":"<h2 id=\"结构型模式\"><a href=\"#结构型模式\" class=\"headerlink\" title=\"结构型模式\"></a>结构型模式</h2><p>共七种：</p>\n<ul>\n<li>适配器模式</li>\n<li>装饰器模式</li>\n<li>代理模式</li>\n<li>外观模式</li>\n<li>桥接模式</li>\n<li>组合模式</li>\n<li>享元模式</li>\n</ul>\n<h2 id=\"行为型模式\"><a href=\"#行为型模式\" class=\"headerlink\" title=\"行为型模式\"></a>行为型模式</h2><p>共十一种：</p>\n<ul>\n<li><p>策略模式</p>\n</li>\n<li><p>模板方法模式</p>\n</li>\n<li><p>观察者模式</p>\n</li>\n<li><p>迭代子模式</p>\n</li>\n<li><p>责任链模式</p>\n</li>\n<li><p>命令模式</p>\n</li>\n<li><p>备忘录模式</p>\n</li>\n<li><p>状态模式</p>\n</li>\n<li><p>访问者模式</p>\n</li>\n<li><p>中介者模式</p>\n</li>\n<li><p>解释器模式</p>\n<h1 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h1></li>\n</ul>\n<p>设计模式的最终目的是为了实现代码设计的六大基本原则的，我们在使用设计模式的时候千万要记住这一点，不用为了使用设计模式而去强行套设计模式</p>\n<h2 id=\"单一职责原则\"><a href=\"#单一职责原则\" class=\"headerlink\" title=\"单一职责原则\"></a>单一职责原则</h2><p>不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。</p>\n<p>当需求变化时，将通过更改职责相关的类来体现。如果一个类拥有多于一个的职责，则多个职责耦合在一起，会有多于一个原因来导致这个类发生变化。一个职责的变化可能会影响到其他的职责，另外，把多个职责耦合在一起，影响复用性。</p>\n<p>单一职责原则解决的问题：</p>\n<blockquote>\n<ul>\n<li>降低类的复杂度；</li>\n<li>提高类的可读性，提高系统的可维护性；</li>\n<li>降低变更引起的风险（降低对其他功能的影响）。</li>\n</ul>\n</blockquote>\n<h2 id=\"里氏替换原则\"><a href=\"#里氏替换原则\" class=\"headerlink\" title=\"里氏替换原则\"></a>里氏替换原则</h2><p>任何基类可以出现的地方，子类一定可以出现。</p>\n<p>只有当子类可以替换掉父类， 代码功能不受到影响时，父类才能真正被复用， 而子类也能够在父类的基础上增加新的行为；从而达到代码复用与扩展的目的；里氏替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</p>\n<p>里氏替换原则解决的问题：</p>\n<blockquote>\n<ul>\n<li>增强程序的健壮性， 版本升级时也可以保持非常好的兼容性。</li>\n<li>提高代码复用率</li>\n</ul>\n</blockquote>\n<h2 id=\"依赖倒置原则\"><a href=\"#依赖倒置原则\" class=\"headerlink\" title=\"依赖倒置原则\"></a>依赖倒置原则</h2><p>这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。</p>\n<hr>\n<p><code>$ ssh-keygen -t rsa -C `</code>“<a href=\"mailto:youremail@example.com\" target=\"_blank\" rel=\"noopener\">youremail@example.com</a>“`</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git push -u origin master</span><br><span class=\"line\">git remote add -f &lt;子仓库名&gt; &lt;子仓库地址&gt;</span><br><span class=\"line\">git subtree add --prefix=&lt;子目录名&gt; &lt;子仓库名&gt; &lt;分支&gt; --squash</span><br><span class=\"line\"><span class=\"meta\">$</span>git subtree add --prefix=ai ai master --squash</span><br><span class=\"line\">语法：git subtree pull --prefix=&lt;子目录名&gt; &lt;远程分支&gt; &lt;分支&gt; --squash</span><br></pre></td></tr></table></figure>\n<p>本地操作远程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote</span><br><span class=\"line\">git  remote -v</span><br><span class=\"line\">git remote add origin ssh://software@172.16.0.30/~/yafeng/.git</span><br></pre></td></tr></table></figure>"},{"title":"java动态代理","date":"2019-05-13T01:58:38.000Z","_content":"\n## 动态代理\n### 什么是代理\n&emsp; &emsp;代理是一种软件设计模式，这种设计模式不直接访问被代理对象，而访问被代理对象的方法，详尽的解释可参考《java设计模式之禅》，里面的解释还是很通俗的。给个《java设计模式之禅》下载地址：https://pan.baidu.com/s/1GdFmZSx67HjKl_OhkwjqNg\n\n&emsp; &emsp;在JDK中提供了实现动态代理模式的机制，cglib也是一个用于实现动态代理的框架，在这里我介绍jdk自带的动态代理机制是如何使用的。先上代码再慢慢解释：\n\n<!--more-->\n\n```java\n// 定义一个接口，接口中只有一个抽象方法，这个方法便是将要被代理的方法\npublic interface Subject {\n  String test(String string);\n}\n\n```\n\n```java\n// 定义 一个类实现这个方法，方法里写上自己的逻辑。\npublic class SubjectImpl implements Subject {\n\n  @Override\n  public String test(String string) {\n      String test=string+string;\n      return test;\n  }\n}\n```\n\n```java\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\n// 定义一个代理类，这个代理必须要实现invocaHandler 接口，用以指定这个类为一个代理类\npublic class MyProxy implements InvocationHandler {\n    private Object target;\n    public MyProxy( Object target){\n        this.target=target;\n    }\n    // 实现 invoke方法，这个方法将是后面代码中实际执行的方法\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        System.out.println(\"开始执行动态代理\");\n        Object result=method.invoke(target,args);\n        return  result;\n    }\n    // Proxy类为反射机制中的一个类，用于获得代理对象\n    public <T> T getProxy(){\n      /* newProxyInstance方法的参数解释：\n      ** 被代理对象的类加载器：target.getClass().getClassLoader()\n      ** 被代理的方法：target.getClass().getInterfaces()\n      **代理对象：this\n      */\n        return (T) Proxy.newProxyInstance(target.getClass().getClassLoader(),target.getClass().getInterfaces(),this);\n    }\n}\n```\n\n```java\npublic static void main(String[] args) {\n        // 创建一个被代理对象\n       Subject subject=new SubjectImpl();\n       // 创建一个代理对象\n       Subject proxy=new MyProxy(subject).getProxy();\n       // 调用代理的方法\n       System.out.println(proxy.test(\"test\"));\n   }\n```\n输出结果：\n```java\n开始执行动态代理\ntesttest\n\n```\n&emsp; &emsp;我们知道spring 的AOP是通过动态代理实现的,现在让我们好好分析一下动态代理，示例中定义了一个接口 Subject，一个继承接口的SubjectImpl类,一个实现了InvocationHandler的MyProxy类，并调用了Proxy.newProxyInstance方法。Subject定义了将要被代理执行的方法，SubjectImpl是被代理的类（雇主），MyProxy类是代理执行的类（跑腿的），它的invoke(Object proxy, Method method, Object[] args)方法便是实际被执行的方法，它的第一个参数proxy作用：\n> - 可以使用反射获取代理对象的信息（也就是proxy.getClass().getName()）\n> - 可以将代理对象返回以进行连续调用，这就是proxy存在的目的，因为this并不是代理对象(MyProxy虽然是代理的类，但代理对象是 Proxy.newProxyInstance方法生成的。)。\n\nmethod 是被代理的方法类型对象，args是方法的参数数组。通过Proxy.newProxyInstance生成代理类后就可以执行其中的代理方法了。\n\n\n&emsp; &emsp;如果我们直接执行SubjectImpl.test()方法则只返回一个字符串，但使用动态代理我们可以在方法执行前和执行后加上自己的逻辑，这样大大提高了代码的复用性；想一想，如果你写了一堆方法，方法里很多代码是一样的，这样的代码是不是很丑？好，现在你把重复的代码单独抽出来做一个方法，但这样你的每个方法都被写死了，和那个公共的方法耦合在一起，这样很不灵活。如果我突然想一部分方法的公共方法是a(),一部分方法的公共方法是b(),那改起来很麻烦，扩展性很差。使用动态代理就很好的解决了这个问题，被代理对象可以任意指定，代理的逻辑可以任意实现，二者互相独立互不影响，并且可以由客户端任意进行组合，这就是所谓的动态。","source":"_posts/gclib.md","raw":"---\ntitle: java动态代理\ndate: 2019-05-13 09:58:38\ntags: javase\n---\n\n## 动态代理\n### 什么是代理\n&emsp; &emsp;代理是一种软件设计模式，这种设计模式不直接访问被代理对象，而访问被代理对象的方法，详尽的解释可参考《java设计模式之禅》，里面的解释还是很通俗的。给个《java设计模式之禅》下载地址：https://pan.baidu.com/s/1GdFmZSx67HjKl_OhkwjqNg\n\n&emsp; &emsp;在JDK中提供了实现动态代理模式的机制，cglib也是一个用于实现动态代理的框架，在这里我介绍jdk自带的动态代理机制是如何使用的。先上代码再慢慢解释：\n\n<!--more-->\n\n```java\n// 定义一个接口，接口中只有一个抽象方法，这个方法便是将要被代理的方法\npublic interface Subject {\n  String test(String string);\n}\n\n```\n\n```java\n// 定义 一个类实现这个方法，方法里写上自己的逻辑。\npublic class SubjectImpl implements Subject {\n\n  @Override\n  public String test(String string) {\n      String test=string+string;\n      return test;\n  }\n}\n```\n\n```java\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\n// 定义一个代理类，这个代理必须要实现invocaHandler 接口，用以指定这个类为一个代理类\npublic class MyProxy implements InvocationHandler {\n    private Object target;\n    public MyProxy( Object target){\n        this.target=target;\n    }\n    // 实现 invoke方法，这个方法将是后面代码中实际执行的方法\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        System.out.println(\"开始执行动态代理\");\n        Object result=method.invoke(target,args);\n        return  result;\n    }\n    // Proxy类为反射机制中的一个类，用于获得代理对象\n    public <T> T getProxy(){\n      /* newProxyInstance方法的参数解释：\n      ** 被代理对象的类加载器：target.getClass().getClassLoader()\n      ** 被代理的方法：target.getClass().getInterfaces()\n      **代理对象：this\n      */\n        return (T) Proxy.newProxyInstance(target.getClass().getClassLoader(),target.getClass().getInterfaces(),this);\n    }\n}\n```\n\n```java\npublic static void main(String[] args) {\n        // 创建一个被代理对象\n       Subject subject=new SubjectImpl();\n       // 创建一个代理对象\n       Subject proxy=new MyProxy(subject).getProxy();\n       // 调用代理的方法\n       System.out.println(proxy.test(\"test\"));\n   }\n```\n输出结果：\n```java\n开始执行动态代理\ntesttest\n\n```\n&emsp; &emsp;我们知道spring 的AOP是通过动态代理实现的,现在让我们好好分析一下动态代理，示例中定义了一个接口 Subject，一个继承接口的SubjectImpl类,一个实现了InvocationHandler的MyProxy类，并调用了Proxy.newProxyInstance方法。Subject定义了将要被代理执行的方法，SubjectImpl是被代理的类（雇主），MyProxy类是代理执行的类（跑腿的），它的invoke(Object proxy, Method method, Object[] args)方法便是实际被执行的方法，它的第一个参数proxy作用：\n> - 可以使用反射获取代理对象的信息（也就是proxy.getClass().getName()）\n> - 可以将代理对象返回以进行连续调用，这就是proxy存在的目的，因为this并不是代理对象(MyProxy虽然是代理的类，但代理对象是 Proxy.newProxyInstance方法生成的。)。\n\nmethod 是被代理的方法类型对象，args是方法的参数数组。通过Proxy.newProxyInstance生成代理类后就可以执行其中的代理方法了。\n\n\n&emsp; &emsp;如果我们直接执行SubjectImpl.test()方法则只返回一个字符串，但使用动态代理我们可以在方法执行前和执行后加上自己的逻辑，这样大大提高了代码的复用性；想一想，如果你写了一堆方法，方法里很多代码是一样的，这样的代码是不是很丑？好，现在你把重复的代码单独抽出来做一个方法，但这样你的每个方法都被写死了，和那个公共的方法耦合在一起，这样很不灵活。如果我突然想一部分方法的公共方法是a(),一部分方法的公共方法是b(),那改起来很麻烦，扩展性很差。使用动态代理就很好的解决了这个问题，被代理对象可以任意指定，代理的逻辑可以任意实现，二者互相独立互不影响，并且可以由客户端任意进行组合，这就是所谓的动态。","slug":"gclib","published":1,"updated":"2019-05-17T01:19:15.238Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxru0003vovmov9ypopc","content":"<h2 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h2><h3 id=\"什么是代理\"><a href=\"#什么是代理\" class=\"headerlink\" title=\"什么是代理\"></a>什么是代理</h3><p>&emsp; &emsp;代理是一种软件设计模式，这种设计模式不直接访问被代理对象，而访问被代理对象的方法，详尽的解释可参考《java设计模式之禅》，里面的解释还是很通俗的。给个《java设计模式之禅》下载地址：<a href=\"https://pan.baidu.com/s/1GdFmZSx67HjKl_OhkwjqNg\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1GdFmZSx67HjKl_OhkwjqNg</a></p>\n<p>&emsp; &emsp;在JDK中提供了实现动态代理模式的机制，cglib也是一个用于实现动态代理的框架，在这里我介绍jdk自带的动态代理机制是如何使用的。先上代码再慢慢解释：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个接口，接口中只有一个抽象方法，这个方法便是将要被代理的方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">String <span class=\"title\">test</span><span class=\"params\">(String string)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义 一个类实现这个方法，方法里写上自己的逻辑。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubjectImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">(String string)</span> </span>&#123;</span><br><span class=\"line\">      String test=string+string;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> test;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"><span class=\"comment\">// 定义一个代理类，这个代理必须要实现invocaHandler 接口，用以指定这个类为一个代理类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyProxy</span><span class=\"params\">( Object target)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target=target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 实现 invoke方法，这个方法将是后面代码中实际执行的方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"开始执行动态代理\"</span>);</span><br><span class=\"line\">        Object result=method.invoke(target,args);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Proxy类为反射机制中的一个类，用于获得代理对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getProxy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">/* newProxyInstance方法的参数解释：</span></span><br><span class=\"line\"><span class=\"comment\">      ** 被代理对象的类加载器：target.getClass().getClassLoader()</span></span><br><span class=\"line\"><span class=\"comment\">      ** 被代理的方法：target.getClass().getInterfaces()</span></span><br><span class=\"line\"><span class=\"comment\">      **代理对象：this</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) Proxy.newProxyInstance(target.getClass().getClassLoader(),target.getClass().getInterfaces(),<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个被代理对象</span></span><br><span class=\"line\">       Subject subject=<span class=\"keyword\">new</span> SubjectImpl();</span><br><span class=\"line\">       <span class=\"comment\">// 创建一个代理对象</span></span><br><span class=\"line\">       Subject proxy=<span class=\"keyword\">new</span> MyProxy(subject).getProxy();</span><br><span class=\"line\">       <span class=\"comment\">// 调用代理的方法</span></span><br><span class=\"line\">       System.out.println(proxy.test(<span class=\"string\">\"test\"</span>));</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开始执行动态代理</span><br><span class=\"line\">testtest</span><br></pre></td></tr></table></figure></p>\n<p>&emsp; &emsp;我们知道spring 的AOP是通过动态代理实现的,现在让我们好好分析一下动态代理，示例中定义了一个接口 Subject，一个继承接口的SubjectImpl类,一个实现了InvocationHandler的MyProxy类，并调用了Proxy.newProxyInstance方法。Subject定义了将要被代理执行的方法，SubjectImpl是被代理的类（雇主），MyProxy类是代理执行的类（跑腿的），它的invoke(Object proxy, Method method, Object[] args)方法便是实际被执行的方法，它的第一个参数proxy作用：</p>\n<blockquote>\n<ul>\n<li>可以使用反射获取代理对象的信息（也就是proxy.getClass().getName()）</li>\n<li>可以将代理对象返回以进行连续调用，这就是proxy存在的目的，因为this并不是代理对象(MyProxy虽然是代理的类，但代理对象是 Proxy.newProxyInstance方法生成的。)。</li>\n</ul>\n</blockquote>\n<p>method 是被代理的方法类型对象，args是方法的参数数组。通过Proxy.newProxyInstance生成代理类后就可以执行其中的代理方法了。</p>\n<p>&emsp; &emsp;如果我们直接执行SubjectImpl.test()方法则只返回一个字符串，但使用动态代理我们可以在方法执行前和执行后加上自己的逻辑，这样大大提高了代码的复用性；想一想，如果你写了一堆方法，方法里很多代码是一样的，这样的代码是不是很丑？好，现在你把重复的代码单独抽出来做一个方法，但这样你的每个方法都被写死了，和那个公共的方法耦合在一起，这样很不灵活。如果我突然想一部分方法的公共方法是a(),一部分方法的公共方法是b(),那改起来很麻烦，扩展性很差。使用动态代理就很好的解决了这个问题，被代理对象可以任意指定，代理的逻辑可以任意实现，二者互相独立互不影响，并且可以由客户端任意进行组合，这就是所谓的动态。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h2><h3 id=\"什么是代理\"><a href=\"#什么是代理\" class=\"headerlink\" title=\"什么是代理\"></a>什么是代理</h3><p>&emsp; &emsp;代理是一种软件设计模式，这种设计模式不直接访问被代理对象，而访问被代理对象的方法，详尽的解释可参考《java设计模式之禅》，里面的解释还是很通俗的。给个《java设计模式之禅》下载地址：<a href=\"https://pan.baidu.com/s/1GdFmZSx67HjKl_OhkwjqNg\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1GdFmZSx67HjKl_OhkwjqNg</a></p>\n<p>&emsp; &emsp;在JDK中提供了实现动态代理模式的机制，cglib也是一个用于实现动态代理的框架，在这里我介绍jdk自带的动态代理机制是如何使用的。先上代码再慢慢解释：</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个接口，接口中只有一个抽象方法，这个方法便是将要被代理的方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">String <span class=\"title\">test</span><span class=\"params\">(String string)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义 一个类实现这个方法，方法里写上自己的逻辑。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubjectImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">(String string)</span> </span>&#123;</span><br><span class=\"line\">      String test=string+string;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> test;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"><span class=\"comment\">// 定义一个代理类，这个代理必须要实现invocaHandler 接口，用以指定这个类为一个代理类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyProxy</span><span class=\"params\">( Object target)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target=target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 实现 invoke方法，这个方法将是后面代码中实际执行的方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"开始执行动态代理\"</span>);</span><br><span class=\"line\">        Object result=method.invoke(target,args);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Proxy类为反射机制中的一个类，用于获得代理对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getProxy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">/* newProxyInstance方法的参数解释：</span></span><br><span class=\"line\"><span class=\"comment\">      ** 被代理对象的类加载器：target.getClass().getClassLoader()</span></span><br><span class=\"line\"><span class=\"comment\">      ** 被代理的方法：target.getClass().getInterfaces()</span></span><br><span class=\"line\"><span class=\"comment\">      **代理对象：this</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) Proxy.newProxyInstance(target.getClass().getClassLoader(),target.getClass().getInterfaces(),<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个被代理对象</span></span><br><span class=\"line\">       Subject subject=<span class=\"keyword\">new</span> SubjectImpl();</span><br><span class=\"line\">       <span class=\"comment\">// 创建一个代理对象</span></span><br><span class=\"line\">       Subject proxy=<span class=\"keyword\">new</span> MyProxy(subject).getProxy();</span><br><span class=\"line\">       <span class=\"comment\">// 调用代理的方法</span></span><br><span class=\"line\">       System.out.println(proxy.test(<span class=\"string\">\"test\"</span>));</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开始执行动态代理</span><br><span class=\"line\">testtest</span><br></pre></td></tr></table></figure></p>\n<p>&emsp; &emsp;我们知道spring 的AOP是通过动态代理实现的,现在让我们好好分析一下动态代理，示例中定义了一个接口 Subject，一个继承接口的SubjectImpl类,一个实现了InvocationHandler的MyProxy类，并调用了Proxy.newProxyInstance方法。Subject定义了将要被代理执行的方法，SubjectImpl是被代理的类（雇主），MyProxy类是代理执行的类（跑腿的），它的invoke(Object proxy, Method method, Object[] args)方法便是实际被执行的方法，它的第一个参数proxy作用：</p>\n<blockquote>\n<ul>\n<li>可以使用反射获取代理对象的信息（也就是proxy.getClass().getName()）</li>\n<li>可以将代理对象返回以进行连续调用，这就是proxy存在的目的，因为this并不是代理对象(MyProxy虽然是代理的类，但代理对象是 Proxy.newProxyInstance方法生成的。)。</li>\n</ul>\n</blockquote>\n<p>method 是被代理的方法类型对象，args是方法的参数数组。通过Proxy.newProxyInstance生成代理类后就可以执行其中的代理方法了。</p>\n<p>&emsp; &emsp;如果我们直接执行SubjectImpl.test()方法则只返回一个字符串，但使用动态代理我们可以在方法执行前和执行后加上自己的逻辑，这样大大提高了代码的复用性；想一想，如果你写了一堆方法，方法里很多代码是一样的，这样的代码是不是很丑？好，现在你把重复的代码单独抽出来做一个方法，但这样你的每个方法都被写死了，和那个公共的方法耦合在一起，这样很不灵活。如果我突然想一部分方法的公共方法是a(),一部分方法的公共方法是b(),那改起来很麻烦，扩展性很差。使用动态代理就很好的解决了这个问题，被代理对象可以任意指定，代理的逻辑可以任意实现，二者互相独立互不影响，并且可以由客户端任意进行组合，这就是所谓的动态。</p>"},{"title":"git subtree多项目合并试验","date":"2019-05-05T08:48:52.000Z","_content":"\n## 说明\n\ngit subtree可将多个git项目合并在一起，可解决protobuf更新的问题；\n\n打包maven私有仓库也可行，但是maven私有仓库不适合频繁更新，而protobuf更新会很频繁。\n\n## 测试\n\n``` shell\n\ngit clone一个新项目\n\ngit remote add <name> <url> 添加一个远程仓库\n\ngit subtree add --prefix=<dir> <name> master --squash\n\ngit push 会把子仓库的文件提交，合情合理\n\n# 更新子仓库的方法\n\ngit subtree push --prefix=<dir> <name> master\n\n```\n\n<!--more-->\n\n命令一览\n\n```linux\ngit subtree add   --prefix=<prefix> <commit>\ngit subtree add   --prefix=<prefix> <repository> <ref>\ngit subtree pull  --prefix=<prefix> <repository> <ref>\ngit subtree push  --prefix=<prefix> <repository> <ref>\ngit subtree merge --prefix=<prefix> <commit>\ngit subtree split --prefix=<prefix> [OPTIONS] [<commit>]\n```\n\n由于不能使用idea 来操作子仓库，需要掌握手动解决冲突的方法\n\n git 知识复习\n\ngit checkout -b xxx\n\ngit branch xxx\n\ngit merge xxx\ngit init \ngit config\ngit remote add test\ngit push -u test master\n\n\n## gitflow\n\n- master 测试\n- develop 开发\n- feature 功能\n- release 测试\n- hotfix 补丁\n\nv0.1 ----- v0.2----------v0.3\n\n​              develop------ v0.3\n\n​                                   v0.3----hotfix -----v0.3\n\n​                                     v0.3----release ---v0.3\n\n​                                    v0.3-----feature -----------------------v0.4\n\n## over\n\n自此，protobuf的文件同步找到了一个较好的解决方法\n\n","source":"_posts/git-subtree.md","raw":"---\ntitle: git subtree多项目合并试验\ndate: 2019-05-05 16:48:52\ntags: javaee\n---\n\n## 说明\n\ngit subtree可将多个git项目合并在一起，可解决protobuf更新的问题；\n\n打包maven私有仓库也可行，但是maven私有仓库不适合频繁更新，而protobuf更新会很频繁。\n\n## 测试\n\n``` shell\n\ngit clone一个新项目\n\ngit remote add <name> <url> 添加一个远程仓库\n\ngit subtree add --prefix=<dir> <name> master --squash\n\ngit push 会把子仓库的文件提交，合情合理\n\n# 更新子仓库的方法\n\ngit subtree push --prefix=<dir> <name> master\n\n```\n\n<!--more-->\n\n命令一览\n\n```linux\ngit subtree add   --prefix=<prefix> <commit>\ngit subtree add   --prefix=<prefix> <repository> <ref>\ngit subtree pull  --prefix=<prefix> <repository> <ref>\ngit subtree push  --prefix=<prefix> <repository> <ref>\ngit subtree merge --prefix=<prefix> <commit>\ngit subtree split --prefix=<prefix> [OPTIONS] [<commit>]\n```\n\n由于不能使用idea 来操作子仓库，需要掌握手动解决冲突的方法\n\n git 知识复习\n\ngit checkout -b xxx\n\ngit branch xxx\n\ngit merge xxx\ngit init \ngit config\ngit remote add test\ngit push -u test master\n\n\n## gitflow\n\n- master 测试\n- develop 开发\n- feature 功能\n- release 测试\n- hotfix 补丁\n\nv0.1 ----- v0.2----------v0.3\n\n​              develop------ v0.3\n\n​                                   v0.3----hotfix -----v0.3\n\n​                                     v0.3----release ---v0.3\n\n​                                    v0.3-----feature -----------------------v0.4\n\n## over\n\n自此，protobuf的文件同步找到了一个较好的解决方法\n\n","slug":"git-subtree","published":1,"updated":"2019-05-14T05:53:45.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxrv0004vovmi0ampak9","content":"<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>git subtree可将多个git项目合并在一起，可解决protobuf更新的问题；</p>\n<p>打包maven私有仓库也可行，但是maven私有仓库不适合频繁更新，而protobuf更新会很频繁。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git clone一个新项目</span><br><span class=\"line\"></span><br><span class=\"line\">git remote add &lt;name&gt; &lt;url&gt; 添加一个远程仓库</span><br><span class=\"line\"></span><br><span class=\"line\">git subtree add --prefix=&lt;dir&gt; &lt;name&gt; master --squash</span><br><span class=\"line\"></span><br><span class=\"line\">git push 会把子仓库的文件提交，合情合理</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 更新子仓库的方法</span><br><span class=\"line\"></span><br><span class=\"line\">git subtree push --prefix=&lt;dir&gt; &lt;name&gt; master</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>命令一览</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git subtree add   --prefix=&lt;prefix&gt; &lt;commit&gt;</span><br><span class=\"line\">git subtree add   --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class=\"line\">git subtree pull  --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class=\"line\">git subtree push  --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class=\"line\">git subtree merge --prefix=&lt;prefix&gt; &lt;commit&gt;</span><br><span class=\"line\">git subtree split --prefix=&lt;prefix&gt; [OPTIONS] [&lt;commit&gt;]</span><br></pre></td></tr></table></figure>\n<p>由于不能使用idea 来操作子仓库，需要掌握手动解决冲突的方法</p>\n<p> git 知识复习</p>\n<p>git checkout -b xxx</p>\n<p>git branch xxx</p>\n<p>git merge xxx<br>git init<br>git config<br>git remote add test<br>git push -u test master</p>\n<h2 id=\"gitflow\"><a href=\"#gitflow\" class=\"headerlink\" title=\"gitflow\"></a>gitflow</h2><ul>\n<li>master 测试</li>\n<li>develop 开发</li>\n<li>feature 功能</li>\n<li>release 测试</li>\n<li>hotfix 补丁</li>\n</ul>\n<p>v0.1 —– v0.2———-v0.3</p>\n<p>​              develop—— v0.3</p>\n<p>​                                   v0.3—-hotfix —–v0.3</p>\n<p>​                                     v0.3—-release —v0.3</p>\n<p>​                                    v0.3—–feature ———————–v0.4</p>\n<h2 id=\"over\"><a href=\"#over\" class=\"headerlink\" title=\"over\"></a>over</h2><p>自此，protobuf的文件同步找到了一个较好的解决方法</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>git subtree可将多个git项目合并在一起，可解决protobuf更新的问题；</p>\n<p>打包maven私有仓库也可行，但是maven私有仓库不适合频繁更新，而protobuf更新会很频繁。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git clone一个新项目</span><br><span class=\"line\"></span><br><span class=\"line\">git remote add &lt;name&gt; &lt;url&gt; 添加一个远程仓库</span><br><span class=\"line\"></span><br><span class=\"line\">git subtree add --prefix=&lt;dir&gt; &lt;name&gt; master --squash</span><br><span class=\"line\"></span><br><span class=\"line\">git push 会把子仓库的文件提交，合情合理</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 更新子仓库的方法</span><br><span class=\"line\"></span><br><span class=\"line\">git subtree push --prefix=&lt;dir&gt; &lt;name&gt; master</span><br></pre></td></tr></table></figure>","more":"<p>命令一览</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git subtree add   --prefix=&lt;prefix&gt; &lt;commit&gt;</span><br><span class=\"line\">git subtree add   --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class=\"line\">git subtree pull  --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class=\"line\">git subtree push  --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class=\"line\">git subtree merge --prefix=&lt;prefix&gt; &lt;commit&gt;</span><br><span class=\"line\">git subtree split --prefix=&lt;prefix&gt; [OPTIONS] [&lt;commit&gt;]</span><br></pre></td></tr></table></figure>\n<p>由于不能使用idea 来操作子仓库，需要掌握手动解决冲突的方法</p>\n<p> git 知识复习</p>\n<p>git checkout -b xxx</p>\n<p>git branch xxx</p>\n<p>git merge xxx<br>git init<br>git config<br>git remote add test<br>git push -u test master</p>\n<h2 id=\"gitflow\"><a href=\"#gitflow\" class=\"headerlink\" title=\"gitflow\"></a>gitflow</h2><ul>\n<li>master 测试</li>\n<li>develop 开发</li>\n<li>feature 功能</li>\n<li>release 测试</li>\n<li>hotfix 补丁</li>\n</ul>\n<p>v0.1 —– v0.2———-v0.3</p>\n<p>​              develop—— v0.3</p>\n<p>​                                   v0.3—-hotfix —–v0.3</p>\n<p>​                                     v0.3—-release —v0.3</p>\n<p>​                                    v0.3—–feature ———————–v0.4</p>\n<h2 id=\"over\"><a href=\"#over\" class=\"headerlink\" title=\"over\"></a>over</h2><p>自此，protobuf的文件同步找到了一个较好的解决方法</p>"},{"title":"dubbo学习笔记","date":"2019-04-26T09:29:58.000Z","_content":"\ndubbo 架构介绍\n\n注册中心 服务提供者 消费者 管理者 容器\n\nregistry provider consumer monitor container\n\n<!--more-->\n\n# dubbo 环境搭建 \n\n## 安装zk\n\nconf文件下创建 zoo.cfg\n\n配置dataDir \n\nbin下zkServer zkCli\n\n测试  \n\n```shell\nget / \nls /\ncreate -e /test 123456\nget /test\n```\n\n安装监控中心 下载 <https://github.com/apache/incubator-dubbo-admin/tree/master> 切换到master分支\n\n打 jar包\n\n## 项目构建\n\ndubbo版本问题\n\ndubbo 2.6以前是阿里巴巴 dubbo\n\n因此 dubbo 的dubbo-spring-boot-starter存在两个对应的版本 \n\n官方是这样说的：\n\n> 如果您现在使用的Dubbo版本低于2.7.0，请使用如下对应版本的Dubbo Spring Boot：\n>\n> | Dubbo Spring Boot                                            | Dubbo  | Spring Boot |\n> | ------------------------------------------------------------ | ------ | ----------- |\n> | [0.2.1.RELEASE](https://github.com/apache/incubator-dubbo-spring-boot-project/tree/0.2.x) | 2.6.5+ | 2.x         |\n> | [0.1.2.RELEASE](https://github.com/apache/incubator-dubbo-spring-boot-project/tree/0.1.x) | 2.6.5+ | 1.x         |\n>\n> \n\n其实就是如果用 阿里巴巴dubbo 则需要使用\n\n```xml\n<dependency>\n    <groupId>com.alibaba.boot</groupId>\n    <artifactId>dubbo-spring-boot-starter</artifactId>\n</dependency>\n```\n\n这个starter\n\n如果是 鸟毛dubbo则\n\n```xml\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-spring-boot-starter</artifactId>\n</dependency>\n```\n\nalibaba 0.2的stater配置\n\n```properties\n#  服务名\ndubbo.application.name=demo-provider\n# 注册中心地址\ndubbo.registry.address=zookeeper://127.0.0.1:2181\ndubbo.protocol.name=dubbo\ndubbo.protocol.port=20880\ndubbo.provider.timeout=10000\ndubbo.provider.retries=3\ndubbo.provider.delay=-1\nserver.port=8082\n```\n\nalibaba 2的 stater的配置\n\n```properties\nspring.dubbo.application.id=live-dubbo-provider\nspring.dubbo.application.name=live-dubbo-provider\nspring.dubbo.registry.address=zookeeper://127.0.0.1:2181\nspring.dubbo.server=true\nspring.dubbo.protocol.name=dubbo\nspring.dubbo.protocol.port=20880\nserver.port=8081\n```\n\n需要引入zk客户端依赖：com.101tec 和curator-framework\n\n这里不介绍鸟毛的dubbo配置，在nacos整合dubbo中说明\n\n## 监控中心\n\n# Hessian Serialization 序列化\n\n","source":"_posts/dubbo-1.md","raw":"---\ntitle: dubbo学习笔记\ndate: 2019-04-26 17:29:58\ntags: cloud\n---\n\ndubbo 架构介绍\n\n注册中心 服务提供者 消费者 管理者 容器\n\nregistry provider consumer monitor container\n\n<!--more-->\n\n# dubbo 环境搭建 \n\n## 安装zk\n\nconf文件下创建 zoo.cfg\n\n配置dataDir \n\nbin下zkServer zkCli\n\n测试  \n\n```shell\nget / \nls /\ncreate -e /test 123456\nget /test\n```\n\n安装监控中心 下载 <https://github.com/apache/incubator-dubbo-admin/tree/master> 切换到master分支\n\n打 jar包\n\n## 项目构建\n\ndubbo版本问题\n\ndubbo 2.6以前是阿里巴巴 dubbo\n\n因此 dubbo 的dubbo-spring-boot-starter存在两个对应的版本 \n\n官方是这样说的：\n\n> 如果您现在使用的Dubbo版本低于2.7.0，请使用如下对应版本的Dubbo Spring Boot：\n>\n> | Dubbo Spring Boot                                            | Dubbo  | Spring Boot |\n> | ------------------------------------------------------------ | ------ | ----------- |\n> | [0.2.1.RELEASE](https://github.com/apache/incubator-dubbo-spring-boot-project/tree/0.2.x) | 2.6.5+ | 2.x         |\n> | [0.1.2.RELEASE](https://github.com/apache/incubator-dubbo-spring-boot-project/tree/0.1.x) | 2.6.5+ | 1.x         |\n>\n> \n\n其实就是如果用 阿里巴巴dubbo 则需要使用\n\n```xml\n<dependency>\n    <groupId>com.alibaba.boot</groupId>\n    <artifactId>dubbo-spring-boot-starter</artifactId>\n</dependency>\n```\n\n这个starter\n\n如果是 鸟毛dubbo则\n\n```xml\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-spring-boot-starter</artifactId>\n</dependency>\n```\n\nalibaba 0.2的stater配置\n\n```properties\n#  服务名\ndubbo.application.name=demo-provider\n# 注册中心地址\ndubbo.registry.address=zookeeper://127.0.0.1:2181\ndubbo.protocol.name=dubbo\ndubbo.protocol.port=20880\ndubbo.provider.timeout=10000\ndubbo.provider.retries=3\ndubbo.provider.delay=-1\nserver.port=8082\n```\n\nalibaba 2的 stater的配置\n\n```properties\nspring.dubbo.application.id=live-dubbo-provider\nspring.dubbo.application.name=live-dubbo-provider\nspring.dubbo.registry.address=zookeeper://127.0.0.1:2181\nspring.dubbo.server=true\nspring.dubbo.protocol.name=dubbo\nspring.dubbo.protocol.port=20880\nserver.port=8081\n```\n\n需要引入zk客户端依赖：com.101tec 和curator-framework\n\n这里不介绍鸟毛的dubbo配置，在nacos整合dubbo中说明\n\n## 监控中心\n\n# Hessian Serialization 序列化\n\n","slug":"dubbo-1","published":1,"updated":"2019-05-16T06:03:09.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxrw0005vovmllrrh3kz","content":"<p>dubbo 架构介绍</p>\n<p>注册中心 服务提供者 消费者 管理者 容器</p>\n<p>registry provider consumer monitor container</p>\n<a id=\"more\"></a>\n<h1 id=\"dubbo-环境搭建\"><a href=\"#dubbo-环境搭建\" class=\"headerlink\" title=\"dubbo 环境搭建\"></a>dubbo 环境搭建</h1><h2 id=\"安装zk\"><a href=\"#安装zk\" class=\"headerlink\" title=\"安装zk\"></a>安装zk</h2><p>conf文件下创建 zoo.cfg</p>\n<p>配置dataDir </p>\n<p>bin下zkServer zkCli</p>\n<p>测试  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get / </span><br><span class=\"line\">ls /</span><br><span class=\"line\">create -e /test 123456</span><br><span class=\"line\">get /test</span><br></pre></td></tr></table></figure>\n<p>安装监控中心 下载 <a href=\"https://github.com/apache/incubator-dubbo-admin/tree/master\" target=\"_blank\" rel=\"noopener\">https://github.com/apache/incubator-dubbo-admin/tree/master</a> 切换到master分支</p>\n<p>打 jar包</p>\n<h2 id=\"项目构建\"><a href=\"#项目构建\" class=\"headerlink\" title=\"项目构建\"></a>项目构建</h2><p>dubbo版本问题</p>\n<p>dubbo 2.6以前是阿里巴巴 dubbo</p>\n<p>因此 dubbo 的dubbo-spring-boot-starter存在两个对应的版本 </p>\n<p>官方是这样说的：</p>\n<blockquote>\n<p>如果您现在使用的Dubbo版本低于2.7.0，请使用如下对应版本的Dubbo Spring Boot：</p>\n<table>\n<thead>\n<tr>\n<th>Dubbo Spring Boot</th>\n<th>Dubbo</th>\n<th>Spring Boot</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/apache/incubator-dubbo-spring-boot-project/tree/0.2.x\" target=\"_blank\" rel=\"noopener\">0.2.1.RELEASE</a></td>\n<td>2.6.5+</td>\n<td>2.x</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/apache/incubator-dubbo-spring-boot-project/tree/0.1.x\" target=\"_blank\" rel=\"noopener\">0.1.2.RELEASE</a></td>\n<td>2.6.5+</td>\n<td>1.x</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p>其实就是如果用 阿里巴巴dubbo 则需要使用</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个starter</p>\n<p>如果是 鸟毛dubbo则</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.dubbo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>alibaba 0.2的stater配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#  服务名</span><br><span class=\"line\">dubbo.application.name=demo-provider</span><br><span class=\"line\"># 注册中心地址</span><br><span class=\"line\">dubbo.registry.address=zookeeper://127.0.0.1:2181</span><br><span class=\"line\">dubbo.protocol.name=dubbo</span><br><span class=\"line\">dubbo.protocol.port=20880</span><br><span class=\"line\">dubbo.provider.timeout=10000</span><br><span class=\"line\">dubbo.provider.retries=3</span><br><span class=\"line\">dubbo.provider.delay=-1</span><br><span class=\"line\">server.port=8082</span><br></pre></td></tr></table></figure>\n<p>alibaba 2的 stater的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.dubbo.application.id=live-dubbo-provider</span><br><span class=\"line\">spring.dubbo.application.name=live-dubbo-provider</span><br><span class=\"line\">spring.dubbo.registry.address=zookeeper://127.0.0.1:2181</span><br><span class=\"line\">spring.dubbo.server=true</span><br><span class=\"line\">spring.dubbo.protocol.name=dubbo</span><br><span class=\"line\">spring.dubbo.protocol.port=20880</span><br><span class=\"line\">server.port=8081</span><br></pre></td></tr></table></figure>\n<p>需要引入zk客户端依赖：com.101tec 和curator-framework</p>\n<p>这里不介绍鸟毛的dubbo配置，在nacos整合dubbo中说明</p>\n<h2 id=\"监控中心\"><a href=\"#监控中心\" class=\"headerlink\" title=\"监控中心\"></a>监控中心</h2><h1 id=\"Hessian-Serialization-序列化\"><a href=\"#Hessian-Serialization-序列化\" class=\"headerlink\" title=\"Hessian Serialization 序列化\"></a>Hessian Serialization 序列化</h1>","site":{"data":{}},"excerpt":"<p>dubbo 架构介绍</p>\n<p>注册中心 服务提供者 消费者 管理者 容器</p>\n<p>registry provider consumer monitor container</p>","more":"<h1 id=\"dubbo-环境搭建\"><a href=\"#dubbo-环境搭建\" class=\"headerlink\" title=\"dubbo 环境搭建\"></a>dubbo 环境搭建</h1><h2 id=\"安装zk\"><a href=\"#安装zk\" class=\"headerlink\" title=\"安装zk\"></a>安装zk</h2><p>conf文件下创建 zoo.cfg</p>\n<p>配置dataDir </p>\n<p>bin下zkServer zkCli</p>\n<p>测试  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get / </span><br><span class=\"line\">ls /</span><br><span class=\"line\">create -e /test 123456</span><br><span class=\"line\">get /test</span><br></pre></td></tr></table></figure>\n<p>安装监控中心 下载 <a href=\"https://github.com/apache/incubator-dubbo-admin/tree/master\" target=\"_blank\" rel=\"noopener\">https://github.com/apache/incubator-dubbo-admin/tree/master</a> 切换到master分支</p>\n<p>打 jar包</p>\n<h2 id=\"项目构建\"><a href=\"#项目构建\" class=\"headerlink\" title=\"项目构建\"></a>项目构建</h2><p>dubbo版本问题</p>\n<p>dubbo 2.6以前是阿里巴巴 dubbo</p>\n<p>因此 dubbo 的dubbo-spring-boot-starter存在两个对应的版本 </p>\n<p>官方是这样说的：</p>\n<blockquote>\n<p>如果您现在使用的Dubbo版本低于2.7.0，请使用如下对应版本的Dubbo Spring Boot：</p>\n<table>\n<thead>\n<tr>\n<th>Dubbo Spring Boot</th>\n<th>Dubbo</th>\n<th>Spring Boot</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/apache/incubator-dubbo-spring-boot-project/tree/0.2.x\" target=\"_blank\" rel=\"noopener\">0.2.1.RELEASE</a></td>\n<td>2.6.5+</td>\n<td>2.x</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/apache/incubator-dubbo-spring-boot-project/tree/0.1.x\" target=\"_blank\" rel=\"noopener\">0.1.2.RELEASE</a></td>\n<td>2.6.5+</td>\n<td>1.x</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p>其实就是如果用 阿里巴巴dubbo 则需要使用</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个starter</p>\n<p>如果是 鸟毛dubbo则</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.dubbo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>alibaba 0.2的stater配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#  服务名</span><br><span class=\"line\">dubbo.application.name=demo-provider</span><br><span class=\"line\"># 注册中心地址</span><br><span class=\"line\">dubbo.registry.address=zookeeper://127.0.0.1:2181</span><br><span class=\"line\">dubbo.protocol.name=dubbo</span><br><span class=\"line\">dubbo.protocol.port=20880</span><br><span class=\"line\">dubbo.provider.timeout=10000</span><br><span class=\"line\">dubbo.provider.retries=3</span><br><span class=\"line\">dubbo.provider.delay=-1</span><br><span class=\"line\">server.port=8082</span><br></pre></td></tr></table></figure>\n<p>alibaba 2的 stater的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.dubbo.application.id=live-dubbo-provider</span><br><span class=\"line\">spring.dubbo.application.name=live-dubbo-provider</span><br><span class=\"line\">spring.dubbo.registry.address=zookeeper://127.0.0.1:2181</span><br><span class=\"line\">spring.dubbo.server=true</span><br><span class=\"line\">spring.dubbo.protocol.name=dubbo</span><br><span class=\"line\">spring.dubbo.protocol.port=20880</span><br><span class=\"line\">server.port=8081</span><br></pre></td></tr></table></figure>\n<p>需要引入zk客户端依赖：com.101tec 和curator-framework</p>\n<p>这里不介绍鸟毛的dubbo配置，在nacos整合dubbo中说明</p>\n<h2 id=\"监控中心\"><a href=\"#监控中心\" class=\"headerlink\" title=\"监控中心\"></a>监控中心</h2><h1 id=\"Hessian-Serialization-序列化\"><a href=\"#Hessian-Serialization-序列化\" class=\"headerlink\" title=\"Hessian Serialization 序列化\"></a>Hessian Serialization 序列化</h1>"},{"title":"grpc+springboot+gradle学习笔记","date":"2019-05-14T03:07:53.000Z","_content":"\n#  前言\n\n前段时间写了一篇关于nacos的文章，本人还是很期待nacos成长起来的。nacos在其官方文档里面说nacos未来会支持grpc，正好我对grpc也抱有极大兴趣，于是基于springboot和gradle做了一个小demo对它们进行了整合，初步研究了一下，期待nacos成熟起来，组成一套Spring Cloud+gradle+nacos+grpc+sentinel的完全体。这篇博客的目的是知识储备，并不是讨论解决开发中某些问题。\n\n# 正文\n\n弄了一天，得到一个结论，gradle+grpc+git subtree 不是目前的我能驾驭的，弃文；等对gradle足够熟练再回来弄。\n","source":"_posts/grpc-learn.md","raw":"---\ntitle: grpc+springboot+gradle学习笔记\ndate: 2019-05-14 11:07:53\ntags: developing\n---\n\n#  前言\n\n前段时间写了一篇关于nacos的文章，本人还是很期待nacos成长起来的。nacos在其官方文档里面说nacos未来会支持grpc，正好我对grpc也抱有极大兴趣，于是基于springboot和gradle做了一个小demo对它们进行了整合，初步研究了一下，期待nacos成熟起来，组成一套Spring Cloud+gradle+nacos+grpc+sentinel的完全体。这篇博客的目的是知识储备，并不是讨论解决开发中某些问题。\n\n# 正文\n\n弄了一天，得到一个结论，gradle+grpc+git subtree 不是目前的我能驾驭的，弃文；等对gradle足够熟练再回来弄。\n","slug":"grpc-learn","published":1,"updated":"2019-05-15T08:05:44.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxrx0008vovmlddtf8xf","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>前段时间写了一篇关于nacos的文章，本人还是很期待nacos成长起来的。nacos在其官方文档里面说nacos未来会支持grpc，正好我对grpc也抱有极大兴趣，于是基于springboot和gradle做了一个小demo对它们进行了整合，初步研究了一下，期待nacos成熟起来，组成一套Spring Cloud+gradle+nacos+grpc+sentinel的完全体。这篇博客的目的是知识储备，并不是讨论解决开发中某些问题。</p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>弄了一天，得到一个结论，gradle+grpc+git subtree 不是目前的我能驾驭的，弃文；等对gradle足够熟练再回来弄。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>前段时间写了一篇关于nacos的文章，本人还是很期待nacos成长起来的。nacos在其官方文档里面说nacos未来会支持grpc，正好我对grpc也抱有极大兴趣，于是基于springboot和gradle做了一个小demo对它们进行了整合，初步研究了一下，期待nacos成熟起来，组成一套Spring Cloud+gradle+nacos+grpc+sentinel的完全体。这篇博客的目的是知识储备，并不是讨论解决开发中某些问题。</p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>弄了一天，得到一个结论，gradle+grpc+git subtree 不是目前的我能驾驭的，弃文；等对gradle足够熟练再回来弄。</p>\n"},{"title":"胡思乱想","date":"2019-03-28T02:44:50.000Z","_content":"\n&emsp;&emsp;我是猿家枪第十八代传人，第十八代是我爹告诉我的，他说多少代就是多少代————等我有了儿子了，我也会告诉他，他是猿家第十八代传人；因为，我觉得十八这个数字挺顺。我妈告诉我，我爸以前是走镖的，武艺高强，好打抱不平。半辈子结交了不少好汉，也得罪了不少人；因为害怕报复，回老家花钱买了栋宅院做起了小生意，退出了江湖。\n\n&emsp;&emsp;我六岁就开始站桩，每天都要早起站一炷香。要是哪天起晚了我爹踢开门就是一耳刮子，他手上全是老茧，呼脸上生疼；我见过我爹一拳把木头桩子给打折了，我常想，要是我爹一耳刮子把我头给打折了，我还能不能活？我小时候就很怕死怕疼，所以我从不敢赖床，鸡一打鸣我就起来了；上武场练我爹教我的那几个起手式，我爹管这叫晨练一口气，具体什么意思我就不太清楚了。\n\n<!--more-->\n&emsp;&emsp;我的童年相较而言，略显凄惨。当别人都去逮青蛙捉知了的时候我被我爹摁在家里学武式架子，甩枪花。到了读书的年龄，我也要站一会桩才能去上学，私塾放学了我又要早早回家；这导致了我童年玩伴很少，只有一个————狗子。不过练武也是有好处的，我不怕被私塾老师打板子，我也不用做家务，家务活都是家里的张妈来做（我家在老家算是乡绅级别）。别人都要去农耕摘花生豆子割猪草啥的，而我不用。\n\n&emsp;&emsp;说一下狗子：前面说了，狗子是我童年唯一玩伴，\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: 胡思乱想\ndate: 2019-03-28 10:44:50\ntags: 苟？\n---\n\n&emsp;&emsp;我是猿家枪第十八代传人，第十八代是我爹告诉我的，他说多少代就是多少代————等我有了儿子了，我也会告诉他，他是猿家第十八代传人；因为，我觉得十八这个数字挺顺。我妈告诉我，我爸以前是走镖的，武艺高强，好打抱不平。半辈子结交了不少好汉，也得罪了不少人；因为害怕报复，回老家花钱买了栋宅院做起了小生意，退出了江湖。\n\n&emsp;&emsp;我六岁就开始站桩，每天都要早起站一炷香。要是哪天起晚了我爹踢开门就是一耳刮子，他手上全是老茧，呼脸上生疼；我见过我爹一拳把木头桩子给打折了，我常想，要是我爹一耳刮子把我头给打折了，我还能不能活？我小时候就很怕死怕疼，所以我从不敢赖床，鸡一打鸣我就起来了；上武场练我爹教我的那几个起手式，我爹管这叫晨练一口气，具体什么意思我就不太清楚了。\n\n<!--more-->\n&emsp;&emsp;我的童年相较而言，略显凄惨。当别人都去逮青蛙捉知了的时候我被我爹摁在家里学武式架子，甩枪花。到了读书的年龄，我也要站一会桩才能去上学，私塾放学了我又要早早回家；这导致了我童年玩伴很少，只有一个————狗子。不过练武也是有好处的，我不怕被私塾老师打板子，我也不用做家务，家务活都是家里的张妈来做（我家在老家算是乡绅级别）。别人都要去农耕摘花生豆子割猪草啥的，而我不用。\n\n&emsp;&emsp;说一下狗子：前面说了，狗子是我童年唯一玩伴，\n\n","slug":"hello-world","published":1,"updated":"2019-04-22T08:24:29.110Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxry0009vovmgau3pvhh","content":"<p>&emsp;&emsp;我是猿家枪第十八代传人，第十八代是我爹告诉我的，他说多少代就是多少代————等我有了儿子了，我也会告诉他，他是猿家第十八代传人；因为，我觉得十八这个数字挺顺。我妈告诉我，我爸以前是走镖的，武艺高强，好打抱不平。半辈子结交了不少好汉，也得罪了不少人；因为害怕报复，回老家花钱买了栋宅院做起了小生意，退出了江湖。</p>\n<p>&emsp;&emsp;我六岁就开始站桩，每天都要早起站一炷香。要是哪天起晚了我爹踢开门就是一耳刮子，他手上全是老茧，呼脸上生疼；我见过我爹一拳把木头桩子给打折了，我常想，要是我爹一耳刮子把我头给打折了，我还能不能活？我小时候就很怕死怕疼，所以我从不敢赖床，鸡一打鸣我就起来了；上武场练我爹教我的那几个起手式，我爹管这叫晨练一口气，具体什么意思我就不太清楚了。</p>\n<a id=\"more\"></a>\n<p>&emsp;&emsp;我的童年相较而言，略显凄惨。当别人都去逮青蛙捉知了的时候我被我爹摁在家里学武式架子，甩枪花。到了读书的年龄，我也要站一会桩才能去上学，私塾放学了我又要早早回家；这导致了我童年玩伴很少，只有一个————狗子。不过练武也是有好处的，我不怕被私塾老师打板子，我也不用做家务，家务活都是家里的张妈来做（我家在老家算是乡绅级别）。别人都要去农耕摘花生豆子割猪草啥的，而我不用。</p>\n<p>&emsp;&emsp;说一下狗子：前面说了，狗子是我童年唯一玩伴，</p>\n","site":{"data":{}},"excerpt":"<p>&emsp;&emsp;我是猿家枪第十八代传人，第十八代是我爹告诉我的，他说多少代就是多少代————等我有了儿子了，我也会告诉他，他是猿家第十八代传人；因为，我觉得十八这个数字挺顺。我妈告诉我，我爸以前是走镖的，武艺高强，好打抱不平。半辈子结交了不少好汉，也得罪了不少人；因为害怕报复，回老家花钱买了栋宅院做起了小生意，退出了江湖。</p>\n<p>&emsp;&emsp;我六岁就开始站桩，每天都要早起站一炷香。要是哪天起晚了我爹踢开门就是一耳刮子，他手上全是老茧，呼脸上生疼；我见过我爹一拳把木头桩子给打折了，我常想，要是我爹一耳刮子把我头给打折了，我还能不能活？我小时候就很怕死怕疼，所以我从不敢赖床，鸡一打鸣我就起来了；上武场练我爹教我的那几个起手式，我爹管这叫晨练一口气，具体什么意思我就不太清楚了。</p>","more":"<p>&emsp;&emsp;我的童年相较而言，略显凄惨。当别人都去逮青蛙捉知了的时候我被我爹摁在家里学武式架子，甩枪花。到了读书的年龄，我也要站一会桩才能去上学，私塾放学了我又要早早回家；这导致了我童年玩伴很少，只有一个————狗子。不过练武也是有好处的，我不怕被私塾老师打板子，我也不用做家务，家务活都是家里的张妈来做（我家在老家算是乡绅级别）。别人都要去农耕摘花生豆子割猪草啥的，而我不用。</p>\n<p>&emsp;&emsp;说一下狗子：前面说了，狗子是我童年唯一玩伴，</p>"},{"title":"好文收集","date":"2019-04-27T09:13:56.000Z","_content":"\n**此文记录了平时觉得写得很好的博客**\n\n[事物传播机制的一个实验](<https://segmentfault.com/a/1190000013341344#articleHeader16>)\n\n[guava使用教程](https://www.yiibai.com/guava)\n\n<!--more-->\n\n[梯子教程](https://ssr.tools/269)\n\n[数据校验框架](https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#_code_methoddescriptor_code_and_code_constructordescriptor_code)\n\n[springboot二次封装](https://juejin.im/post/5cbfadeae51d456e425dd9cf)  ----里面的一些做法我不是很认同\n\n[分布式事物](https://www.cnblogs.com/jiangyu666/p/8522547.html)\n\n[flowable用户手册](https://tkjohn.github.io/flowable-userguide/#_changing_the_database_and_connection_pool)\n\n[关于应用优化的一些思考](https://zhuanlan.zhihu.com/p/24726196)\n\n[spring依赖注入的一个黑科技用法](https://blog.csdn.net/wo541075754/article/details/71514427)\n\n[谷歌白嫖教程](https://suchenrain.github.io/en/posts/37388/)\n\n[springboot异步](http://blog.didispace.com/springbootasync/) -----话说程序员DD的博客质量挺高\n\n[一个大佬的博客](https://blog.lqdev.cn/) ----干货很多，很低调\n\n[江南一点雨的es大作](https://mp.weixin.qq.com/s/Qy0q-IKJFZ0DwL7vMjBi1A) —— 江大师的redis docker 也写的很棒\n\n[java spi](https://www.cnblogs.com/huzi007/p/6679215.html)\n\n[库存设计的思考](<https://my.oschina.net/yangyishe/blog/1927466>)\n\n","source":"_posts/home-2.md","raw":"---\ntitle: 好文收集\ndate: 2019-04-27 17:13:56\ntags: home\n---\n\n**此文记录了平时觉得写得很好的博客**\n\n[事物传播机制的一个实验](<https://segmentfault.com/a/1190000013341344#articleHeader16>)\n\n[guava使用教程](https://www.yiibai.com/guava)\n\n<!--more-->\n\n[梯子教程](https://ssr.tools/269)\n\n[数据校验框架](https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#_code_methoddescriptor_code_and_code_constructordescriptor_code)\n\n[springboot二次封装](https://juejin.im/post/5cbfadeae51d456e425dd9cf)  ----里面的一些做法我不是很认同\n\n[分布式事物](https://www.cnblogs.com/jiangyu666/p/8522547.html)\n\n[flowable用户手册](https://tkjohn.github.io/flowable-userguide/#_changing_the_database_and_connection_pool)\n\n[关于应用优化的一些思考](https://zhuanlan.zhihu.com/p/24726196)\n\n[spring依赖注入的一个黑科技用法](https://blog.csdn.net/wo541075754/article/details/71514427)\n\n[谷歌白嫖教程](https://suchenrain.github.io/en/posts/37388/)\n\n[springboot异步](http://blog.didispace.com/springbootasync/) -----话说程序员DD的博客质量挺高\n\n[一个大佬的博客](https://blog.lqdev.cn/) ----干货很多，很低调\n\n[江南一点雨的es大作](https://mp.weixin.qq.com/s/Qy0q-IKJFZ0DwL7vMjBi1A) —— 江大师的redis docker 也写的很棒\n\n[java spi](https://www.cnblogs.com/huzi007/p/6679215.html)\n\n[库存设计的思考](<https://my.oschina.net/yangyishe/blog/1927466>)\n\n","slug":"home-2","published":1,"updated":"2019-05-15T08:26:28.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxs1000bvovmce2y55z0","content":"<p><strong>此文记录了平时觉得写得很好的博客</strong></p>\n<p><a href=\"https://segmentfault.com/a/1190000013341344#articleHeader16\" target=\"_blank\" rel=\"noopener\">事物传播机制的一个实验</a></p>\n<p><a href=\"https://www.yiibai.com/guava\" target=\"_blank\" rel=\"noopener\">guava使用教程</a></p>\n<a id=\"more\"></a>\n<p><a href=\"https://ssr.tools/269\" target=\"_blank\" rel=\"noopener\">梯子教程</a></p>\n<p><a href=\"https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#_code_methoddescriptor_code_and_code_constructordescriptor_code\" target=\"_blank\" rel=\"noopener\">数据校验框架</a></p>\n<p><a href=\"https://juejin.im/post/5cbfadeae51d456e425dd9cf\" target=\"_blank\" rel=\"noopener\">springboot二次封装</a>  —-里面的一些做法我不是很认同</p>\n<p><a href=\"https://www.cnblogs.com/jiangyu666/p/8522547.html\" target=\"_blank\" rel=\"noopener\">分布式事物</a></p>\n<p><a href=\"https://tkjohn.github.io/flowable-userguide/#_changing_the_database_and_connection_pool\" target=\"_blank\" rel=\"noopener\">flowable用户手册</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/24726196\" target=\"_blank\" rel=\"noopener\">关于应用优化的一些思考</a></p>\n<p><a href=\"https://blog.csdn.net/wo541075754/article/details/71514427\" target=\"_blank\" rel=\"noopener\">spring依赖注入的一个黑科技用法</a></p>\n<p><a href=\"https://suchenrain.github.io/en/posts/37388/\" target=\"_blank\" rel=\"noopener\">谷歌白嫖教程</a></p>\n<p><a href=\"http://blog.didispace.com/springbootasync/\" target=\"_blank\" rel=\"noopener\">springboot异步</a> —–话说程序员DD的博客质量挺高</p>\n<p><a href=\"https://blog.lqdev.cn/\" target=\"_blank\" rel=\"noopener\">一个大佬的博客</a> —-干货很多，很低调</p>\n<p><a href=\"https://mp.weixin.qq.com/s/Qy0q-IKJFZ0DwL7vMjBi1A\" target=\"_blank\" rel=\"noopener\">江南一点雨的es大作</a> —— 江大师的redis docker 也写的很棒</p>\n<p><a href=\"https://www.cnblogs.com/huzi007/p/6679215.html\" target=\"_blank\" rel=\"noopener\">java spi</a></p>\n<p><a href=\"https://my.oschina.net/yangyishe/blog/1927466\" target=\"_blank\" rel=\"noopener\">库存设计的思考</a></p>\n","site":{"data":{}},"excerpt":"<p><strong>此文记录了平时觉得写得很好的博客</strong></p>\n<p><a href=\"https://segmentfault.com/a/1190000013341344#articleHeader16\" target=\"_blank\" rel=\"noopener\">事物传播机制的一个实验</a></p>\n<p><a href=\"https://www.yiibai.com/guava\" target=\"_blank\" rel=\"noopener\">guava使用教程</a></p>","more":"<p><a href=\"https://ssr.tools/269\" target=\"_blank\" rel=\"noopener\">梯子教程</a></p>\n<p><a href=\"https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#_code_methoddescriptor_code_and_code_constructordescriptor_code\" target=\"_blank\" rel=\"noopener\">数据校验框架</a></p>\n<p><a href=\"https://juejin.im/post/5cbfadeae51d456e425dd9cf\" target=\"_blank\" rel=\"noopener\">springboot二次封装</a>  —-里面的一些做法我不是很认同</p>\n<p><a href=\"https://www.cnblogs.com/jiangyu666/p/8522547.html\" target=\"_blank\" rel=\"noopener\">分布式事物</a></p>\n<p><a href=\"https://tkjohn.github.io/flowable-userguide/#_changing_the_database_and_connection_pool\" target=\"_blank\" rel=\"noopener\">flowable用户手册</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/24726196\" target=\"_blank\" rel=\"noopener\">关于应用优化的一些思考</a></p>\n<p><a href=\"https://blog.csdn.net/wo541075754/article/details/71514427\" target=\"_blank\" rel=\"noopener\">spring依赖注入的一个黑科技用法</a></p>\n<p><a href=\"https://suchenrain.github.io/en/posts/37388/\" target=\"_blank\" rel=\"noopener\">谷歌白嫖教程</a></p>\n<p><a href=\"http://blog.didispace.com/springbootasync/\" target=\"_blank\" rel=\"noopener\">springboot异步</a> —–话说程序员DD的博客质量挺高</p>\n<p><a href=\"https://blog.lqdev.cn/\" target=\"_blank\" rel=\"noopener\">一个大佬的博客</a> —-干货很多，很低调</p>\n<p><a href=\"https://mp.weixin.qq.com/s/Qy0q-IKJFZ0DwL7vMjBi1A\" target=\"_blank\" rel=\"noopener\">江南一点雨的es大作</a> —— 江大师的redis docker 也写的很棒</p>\n<p><a href=\"https://www.cnblogs.com/huzi007/p/6679215.html\" target=\"_blank\" rel=\"noopener\">java spi</a></p>\n<p><a href=\"https://my.oschina.net/yangyishe/blog/1927466\" target=\"_blank\" rel=\"noopener\">库存设计的思考</a></p>"},{"title":" home","date":"2019-03-20T01:24:25.000Z","_content":"\n## 博主信息\n\n#### 公众号：六个核弹\n\n![六个核弹](https://oscimg.oschina.net/oscnet/c61536f9b3d186f75ef7bdd5f468c2bfb08.jpg)\n\n**邮箱**：1977339740@qq.com  &emsp; isocket@outlook.com(常用)\n\n**微信**: b3duZXJhbmRzZWxm（base64解码后便是）\n\n**职业**：java程序猿\n\n**项目**：[poseidon](https://github.com/muggle0/poseidon)\n\n**笔名**： muggle\n\n<!--more-->\n\n## 序：\n\n  &emsp;&emsp;从高中的时候就养成了写日记的习惯（也不能叫日记，并不是每天都写，断断续续，两三天一篇或者一周一篇），日记内容并不是什么很高大上的东西，就一些生活琐事之类的；因为文笔不是很好，写出来的东西基本上都很普通。后来到大学再到毕业至今，就很少写日记了——懒是一方面，工作忙是一方面；倒是经常会挤出一些时间写写技术博客之类的东西，偶尔还能收到别人的赞，还能和评论区读者互动，乐在其中。在这些博客论坛发表文章不好的是我的博客会变得碎片化，不成体系；而且在专业博客论坛里边写一些其他东西似乎也不太合适——没有写日记那么自由了。因此就弄出了这个博客，想和大家分享一些技术上和生活上的东西，希望能给大家工作和生活上带来些帮助。\n   &emsp;&emsp;我是一个还算喜欢交流的人吧（自我这么认为，其实偶尔也会化身自闭型选手），大佬们可以加我微信交流，话痨型选手等你哦。这个私人博客从形式上来说会比较随意，不会有那种很严肃很官方的东西，我希望我写的东西都是很直白便于理解的。为了方便读者阅读，我会维护一个目录和标签，读者可以根据目录或者标签来选择自己需要的文章来阅读，这样既节省了读者的时间，也能使我的文档更成体系。当然，如果小伙伴想投稿我也是欢迎的，不过稿费嘛，我是负担不起啦，稿费福利后期再说吧，就这么多，感谢阅读。\n\n<br>\n### -- 4月27日更新\n\n经过一个多月的努力攒了不少文章，小小的有点成就感。突然产生了一个想法，把这个博客打造完善，把javaSe，javaEE和微服务，中间件这些东西都补全。在个人博客上写东西相比微信公众号来说自由度更高，更利于阅读，但是也不利于传播，而且注定不会像公众号那样会产生收益。如果我的博客能对别人有帮助，我就愿意做下去。\n\n## 标签说明（点击目录可查看所有标签）\n\n- tool ：一些开发工具相关的文章\n- 苟？：写着玩的东西\n- security：spring-security 和spring-security-oauth2相关的文章\n- photo：相册\n- log：日志框架的文章\n- springboot：springboot系列文章\n- thread：多线程相关文章\n- netty：netty相关的文章\n- jvm：虚拟机相关文章\n- cloud：微服务相关文章\n- springboot：springboot相关的文章\n- 算法：算法相关文章\n- 设计模式：设计模式相关文章\n- javaee：java后端开发技术相关的文章\n- javase：java基础相关文章\n- developing：未写完的文章\n\n### 博客声明\n- 凡是本博客的文章转载请注明出处\n- 凡是本人（muggle）的文章均为原创，未抄袭过其他博客的内容，请读者尊重本人劳动成果\n- 如果你有兴趣投稿，请确保你的文章是原创未抄袭，否则后果自负，与本博客无关\n- 本博客坚持原创\n\n### 来稿说明\n\n如果你想投稿 加我微信或者发我邮箱谢谢(请备注来稿)\n\n<br>\n\n#### 愿你生命中有足够多的云翳,去制作一个美丽的黄昏\n","source":"_posts/home.md","raw":"---\ntitle: ' home'\ndate: 2019-03-20 09:24:25\ntags: home\n---\n\n## 博主信息\n\n#### 公众号：六个核弹\n\n![六个核弹](https://oscimg.oschina.net/oscnet/c61536f9b3d186f75ef7bdd5f468c2bfb08.jpg)\n\n**邮箱**：1977339740@qq.com  &emsp; isocket@outlook.com(常用)\n\n**微信**: b3duZXJhbmRzZWxm（base64解码后便是）\n\n**职业**：java程序猿\n\n**项目**：[poseidon](https://github.com/muggle0/poseidon)\n\n**笔名**： muggle\n\n<!--more-->\n\n## 序：\n\n  &emsp;&emsp;从高中的时候就养成了写日记的习惯（也不能叫日记，并不是每天都写，断断续续，两三天一篇或者一周一篇），日记内容并不是什么很高大上的东西，就一些生活琐事之类的；因为文笔不是很好，写出来的东西基本上都很普通。后来到大学再到毕业至今，就很少写日记了——懒是一方面，工作忙是一方面；倒是经常会挤出一些时间写写技术博客之类的东西，偶尔还能收到别人的赞，还能和评论区读者互动，乐在其中。在这些博客论坛发表文章不好的是我的博客会变得碎片化，不成体系；而且在专业博客论坛里边写一些其他东西似乎也不太合适——没有写日记那么自由了。因此就弄出了这个博客，想和大家分享一些技术上和生活上的东西，希望能给大家工作和生活上带来些帮助。\n   &emsp;&emsp;我是一个还算喜欢交流的人吧（自我这么认为，其实偶尔也会化身自闭型选手），大佬们可以加我微信交流，话痨型选手等你哦。这个私人博客从形式上来说会比较随意，不会有那种很严肃很官方的东西，我希望我写的东西都是很直白便于理解的。为了方便读者阅读，我会维护一个目录和标签，读者可以根据目录或者标签来选择自己需要的文章来阅读，这样既节省了读者的时间，也能使我的文档更成体系。当然，如果小伙伴想投稿我也是欢迎的，不过稿费嘛，我是负担不起啦，稿费福利后期再说吧，就这么多，感谢阅读。\n\n<br>\n### -- 4月27日更新\n\n经过一个多月的努力攒了不少文章，小小的有点成就感。突然产生了一个想法，把这个博客打造完善，把javaSe，javaEE和微服务，中间件这些东西都补全。在个人博客上写东西相比微信公众号来说自由度更高，更利于阅读，但是也不利于传播，而且注定不会像公众号那样会产生收益。如果我的博客能对别人有帮助，我就愿意做下去。\n\n## 标签说明（点击目录可查看所有标签）\n\n- tool ：一些开发工具相关的文章\n- 苟？：写着玩的东西\n- security：spring-security 和spring-security-oauth2相关的文章\n- photo：相册\n- log：日志框架的文章\n- springboot：springboot系列文章\n- thread：多线程相关文章\n- netty：netty相关的文章\n- jvm：虚拟机相关文章\n- cloud：微服务相关文章\n- springboot：springboot相关的文章\n- 算法：算法相关文章\n- 设计模式：设计模式相关文章\n- javaee：java后端开发技术相关的文章\n- javase：java基础相关文章\n- developing：未写完的文章\n\n### 博客声明\n- 凡是本博客的文章转载请注明出处\n- 凡是本人（muggle）的文章均为原创，未抄袭过其他博客的内容，请读者尊重本人劳动成果\n- 如果你有兴趣投稿，请确保你的文章是原创未抄袭，否则后果自负，与本博客无关\n- 本博客坚持原创\n\n### 来稿说明\n\n如果你想投稿 加我微信或者发我邮箱谢谢(请备注来稿)\n\n<br>\n\n#### 愿你生命中有足够多的云翳,去制作一个美丽的黄昏\n","slug":"home","published":1,"updated":"2019-05-13T02:25:38.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxs2000dvovm7ptg46ud","content":"<h2 id=\"博主信息\"><a href=\"#博主信息\" class=\"headerlink\" title=\"博主信息\"></a>博主信息</h2><h4 id=\"公众号：六个核弹\"><a href=\"#公众号：六个核弹\" class=\"headerlink\" title=\"公众号：六个核弹\"></a>公众号：六个核弹</h4><p><img src=\"https://oscimg.oschina.net/oscnet/c61536f9b3d186f75ef7bdd5f468c2bfb08.jpg\" alt=\"六个核弹\"></p>\n<p><strong>邮箱</strong>：<a href=\"mailto:1977339740@qq.com\" target=\"_blank\" rel=\"noopener\">1977339740@qq.com</a>  &emsp; <a href=\"mailto:isocket@outlook.com\" target=\"_blank\" rel=\"noopener\">isocket@outlook.com</a>(常用)</p>\n<p><strong>微信</strong>: b3duZXJhbmRzZWxm（base64解码后便是）</p>\n<p><strong>职业</strong>：java程序猿</p>\n<p><strong>项目</strong>：<a href=\"https://github.com/muggle0/poseidon\" target=\"_blank\" rel=\"noopener\">poseidon</a></p>\n<p><strong>笔名</strong>： muggle</p>\n<a id=\"more\"></a>\n<h2 id=\"序：\"><a href=\"#序：\" class=\"headerlink\" title=\"序：\"></a>序：</h2><p>  &emsp;&emsp;从高中的时候就养成了写日记的习惯（也不能叫日记，并不是每天都写，断断续续，两三天一篇或者一周一篇），日记内容并不是什么很高大上的东西，就一些生活琐事之类的；因为文笔不是很好，写出来的东西基本上都很普通。后来到大学再到毕业至今，就很少写日记了——懒是一方面，工作忙是一方面；倒是经常会挤出一些时间写写技术博客之类的东西，偶尔还能收到别人的赞，还能和评论区读者互动，乐在其中。在这些博客论坛发表文章不好的是我的博客会变得碎片化，不成体系；而且在专业博客论坛里边写一些其他东西似乎也不太合适——没有写日记那么自由了。因此就弄出了这个博客，想和大家分享一些技术上和生活上的东西，希望能给大家工作和生活上带来些帮助。<br>   &emsp;&emsp;我是一个还算喜欢交流的人吧（自我这么认为，其实偶尔也会化身自闭型选手），大佬们可以加我微信交流，话痨型选手等你哦。这个私人博客从形式上来说会比较随意，不会有那种很严肃很官方的东西，我希望我写的东西都是很直白便于理解的。为了方便读者阅读，我会维护一个目录和标签，读者可以根据目录或者标签来选择自己需要的文章来阅读，这样既节省了读者的时间，也能使我的文档更成体系。当然，如果小伙伴想投稿我也是欢迎的，不过稿费嘛，我是负担不起啦，稿费福利后期再说吧，就这么多，感谢阅读。</p>\n<p><br></p>\n<h3 id=\"–-4月27日更新\"><a href=\"#–-4月27日更新\" class=\"headerlink\" title=\"– 4月27日更新\"></a>– 4月27日更新</h3><p>经过一个多月的努力攒了不少文章，小小的有点成就感。突然产生了一个想法，把这个博客打造完善，把javaSe，javaEE和微服务，中间件这些东西都补全。在个人博客上写东西相比微信公众号来说自由度更高，更利于阅读，但是也不利于传播，而且注定不会像公众号那样会产生收益。如果我的博客能对别人有帮助，我就愿意做下去。</p>\n<h2 id=\"标签说明（点击目录可查看所有标签）\"><a href=\"#标签说明（点击目录可查看所有标签）\" class=\"headerlink\" title=\"标签说明（点击目录可查看所有标签）\"></a>标签说明（点击目录可查看所有标签）</h2><ul>\n<li>tool ：一些开发工具相关的文章</li>\n<li>苟？：写着玩的东西</li>\n<li>security：spring-security 和spring-security-oauth2相关的文章</li>\n<li>photo：相册</li>\n<li>log：日志框架的文章</li>\n<li>springboot：springboot系列文章</li>\n<li>thread：多线程相关文章</li>\n<li>netty：netty相关的文章</li>\n<li>jvm：虚拟机相关文章</li>\n<li>cloud：微服务相关文章</li>\n<li>springboot：springboot相关的文章</li>\n<li>算法：算法相关文章</li>\n<li>设计模式：设计模式相关文章</li>\n<li>javaee：java后端开发技术相关的文章</li>\n<li>javase：java基础相关文章</li>\n<li>developing：未写完的文章</li>\n</ul>\n<h3 id=\"博客声明\"><a href=\"#博客声明\" class=\"headerlink\" title=\"博客声明\"></a>博客声明</h3><ul>\n<li>凡是本博客的文章转载请注明出处</li>\n<li>凡是本人（muggle）的文章均为原创，未抄袭过其他博客的内容，请读者尊重本人劳动成果</li>\n<li>如果你有兴趣投稿，请确保你的文章是原创未抄袭，否则后果自负，与本博客无关</li>\n<li>本博客坚持原创</li>\n</ul>\n<h3 id=\"来稿说明\"><a href=\"#来稿说明\" class=\"headerlink\" title=\"来稿说明\"></a>来稿说明</h3><p>如果你想投稿 加我微信或者发我邮箱谢谢(请备注来稿)</p>\n<p><br></p>\n<h4 id=\"愿你生命中有足够多的云翳-去制作一个美丽的黄昏\"><a href=\"#愿你生命中有足够多的云翳-去制作一个美丽的黄昏\" class=\"headerlink\" title=\"愿你生命中有足够多的云翳,去制作一个美丽的黄昏\"></a>愿你生命中有足够多的云翳,去制作一个美丽的黄昏</h4>","site":{"data":{}},"excerpt":"<h2 id=\"博主信息\"><a href=\"#博主信息\" class=\"headerlink\" title=\"博主信息\"></a>博主信息</h2><h4 id=\"公众号：六个核弹\"><a href=\"#公众号：六个核弹\" class=\"headerlink\" title=\"公众号：六个核弹\"></a>公众号：六个核弹</h4><p><img src=\"https://oscimg.oschina.net/oscnet/c61536f9b3d186f75ef7bdd5f468c2bfb08.jpg\" alt=\"六个核弹\"></p>\n<p><strong>邮箱</strong>：<a href=\"mailto:1977339740@qq.com\" target=\"_blank\" rel=\"noopener\">1977339740@qq.com</a>  &emsp; <a href=\"mailto:isocket@outlook.com\" target=\"_blank\" rel=\"noopener\">isocket@outlook.com</a>(常用)</p>\n<p><strong>微信</strong>: b3duZXJhbmRzZWxm（base64解码后便是）</p>\n<p><strong>职业</strong>：java程序猿</p>\n<p><strong>项目</strong>：<a href=\"https://github.com/muggle0/poseidon\" target=\"_blank\" rel=\"noopener\">poseidon</a></p>\n<p><strong>笔名</strong>： muggle</p>","more":"<h2 id=\"序：\"><a href=\"#序：\" class=\"headerlink\" title=\"序：\"></a>序：</h2><p>  &emsp;&emsp;从高中的时候就养成了写日记的习惯（也不能叫日记，并不是每天都写，断断续续，两三天一篇或者一周一篇），日记内容并不是什么很高大上的东西，就一些生活琐事之类的；因为文笔不是很好，写出来的东西基本上都很普通。后来到大学再到毕业至今，就很少写日记了——懒是一方面，工作忙是一方面；倒是经常会挤出一些时间写写技术博客之类的东西，偶尔还能收到别人的赞，还能和评论区读者互动，乐在其中。在这些博客论坛发表文章不好的是我的博客会变得碎片化，不成体系；而且在专业博客论坛里边写一些其他东西似乎也不太合适——没有写日记那么自由了。因此就弄出了这个博客，想和大家分享一些技术上和生活上的东西，希望能给大家工作和生活上带来些帮助。<br>   &emsp;&emsp;我是一个还算喜欢交流的人吧（自我这么认为，其实偶尔也会化身自闭型选手），大佬们可以加我微信交流，话痨型选手等你哦。这个私人博客从形式上来说会比较随意，不会有那种很严肃很官方的东西，我希望我写的东西都是很直白便于理解的。为了方便读者阅读，我会维护一个目录和标签，读者可以根据目录或者标签来选择自己需要的文章来阅读，这样既节省了读者的时间，也能使我的文档更成体系。当然，如果小伙伴想投稿我也是欢迎的，不过稿费嘛，我是负担不起啦，稿费福利后期再说吧，就这么多，感谢阅读。</p>\n<p><br></p>\n<h3 id=\"–-4月27日更新\"><a href=\"#–-4月27日更新\" class=\"headerlink\" title=\"– 4月27日更新\"></a>– 4月27日更新</h3><p>经过一个多月的努力攒了不少文章，小小的有点成就感。突然产生了一个想法，把这个博客打造完善，把javaSe，javaEE和微服务，中间件这些东西都补全。在个人博客上写东西相比微信公众号来说自由度更高，更利于阅读，但是也不利于传播，而且注定不会像公众号那样会产生收益。如果我的博客能对别人有帮助，我就愿意做下去。</p>\n<h2 id=\"标签说明（点击目录可查看所有标签）\"><a href=\"#标签说明（点击目录可查看所有标签）\" class=\"headerlink\" title=\"标签说明（点击目录可查看所有标签）\"></a>标签说明（点击目录可查看所有标签）</h2><ul>\n<li>tool ：一些开发工具相关的文章</li>\n<li>苟？：写着玩的东西</li>\n<li>security：spring-security 和spring-security-oauth2相关的文章</li>\n<li>photo：相册</li>\n<li>log：日志框架的文章</li>\n<li>springboot：springboot系列文章</li>\n<li>thread：多线程相关文章</li>\n<li>netty：netty相关的文章</li>\n<li>jvm：虚拟机相关文章</li>\n<li>cloud：微服务相关文章</li>\n<li>springboot：springboot相关的文章</li>\n<li>算法：算法相关文章</li>\n<li>设计模式：设计模式相关文章</li>\n<li>javaee：java后端开发技术相关的文章</li>\n<li>javase：java基础相关文章</li>\n<li>developing：未写完的文章</li>\n</ul>\n<h3 id=\"博客声明\"><a href=\"#博客声明\" class=\"headerlink\" title=\"博客声明\"></a>博客声明</h3><ul>\n<li>凡是本博客的文章转载请注明出处</li>\n<li>凡是本人（muggle）的文章均为原创，未抄袭过其他博客的内容，请读者尊重本人劳动成果</li>\n<li>如果你有兴趣投稿，请确保你的文章是原创未抄袭，否则后果自负，与本博客无关</li>\n<li>本博客坚持原创</li>\n</ul>\n<h3 id=\"来稿说明\"><a href=\"#来稿说明\" class=\"headerlink\" title=\"来稿说明\"></a>来稿说明</h3><p>如果你想投稿 加我微信或者发我邮箱谢谢(请备注来稿)</p>\n<p><br></p>\n<h4 id=\"愿你生命中有足够多的云翳-去制作一个美丽的黄昏\"><a href=\"#愿你生命中有足够多的云翳-去制作一个美丽的黄昏\" class=\"headerlink\" title=\"愿你生命中有足够多的云翳,去制作一个美丽的黄昏\"></a>愿你生命中有足够多的云翳,去制作一个美丽的黄昏</h4>"},{"title":"java8函数式编程","date":"2019-05-07T03:23:39.000Z","_content":"\n# 什么是函数式编程\n\n方法参数化\n\n## 函数式接口\n\n只有一个方法的接口，在java中为了规范用 @FunctionalInterface 标注\n\nlambda 表示函数式接口 ：\n\n```java\nRunnable runnable=()->{\n    System.out.println(\"test\");\n};\n```\n\n核心思想就是尽量简化，没必要写的不写，实现的相关技术：类型推断\n\n方法参数化的另外一种体现：\n\n```java\nStudent::goHome;\n\nSystem.out.println;\n```\n\n<!--more-->\n\n## \n\n","source":"_posts/java8.md","raw":"---\ntitle: java8函数式编程\ndate: 2019-05-07 11:23:39\ntags: developing\n---\n\n# 什么是函数式编程\n\n方法参数化\n\n## 函数式接口\n\n只有一个方法的接口，在java中为了规范用 @FunctionalInterface 标注\n\nlambda 表示函数式接口 ：\n\n```java\nRunnable runnable=()->{\n    System.out.println(\"test\");\n};\n```\n\n核心思想就是尽量简化，没必要写的不写，实现的相关技术：类型推断\n\n方法参数化的另外一种体现：\n\n```java\nStudent::goHome;\n\nSystem.out.println;\n```\n\n<!--more-->\n\n## \n\n","slug":"java8","published":1,"updated":"2019-05-15T08:55:44.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxs4000fvovma9agdwvz","content":"<h1 id=\"什么是函数式编程\"><a href=\"#什么是函数式编程\" class=\"headerlink\" title=\"什么是函数式编程\"></a>什么是函数式编程</h1><p>方法参数化</p>\n<h2 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h2><p>只有一个方法的接口，在java中为了规范用 @FunctionalInterface 标注</p>\n<p>lambda 表示函数式接口 ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Runnable runnable=()-&gt;&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>核心思想就是尽量简化，没必要写的不写，实现的相关技术：类型推断</p>\n<p>方法参数化的另外一种体现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student::goHome;</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>## </p>\n","site":{"data":{}},"excerpt":"<h1 id=\"什么是函数式编程\"><a href=\"#什么是函数式编程\" class=\"headerlink\" title=\"什么是函数式编程\"></a>什么是函数式编程</h1><p>方法参数化</p>\n<h2 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h2><p>只有一个方法的接口，在java中为了规范用 @FunctionalInterface 标注</p>\n<p>lambda 表示函数式接口 ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Runnable runnable=()-&gt;&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>核心思想就是尽量简化，没必要写的不写，实现的相关技术：类型推断</p>\n<p>方法参数化的另外一种体现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student::goHome;</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println;</span><br></pre></td></tr></table></figure>","more":"<p>## </p>"},{"title":"接口幂等性问题","date":"2019-03-20T05:57:12.000Z","_content":"\n# 什么是接口幂等\n\n<!--more-->\n\n# 为什么要接口幂等\n\n# 如何实现接口幂等\n\n","source":"_posts/javaee-1.md","raw":"---\ntitle: 接口幂等性问题\ndate: 2019-03-20 13:57:12\ntags: javaee\n---\n\n# 什么是接口幂等\n\n<!--more-->\n\n# 为什么要接口幂等\n\n# 如何实现接口幂等\n\n","slug":"javaee-1","published":1,"updated":"2019-05-07T03:16:56.348Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxs6000hvovm5em8zrnv","content":"<h1 id=\"什么是接口幂等\"><a href=\"#什么是接口幂等\" class=\"headerlink\" title=\"什么是接口幂等\"></a>什么是接口幂等</h1><a id=\"more\"></a>\n<h1 id=\"为什么要接口幂等\"><a href=\"#为什么要接口幂等\" class=\"headerlink\" title=\"为什么要接口幂等\"></a>为什么要接口幂等</h1><h1 id=\"如何实现接口幂等\"><a href=\"#如何实现接口幂等\" class=\"headerlink\" title=\"如何实现接口幂等\"></a>如何实现接口幂等</h1>","site":{"data":{}},"excerpt":"<h1 id=\"什么是接口幂等\"><a href=\"#什么是接口幂等\" class=\"headerlink\" title=\"什么是接口幂等\"></a>什么是接口幂等</h1>","more":"<h1 id=\"为什么要接口幂等\"><a href=\"#为什么要接口幂等\" class=\"headerlink\" title=\"为什么要接口幂等\"></a>为什么要接口幂等</h1><h1 id=\"如何实现接口幂等\"><a href=\"#如何实现接口幂等\" class=\"headerlink\" title=\"如何实现接口幂等\"></a>如何实现接口幂等</h1>"},{"title":"jvm基础篇一之内存区域","date":"2019-04-23T02:12:53.000Z","_content":"作者：muggle\n## 运行时数据区域\n &emsp; &emsp;想要了解jvm，那对其内存分配管理的学习是必不可少的；java虚拟机在执行java程序的时候会把它所管理的内存划分成若干数据区域。这些区域有着不同的功能、用途、创建/销毁时间。java虚拟机所分配管理的内存区域如图1所示\n\n###  程序计数器\n&emsp; &emsp;程序计数器是一块比较小的内存空间，它可以看做是当前线程所执行的字节码的执行位置的指针。在虚拟机中字节码，解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的指令；虚拟机完成分支、循环、跳转、异常处理、线程恢复等功能都需要依靠它。\n&emsp; &emsp;我们知道jvm多线程是通过线程的轮流切换并分配处理器执行时间的的方式来实现的，在任何时刻，一个处理器都只会执行一条线程中的指令。为了使线程被切换后能恢复到正确的执行位置，每条线程的程序计数器都应该是独立的，各条线程之间的计数器互不干涉，独立存储————程序计数器的内存区域为线程私有的内存。<br/>\n&emsp; &emsp;如果线程正在执行的是java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果执行的是Native方法，这个计数器的值则为空。此内存区域是唯一一个在jvm规范中没有规定任何OutOfMemoryerror情况的区域\n\n<!--more-->\n\n###  java虚拟机栈\n&emsp; &emsp;java虚拟机栈为线程私有的内存，其生命周期与线程相同。每个方法在执行的时候会创建一个栈帧用于存储局部变量表、操作数栈、方法出口等信息。每一个方法从调用到执行完成，就对应着一个栈帧在虚拟机中从入栈到出栈的过程。其局部变量表存放了方法编译期可知的各种基本数据类型、对象引用、returnAddress类型（指向一条字节码指令的地址）jvm规范中，这个区域规定了两种异常状况：StackOverflowError和OutOfMemoryError。\n###  本地方法栈\n&emsp; &emsp;本地方法栈的作用和虚拟机栈的作用很相似，它们的区别在于虚拟机栈为虚拟机执行java方法服务，而本地方法栈则为执行本地方法服务。有的虚拟机直接把本地方法栈和虚拟机栈二合一。与虚拟机栈一样，本地方法栈的异常也有两个：StackOverflowError和OutOfMemoryError。\n###  java堆区\n&emsp; &emsp;java堆是虚拟机所管理的内存中最大的一块，它是被所有线程共享的一块内存区域，该区域在虚拟机启动的时候创建。这个区域的唯一目的就是存放对象实例。java堆是垃圾收集器工作的主要区域，由于垃圾收集器基本都采用分代收集的算法，所以java堆从垃圾收集器的角度来划分可以细分为新生代和老年代；从内存分配的角度来看，线程共享的java堆可能划分出多个线程私有的分配缓冲区。<br/>\n&emsp; &emsp;java堆区可以是物理上不连续的内存空间，只要逻辑上是连续的即可；一般而言我们的虚拟机java堆内存不是固定大小的，是可以扩展的。如果在堆中没有足够内存分配给对象实例，并且堆内存无法再扩展时，虚拟机将会抛出OutOfMemoryError异常。\n###  方法区\n&emsp; &emsp;方法区与java堆区一样是各个线程共享的内存区域，这个区域存储了类信息、常量、静态变量等数据。java虚拟机规范中把方法区描述为堆得一部分逻辑，它又有一个名字——非堆，目的是与普通java堆进行区分。相对而言垃圾收集器在这个区域很少活动，因此一部分人把这个区域叫做“永久代”。这个区域的内存回收目标主要是针对常量池的回收和类型的卸载，然而类型卸载的条件是很苛刻的。该区域和和java堆区一样，当内存不够分配时会抛出OutOfMemoryError.\n###  运行时常量池\n&emsp; &emsp;运行时常量池是方法区的一部分；一个Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是编译时常量池，用于存放编译期生成的常量。编译时常量池在类被加载后会放入方法区的运行时常量池中。与编译期常量池不同的是，运运行时常量池是动态的，运行期间产生的新的常量也会被放入这个区域，如：String类的intern()方法。\n\n### 小结\n&emsp; &emsp;该篇对jvm内存只能算一个概览，给小伙伴们介绍了一些概念性的东西，很多地方是值得去深入研究的，比如具体一个对象实例是如何被分配到堆内存的，类的加载过程，方法执行时方法栈的入栈与出栈的具体过程······。jvm博大精深，我在这提供一个梗概，小伙伴们如果有时间可以细细推敲推敲。","source":"_posts/jvm-1.md","raw":"---\ntitle: jvm基础篇一之内存区域\ndate: 2019-04-23 10:12:53\ntags: jvm\n---\n作者：muggle\n## 运行时数据区域\n &emsp; &emsp;想要了解jvm，那对其内存分配管理的学习是必不可少的；java虚拟机在执行java程序的时候会把它所管理的内存划分成若干数据区域。这些区域有着不同的功能、用途、创建/销毁时间。java虚拟机所分配管理的内存区域如图1所示\n\n###  程序计数器\n&emsp; &emsp;程序计数器是一块比较小的内存空间，它可以看做是当前线程所执行的字节码的执行位置的指针。在虚拟机中字节码，解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的指令；虚拟机完成分支、循环、跳转、异常处理、线程恢复等功能都需要依靠它。\n&emsp; &emsp;我们知道jvm多线程是通过线程的轮流切换并分配处理器执行时间的的方式来实现的，在任何时刻，一个处理器都只会执行一条线程中的指令。为了使线程被切换后能恢复到正确的执行位置，每条线程的程序计数器都应该是独立的，各条线程之间的计数器互不干涉，独立存储————程序计数器的内存区域为线程私有的内存。<br/>\n&emsp; &emsp;如果线程正在执行的是java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果执行的是Native方法，这个计数器的值则为空。此内存区域是唯一一个在jvm规范中没有规定任何OutOfMemoryerror情况的区域\n\n<!--more-->\n\n###  java虚拟机栈\n&emsp; &emsp;java虚拟机栈为线程私有的内存，其生命周期与线程相同。每个方法在执行的时候会创建一个栈帧用于存储局部变量表、操作数栈、方法出口等信息。每一个方法从调用到执行完成，就对应着一个栈帧在虚拟机中从入栈到出栈的过程。其局部变量表存放了方法编译期可知的各种基本数据类型、对象引用、returnAddress类型（指向一条字节码指令的地址）jvm规范中，这个区域规定了两种异常状况：StackOverflowError和OutOfMemoryError。\n###  本地方法栈\n&emsp; &emsp;本地方法栈的作用和虚拟机栈的作用很相似，它们的区别在于虚拟机栈为虚拟机执行java方法服务，而本地方法栈则为执行本地方法服务。有的虚拟机直接把本地方法栈和虚拟机栈二合一。与虚拟机栈一样，本地方法栈的异常也有两个：StackOverflowError和OutOfMemoryError。\n###  java堆区\n&emsp; &emsp;java堆是虚拟机所管理的内存中最大的一块，它是被所有线程共享的一块内存区域，该区域在虚拟机启动的时候创建。这个区域的唯一目的就是存放对象实例。java堆是垃圾收集器工作的主要区域，由于垃圾收集器基本都采用分代收集的算法，所以java堆从垃圾收集器的角度来划分可以细分为新生代和老年代；从内存分配的角度来看，线程共享的java堆可能划分出多个线程私有的分配缓冲区。<br/>\n&emsp; &emsp;java堆区可以是物理上不连续的内存空间，只要逻辑上是连续的即可；一般而言我们的虚拟机java堆内存不是固定大小的，是可以扩展的。如果在堆中没有足够内存分配给对象实例，并且堆内存无法再扩展时，虚拟机将会抛出OutOfMemoryError异常。\n###  方法区\n&emsp; &emsp;方法区与java堆区一样是各个线程共享的内存区域，这个区域存储了类信息、常量、静态变量等数据。java虚拟机规范中把方法区描述为堆得一部分逻辑，它又有一个名字——非堆，目的是与普通java堆进行区分。相对而言垃圾收集器在这个区域很少活动，因此一部分人把这个区域叫做“永久代”。这个区域的内存回收目标主要是针对常量池的回收和类型的卸载，然而类型卸载的条件是很苛刻的。该区域和和java堆区一样，当内存不够分配时会抛出OutOfMemoryError.\n###  运行时常量池\n&emsp; &emsp;运行时常量池是方法区的一部分；一个Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是编译时常量池，用于存放编译期生成的常量。编译时常量池在类被加载后会放入方法区的运行时常量池中。与编译期常量池不同的是，运运行时常量池是动态的，运行期间产生的新的常量也会被放入这个区域，如：String类的intern()方法。\n\n### 小结\n&emsp; &emsp;该篇对jvm内存只能算一个概览，给小伙伴们介绍了一些概念性的东西，很多地方是值得去深入研究的，比如具体一个对象实例是如何被分配到堆内存的，类的加载过程，方法执行时方法栈的入栈与出栈的具体过程······。jvm博大精深，我在这提供一个梗概，小伙伴们如果有时间可以细细推敲推敲。","slug":"jvm-1","published":1,"updated":"2019-05-17T01:19:02.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxs8000jvovmx2sx3a7c","content":"<p>作者：muggle</p>\n<h2 id=\"运行时数据区域\"><a href=\"#运行时数据区域\" class=\"headerlink\" title=\"运行时数据区域\"></a>运行时数据区域</h2><p> &emsp; &emsp;想要了解jvm，那对其内存分配管理的学习是必不可少的；java虚拟机在执行java程序的时候会把它所管理的内存划分成若干数据区域。这些区域有着不同的功能、用途、创建/销毁时间。java虚拟机所分配管理的内存区域如图1所示</p>\n<h3 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h3><p>&emsp; &emsp;程序计数器是一块比较小的内存空间，它可以看做是当前线程所执行的字节码的执行位置的指针。在虚拟机中字节码，解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的指令；虚拟机完成分支、循环、跳转、异常处理、线程恢复等功能都需要依靠它。<br>&emsp; &emsp;我们知道jvm多线程是通过线程的轮流切换并分配处理器执行时间的的方式来实现的，在任何时刻，一个处理器都只会执行一条线程中的指令。为了使线程被切换后能恢复到正确的执行位置，每条线程的程序计数器都应该是独立的，各条线程之间的计数器互不干涉，独立存储————程序计数器的内存区域为线程私有的内存。<br><br>&emsp; &emsp;如果线程正在执行的是java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果执行的是Native方法，这个计数器的值则为空。此内存区域是唯一一个在jvm规范中没有规定任何OutOfMemoryerror情况的区域</p>\n<a id=\"more\"></a>\n<h3 id=\"java虚拟机栈\"><a href=\"#java虚拟机栈\" class=\"headerlink\" title=\"java虚拟机栈\"></a>java虚拟机栈</h3><p>&emsp; &emsp;java虚拟机栈为线程私有的内存，其生命周期与线程相同。每个方法在执行的时候会创建一个栈帧用于存储局部变量表、操作数栈、方法出口等信息。每一个方法从调用到执行完成，就对应着一个栈帧在虚拟机中从入栈到出栈的过程。其局部变量表存放了方法编译期可知的各种基本数据类型、对象引用、returnAddress类型（指向一条字节码指令的地址）jvm规范中，这个区域规定了两种异常状况：StackOverflowError和OutOfMemoryError。</p>\n<h3 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h3><p>&emsp; &emsp;本地方法栈的作用和虚拟机栈的作用很相似，它们的区别在于虚拟机栈为虚拟机执行java方法服务，而本地方法栈则为执行本地方法服务。有的虚拟机直接把本地方法栈和虚拟机栈二合一。与虚拟机栈一样，本地方法栈的异常也有两个：StackOverflowError和OutOfMemoryError。</p>\n<h3 id=\"java堆区\"><a href=\"#java堆区\" class=\"headerlink\" title=\"java堆区\"></a>java堆区</h3><p>&emsp; &emsp;java堆是虚拟机所管理的内存中最大的一块，它是被所有线程共享的一块内存区域，该区域在虚拟机启动的时候创建。这个区域的唯一目的就是存放对象实例。java堆是垃圾收集器工作的主要区域，由于垃圾收集器基本都采用分代收集的算法，所以java堆从垃圾收集器的角度来划分可以细分为新生代和老年代；从内存分配的角度来看，线程共享的java堆可能划分出多个线程私有的分配缓冲区。<br><br>&emsp; &emsp;java堆区可以是物理上不连续的内存空间，只要逻辑上是连续的即可；一般而言我们的虚拟机java堆内存不是固定大小的，是可以扩展的。如果在堆中没有足够内存分配给对象实例，并且堆内存无法再扩展时，虚拟机将会抛出OutOfMemoryError异常。</p>\n<h3 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h3><p>&emsp; &emsp;方法区与java堆区一样是各个线程共享的内存区域，这个区域存储了类信息、常量、静态变量等数据。java虚拟机规范中把方法区描述为堆得一部分逻辑，它又有一个名字——非堆，目的是与普通java堆进行区分。相对而言垃圾收集器在这个区域很少活动，因此一部分人把这个区域叫做“永久代”。这个区域的内存回收目标主要是针对常量池的回收和类型的卸载，然而类型卸载的条件是很苛刻的。该区域和和java堆区一样，当内存不够分配时会抛出OutOfMemoryError.</p>\n<h3 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h3><p>&emsp; &emsp;运行时常量池是方法区的一部分；一个Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是编译时常量池，用于存放编译期生成的常量。编译时常量池在类被加载后会放入方法区的运行时常量池中。与编译期常量池不同的是，运运行时常量池是动态的，运行期间产生的新的常量也会被放入这个区域，如：String类的intern()方法。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>&emsp; &emsp;该篇对jvm内存只能算一个概览，给小伙伴们介绍了一些概念性的东西，很多地方是值得去深入研究的，比如具体一个对象实例是如何被分配到堆内存的，类的加载过程，方法执行时方法栈的入栈与出栈的具体过程······。jvm博大精深，我在这提供一个梗概，小伙伴们如果有时间可以细细推敲推敲。</p>\n","site":{"data":{}},"excerpt":"<p>作者：muggle</p>\n<h2 id=\"运行时数据区域\"><a href=\"#运行时数据区域\" class=\"headerlink\" title=\"运行时数据区域\"></a>运行时数据区域</h2><p> &emsp; &emsp;想要了解jvm，那对其内存分配管理的学习是必不可少的；java虚拟机在执行java程序的时候会把它所管理的内存划分成若干数据区域。这些区域有着不同的功能、用途、创建/销毁时间。java虚拟机所分配管理的内存区域如图1所示</p>\n<h3 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h3><p>&emsp; &emsp;程序计数器是一块比较小的内存空间，它可以看做是当前线程所执行的字节码的执行位置的指针。在虚拟机中字节码，解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的指令；虚拟机完成分支、循环、跳转、异常处理、线程恢复等功能都需要依靠它。<br>&emsp; &emsp;我们知道jvm多线程是通过线程的轮流切换并分配处理器执行时间的的方式来实现的，在任何时刻，一个处理器都只会执行一条线程中的指令。为了使线程被切换后能恢复到正确的执行位置，每条线程的程序计数器都应该是独立的，各条线程之间的计数器互不干涉，独立存储————程序计数器的内存区域为线程私有的内存。<br><br>&emsp; &emsp;如果线程正在执行的是java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果执行的是Native方法，这个计数器的值则为空。此内存区域是唯一一个在jvm规范中没有规定任何OutOfMemoryerror情况的区域</p>","more":"<h3 id=\"java虚拟机栈\"><a href=\"#java虚拟机栈\" class=\"headerlink\" title=\"java虚拟机栈\"></a>java虚拟机栈</h3><p>&emsp; &emsp;java虚拟机栈为线程私有的内存，其生命周期与线程相同。每个方法在执行的时候会创建一个栈帧用于存储局部变量表、操作数栈、方法出口等信息。每一个方法从调用到执行完成，就对应着一个栈帧在虚拟机中从入栈到出栈的过程。其局部变量表存放了方法编译期可知的各种基本数据类型、对象引用、returnAddress类型（指向一条字节码指令的地址）jvm规范中，这个区域规定了两种异常状况：StackOverflowError和OutOfMemoryError。</p>\n<h3 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h3><p>&emsp; &emsp;本地方法栈的作用和虚拟机栈的作用很相似，它们的区别在于虚拟机栈为虚拟机执行java方法服务，而本地方法栈则为执行本地方法服务。有的虚拟机直接把本地方法栈和虚拟机栈二合一。与虚拟机栈一样，本地方法栈的异常也有两个：StackOverflowError和OutOfMemoryError。</p>\n<h3 id=\"java堆区\"><a href=\"#java堆区\" class=\"headerlink\" title=\"java堆区\"></a>java堆区</h3><p>&emsp; &emsp;java堆是虚拟机所管理的内存中最大的一块，它是被所有线程共享的一块内存区域，该区域在虚拟机启动的时候创建。这个区域的唯一目的就是存放对象实例。java堆是垃圾收集器工作的主要区域，由于垃圾收集器基本都采用分代收集的算法，所以java堆从垃圾收集器的角度来划分可以细分为新生代和老年代；从内存分配的角度来看，线程共享的java堆可能划分出多个线程私有的分配缓冲区。<br><br>&emsp; &emsp;java堆区可以是物理上不连续的内存空间，只要逻辑上是连续的即可；一般而言我们的虚拟机java堆内存不是固定大小的，是可以扩展的。如果在堆中没有足够内存分配给对象实例，并且堆内存无法再扩展时，虚拟机将会抛出OutOfMemoryError异常。</p>\n<h3 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h3><p>&emsp; &emsp;方法区与java堆区一样是各个线程共享的内存区域，这个区域存储了类信息、常量、静态变量等数据。java虚拟机规范中把方法区描述为堆得一部分逻辑，它又有一个名字——非堆，目的是与普通java堆进行区分。相对而言垃圾收集器在这个区域很少活动，因此一部分人把这个区域叫做“永久代”。这个区域的内存回收目标主要是针对常量池的回收和类型的卸载，然而类型卸载的条件是很苛刻的。该区域和和java堆区一样，当内存不够分配时会抛出OutOfMemoryError.</p>\n<h3 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h3><p>&emsp; &emsp;运行时常量池是方法区的一部分；一个Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是编译时常量池，用于存放编译期生成的常量。编译时常量池在类被加载后会放入方法区的运行时常量池中。与编译期常量池不同的是，运运行时常量池是动态的，运行期间产生的新的常量也会被放入这个区域，如：String类的intern()方法。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>&emsp; &emsp;该篇对jvm内存只能算一个概览，给小伙伴们介绍了一些概念性的东西，很多地方是值得去深入研究的，比如具体一个对象实例是如何被分配到堆内存的，类的加载过程，方法执行时方法栈的入栈与出栈的具体过程······。jvm博大精深，我在这提供一个梗概，小伙伴们如果有时间可以细细推敲推敲。</p>"},{"title":"jvm基础篇二之对象","date":"2019-04-23T02:17:43.000Z","_content":"\n作者：muggle\n\n###  对象的创建\n\n&emsp; &emsp;在语言层面上，创建一个对象通常是通过new关键字来创建，在虚拟机中遇到一条new指令时，首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过；如果没有的话就会先加载这个类；类加载检查完后，虚拟机将会为新生对象分配内存。对象所需内存的大小在类加载完成后便可完全确定，在堆中为对象划分一块内存出来。\n\n&emsp; &emsp;虚拟机给对象分配内存的方式有两种——“指针碰撞”的方式和“空闲列表”的方式。如果java堆内存是绝对规整的，所有用过的内存放在一边，未使用的内存放在另一边，中间放一个指针作为指示器，那分配内存就只是把指针向未使用区域挪一段与对象大小相等的距离；这种分配方式叫指针碰撞式，如图1所示。\n<!--more-->\n\n![图1：指针碰撞式内存分配方式](http://upload-images.jianshu.io/upload_images/13612520-35177fc9f287a7f3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n我们知道，堆内存随时都可能被垃圾收集器回收的，当内存被回收后堆内存就可能不是连续的了，所以当采用指针碰撞的方式时，垃圾收集器必须有内存整理的功能，能对垃圾回收后的零散内存进行整理。而空闲列表的方式则不需要垃圾收集有这个功能，采用这种方式时虚拟机会维护一张表，用于记录那些内存是可用的，当需要分配内存时就从表中找出一块足够的内存进行分配，并记录在表上。\n\n&emsp; &emsp;内存分配完成后，虚拟机需要将分配到的内存空间都初始化；接下来虚拟机会对对象进行必要的设置，例如这个对象是哪个类的实例，如何才能找到类的元数据信息、对象的哈希值、对象的GC的分代年龄等信息。这些信息存在对象的对象头之中。完成这些工作后，从虚拟机的角度来看一个新的对象就产生了，但从程序的角度来看对象创建才刚刚开始，对象尚未执行初始化方法，各个字段都还未赋值，接下来会执行初始化方法，只有在执行初始化方法后，一个真正可用的对象才算是被创建。\n### 对象的内存\n在HotSpot虚拟机中，对象在内存中分为三块区域：对象头、实例数据、和对齐填充。对象头包括两部分信息，第一部分用于存储对象自身运行的运行时数据，如哈希码、GC分代年龄、锁状态标志线程持有的锁等。对象头的另外一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例\n。接下来的实例数据部分是对象真正存储的有效信息，也是在代码中所定义的各个字段的内容。这些字段无论是在父类那继承过来的还是子类里定义都要记录下来。第三部分对齐填充不是必然存在的，它仅仅起占位符的作用，用以填充内存。\n### 对象的访问定位\n  &emsp; &emsp;建立对象是为了使用对象，我们的java程序需要通过栈上的reference来操作堆上的对象。通过reference来访问对象的方法有两种——使用句柄和直接指针。在虚拟机执行一个方法时，虚拟机栈 中会为方法分配一个 局部变量表，一个操作数栈；局部变量表是用于保存函数的参数以及局部变量的，其保存的类型有boolean、byte、char、short、int、float、reference和returnAddress八种；方法在执行的过程中，会有各种各样的字节码指令往操作数栈中执行入栈和出栈操作，完成数据的运算。基本数据类型直接存储到变量表中。那reference是如何找到引用的对象的呢？\n\n  &emsp; &emsp;如果使用句柄的话，那么会在java堆中划分一块内存来作为句柄池，reference中存储的是句柄的地址，而句柄中包含了对象的具体地址信息，如图2所示\n![图:2：通过句柄访问对象](http://upload-images.jianshu.io/upload_images/13612520-444340fc1999cdc6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n  &emsp; &emsp;如果使用直接指针访问，那么java堆对象的布局则如图3所示；\n![图3：通过直接指针访问对象](http://upload-images.jianshu.io/upload_images/13612520-cfd7ee35d69ee849?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 小结\n  &emsp; &emsp;对象的内存分布使用情况就介绍到这，感兴趣的小伙伴可以自己画一画当虚拟机执行递归方法时的堆栈运行状况的示意图。","source":"_posts/jvm-2.md","raw":"---\ntitle: jvm基础篇二之对象\ndate: 2019-04-23 10:17:43\ntags: jvm\n---\n\n作者：muggle\n\n###  对象的创建\n\n&emsp; &emsp;在语言层面上，创建一个对象通常是通过new关键字来创建，在虚拟机中遇到一条new指令时，首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过；如果没有的话就会先加载这个类；类加载检查完后，虚拟机将会为新生对象分配内存。对象所需内存的大小在类加载完成后便可完全确定，在堆中为对象划分一块内存出来。\n\n&emsp; &emsp;虚拟机给对象分配内存的方式有两种——“指针碰撞”的方式和“空闲列表”的方式。如果java堆内存是绝对规整的，所有用过的内存放在一边，未使用的内存放在另一边，中间放一个指针作为指示器，那分配内存就只是把指针向未使用区域挪一段与对象大小相等的距离；这种分配方式叫指针碰撞式，如图1所示。\n<!--more-->\n\n![图1：指针碰撞式内存分配方式](http://upload-images.jianshu.io/upload_images/13612520-35177fc9f287a7f3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n我们知道，堆内存随时都可能被垃圾收集器回收的，当内存被回收后堆内存就可能不是连续的了，所以当采用指针碰撞的方式时，垃圾收集器必须有内存整理的功能，能对垃圾回收后的零散内存进行整理。而空闲列表的方式则不需要垃圾收集有这个功能，采用这种方式时虚拟机会维护一张表，用于记录那些内存是可用的，当需要分配内存时就从表中找出一块足够的内存进行分配，并记录在表上。\n\n&emsp; &emsp;内存分配完成后，虚拟机需要将分配到的内存空间都初始化；接下来虚拟机会对对象进行必要的设置，例如这个对象是哪个类的实例，如何才能找到类的元数据信息、对象的哈希值、对象的GC的分代年龄等信息。这些信息存在对象的对象头之中。完成这些工作后，从虚拟机的角度来看一个新的对象就产生了，但从程序的角度来看对象创建才刚刚开始，对象尚未执行初始化方法，各个字段都还未赋值，接下来会执行初始化方法，只有在执行初始化方法后，一个真正可用的对象才算是被创建。\n### 对象的内存\n在HotSpot虚拟机中，对象在内存中分为三块区域：对象头、实例数据、和对齐填充。对象头包括两部分信息，第一部分用于存储对象自身运行的运行时数据，如哈希码、GC分代年龄、锁状态标志线程持有的锁等。对象头的另外一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例\n。接下来的实例数据部分是对象真正存储的有效信息，也是在代码中所定义的各个字段的内容。这些字段无论是在父类那继承过来的还是子类里定义都要记录下来。第三部分对齐填充不是必然存在的，它仅仅起占位符的作用，用以填充内存。\n### 对象的访问定位\n  &emsp; &emsp;建立对象是为了使用对象，我们的java程序需要通过栈上的reference来操作堆上的对象。通过reference来访问对象的方法有两种——使用句柄和直接指针。在虚拟机执行一个方法时，虚拟机栈 中会为方法分配一个 局部变量表，一个操作数栈；局部变量表是用于保存函数的参数以及局部变量的，其保存的类型有boolean、byte、char、short、int、float、reference和returnAddress八种；方法在执行的过程中，会有各种各样的字节码指令往操作数栈中执行入栈和出栈操作，完成数据的运算。基本数据类型直接存储到变量表中。那reference是如何找到引用的对象的呢？\n\n  &emsp; &emsp;如果使用句柄的话，那么会在java堆中划分一块内存来作为句柄池，reference中存储的是句柄的地址，而句柄中包含了对象的具体地址信息，如图2所示\n![图:2：通过句柄访问对象](http://upload-images.jianshu.io/upload_images/13612520-444340fc1999cdc6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n  &emsp; &emsp;如果使用直接指针访问，那么java堆对象的布局则如图3所示；\n![图3：通过直接指针访问对象](http://upload-images.jianshu.io/upload_images/13612520-cfd7ee35d69ee849?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 小结\n  &emsp; &emsp;对象的内存分布使用情况就介绍到这，感兴趣的小伙伴可以自己画一画当虚拟机执行递归方法时的堆栈运行状况的示意图。","slug":"jvm-2","published":1,"updated":"2019-04-23T09:23:52.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxs9000lvovmfsoyzjak","content":"<p>作者：muggle</p>\n<h3 id=\"对象的创建\"><a href=\"#对象的创建\" class=\"headerlink\" title=\"对象的创建\"></a>对象的创建</h3><p>&emsp; &emsp;在语言层面上，创建一个对象通常是通过new关键字来创建，在虚拟机中遇到一条new指令时，首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过；如果没有的话就会先加载这个类；类加载检查完后，虚拟机将会为新生对象分配内存。对象所需内存的大小在类加载完成后便可完全确定，在堆中为对象划分一块内存出来。</p>\n<p>&emsp; &emsp;虚拟机给对象分配内存的方式有两种——“指针碰撞”的方式和“空闲列表”的方式。如果java堆内存是绝对规整的，所有用过的内存放在一边，未使用的内存放在另一边，中间放一个指针作为指示器，那分配内存就只是把指针向未使用区域挪一段与对象大小相等的距离；这种分配方式叫指针碰撞式，如图1所示。<br><a id=\"more\"></a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/13612520-35177fc9f287a7f3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图1：指针碰撞式内存分配方式\"></p>\n<p>我们知道，堆内存随时都可能被垃圾收集器回收的，当内存被回收后堆内存就可能不是连续的了，所以当采用指针碰撞的方式时，垃圾收集器必须有内存整理的功能，能对垃圾回收后的零散内存进行整理。而空闲列表的方式则不需要垃圾收集有这个功能，采用这种方式时虚拟机会维护一张表，用于记录那些内存是可用的，当需要分配内存时就从表中找出一块足够的内存进行分配，并记录在表上。</p>\n<p>&emsp; &emsp;内存分配完成后，虚拟机需要将分配到的内存空间都初始化；接下来虚拟机会对对象进行必要的设置，例如这个对象是哪个类的实例，如何才能找到类的元数据信息、对象的哈希值、对象的GC的分代年龄等信息。这些信息存在对象的对象头之中。完成这些工作后，从虚拟机的角度来看一个新的对象就产生了，但从程序的角度来看对象创建才刚刚开始，对象尚未执行初始化方法，各个字段都还未赋值，接下来会执行初始化方法，只有在执行初始化方法后，一个真正可用的对象才算是被创建。</p>\n<h3 id=\"对象的内存\"><a href=\"#对象的内存\" class=\"headerlink\" title=\"对象的内存\"></a>对象的内存</h3><p>在HotSpot虚拟机中，对象在内存中分为三块区域：对象头、实例数据、和对齐填充。对象头包括两部分信息，第一部分用于存储对象自身运行的运行时数据，如哈希码、GC分代年龄、锁状态标志线程持有的锁等。对象头的另外一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例<br>。接下来的实例数据部分是对象真正存储的有效信息，也是在代码中所定义的各个字段的内容。这些字段无论是在父类那继承过来的还是子类里定义都要记录下来。第三部分对齐填充不是必然存在的，它仅仅起占位符的作用，用以填充内存。</p>\n<h3 id=\"对象的访问定位\"><a href=\"#对象的访问定位\" class=\"headerlink\" title=\"对象的访问定位\"></a>对象的访问定位</h3><p>  &emsp; &emsp;建立对象是为了使用对象，我们的java程序需要通过栈上的reference来操作堆上的对象。通过reference来访问对象的方法有两种——使用句柄和直接指针。在虚拟机执行一个方法时，虚拟机栈 中会为方法分配一个 局部变量表，一个操作数栈；局部变量表是用于保存函数的参数以及局部变量的，其保存的类型有boolean、byte、char、short、int、float、reference和returnAddress八种；方法在执行的过程中，会有各种各样的字节码指令往操作数栈中执行入栈和出栈操作，完成数据的运算。基本数据类型直接存储到变量表中。那reference是如何找到引用的对象的呢？</p>\n<p>  &emsp; &emsp;如果使用句柄的话，那么会在java堆中划分一块内存来作为句柄池，reference中存储的是句柄的地址，而句柄中包含了对象的具体地址信息，如图2所示<br><img src=\"http://upload-images.jianshu.io/upload_images/13612520-444340fc1999cdc6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图:2：通过句柄访问对象\"></p>\n<p>  &emsp; &emsp;如果使用直接指针访问，那么java堆对象的布局则如图3所示；<br><img src=\"http://upload-images.jianshu.io/upload_images/13612520-cfd7ee35d69ee849?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图3：通过直接指针访问对象\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>  &emsp; &emsp;对象的内存分布使用情况就介绍到这，感兴趣的小伙伴可以自己画一画当虚拟机执行递归方法时的堆栈运行状况的示意图。</p>\n","site":{"data":{}},"excerpt":"<p>作者：muggle</p>\n<h3 id=\"对象的创建\"><a href=\"#对象的创建\" class=\"headerlink\" title=\"对象的创建\"></a>对象的创建</h3><p>&emsp; &emsp;在语言层面上，创建一个对象通常是通过new关键字来创建，在虚拟机中遇到一条new指令时，首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过；如果没有的话就会先加载这个类；类加载检查完后，虚拟机将会为新生对象分配内存。对象所需内存的大小在类加载完成后便可完全确定，在堆中为对象划分一块内存出来。</p>\n<p>&emsp; &emsp;虚拟机给对象分配内存的方式有两种——“指针碰撞”的方式和“空闲列表”的方式。如果java堆内存是绝对规整的，所有用过的内存放在一边，未使用的内存放在另一边，中间放一个指针作为指示器，那分配内存就只是把指针向未使用区域挪一段与对象大小相等的距离；这种分配方式叫指针碰撞式，如图1所示。<br>","more":"</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/13612520-35177fc9f287a7f3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图1：指针碰撞式内存分配方式\"></p>\n<p>我们知道，堆内存随时都可能被垃圾收集器回收的，当内存被回收后堆内存就可能不是连续的了，所以当采用指针碰撞的方式时，垃圾收集器必须有内存整理的功能，能对垃圾回收后的零散内存进行整理。而空闲列表的方式则不需要垃圾收集有这个功能，采用这种方式时虚拟机会维护一张表，用于记录那些内存是可用的，当需要分配内存时就从表中找出一块足够的内存进行分配，并记录在表上。</p>\n<p>&emsp; &emsp;内存分配完成后，虚拟机需要将分配到的内存空间都初始化；接下来虚拟机会对对象进行必要的设置，例如这个对象是哪个类的实例，如何才能找到类的元数据信息、对象的哈希值、对象的GC的分代年龄等信息。这些信息存在对象的对象头之中。完成这些工作后，从虚拟机的角度来看一个新的对象就产生了，但从程序的角度来看对象创建才刚刚开始，对象尚未执行初始化方法，各个字段都还未赋值，接下来会执行初始化方法，只有在执行初始化方法后，一个真正可用的对象才算是被创建。</p>\n<h3 id=\"对象的内存\"><a href=\"#对象的内存\" class=\"headerlink\" title=\"对象的内存\"></a>对象的内存</h3><p>在HotSpot虚拟机中，对象在内存中分为三块区域：对象头、实例数据、和对齐填充。对象头包括两部分信息，第一部分用于存储对象自身运行的运行时数据，如哈希码、GC分代年龄、锁状态标志线程持有的锁等。对象头的另外一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例<br>。接下来的实例数据部分是对象真正存储的有效信息，也是在代码中所定义的各个字段的内容。这些字段无论是在父类那继承过来的还是子类里定义都要记录下来。第三部分对齐填充不是必然存在的，它仅仅起占位符的作用，用以填充内存。</p>\n<h3 id=\"对象的访问定位\"><a href=\"#对象的访问定位\" class=\"headerlink\" title=\"对象的访问定位\"></a>对象的访问定位</h3><p>  &emsp; &emsp;建立对象是为了使用对象，我们的java程序需要通过栈上的reference来操作堆上的对象。通过reference来访问对象的方法有两种——使用句柄和直接指针。在虚拟机执行一个方法时，虚拟机栈 中会为方法分配一个 局部变量表，一个操作数栈；局部变量表是用于保存函数的参数以及局部变量的，其保存的类型有boolean、byte、char、short、int、float、reference和returnAddress八种；方法在执行的过程中，会有各种各样的字节码指令往操作数栈中执行入栈和出栈操作，完成数据的运算。基本数据类型直接存储到变量表中。那reference是如何找到引用的对象的呢？</p>\n<p>  &emsp; &emsp;如果使用句柄的话，那么会在java堆中划分一块内存来作为句柄池，reference中存储的是句柄的地址，而句柄中包含了对象的具体地址信息，如图2所示<br><img src=\"http://upload-images.jianshu.io/upload_images/13612520-444340fc1999cdc6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图:2：通过句柄访问对象\"></p>\n<p>  &emsp; &emsp;如果使用直接指针访问，那么java堆对象的布局则如图3所示；<br><img src=\"http://upload-images.jianshu.io/upload_images/13612520-cfd7ee35d69ee849?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图3：通过直接指针访问对象\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>  &emsp; &emsp;对象的内存分布使用情况就介绍到这，感兴趣的小伙伴可以自己画一画当虚拟机执行递归方法时的堆栈运行状况的示意图。</p>"},{"title":"jvm基础篇三之垃圾收集器","date":"2019-04-24T02:49:15.000Z","_content":"\n\n##  垃圾收集器介绍\n&emsp; &emsp;java内存在运行时被分为多个区域，其中程序计数器、虚拟机栈、本地方法栈三个区域随线程生成和销毁；每一个栈帧中分配多少内存基本上是在类结构确定下来时就已知的，在这几个区域内就不需要过多考虑回收问题，因为方法结束或者线程结束时，内存自然就跟着回收了。而堆区就不一样了，我们只有在程序运行的时候才能知道哪些对象会被创建，这部分内存是动态分配的，垃圾收集器主要关注的也就是这部分内存。\n\n<!--more-->\n\n##  垃圾收集器算法\n&emsp; &emsp;jdk11刚发布不久，这个版本发布了一款新的垃圾收集器——G1垃圾收集器,这款垃圾收集器有很多优异的特性，我会在后文做介绍，这里先从简单的慢慢说起。\n\n&emsp; &emsp;引用计数算法是最初垃圾收集器采用的算法，也是相对简单的一种算法，其原理是：给对象中添加一个引用计数器，每当有一个地方引用它的时候这个计数器就加一；当引用失效，计数器就减一；任何时刻计数器为0则该对象就会被垃圾收集器回收。这种算法的缺点是当对象之间相互循环引用的时候，对象将永远不会被回收。举个例子——有类TestOne,类TestTwo;它们互相是对方的成员，如下：\n```java\n public static void main(String[] args) {\n    TestOne testOne=new TestOne();\n    TestTwo testTwo=new TestTwo();\n    testOne.obj=testTwo;\n    testTwo.obj=testOne;\n    testOne=null;\n    testTwo=null;\n}\n\n```\n理论上当代码执行到testTwo=null的时候 new TestOne() new TestTwo() 两块内存应该要被回收的，但是因为它们相互引用对方导致引用计数器不为0，所以这两块内存没有引用指向它们却无法被回收——这便是这种算法所存在的问题。\n\n&emsp; &emsp;可达性分析算法是使用比较广泛的算法。这个算法的基本思路是通过一系列的称为“GC Roots”的对象作为起点，从这些节点向下搜索，搜索所走过的路径称作引用链；当一个对象和GC Roots之间不存在引用链的时候，这个对象将被回收；也就是说一个存活的对象向上追溯它的引用链，其头部必然是GC Roots,如果不是将被回收。在虚拟机中可以作为GC Roots的可以是：虚拟机栈中引用的对象、方法区中类静态属性引用的对象、方法区中常量引用的对象，本地方法栈中Native方法引用的对象；在堆区一个存活的对象被这些对象所直接引用或间接引用(引用又分为强引用、软引用、弱引用、、虚引用，引用强调依次降低，感兴趣的可以详细了解一下)。\n&emsp; &emsp;当一个对象的引用链中没有GC Roots的时候并不会被马上回收，第一次他会被标记并筛选，当对象没有覆盖finalize()方法或该方法已经被虚拟机调用过，那么它会被放入一个叫做F-Queue的队列中等待被虚拟机自动回收；否则虚拟机会执行finalize()方法——当我们没有重写finalize()方法时，对象内存自然被回收掉，如果重写了这个方法，那么结果就会变得很有趣，下面做一个示例：\n```java\npublic class Main {\n    public static  Main test=null;\n\n    @Override\n    protected void finalize() throws Throwable {\n        super.finalize();\n        System.out.println(\"执行了一次 finalize()\");\n        Main.test=this;\n    }\n\n    public static void main(String[] args) {\n        test=new Main();\n        // 让test失去 GC RootS\n        test=null;\n        // 调用 finalize()方法\n        System.gc();\n        // sleep一会确保finalize()方法执行\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        // 因为在finalize()方法中重新将this(也就是 new Main())赋值给了test 所以没被回收\n        if(test!=null){\n            System.out.println(\"对象存活了下来\");\n        }else{\n            System.out.println(\"对象死了\");\n        }\n        // 再来一次\n        test=null;\n        System.gc();\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        // 这一次却死了，因为finalize()方法已经被执行过，虚拟机直接将对象扔到 F-Queue里面等待回收\n        if(test!=null){\n            System.out.println(\"对象存活了下来\");\n        }else{\n            System.out.println(\"对象死了\");\n        }\n    }\n\n}\n```\n运行结果：\n> 执行了一次 finalize()<br/>\n> 对象存活了下来<br/>\n> 对象死了\n\n##  回收方法区\n&emsp; &emsp;因为方法区的内存回收条件很苛刻，因此方法区被人称作永久代，在这个区域回收的内存主要为废弃的常量和无用的类；那么如何判定一个常量是否废弃呢？比如当一个字符串进入了常量池，但没有任何地方引用它，如果此时发生了内存回收，那么这个常量就会被清除出常量池——发生场景：一个类有一个成员 pubulic static String test=\"aaa\";当这个类被加载的时候\"aaa\"进入常量池，当其他地方没有字符串等于\"aaa\"的时候并且此时这个类由于某种原因被卸载掉，此时这个\"aaa\"将会被回收。如何判定一个类是无用的类呢？需要满足三个条件：\n   > 该类所有的实例都被回收<br/>\n   >    加载该类的ClassLoader已经被回收\n   >    <br/>该类的Class对象没在任何地方被引用，无法通过反射访问该类\n\n## 写在末尾\n   &emsp; &emsp;本来还想写垃圾回收的算法的，结果时间不太够，那就留在下一次写吧。微信留言功能不能开通，有没有大佬指点一下是怎么回事？开通留言和大佬们沟通一波岂不是美滋滋。","source":"_posts/jvm-3.md","raw":"---\ntitle: jvm基础篇三之垃圾收集器\ndate: 2019-04-24 10:49:15\ntags: jvm\n---\n\n\n##  垃圾收集器介绍\n&emsp; &emsp;java内存在运行时被分为多个区域，其中程序计数器、虚拟机栈、本地方法栈三个区域随线程生成和销毁；每一个栈帧中分配多少内存基本上是在类结构确定下来时就已知的，在这几个区域内就不需要过多考虑回收问题，因为方法结束或者线程结束时，内存自然就跟着回收了。而堆区就不一样了，我们只有在程序运行的时候才能知道哪些对象会被创建，这部分内存是动态分配的，垃圾收集器主要关注的也就是这部分内存。\n\n<!--more-->\n\n##  垃圾收集器算法\n&emsp; &emsp;jdk11刚发布不久，这个版本发布了一款新的垃圾收集器——G1垃圾收集器,这款垃圾收集器有很多优异的特性，我会在后文做介绍，这里先从简单的慢慢说起。\n\n&emsp; &emsp;引用计数算法是最初垃圾收集器采用的算法，也是相对简单的一种算法，其原理是：给对象中添加一个引用计数器，每当有一个地方引用它的时候这个计数器就加一；当引用失效，计数器就减一；任何时刻计数器为0则该对象就会被垃圾收集器回收。这种算法的缺点是当对象之间相互循环引用的时候，对象将永远不会被回收。举个例子——有类TestOne,类TestTwo;它们互相是对方的成员，如下：\n```java\n public static void main(String[] args) {\n    TestOne testOne=new TestOne();\n    TestTwo testTwo=new TestTwo();\n    testOne.obj=testTwo;\n    testTwo.obj=testOne;\n    testOne=null;\n    testTwo=null;\n}\n\n```\n理论上当代码执行到testTwo=null的时候 new TestOne() new TestTwo() 两块内存应该要被回收的，但是因为它们相互引用对方导致引用计数器不为0，所以这两块内存没有引用指向它们却无法被回收——这便是这种算法所存在的问题。\n\n&emsp; &emsp;可达性分析算法是使用比较广泛的算法。这个算法的基本思路是通过一系列的称为“GC Roots”的对象作为起点，从这些节点向下搜索，搜索所走过的路径称作引用链；当一个对象和GC Roots之间不存在引用链的时候，这个对象将被回收；也就是说一个存活的对象向上追溯它的引用链，其头部必然是GC Roots,如果不是将被回收。在虚拟机中可以作为GC Roots的可以是：虚拟机栈中引用的对象、方法区中类静态属性引用的对象、方法区中常量引用的对象，本地方法栈中Native方法引用的对象；在堆区一个存活的对象被这些对象所直接引用或间接引用(引用又分为强引用、软引用、弱引用、、虚引用，引用强调依次降低，感兴趣的可以详细了解一下)。\n&emsp; &emsp;当一个对象的引用链中没有GC Roots的时候并不会被马上回收，第一次他会被标记并筛选，当对象没有覆盖finalize()方法或该方法已经被虚拟机调用过，那么它会被放入一个叫做F-Queue的队列中等待被虚拟机自动回收；否则虚拟机会执行finalize()方法——当我们没有重写finalize()方法时，对象内存自然被回收掉，如果重写了这个方法，那么结果就会变得很有趣，下面做一个示例：\n```java\npublic class Main {\n    public static  Main test=null;\n\n    @Override\n    protected void finalize() throws Throwable {\n        super.finalize();\n        System.out.println(\"执行了一次 finalize()\");\n        Main.test=this;\n    }\n\n    public static void main(String[] args) {\n        test=new Main();\n        // 让test失去 GC RootS\n        test=null;\n        // 调用 finalize()方法\n        System.gc();\n        // sleep一会确保finalize()方法执行\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        // 因为在finalize()方法中重新将this(也就是 new Main())赋值给了test 所以没被回收\n        if(test!=null){\n            System.out.println(\"对象存活了下来\");\n        }else{\n            System.out.println(\"对象死了\");\n        }\n        // 再来一次\n        test=null;\n        System.gc();\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        // 这一次却死了，因为finalize()方法已经被执行过，虚拟机直接将对象扔到 F-Queue里面等待回收\n        if(test!=null){\n            System.out.println(\"对象存活了下来\");\n        }else{\n            System.out.println(\"对象死了\");\n        }\n    }\n\n}\n```\n运行结果：\n> 执行了一次 finalize()<br/>\n> 对象存活了下来<br/>\n> 对象死了\n\n##  回收方法区\n&emsp; &emsp;因为方法区的内存回收条件很苛刻，因此方法区被人称作永久代，在这个区域回收的内存主要为废弃的常量和无用的类；那么如何判定一个常量是否废弃呢？比如当一个字符串进入了常量池，但没有任何地方引用它，如果此时发生了内存回收，那么这个常量就会被清除出常量池——发生场景：一个类有一个成员 pubulic static String test=\"aaa\";当这个类被加载的时候\"aaa\"进入常量池，当其他地方没有字符串等于\"aaa\"的时候并且此时这个类由于某种原因被卸载掉，此时这个\"aaa\"将会被回收。如何判定一个类是无用的类呢？需要满足三个条件：\n   > 该类所有的实例都被回收<br/>\n   >    加载该类的ClassLoader已经被回收\n   >    <br/>该类的Class对象没在任何地方被引用，无法通过反射访问该类\n\n## 写在末尾\n   &emsp; &emsp;本来还想写垃圾回收的算法的，结果时间不太够，那就留在下一次写吧。微信留言功能不能开通，有没有大佬指点一下是怎么回事？开通留言和大佬们沟通一波岂不是美滋滋。","slug":"jvm-3","published":1,"updated":"2019-04-24T03:05:48.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxsa000ovovmjklj2zhk","content":"<h2 id=\"垃圾收集器介绍\"><a href=\"#垃圾收集器介绍\" class=\"headerlink\" title=\"垃圾收集器介绍\"></a>垃圾收集器介绍</h2><p>&emsp; &emsp;java内存在运行时被分为多个区域，其中程序计数器、虚拟机栈、本地方法栈三个区域随线程生成和销毁；每一个栈帧中分配多少内存基本上是在类结构确定下来时就已知的，在这几个区域内就不需要过多考虑回收问题，因为方法结束或者线程结束时，内存自然就跟着回收了。而堆区就不一样了，我们只有在程序运行的时候才能知道哪些对象会被创建，这部分内存是动态分配的，垃圾收集器主要关注的也就是这部分内存。</p>\n<a id=\"more\"></a>\n<h2 id=\"垃圾收集器算法\"><a href=\"#垃圾收集器算法\" class=\"headerlink\" title=\"垃圾收集器算法\"></a>垃圾收集器算法</h2><p>&emsp; &emsp;jdk11刚发布不久，这个版本发布了一款新的垃圾收集器——G1垃圾收集器,这款垃圾收集器有很多优异的特性，我会在后文做介绍，这里先从简单的慢慢说起。</p>\n<p>&emsp; &emsp;引用计数算法是最初垃圾收集器采用的算法，也是相对简单的一种算法，其原理是：给对象中添加一个引用计数器，每当有一个地方引用它的时候这个计数器就加一；当引用失效，计数器就减一；任何时刻计数器为0则该对象就会被垃圾收集器回收。这种算法的缺点是当对象之间相互循环引用的时候，对象将永远不会被回收。举个例子——有类TestOne,类TestTwo;它们互相是对方的成员，如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    TestOne testOne=<span class=\"keyword\">new</span> TestOne();</span><br><span class=\"line\">    TestTwo testTwo=<span class=\"keyword\">new</span> TestTwo();</span><br><span class=\"line\">    testOne.obj=testTwo;</span><br><span class=\"line\">    testTwo.obj=testOne;</span><br><span class=\"line\">    testOne=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    testTwo=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>理论上当代码执行到testTwo=null的时候 new TestOne() new TestTwo() 两块内存应该要被回收的，但是因为它们相互引用对方导致引用计数器不为0，所以这两块内存没有引用指向它们却无法被回收——这便是这种算法所存在的问题。</p>\n<p>&emsp; &emsp;可达性分析算法是使用比较广泛的算法。这个算法的基本思路是通过一系列的称为“GC Roots”的对象作为起点，从这些节点向下搜索，搜索所走过的路径称作引用链；当一个对象和GC Roots之间不存在引用链的时候，这个对象将被回收；也就是说一个存活的对象向上追溯它的引用链，其头部必然是GC Roots,如果不是将被回收。在虚拟机中可以作为GC Roots的可以是：虚拟机栈中引用的对象、方法区中类静态属性引用的对象、方法区中常量引用的对象，本地方法栈中Native方法引用的对象；在堆区一个存活的对象被这些对象所直接引用或间接引用(引用又分为强引用、软引用、弱引用、、虚引用，引用强调依次降低，感兴趣的可以详细了解一下)。<br>&emsp; &emsp;当一个对象的引用链中没有GC Roots的时候并不会被马上回收，第一次他会被标记并筛选，当对象没有覆盖finalize()方法或该方法已经被虚拟机调用过，那么它会被放入一个叫做F-Queue的队列中等待被虚拟机自动回收；否则虚拟机会执行finalize()方法——当我们没有重写finalize()方法时，对象内存自然被回收掉，如果重写了这个方法，那么结果就会变得很有趣，下面做一个示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span>  Main test=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">finalize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.finalize();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"执行了一次 finalize()\"</span>);</span><br><span class=\"line\">        Main.test=<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        test=<span class=\"keyword\">new</span> Main();</span><br><span class=\"line\">        <span class=\"comment\">// 让test失去 GC RootS</span></span><br><span class=\"line\">        test=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 调用 finalize()方法</span></span><br><span class=\"line\">        System.gc();</span><br><span class=\"line\">        <span class=\"comment\">// sleep一会确保finalize()方法执行</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 因为在finalize()方法中重新将this(也就是 new Main())赋值给了test 所以没被回收</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(test!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"对象存活了下来\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"对象死了\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 再来一次</span></span><br><span class=\"line\">        test=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        System.gc();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 这一次却死了，因为finalize()方法已经被执行过，虚拟机直接将对象扔到 F-Queue里面等待回收</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(test!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"对象存活了下来\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"对象死了\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果：</p>\n<blockquote>\n<p>执行了一次 finalize()<br><br>对象存活了下来<br><br>对象死了</p>\n</blockquote>\n<h2 id=\"回收方法区\"><a href=\"#回收方法区\" class=\"headerlink\" title=\"回收方法区\"></a>回收方法区</h2><p>&emsp; &emsp;因为方法区的内存回收条件很苛刻，因此方法区被人称作永久代，在这个区域回收的内存主要为废弃的常量和无用的类；那么如何判定一个常量是否废弃呢？比如当一个字符串进入了常量池，但没有任何地方引用它，如果此时发生了内存回收，那么这个常量就会被清除出常量池——发生场景：一个类有一个成员 pubulic static String test=”aaa”;当这个类被加载的时候”aaa”进入常量池，当其他地方没有字符串等于”aaa”的时候并且此时这个类由于某种原因被卸载掉，此时这个”aaa”将会被回收。如何判定一个类是无用的类呢？需要满足三个条件：</p>\n<blockquote>\n<p>该类所有的实例都被回收<br><br>   加载该类的ClassLoader已经被回收<br>   <br>该类的Class对象没在任何地方被引用，无法通过反射访问该类</p>\n</blockquote>\n<h2 id=\"写在末尾\"><a href=\"#写在末尾\" class=\"headerlink\" title=\"写在末尾\"></a>写在末尾</h2><p>   &emsp; &emsp;本来还想写垃圾回收的算法的，结果时间不太够，那就留在下一次写吧。微信留言功能不能开通，有没有大佬指点一下是怎么回事？开通留言和大佬们沟通一波岂不是美滋滋。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"垃圾收集器介绍\"><a href=\"#垃圾收集器介绍\" class=\"headerlink\" title=\"垃圾收集器介绍\"></a>垃圾收集器介绍</h2><p>&emsp; &emsp;java内存在运行时被分为多个区域，其中程序计数器、虚拟机栈、本地方法栈三个区域随线程生成和销毁；每一个栈帧中分配多少内存基本上是在类结构确定下来时就已知的，在这几个区域内就不需要过多考虑回收问题，因为方法结束或者线程结束时，内存自然就跟着回收了。而堆区就不一样了，我们只有在程序运行的时候才能知道哪些对象会被创建，这部分内存是动态分配的，垃圾收集器主要关注的也就是这部分内存。</p>","more":"<h2 id=\"垃圾收集器算法\"><a href=\"#垃圾收集器算法\" class=\"headerlink\" title=\"垃圾收集器算法\"></a>垃圾收集器算法</h2><p>&emsp; &emsp;jdk11刚发布不久，这个版本发布了一款新的垃圾收集器——G1垃圾收集器,这款垃圾收集器有很多优异的特性，我会在后文做介绍，这里先从简单的慢慢说起。</p>\n<p>&emsp; &emsp;引用计数算法是最初垃圾收集器采用的算法，也是相对简单的一种算法，其原理是：给对象中添加一个引用计数器，每当有一个地方引用它的时候这个计数器就加一；当引用失效，计数器就减一；任何时刻计数器为0则该对象就会被垃圾收集器回收。这种算法的缺点是当对象之间相互循环引用的时候，对象将永远不会被回收。举个例子——有类TestOne,类TestTwo;它们互相是对方的成员，如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    TestOne testOne=<span class=\"keyword\">new</span> TestOne();</span><br><span class=\"line\">    TestTwo testTwo=<span class=\"keyword\">new</span> TestTwo();</span><br><span class=\"line\">    testOne.obj=testTwo;</span><br><span class=\"line\">    testTwo.obj=testOne;</span><br><span class=\"line\">    testOne=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    testTwo=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>理论上当代码执行到testTwo=null的时候 new TestOne() new TestTwo() 两块内存应该要被回收的，但是因为它们相互引用对方导致引用计数器不为0，所以这两块内存没有引用指向它们却无法被回收——这便是这种算法所存在的问题。</p>\n<p>&emsp; &emsp;可达性分析算法是使用比较广泛的算法。这个算法的基本思路是通过一系列的称为“GC Roots”的对象作为起点，从这些节点向下搜索，搜索所走过的路径称作引用链；当一个对象和GC Roots之间不存在引用链的时候，这个对象将被回收；也就是说一个存活的对象向上追溯它的引用链，其头部必然是GC Roots,如果不是将被回收。在虚拟机中可以作为GC Roots的可以是：虚拟机栈中引用的对象、方法区中类静态属性引用的对象、方法区中常量引用的对象，本地方法栈中Native方法引用的对象；在堆区一个存活的对象被这些对象所直接引用或间接引用(引用又分为强引用、软引用、弱引用、、虚引用，引用强调依次降低，感兴趣的可以详细了解一下)。<br>&emsp; &emsp;当一个对象的引用链中没有GC Roots的时候并不会被马上回收，第一次他会被标记并筛选，当对象没有覆盖finalize()方法或该方法已经被虚拟机调用过，那么它会被放入一个叫做F-Queue的队列中等待被虚拟机自动回收；否则虚拟机会执行finalize()方法——当我们没有重写finalize()方法时，对象内存自然被回收掉，如果重写了这个方法，那么结果就会变得很有趣，下面做一个示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span>  Main test=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">finalize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.finalize();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"执行了一次 finalize()\"</span>);</span><br><span class=\"line\">        Main.test=<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        test=<span class=\"keyword\">new</span> Main();</span><br><span class=\"line\">        <span class=\"comment\">// 让test失去 GC RootS</span></span><br><span class=\"line\">        test=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 调用 finalize()方法</span></span><br><span class=\"line\">        System.gc();</span><br><span class=\"line\">        <span class=\"comment\">// sleep一会确保finalize()方法执行</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 因为在finalize()方法中重新将this(也就是 new Main())赋值给了test 所以没被回收</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(test!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"对象存活了下来\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"对象死了\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 再来一次</span></span><br><span class=\"line\">        test=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        System.gc();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 这一次却死了，因为finalize()方法已经被执行过，虚拟机直接将对象扔到 F-Queue里面等待回收</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(test!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"对象存活了下来\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"对象死了\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果：</p>\n<blockquote>\n<p>执行了一次 finalize()<br><br>对象存活了下来<br><br>对象死了</p>\n</blockquote>\n<h2 id=\"回收方法区\"><a href=\"#回收方法区\" class=\"headerlink\" title=\"回收方法区\"></a>回收方法区</h2><p>&emsp; &emsp;因为方法区的内存回收条件很苛刻，因此方法区被人称作永久代，在这个区域回收的内存主要为废弃的常量和无用的类；那么如何判定一个常量是否废弃呢？比如当一个字符串进入了常量池，但没有任何地方引用它，如果此时发生了内存回收，那么这个常量就会被清除出常量池——发生场景：一个类有一个成员 pubulic static String test=”aaa”;当这个类被加载的时候”aaa”进入常量池，当其他地方没有字符串等于”aaa”的时候并且此时这个类由于某种原因被卸载掉，此时这个”aaa”将会被回收。如何判定一个类是无用的类呢？需要满足三个条件：</p>\n<blockquote>\n<p>该类所有的实例都被回收<br><br>   加载该类的ClassLoader已经被回收<br>   <br>该类的Class对象没在任何地方被引用，无法通过反射访问该类</p>\n</blockquote>\n<h2 id=\"写在末尾\"><a href=\"#写在末尾\" class=\"headerlink\" title=\"写在末尾\"></a>写在末尾</h2><p>   &emsp; &emsp;本来还想写垃圾回收的算法的，结果时间不太够，那就留在下一次写吧。微信留言功能不能开通，有没有大佬指点一下是怎么回事？开通留言和大佬们沟通一波岂不是美滋滋。</p>"},{"title":"jvm基础篇四之垃圾收集算法","date":"2019-04-24T02:54:35.000Z","_content":"\n### 1 标记-清除算法\n标记-清除算法是最基础的算法，算法分为标记和清除两个阶段，首先标记出要清除的对象，在标记完后统一回收所有被标记的对象，标记方式为j《jvm系列之垃圾收集器》里面所提到的。这种算法标记和清除两个过程效率都不高；并且在标记清除后，内存空间变得很零散，产生大量内存碎片。当需要分配一个比较大的对象时有可能会导致找不到足够大的内存。<!--more-->\n\n标记清除算法图解（图片来源于百度图片）：![timg.jpg](https://upload-images.jianshu.io/upload_images/13612520-e59da44ca1b963c6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n&emsp; &emsp;为了解决标记清除效率低的问题，出现了复制算法；这种算法将内存划分为大小相等的两块内存，只使用其中一块。当这一块内存使用完了就将存活的对象复制到另一块上面去，然后把已使用的内存空间一次性清理掉，这种方法不必考虑内存碎片的情况，运行高效，实现简单。缺点是浪费了一半的内存。复制算法图解（图片来源百度图片）：![timg (1).jpg](https://upload-images.jianshu.io/upload_images/13612520-2f12466c88adfd82.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 3 标记-整理算法\n&emsp; &emsp;复制收集算法在对象存活率较高的时候就要进行较多的复制操作，导致效率变低。而且老年代很少会有内存回收，对老年代而言，复制算法做了大量的无用功。针对复制算法存在的的问题，有人提出了标记-整理算法。标记过程和标记-清除算法过程一样，但后续不是直接对可回收对象进行清理，而是让所有存活对象都向一方移动，整理内存，然后再进行清理。标记-整理算法图解（图片来源百度图片）：![timg (2).jpg](https://upload-images.jianshu.io/upload_images/13612520-4fd6dd6461485a3c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 4 分代收集算法\n&emsp; &emsp;分代收集算法思路是根据对象存活周期不同将内存划分为几块。一般是分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中每次收集时都会回收很多内存，选用高效率的复制算法，并且只需要预留少量的复制空间，用于复制存活对象。老年代中因为对象存活率高，采用标记-整理或标记清理算法节省内存空间提高清理效率。\n### 5 各版本jdk垃圾收集器一览\n| 收集器名称        | 区 &emsp; 域  | 说明  &emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp; |\n| ----------------- | :-----------: | -----------------------------------------------------------: |\n| Serial            |    新生代     | 单线程，GC时必须停止其它线程直到收集结束；JVM运行在client模式下新生代的默认收集器，简单有效；采用复制算法 |\n| ParNew            |    新生代     | Serial收集的多线程版，保留Serial的参数控制，算法等，暂停所有用户线程，采用复制算法；JVM运行在server的首先的新生代收集器；只有它能和CMS配合工作 |\n| Parallel Scavenge |    新生代     | 采用复制算法，并行的多线程收集器，与ParNew不同的是，关注点不是停顿时间，而是可控制的吞吐量，即运行用户代码的时间/（运行用户代码的时间+垃圾收集的时间）。可设置最大GC时间和吞吐量大小等参数，也可以让JVM自适应调整策略 |\n| CMS               |    新生代     | concurrent Mark Sweep，已获取最短回收停顿为目标，大部分的互联网站及服务端采用的方式，标记-清除算法 |\n| G1                | 新生代/老年代 |                   收集器最前沿版本，JDK 1.7，代替CMS的新产品 |\n| Serial Old（MSC） |    老年代     | Serial的老年版，单线程收集器，采用标记-整理算法，主要是client模式的JVM使用 |\n| Parallel Old      |    老年代     |              Parallel Scavenge的老年版，多线程，标记整理算法 |\n### jdk11 垃圾收集器——ZGC\n&emsp; &emsp;（网上搜的）ZGC是一个处于实验阶段的，可扩展的低延迟垃圾回收器，旨在实现以下几个目标：\n- 停顿时间不超过10ms\n- 停顿时间不随heap大小或存活对象大小增大而增大\n- 可以处理从几百兆到几T的内存大小\n\n限制：\n* 当前版本不支持类卸载\n* 当前版本不支持JVMCI\n\nZGC包含10个阶段，但是主要是两个阶段标记和relocating。GC循环从标记阶段开始，递归标记所有可达对象，标记阶段结束时，ZGC可以知道哪些对象仍然存在哪些是垃圾。ZGC将结果存储在每一页的位图（称为live map）中。在标记阶段，应用线程中的load barrier将未标记的引用压入线程本地的标记缓冲区。一旦缓冲区满，GC线程会拿到缓冲区的所有权，并且递归遍历此缓冲区所有可达对象。注意：应用线程负责压入缓冲区，GC线程负责递归遍历。\n\n&emsp; &emsp;标记阶段后，ZGC需要迁移relocate集中的所有对象。relocate集是一组页面集合，包含了根据某些标准（例如那些包含最多垃圾对象的页面）确定的需要迁移的页面。对象由GC线程或者应用线程迁移（通过load barrier）。ZGC为每个relocate集中的页面分配了转发表。转发表是一个哈希映射，它存储一个对象已被迁移到的地址（如果该对象已经被迁移）。GC线程遍历relocate集的活动对象，并迁移尚未迁移的所有对象。有时候会发生应用线程和GC线程同时试图迁移同一个对象，在这种情况下，ZGC使用CAS操作来确定胜利者。一旦GC线程完成了relocate集的处理，迁移阶段就完成了。虽然这时所有对象都已迁移，但是旧地引用址仍然有可能被使用，仍然需要通过转发表重新映射（remapping）。然后通过load barrier或者等到下一个标记循环修复这些引用。","source":"_posts/jvm-4.md","raw":"---\ntitle: jvm基础篇四之垃圾收集算法\ndate: 2019-04-24 10:54:35\ntags: jvm\n---\n\n### 1 标记-清除算法\n标记-清除算法是最基础的算法，算法分为标记和清除两个阶段，首先标记出要清除的对象，在标记完后统一回收所有被标记的对象，标记方式为j《jvm系列之垃圾收集器》里面所提到的。这种算法标记和清除两个过程效率都不高；并且在标记清除后，内存空间变得很零散，产生大量内存碎片。当需要分配一个比较大的对象时有可能会导致找不到足够大的内存。<!--more-->\n\n标记清除算法图解（图片来源于百度图片）：![timg.jpg](https://upload-images.jianshu.io/upload_images/13612520-e59da44ca1b963c6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n&emsp; &emsp;为了解决标记清除效率低的问题，出现了复制算法；这种算法将内存划分为大小相等的两块内存，只使用其中一块。当这一块内存使用完了就将存活的对象复制到另一块上面去，然后把已使用的内存空间一次性清理掉，这种方法不必考虑内存碎片的情况，运行高效，实现简单。缺点是浪费了一半的内存。复制算法图解（图片来源百度图片）：![timg (1).jpg](https://upload-images.jianshu.io/upload_images/13612520-2f12466c88adfd82.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 3 标记-整理算法\n&emsp; &emsp;复制收集算法在对象存活率较高的时候就要进行较多的复制操作，导致效率变低。而且老年代很少会有内存回收，对老年代而言，复制算法做了大量的无用功。针对复制算法存在的的问题，有人提出了标记-整理算法。标记过程和标记-清除算法过程一样，但后续不是直接对可回收对象进行清理，而是让所有存活对象都向一方移动，整理内存，然后再进行清理。标记-整理算法图解（图片来源百度图片）：![timg (2).jpg](https://upload-images.jianshu.io/upload_images/13612520-4fd6dd6461485a3c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 4 分代收集算法\n&emsp; &emsp;分代收集算法思路是根据对象存活周期不同将内存划分为几块。一般是分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中每次收集时都会回收很多内存，选用高效率的复制算法，并且只需要预留少量的复制空间，用于复制存活对象。老年代中因为对象存活率高，采用标记-整理或标记清理算法节省内存空间提高清理效率。\n### 5 各版本jdk垃圾收集器一览\n| 收集器名称        | 区 &emsp; 域  | 说明  &emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp; |\n| ----------------- | :-----------: | -----------------------------------------------------------: |\n| Serial            |    新生代     | 单线程，GC时必须停止其它线程直到收集结束；JVM运行在client模式下新生代的默认收集器，简单有效；采用复制算法 |\n| ParNew            |    新生代     | Serial收集的多线程版，保留Serial的参数控制，算法等，暂停所有用户线程，采用复制算法；JVM运行在server的首先的新生代收集器；只有它能和CMS配合工作 |\n| Parallel Scavenge |    新生代     | 采用复制算法，并行的多线程收集器，与ParNew不同的是，关注点不是停顿时间，而是可控制的吞吐量，即运行用户代码的时间/（运行用户代码的时间+垃圾收集的时间）。可设置最大GC时间和吞吐量大小等参数，也可以让JVM自适应调整策略 |\n| CMS               |    新生代     | concurrent Mark Sweep，已获取最短回收停顿为目标，大部分的互联网站及服务端采用的方式，标记-清除算法 |\n| G1                | 新生代/老年代 |                   收集器最前沿版本，JDK 1.7，代替CMS的新产品 |\n| Serial Old（MSC） |    老年代     | Serial的老年版，单线程收集器，采用标记-整理算法，主要是client模式的JVM使用 |\n| Parallel Old      |    老年代     |              Parallel Scavenge的老年版，多线程，标记整理算法 |\n### jdk11 垃圾收集器——ZGC\n&emsp; &emsp;（网上搜的）ZGC是一个处于实验阶段的，可扩展的低延迟垃圾回收器，旨在实现以下几个目标：\n- 停顿时间不超过10ms\n- 停顿时间不随heap大小或存活对象大小增大而增大\n- 可以处理从几百兆到几T的内存大小\n\n限制：\n* 当前版本不支持类卸载\n* 当前版本不支持JVMCI\n\nZGC包含10个阶段，但是主要是两个阶段标记和relocating。GC循环从标记阶段开始，递归标记所有可达对象，标记阶段结束时，ZGC可以知道哪些对象仍然存在哪些是垃圾。ZGC将结果存储在每一页的位图（称为live map）中。在标记阶段，应用线程中的load barrier将未标记的引用压入线程本地的标记缓冲区。一旦缓冲区满，GC线程会拿到缓冲区的所有权，并且递归遍历此缓冲区所有可达对象。注意：应用线程负责压入缓冲区，GC线程负责递归遍历。\n\n&emsp; &emsp;标记阶段后，ZGC需要迁移relocate集中的所有对象。relocate集是一组页面集合，包含了根据某些标准（例如那些包含最多垃圾对象的页面）确定的需要迁移的页面。对象由GC线程或者应用线程迁移（通过load barrier）。ZGC为每个relocate集中的页面分配了转发表。转发表是一个哈希映射，它存储一个对象已被迁移到的地址（如果该对象已经被迁移）。GC线程遍历relocate集的活动对象，并迁移尚未迁移的所有对象。有时候会发生应用线程和GC线程同时试图迁移同一个对象，在这种情况下，ZGC使用CAS操作来确定胜利者。一旦GC线程完成了relocate集的处理，迁移阶段就完成了。虽然这时所有对象都已迁移，但是旧地引用址仍然有可能被使用，仍然需要通过转发表重新映射（remapping）。然后通过load barrier或者等到下一个标记循环修复这些引用。","slug":"jvm-4","published":1,"updated":"2019-04-24T03:05:35.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxsc000qvovmp8gvk0ne","content":"<h3 id=\"1-标记-清除算法\"><a href=\"#1-标记-清除算法\" class=\"headerlink\" title=\"1 标记-清除算法\"></a>1 标记-清除算法</h3><p>标记-清除算法是最基础的算法，算法分为标记和清除两个阶段，首先标记出要清除的对象，在标记完后统一回收所有被标记的对象，标记方式为j《jvm系列之垃圾收集器》里面所提到的。这种算法标记和清除两个过程效率都不高；并且在标记清除后，内存空间变得很零散，产生大量内存碎片。当需要分配一个比较大的对象时有可能会导致找不到足够大的内存。<a id=\"more\"></a></p>\n<p>标记清除算法图解（图片来源于百度图片）：<img src=\"https://upload-images.jianshu.io/upload_images/13612520-e59da44ca1b963c6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"timg.jpg\"></p>\n<p>&emsp; &emsp;为了解决标记清除效率低的问题，出现了复制算法；这种算法将内存划分为大小相等的两块内存，只使用其中一块。当这一块内存使用完了就将存活的对象复制到另一块上面去，然后把已使用的内存空间一次性清理掉，这种方法不必考虑内存碎片的情况，运行高效，实现简单。缺点是浪费了一半的内存。复制算法图解（图片来源百度图片）：<img src=\"https://upload-images.jianshu.io/upload_images/13612520-2f12466c88adfd82.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"timg (1).jpg\"></p>\n<h3 id=\"3-标记-整理算法\"><a href=\"#3-标记-整理算法\" class=\"headerlink\" title=\"3 标记-整理算法\"></a>3 标记-整理算法</h3><p>&emsp; &emsp;复制收集算法在对象存活率较高的时候就要进行较多的复制操作，导致效率变低。而且老年代很少会有内存回收，对老年代而言，复制算法做了大量的无用功。针对复制算法存在的的问题，有人提出了标记-整理算法。标记过程和标记-清除算法过程一样，但后续不是直接对可回收对象进行清理，而是让所有存活对象都向一方移动，整理内存，然后再进行清理。标记-整理算法图解（图片来源百度图片）：<img src=\"https://upload-images.jianshu.io/upload_images/13612520-4fd6dd6461485a3c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"timg (2).jpg\"></p>\n<h3 id=\"4-分代收集算法\"><a href=\"#4-分代收集算法\" class=\"headerlink\" title=\"4 分代收集算法\"></a>4 分代收集算法</h3><p>&emsp; &emsp;分代收集算法思路是根据对象存活周期不同将内存划分为几块。一般是分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中每次收集时都会回收很多内存，选用高效率的复制算法，并且只需要预留少量的复制空间，用于复制存活对象。老年代中因为对象存活率高，采用标记-整理或标记清理算法节省内存空间提高清理效率。</p>\n<h3 id=\"5-各版本jdk垃圾收集器一览\"><a href=\"#5-各版本jdk垃圾收集器一览\" class=\"headerlink\" title=\"5 各版本jdk垃圾收集器一览\"></a>5 各版本jdk垃圾收集器一览</h3><table>\n<thead>\n<tr>\n<th>收集器名称</th>\n<th style=\"text-align:center\">区 &emsp; 域</th>\n<th style=\"text-align:right\">说明  &emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp;</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Serial</td>\n<td style=\"text-align:center\">新生代</td>\n<td style=\"text-align:right\">单线程，GC时必须停止其它线程直到收集结束；JVM运行在client模式下新生代的默认收集器，简单有效；采用复制算法</td>\n</tr>\n<tr>\n<td>ParNew</td>\n<td style=\"text-align:center\">新生代</td>\n<td style=\"text-align:right\">Serial收集的多线程版，保留Serial的参数控制，算法等，暂停所有用户线程，采用复制算法；JVM运行在server的首先的新生代收集器；只有它能和CMS配合工作</td>\n</tr>\n<tr>\n<td>Parallel Scavenge</td>\n<td style=\"text-align:center\">新生代</td>\n<td style=\"text-align:right\">采用复制算法，并行的多线程收集器，与ParNew不同的是，关注点不是停顿时间，而是可控制的吞吐量，即运行用户代码的时间/（运行用户代码的时间+垃圾收集的时间）。可设置最大GC时间和吞吐量大小等参数，也可以让JVM自适应调整策略</td>\n</tr>\n<tr>\n<td>CMS</td>\n<td style=\"text-align:center\">新生代</td>\n<td style=\"text-align:right\">concurrent Mark Sweep，已获取最短回收停顿为目标，大部分的互联网站及服务端采用的方式，标记-清除算法</td>\n</tr>\n<tr>\n<td>G1</td>\n<td style=\"text-align:center\">新生代/老年代</td>\n<td style=\"text-align:right\">收集器最前沿版本，JDK 1.7，代替CMS的新产品</td>\n</tr>\n<tr>\n<td>Serial Old（MSC）</td>\n<td style=\"text-align:center\">老年代</td>\n<td style=\"text-align:right\">Serial的老年版，单线程收集器，采用标记-整理算法，主要是client模式的JVM使用</td>\n</tr>\n<tr>\n<td>Parallel Old</td>\n<td style=\"text-align:center\">老年代</td>\n<td style=\"text-align:right\">Parallel Scavenge的老年版，多线程，标记整理算法</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jdk11-垃圾收集器——ZGC\"><a href=\"#jdk11-垃圾收集器——ZGC\" class=\"headerlink\" title=\"jdk11 垃圾收集器——ZGC\"></a>jdk11 垃圾收集器——ZGC</h3><p>&emsp; &emsp;（网上搜的）ZGC是一个处于实验阶段的，可扩展的低延迟垃圾回收器，旨在实现以下几个目标：</p>\n<ul>\n<li>停顿时间不超过10ms</li>\n<li>停顿时间不随heap大小或存活对象大小增大而增大</li>\n<li>可以处理从几百兆到几T的内存大小</li>\n</ul>\n<p>限制：</p>\n<ul>\n<li>当前版本不支持类卸载</li>\n<li>当前版本不支持JVMCI</li>\n</ul>\n<p>ZGC包含10个阶段，但是主要是两个阶段标记和relocating。GC循环从标记阶段开始，递归标记所有可达对象，标记阶段结束时，ZGC可以知道哪些对象仍然存在哪些是垃圾。ZGC将结果存储在每一页的位图（称为live map）中。在标记阶段，应用线程中的load barrier将未标记的引用压入线程本地的标记缓冲区。一旦缓冲区满，GC线程会拿到缓冲区的所有权，并且递归遍历此缓冲区所有可达对象。注意：应用线程负责压入缓冲区，GC线程负责递归遍历。</p>\n<p>&emsp; &emsp;标记阶段后，ZGC需要迁移relocate集中的所有对象。relocate集是一组页面集合，包含了根据某些标准（例如那些包含最多垃圾对象的页面）确定的需要迁移的页面。对象由GC线程或者应用线程迁移（通过load barrier）。ZGC为每个relocate集中的页面分配了转发表。转发表是一个哈希映射，它存储一个对象已被迁移到的地址（如果该对象已经被迁移）。GC线程遍历relocate集的活动对象，并迁移尚未迁移的所有对象。有时候会发生应用线程和GC线程同时试图迁移同一个对象，在这种情况下，ZGC使用CAS操作来确定胜利者。一旦GC线程完成了relocate集的处理，迁移阶段就完成了。虽然这时所有对象都已迁移，但是旧地引用址仍然有可能被使用，仍然需要通过转发表重新映射（remapping）。然后通过load barrier或者等到下一个标记循环修复这些引用。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-标记-清除算法\"><a href=\"#1-标记-清除算法\" class=\"headerlink\" title=\"1 标记-清除算法\"></a>1 标记-清除算法</h3><p>标记-清除算法是最基础的算法，算法分为标记和清除两个阶段，首先标记出要清除的对象，在标记完后统一回收所有被标记的对象，标记方式为j《jvm系列之垃圾收集器》里面所提到的。这种算法标记和清除两个过程效率都不高；并且在标记清除后，内存空间变得很零散，产生大量内存碎片。当需要分配一个比较大的对象时有可能会导致找不到足够大的内存。","more":"</p>\n<p>标记清除算法图解（图片来源于百度图片）：<img src=\"https://upload-images.jianshu.io/upload_images/13612520-e59da44ca1b963c6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"timg.jpg\"></p>\n<p>&emsp; &emsp;为了解决标记清除效率低的问题，出现了复制算法；这种算法将内存划分为大小相等的两块内存，只使用其中一块。当这一块内存使用完了就将存活的对象复制到另一块上面去，然后把已使用的内存空间一次性清理掉，这种方法不必考虑内存碎片的情况，运行高效，实现简单。缺点是浪费了一半的内存。复制算法图解（图片来源百度图片）：<img src=\"https://upload-images.jianshu.io/upload_images/13612520-2f12466c88adfd82.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"timg (1).jpg\"></p>\n<h3 id=\"3-标记-整理算法\"><a href=\"#3-标记-整理算法\" class=\"headerlink\" title=\"3 标记-整理算法\"></a>3 标记-整理算法</h3><p>&emsp; &emsp;复制收集算法在对象存活率较高的时候就要进行较多的复制操作，导致效率变低。而且老年代很少会有内存回收，对老年代而言，复制算法做了大量的无用功。针对复制算法存在的的问题，有人提出了标记-整理算法。标记过程和标记-清除算法过程一样，但后续不是直接对可回收对象进行清理，而是让所有存活对象都向一方移动，整理内存，然后再进行清理。标记-整理算法图解（图片来源百度图片）：<img src=\"https://upload-images.jianshu.io/upload_images/13612520-4fd6dd6461485a3c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"timg (2).jpg\"></p>\n<h3 id=\"4-分代收集算法\"><a href=\"#4-分代收集算法\" class=\"headerlink\" title=\"4 分代收集算法\"></a>4 分代收集算法</h3><p>&emsp; &emsp;分代收集算法思路是根据对象存活周期不同将内存划分为几块。一般是分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中每次收集时都会回收很多内存，选用高效率的复制算法，并且只需要预留少量的复制空间，用于复制存活对象。老年代中因为对象存活率高，采用标记-整理或标记清理算法节省内存空间提高清理效率。</p>\n<h3 id=\"5-各版本jdk垃圾收集器一览\"><a href=\"#5-各版本jdk垃圾收集器一览\" class=\"headerlink\" title=\"5 各版本jdk垃圾收集器一览\"></a>5 各版本jdk垃圾收集器一览</h3><table>\n<thead>\n<tr>\n<th>收集器名称</th>\n<th style=\"text-align:center\">区 &emsp; 域</th>\n<th style=\"text-align:right\">说明  &emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; &emsp;</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Serial</td>\n<td style=\"text-align:center\">新生代</td>\n<td style=\"text-align:right\">单线程，GC时必须停止其它线程直到收集结束；JVM运行在client模式下新生代的默认收集器，简单有效；采用复制算法</td>\n</tr>\n<tr>\n<td>ParNew</td>\n<td style=\"text-align:center\">新生代</td>\n<td style=\"text-align:right\">Serial收集的多线程版，保留Serial的参数控制，算法等，暂停所有用户线程，采用复制算法；JVM运行在server的首先的新生代收集器；只有它能和CMS配合工作</td>\n</tr>\n<tr>\n<td>Parallel Scavenge</td>\n<td style=\"text-align:center\">新生代</td>\n<td style=\"text-align:right\">采用复制算法，并行的多线程收集器，与ParNew不同的是，关注点不是停顿时间，而是可控制的吞吐量，即运行用户代码的时间/（运行用户代码的时间+垃圾收集的时间）。可设置最大GC时间和吞吐量大小等参数，也可以让JVM自适应调整策略</td>\n</tr>\n<tr>\n<td>CMS</td>\n<td style=\"text-align:center\">新生代</td>\n<td style=\"text-align:right\">concurrent Mark Sweep，已获取最短回收停顿为目标，大部分的互联网站及服务端采用的方式，标记-清除算法</td>\n</tr>\n<tr>\n<td>G1</td>\n<td style=\"text-align:center\">新生代/老年代</td>\n<td style=\"text-align:right\">收集器最前沿版本，JDK 1.7，代替CMS的新产品</td>\n</tr>\n<tr>\n<td>Serial Old（MSC）</td>\n<td style=\"text-align:center\">老年代</td>\n<td style=\"text-align:right\">Serial的老年版，单线程收集器，采用标记-整理算法，主要是client模式的JVM使用</td>\n</tr>\n<tr>\n<td>Parallel Old</td>\n<td style=\"text-align:center\">老年代</td>\n<td style=\"text-align:right\">Parallel Scavenge的老年版，多线程，标记整理算法</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jdk11-垃圾收集器——ZGC\"><a href=\"#jdk11-垃圾收集器——ZGC\" class=\"headerlink\" title=\"jdk11 垃圾收集器——ZGC\"></a>jdk11 垃圾收集器——ZGC</h3><p>&emsp; &emsp;（网上搜的）ZGC是一个处于实验阶段的，可扩展的低延迟垃圾回收器，旨在实现以下几个目标：</p>\n<ul>\n<li>停顿时间不超过10ms</li>\n<li>停顿时间不随heap大小或存活对象大小增大而增大</li>\n<li>可以处理从几百兆到几T的内存大小</li>\n</ul>\n<p>限制：</p>\n<ul>\n<li>当前版本不支持类卸载</li>\n<li>当前版本不支持JVMCI</li>\n</ul>\n<p>ZGC包含10个阶段，但是主要是两个阶段标记和relocating。GC循环从标记阶段开始，递归标记所有可达对象，标记阶段结束时，ZGC可以知道哪些对象仍然存在哪些是垃圾。ZGC将结果存储在每一页的位图（称为live map）中。在标记阶段，应用线程中的load barrier将未标记的引用压入线程本地的标记缓冲区。一旦缓冲区满，GC线程会拿到缓冲区的所有权，并且递归遍历此缓冲区所有可达对象。注意：应用线程负责压入缓冲区，GC线程负责递归遍历。</p>\n<p>&emsp; &emsp;标记阶段后，ZGC需要迁移relocate集中的所有对象。relocate集是一组页面集合，包含了根据某些标准（例如那些包含最多垃圾对象的页面）确定的需要迁移的页面。对象由GC线程或者应用线程迁移（通过load barrier）。ZGC为每个relocate集中的页面分配了转发表。转发表是一个哈希映射，它存储一个对象已被迁移到的地址（如果该对象已经被迁移）。GC线程遍历relocate集的活动对象，并迁移尚未迁移的所有对象。有时候会发生应用线程和GC线程同时试图迁移同一个对象，在这种情况下，ZGC使用CAS操作来确定胜利者。一旦GC线程完成了relocate集的处理，迁移阶段就完成了。虽然这时所有对象都已迁移，但是旧地引用址仍然有可能被使用，仍然需要通过转发表重新映射（remapping）。然后通过load barrier或者等到下一个标记循环修复这些引用。</p>"},{"title":"jvm系列之对象引用分析","date":"2019-05-09T04:02:50.000Z","_content":"\n// todo\n\n前文 jvm基础垃圾\n\n## 对象的生命周期\n\n","source":"_posts/jvm-6.md","raw":"---\ntitle: jvm系列之对象引用分析\ndate: 2019-05-09 12:02:50\ntags: developing\n---\n\n// todo\n\n前文 jvm基础垃圾\n\n## 对象的生命周期\n\n","slug":"jvm-6","published":1,"updated":"2019-05-15T02:04:01.008Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxsd000rvovmqjyik0lh","content":"<p>// todo</p>\n<p>前文 jvm基础垃圾</p>\n<h2 id=\"对象的生命周期\"><a href=\"#对象的生命周期\" class=\"headerlink\" title=\"对象的生命周期\"></a>对象的生命周期</h2>","site":{"data":{}},"excerpt":"","more":"<p>// todo</p>\n<p>前文 jvm基础垃圾</p>\n<h2 id=\"对象的生命周期\"><a href=\"#对象的生命周期\" class=\"headerlink\" title=\"对象的生命周期\"></a>对象的生命周期</h2>"},{"title":"jvm基础篇五之类加载机制","date":"2019-04-24T02:56:54.000Z","_content":"\nmuggle\n### 1.类的生命周期\n&emsp; &emsp;类从被加载到虚拟机内存中内存中开始，到卸载出内存为止，它的整个生命周期包括：加载（loading）、验证（verification）、准备（preparation）、解析（resolution）、初始化（initialization）、使用（using）卸载（unloading）七个阶段。其中验证、准备、解析三个阶段统称为连接（linking）。\n\n<!--more-->\n\n### 2.加载\n&emsp; &emsp;加载是类加载机制的第一个阶段，在这个阶段，虚拟机做了三件事情：\n> - 通过类的全限定名来获取定义此类的二进制字节流；\n- 将这个字节流所代表的静态存储结构转换为方法区的运行时数据结构\n- 在内存中生成一个代表这个类的Class对象，作为方法区这个类的各种数据的访问入口\n\n&emsp; &emsp;加载阶段完成后，虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中，方法区中的数据存储格式由虚拟机实现自行定义；然后在内存中实例化一个Class类的对象，加载阶段和连接阶段的部分内容是交叉进行的，加载阶段尚未完成，连接阶段可能已经开始了。\n### 3.验证\n&emsp; &emsp;验证是连接阶段的第一步，这一阶段目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。从整体上来看，验证阶段包括以下四个动作：文件格式验证、元数据验证、字节码验证、符号引用验证。\n### 4.准备\n&emsp; &emsp;准备阶段是正式为类变量分配内存并设置类变量初始值得阶段，这些变量所使用的内存都将在方法区中进行分配。这个阶段中有两个容易产生混淆的概念——1.这个时候进行内存分配的仅包括类变量（被static修饰的变量），而不包括实例变量，2.这里初始值是数据类型的零值，假设一个类变量定义为 ：\n```java\npublic static int value=2;\n```\n那变量value在准备阶段的值为0而不是2.\n### 5.解析\n&emsp; &emsp;解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。\n\n### 6.初始化\n&emsp; &emsp;类初始化阶段是类加载过程的最后一步，前面的类加载过程中，除了在加载阶段可以通过自定义类加载器参与之外，其余动作都是虚拟机控制的。到了初始化阶段，才真正的执行java代码。初始化阶段是执行类构造器<clinit>()方法的过程。\n\n&emsp; &emsp;想要使用一个类，必须对其进行初始化，但初始化过程不是必然执行的；jvm规范中规定有且只有以下五种情况必须对类进行初始化：\n> - 遇到new、getstatic、putstatic、invokestatic这四个字节码指令的时候，如果类没有进行初始化，则需要先触发其初始化。生成这四条指令最常见的java代码场景是：使用new创建对象、读取或者设置一个类的静态字段（不包括值已在常量池中的情况）、调用一个类的静态方法的时候；\n- 使用java反射机制的时候，如果类没初始化需要先初始化；\n- 当初始化一个类的时候，如果发现其父类还未初始化，则需要先初始化父类。\n- 当虚拟机启动时，用户需要指定一个要执行的主类，虚拟机会先初始化那个类。\n\n以上五种情况称为对一个类进行主动引用；其他引用类的方式都不会触发初始化，称为被动引用。下面举一个被动引用的例子：\n```java\npublic class TestClassloading {\n    static {\n        System.out.println(\"父类被初始化\");\n    }\n    public static int number=111;\n}\n\npublic class SubClass extends TestClassloading {\n    static {\n        System.out.println(\"子类被初始化\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(SubClass.number);\n    }\n}\n```\n输出结果：\n```java\n父类被初始化\n111\n```\n显然，子类没有被初始化，这里SubClass.number为被动引用，不会对子类初始化。\n### 7.类加载器\n&emsp; &emsp;通过一个类的全限定名来获取描述此类的二进制字节流这个动作被放到虚拟机外部区实现，以便让应用程序自己决定如何去获取所需的类，实现这个动作的代码模块称为类加载器。对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在java虚拟机中的唯一性，每一个类加载器都拥有一个独立的类名称空间。也就是说比较两个类是否相等必须要类加载器和类都相等。\n&emsp; &emsp;从java虚拟机的角度来讲，只存在两种不同的类加载器：一种是启动类加载器，这个类加载器是虚拟机的一部分；另一种就是java代码实现的独立于虚拟机外部的类加载器，这种类加载器继承类抽象类java.lang.TestClassloader。\n\n&emsp; &emsp;类加载器还有一个很重要的概念就是双亲委派模型——在类加载器工作的时候是多个类加载器一起工作的它们包括：扩展类加载器，应用程序类加载器，启动类加载器，自定义类加载器。类加载器的层次图如图：\n\n![](https://upload-images.jianshu.io/upload_images/13612520-dd9a6a8324f136f8?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n类加载器层次结构\n\n&emsp; &emsp;双亲委派模型的工作流程是如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求交给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都会被交给启动类加载器，当父类反馈无法加载这个类的时候，子类才会进行加载。","source":"_posts/jvm-5.md","raw":"---\ntitle: jvm基础篇五之类加载机制\ndate: 2019-04-24 10:56:54\ntags: jvm\n---\n\nmuggle\n### 1.类的生命周期\n&emsp; &emsp;类从被加载到虚拟机内存中内存中开始，到卸载出内存为止，它的整个生命周期包括：加载（loading）、验证（verification）、准备（preparation）、解析（resolution）、初始化（initialization）、使用（using）卸载（unloading）七个阶段。其中验证、准备、解析三个阶段统称为连接（linking）。\n\n<!--more-->\n\n### 2.加载\n&emsp; &emsp;加载是类加载机制的第一个阶段，在这个阶段，虚拟机做了三件事情：\n> - 通过类的全限定名来获取定义此类的二进制字节流；\n- 将这个字节流所代表的静态存储结构转换为方法区的运行时数据结构\n- 在内存中生成一个代表这个类的Class对象，作为方法区这个类的各种数据的访问入口\n\n&emsp; &emsp;加载阶段完成后，虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中，方法区中的数据存储格式由虚拟机实现自行定义；然后在内存中实例化一个Class类的对象，加载阶段和连接阶段的部分内容是交叉进行的，加载阶段尚未完成，连接阶段可能已经开始了。\n### 3.验证\n&emsp; &emsp;验证是连接阶段的第一步，这一阶段目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。从整体上来看，验证阶段包括以下四个动作：文件格式验证、元数据验证、字节码验证、符号引用验证。\n### 4.准备\n&emsp; &emsp;准备阶段是正式为类变量分配内存并设置类变量初始值得阶段，这些变量所使用的内存都将在方法区中进行分配。这个阶段中有两个容易产生混淆的概念——1.这个时候进行内存分配的仅包括类变量（被static修饰的变量），而不包括实例变量，2.这里初始值是数据类型的零值，假设一个类变量定义为 ：\n```java\npublic static int value=2;\n```\n那变量value在准备阶段的值为0而不是2.\n### 5.解析\n&emsp; &emsp;解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。\n\n### 6.初始化\n&emsp; &emsp;类初始化阶段是类加载过程的最后一步，前面的类加载过程中，除了在加载阶段可以通过自定义类加载器参与之外，其余动作都是虚拟机控制的。到了初始化阶段，才真正的执行java代码。初始化阶段是执行类构造器<clinit>()方法的过程。\n\n&emsp; &emsp;想要使用一个类，必须对其进行初始化，但初始化过程不是必然执行的；jvm规范中规定有且只有以下五种情况必须对类进行初始化：\n> - 遇到new、getstatic、putstatic、invokestatic这四个字节码指令的时候，如果类没有进行初始化，则需要先触发其初始化。生成这四条指令最常见的java代码场景是：使用new创建对象、读取或者设置一个类的静态字段（不包括值已在常量池中的情况）、调用一个类的静态方法的时候；\n- 使用java反射机制的时候，如果类没初始化需要先初始化；\n- 当初始化一个类的时候，如果发现其父类还未初始化，则需要先初始化父类。\n- 当虚拟机启动时，用户需要指定一个要执行的主类，虚拟机会先初始化那个类。\n\n以上五种情况称为对一个类进行主动引用；其他引用类的方式都不会触发初始化，称为被动引用。下面举一个被动引用的例子：\n```java\npublic class TestClassloading {\n    static {\n        System.out.println(\"父类被初始化\");\n    }\n    public static int number=111;\n}\n\npublic class SubClass extends TestClassloading {\n    static {\n        System.out.println(\"子类被初始化\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(SubClass.number);\n    }\n}\n```\n输出结果：\n```java\n父类被初始化\n111\n```\n显然，子类没有被初始化，这里SubClass.number为被动引用，不会对子类初始化。\n### 7.类加载器\n&emsp; &emsp;通过一个类的全限定名来获取描述此类的二进制字节流这个动作被放到虚拟机外部区实现，以便让应用程序自己决定如何去获取所需的类，实现这个动作的代码模块称为类加载器。对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在java虚拟机中的唯一性，每一个类加载器都拥有一个独立的类名称空间。也就是说比较两个类是否相等必须要类加载器和类都相等。\n&emsp; &emsp;从java虚拟机的角度来讲，只存在两种不同的类加载器：一种是启动类加载器，这个类加载器是虚拟机的一部分；另一种就是java代码实现的独立于虚拟机外部的类加载器，这种类加载器继承类抽象类java.lang.TestClassloader。\n\n&emsp; &emsp;类加载器还有一个很重要的概念就是双亲委派模型——在类加载器工作的时候是多个类加载器一起工作的它们包括：扩展类加载器，应用程序类加载器，启动类加载器，自定义类加载器。类加载器的层次图如图：\n\n![](https://upload-images.jianshu.io/upload_images/13612520-dd9a6a8324f136f8?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n类加载器层次结构\n\n&emsp; &emsp;双亲委派模型的工作流程是如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求交给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都会被交给启动类加载器，当父类反馈无法加载这个类的时候，子类才会进行加载。","slug":"jvm-5","published":1,"updated":"2019-04-25T03:24:57.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxse000uvovmafecre06","content":"<p>muggle</p>\n<h3 id=\"1-类的生命周期\"><a href=\"#1-类的生命周期\" class=\"headerlink\" title=\"1.类的生命周期\"></a>1.类的生命周期</h3><p>&emsp; &emsp;类从被加载到虚拟机内存中内存中开始，到卸载出内存为止，它的整个生命周期包括：加载（loading）、验证（verification）、准备（preparation）、解析（resolution）、初始化（initialization）、使用（using）卸载（unloading）七个阶段。其中验证、准备、解析三个阶段统称为连接（linking）。</p>\n<a id=\"more\"></a>\n<h3 id=\"2-加载\"><a href=\"#2-加载\" class=\"headerlink\" title=\"2.加载\"></a>2.加载</h3><p>&emsp; &emsp;加载是类加载机制的第一个阶段，在这个阶段，虚拟机做了三件事情：</p>\n<blockquote>\n<ul>\n<li>通过类的全限定名来获取定义此类的二进制字节流；</li>\n<li>将这个字节流所代表的静态存储结构转换为方法区的运行时数据结构</li>\n<li>在内存中生成一个代表这个类的Class对象，作为方法区这个类的各种数据的访问入口</li>\n</ul>\n</blockquote>\n<p>&emsp; &emsp;加载阶段完成后，虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中，方法区中的数据存储格式由虚拟机实现自行定义；然后在内存中实例化一个Class类的对象，加载阶段和连接阶段的部分内容是交叉进行的，加载阶段尚未完成，连接阶段可能已经开始了。</p>\n<h3 id=\"3-验证\"><a href=\"#3-验证\" class=\"headerlink\" title=\"3.验证\"></a>3.验证</h3><p>&emsp; &emsp;验证是连接阶段的第一步，这一阶段目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。从整体上来看，验证阶段包括以下四个动作：文件格式验证、元数据验证、字节码验证、符号引用验证。</p>\n<h3 id=\"4-准备\"><a href=\"#4-准备\" class=\"headerlink\" title=\"4.准备\"></a>4.准备</h3><p>&emsp; &emsp;准备阶段是正式为类变量分配内存并设置类变量初始值得阶段，这些变量所使用的内存都将在方法区中进行分配。这个阶段中有两个容易产生混淆的概念——1.这个时候进行内存分配的仅包括类变量（被static修饰的变量），而不包括实例变量，2.这里初始值是数据类型的零值，假设一个类变量定义为 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> value=<span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure></p>\n<p>那变量value在准备阶段的值为0而不是2.</p>\n<h3 id=\"5-解析\"><a href=\"#5-解析\" class=\"headerlink\" title=\"5.解析\"></a>5.解析</h3><p>&emsp; &emsp;解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。</p>\n<h3 id=\"6-初始化\"><a href=\"#6-初始化\" class=\"headerlink\" title=\"6.初始化\"></a>6.初始化</h3><p>&emsp; &emsp;类初始化阶段是类加载过程的最后一步，前面的类加载过程中，除了在加载阶段可以通过自定义类加载器参与之外，其余动作都是虚拟机控制的。到了初始化阶段，才真正的执行java代码。初始化阶段是执行类构造器<clinit>()方法的过程。</clinit></p>\n<p>&emsp; &emsp;想要使用一个类，必须对其进行初始化，但初始化过程不是必然执行的；jvm规范中规定有且只有以下五种情况必须对类进行初始化：</p>\n<blockquote>\n<ul>\n<li>遇到new、getstatic、putstatic、invokestatic这四个字节码指令的时候，如果类没有进行初始化，则需要先触发其初始化。生成这四条指令最常见的java代码场景是：使用new创建对象、读取或者设置一个类的静态字段（不包括值已在常量池中的情况）、调用一个类的静态方法的时候；</li>\n<li>使用java反射机制的时候，如果类没初始化需要先初始化；</li>\n<li>当初始化一个类的时候，如果发现其父类还未初始化，则需要先初始化父类。</li>\n<li>当虚拟机启动时，用户需要指定一个要执行的主类，虚拟机会先初始化那个类。</li>\n</ul>\n</blockquote>\n<p>以上五种情况称为对一个类进行主动引用；其他引用类的方式都不会触发初始化，称为被动引用。下面举一个被动引用的例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClassloading</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"父类被初始化\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> number=<span class=\"number\">111</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">TestClassloading</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"子类被初始化\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(SubClass.number);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父类被初始化</span><br><span class=\"line\"><span class=\"number\">111</span></span><br></pre></td></tr></table></figure></p>\n<p>显然，子类没有被初始化，这里SubClass.number为被动引用，不会对子类初始化。</p>\n<h3 id=\"7-类加载器\"><a href=\"#7-类加载器\" class=\"headerlink\" title=\"7.类加载器\"></a>7.类加载器</h3><p>&emsp; &emsp;通过一个类的全限定名来获取描述此类的二进制字节流这个动作被放到虚拟机外部区实现，以便让应用程序自己决定如何去获取所需的类，实现这个动作的代码模块称为类加载器。对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在java虚拟机中的唯一性，每一个类加载器都拥有一个独立的类名称空间。也就是说比较两个类是否相等必须要类加载器和类都相等。<br>&emsp; &emsp;从java虚拟机的角度来讲，只存在两种不同的类加载器：一种是启动类加载器，这个类加载器是虚拟机的一部分；另一种就是java代码实现的独立于虚拟机外部的类加载器，这种类加载器继承类抽象类java.lang.TestClassloader。</p>\n<p>&emsp; &emsp;类加载器还有一个很重要的概念就是双亲委派模型——在类加载器工作的时候是多个类加载器一起工作的它们包括：扩展类加载器，应用程序类加载器，启动类加载器，自定义类加载器。类加载器的层次图如图：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/13612520-dd9a6a8324f136f8?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>类加载器层次结构</p>\n<p>&emsp; &emsp;双亲委派模型的工作流程是如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求交给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都会被交给启动类加载器，当父类反馈无法加载这个类的时候，子类才会进行加载。</p>\n","site":{"data":{}},"excerpt":"<p>muggle</p>\n<h3 id=\"1-类的生命周期\"><a href=\"#1-类的生命周期\" class=\"headerlink\" title=\"1.类的生命周期\"></a>1.类的生命周期</h3><p>&emsp; &emsp;类从被加载到虚拟机内存中内存中开始，到卸载出内存为止，它的整个生命周期包括：加载（loading）、验证（verification）、准备（preparation）、解析（resolution）、初始化（initialization）、使用（using）卸载（unloading）七个阶段。其中验证、准备、解析三个阶段统称为连接（linking）。</p>","more":"<h3 id=\"2-加载\"><a href=\"#2-加载\" class=\"headerlink\" title=\"2.加载\"></a>2.加载</h3><p>&emsp; &emsp;加载是类加载机制的第一个阶段，在这个阶段，虚拟机做了三件事情：</p>\n<blockquote>\n<ul>\n<li>通过类的全限定名来获取定义此类的二进制字节流；</li>\n<li>将这个字节流所代表的静态存储结构转换为方法区的运行时数据结构</li>\n<li>在内存中生成一个代表这个类的Class对象，作为方法区这个类的各种数据的访问入口</li>\n</ul>\n</blockquote>\n<p>&emsp; &emsp;加载阶段完成后，虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中，方法区中的数据存储格式由虚拟机实现自行定义；然后在内存中实例化一个Class类的对象，加载阶段和连接阶段的部分内容是交叉进行的，加载阶段尚未完成，连接阶段可能已经开始了。</p>\n<h3 id=\"3-验证\"><a href=\"#3-验证\" class=\"headerlink\" title=\"3.验证\"></a>3.验证</h3><p>&emsp; &emsp;验证是连接阶段的第一步，这一阶段目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。从整体上来看，验证阶段包括以下四个动作：文件格式验证、元数据验证、字节码验证、符号引用验证。</p>\n<h3 id=\"4-准备\"><a href=\"#4-准备\" class=\"headerlink\" title=\"4.准备\"></a>4.准备</h3><p>&emsp; &emsp;准备阶段是正式为类变量分配内存并设置类变量初始值得阶段，这些变量所使用的内存都将在方法区中进行分配。这个阶段中有两个容易产生混淆的概念——1.这个时候进行内存分配的仅包括类变量（被static修饰的变量），而不包括实例变量，2.这里初始值是数据类型的零值，假设一个类变量定义为 ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> value=<span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure></p>\n<p>那变量value在准备阶段的值为0而不是2.</p>\n<h3 id=\"5-解析\"><a href=\"#5-解析\" class=\"headerlink\" title=\"5.解析\"></a>5.解析</h3><p>&emsp; &emsp;解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。</p>\n<h3 id=\"6-初始化\"><a href=\"#6-初始化\" class=\"headerlink\" title=\"6.初始化\"></a>6.初始化</h3><p>&emsp; &emsp;类初始化阶段是类加载过程的最后一步，前面的类加载过程中，除了在加载阶段可以通过自定义类加载器参与之外，其余动作都是虚拟机控制的。到了初始化阶段，才真正的执行java代码。初始化阶段是执行类构造器<clinit>()方法的过程。</clinit></p>\n<p>&emsp; &emsp;想要使用一个类，必须对其进行初始化，但初始化过程不是必然执行的；jvm规范中规定有且只有以下五种情况必须对类进行初始化：</p>\n<blockquote>\n<ul>\n<li>遇到new、getstatic、putstatic、invokestatic这四个字节码指令的时候，如果类没有进行初始化，则需要先触发其初始化。生成这四条指令最常见的java代码场景是：使用new创建对象、读取或者设置一个类的静态字段（不包括值已在常量池中的情况）、调用一个类的静态方法的时候；</li>\n<li>使用java反射机制的时候，如果类没初始化需要先初始化；</li>\n<li>当初始化一个类的时候，如果发现其父类还未初始化，则需要先初始化父类。</li>\n<li>当虚拟机启动时，用户需要指定一个要执行的主类，虚拟机会先初始化那个类。</li>\n</ul>\n</blockquote>\n<p>以上五种情况称为对一个类进行主动引用；其他引用类的方式都不会触发初始化，称为被动引用。下面举一个被动引用的例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClassloading</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"父类被初始化\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> number=<span class=\"number\">111</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">TestClassloading</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"子类被初始化\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(SubClass.number);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父类被初始化</span><br><span class=\"line\"><span class=\"number\">111</span></span><br></pre></td></tr></table></figure></p>\n<p>显然，子类没有被初始化，这里SubClass.number为被动引用，不会对子类初始化。</p>\n<h3 id=\"7-类加载器\"><a href=\"#7-类加载器\" class=\"headerlink\" title=\"7.类加载器\"></a>7.类加载器</h3><p>&emsp; &emsp;通过一个类的全限定名来获取描述此类的二进制字节流这个动作被放到虚拟机外部区实现，以便让应用程序自己决定如何去获取所需的类，实现这个动作的代码模块称为类加载器。对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在java虚拟机中的唯一性，每一个类加载器都拥有一个独立的类名称空间。也就是说比较两个类是否相等必须要类加载器和类都相等。<br>&emsp; &emsp;从java虚拟机的角度来讲，只存在两种不同的类加载器：一种是启动类加载器，这个类加载器是虚拟机的一部分；另一种就是java代码实现的独立于虚拟机外部的类加载器，这种类加载器继承类抽象类java.lang.TestClassloader。</p>\n<p>&emsp; &emsp;类加载器还有一个很重要的概念就是双亲委派模型——在类加载器工作的时候是多个类加载器一起工作的它们包括：扩展类加载器，应用程序类加载器，启动类加载器，自定义类加载器。类加载器的层次图如图：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/13612520-dd9a6a8324f136f8?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>类加载器层次结构</p>\n<p>&emsp; &emsp;双亲委派模型的工作流程是如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求交给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都会被交给启动类加载器，当父类反馈无法加载这个类的时候，子类才会进行加载。</p>"},{"title":"kafka","date":"2019-04-28T09:54:17.000Z","_content":"\n<!--more-->","source":"_posts/kafka.md","raw":"---\ntitle: kafka\ndate: 2019-04-28 17:54:17\ntags: 中间件\n---\n\n<!--more-->","slug":"kafka","published":1,"updated":"2019-05-13T02:28:07.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxsf000wvovmmsb0akjo","content":"<a id=\"more\"></a>","site":{"data":{}},"excerpt":"","more":""},{"title":"logback自定义Appender","date":"2019-04-22T03:25:45.000Z","_content":"\n作者：muggle\n\n<!--more-->","source":"_posts/logback-2.md","raw":"---\ntitle: logback自定义Appender\ndate: 2019-04-22 11:25:45\ntags: log\n---\n\n作者：muggle\n\n<!--more-->","slug":"logback-2","published":1,"updated":"2019-05-13T02:28:14.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxsg000yvovm706n4ktr","content":"<p>作者：muggle</p>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<p>作者：muggle</p>","more":""},{"title":"leetcode刷题记录","date":"2019-04-27T06:00:37.000Z","_content":"\n这篇博客会记录我的一些刷题心得\n\n## 参考：[leetcode答案](<https://www.cnblogs.com/grandyang/p/4606334.html>)\n\n**两数之和**\n\n给定一个整数数组 `nums` 和一个目标值 `target`，请你在该数组中找出和为目标值的那 **两个** 整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n<!--more-->\n\n**示例:**\n\n```\n给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n```\n\n**解析**\n\n此题纯考数据结构\n\n利用HashMap提高查询速度 \n\n```java\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n         HashMap<Integer, Integer> m = new HashMap<Integer, Integer>();\n        int[] res = new int[2];\n        for (int i = 0; i < nums.length; ++i) {\n            m.put(nums[i], i);\n        }\n        for (int i = 0; i < nums.length; ++i) {\n            int t = target - nums[i];\n            // 这里\n            if (m.containsKey(t) && m.get(t) != i) {\n                res[0] = i;\n                res[1] = m.get(t);\n                break;\n            }\n        }\n        return res;\n    }\n}\n```\n\n**两数相加**\n\n给出两个 **非空** 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 **逆序** 的方式存储的，并且它们的每个节点只能存储 **一位** 数字。\n\n如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。\n\n您可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n\n**示例：**\n\n```java\n输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)\n输出：7 -> 0 -> 8\n原因：342 + 465 = 807\n```","source":"_posts/leetcode.md","raw":"---\ntitle: leetcode刷题记录\ndate: 2019-04-27 14:00:37\ntags: 算法\n---\n\n这篇博客会记录我的一些刷题心得\n\n## 参考：[leetcode答案](<https://www.cnblogs.com/grandyang/p/4606334.html>)\n\n**两数之和**\n\n给定一个整数数组 `nums` 和一个目标值 `target`，请你在该数组中找出和为目标值的那 **两个** 整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n<!--more-->\n\n**示例:**\n\n```\n给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n```\n\n**解析**\n\n此题纯考数据结构\n\n利用HashMap提高查询速度 \n\n```java\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n         HashMap<Integer, Integer> m = new HashMap<Integer, Integer>();\n        int[] res = new int[2];\n        for (int i = 0; i < nums.length; ++i) {\n            m.put(nums[i], i);\n        }\n        for (int i = 0; i < nums.length; ++i) {\n            int t = target - nums[i];\n            // 这里\n            if (m.containsKey(t) && m.get(t) != i) {\n                res[0] = i;\n                res[1] = m.get(t);\n                break;\n            }\n        }\n        return res;\n    }\n}\n```\n\n**两数相加**\n\n给出两个 **非空** 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 **逆序** 的方式存储的，并且它们的每个节点只能存储 **一位** 数字。\n\n如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。\n\n您可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n\n**示例：**\n\n```java\n输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)\n输出：7 -> 0 -> 8\n原因：342 + 465 = 807\n```","slug":"leetcode","published":1,"updated":"2019-05-07T09:46:27.464Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxsh0010vovmeu6n7f94","content":"<p>这篇博客会记录我的一些刷题心得</p>\n<h2 id=\"参考：leetcode答案\"><a href=\"#参考：leetcode答案\" class=\"headerlink\" title=\"参考：leetcode答案\"></a>参考：<a href=\"https://www.cnblogs.com/grandyang/p/4606334.html\" target=\"_blank\" rel=\"noopener\">leetcode答案</a></h2><p><strong>两数之和</strong></p>\n<p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那 <strong>两个</strong> 整数，并返回他们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>\n<a id=\"more\"></a>\n<p><strong>示例:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class=\"line\"></span><br><span class=\"line\">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class=\"line\">所以返回 [0, 1]</span><br></pre></td></tr></table></figure>\n<p><strong>解析</strong></p>\n<p>此题纯考数据结构</p>\n<p>利用HashMap提高查询速度 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">         HashMap&lt;Integer, Integer&gt; m = <span class=\"keyword\">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class=\"line\">            m.put(nums[i], i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> t = target - nums[i];</span><br><span class=\"line\">            <span class=\"comment\">// 这里</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m.containsKey(t) &amp;&amp; m.get(t) != i) &#123;</span><br><span class=\"line\">                res[<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">                res[<span class=\"number\">1</span>] = m.get(t);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>两数相加</strong></p>\n<p>给出两个 <strong>非空</strong> 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 <strong>逆序</strong> 的方式存储的，并且它们的每个节点只能存储 <strong>一位</strong> 数字。</p>\n<p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>\n<p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：(<span class=\"number\">2</span> -&gt; <span class=\"number\">4</span> -&gt; <span class=\"number\">3</span>) + (<span class=\"number\">5</span> -&gt; <span class=\"number\">6</span> -&gt; <span class=\"number\">4</span>)</span><br><span class=\"line\">输出：<span class=\"number\">7</span> -&gt; <span class=\"number\">0</span> -&gt; <span class=\"number\">8</span></span><br><span class=\"line\">原因：<span class=\"number\">342</span> + <span class=\"number\">465</span> = <span class=\"number\">807</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>这篇博客会记录我的一些刷题心得</p>\n<h2 id=\"参考：leetcode答案\"><a href=\"#参考：leetcode答案\" class=\"headerlink\" title=\"参考：leetcode答案\"></a>参考：<a href=\"https://www.cnblogs.com/grandyang/p/4606334.html\" target=\"_blank\" rel=\"noopener\">leetcode答案</a></h2><p><strong>两数之和</strong></p>\n<p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那 <strong>两个</strong> 整数，并返回他们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>","more":"<p><strong>示例:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class=\"line\"></span><br><span class=\"line\">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class=\"line\">所以返回 [0, 1]</span><br></pre></td></tr></table></figure>\n<p><strong>解析</strong></p>\n<p>此题纯考数据结构</p>\n<p>利用HashMap提高查询速度 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">         HashMap&lt;Integer, Integer&gt; m = <span class=\"keyword\">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class=\"line\">            m.put(nums[i], i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> t = target - nums[i];</span><br><span class=\"line\">            <span class=\"comment\">// 这里</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m.containsKey(t) &amp;&amp; m.get(t) != i) &#123;</span><br><span class=\"line\">                res[<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">                res[<span class=\"number\">1</span>] = m.get(t);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>两数相加</strong></p>\n<p>给出两个 <strong>非空</strong> 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 <strong>逆序</strong> 的方式存储的，并且它们的每个节点只能存储 <strong>一位</strong> 数字。</p>\n<p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>\n<p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：(<span class=\"number\">2</span> -&gt; <span class=\"number\">4</span> -&gt; <span class=\"number\">3</span>) + (<span class=\"number\">5</span> -&gt; <span class=\"number\">6</span> -&gt; <span class=\"number\">4</span>)</span><br><span class=\"line\">输出：<span class=\"number\">7</span> -&gt; <span class=\"number\">0</span> -&gt; <span class=\"number\">8</span></span><br><span class=\"line\">原因：<span class=\"number\">342</span> + <span class=\"number\">465</span> = <span class=\"number\">807</span></span><br></pre></td></tr></table></figure>"},{"title":"相册","date":"2019-04-20T04:01:54.000Z","_content":"\n以前很少拍照，结果错失了很多珍贵的回忆，翻自己的相册都翻不出什么照片，最近买了个相机，准备摄影一波积累一些素材。\n\n<!-- more -->\n\n![](http://a4.qpic.cn/psb?/V13ysUCU2Lf4XI/hY*.ped01bNWe1c2TrMQSe*SxWe6.KK2Mx*g4g0rfIs!/b/dL8AAAAAAAAA&ek=1&kp=1&pt=0&bo=UwY4BAAAAAARN2k!&tl=3&vuin=1793769323&tm=1555732800&sce=60-2-2&rf=viewer_4)\n\n![](http://m.qpic.cn/psb?/V13ysUCU2Lf4XI/sF4WWqCiBWtnLgGVEl9CRqLXL.TIGCwMY.7X6YbLMRU!/b/dMIAAAAAAAAA&bo=UwY4BAAAAAARN2k!&rf=viewer_4)\n\n![](http://b191.photo.store.qq.com/psb?/V13ysUCU18H7oo/NS8OvGooh95RCilQnOJZ1dhObCQhQVNjGFoCTSdRb34!/b/dL8AAAAAAAAA&bo=VQhABlUIQAYRBzA!&rf=viewer_4)\n\n-------翻看相册就翻出来这几张，等后期学习些摄影技巧丰富我的相册。\n\n\n\n","source":"_posts/photo.md","raw":"---\ntitle: 相册\ndate: 2019-04-20 12:01:54\ntags: photo\n---\n\n以前很少拍照，结果错失了很多珍贵的回忆，翻自己的相册都翻不出什么照片，最近买了个相机，准备摄影一波积累一些素材。\n\n<!-- more -->\n\n![](http://a4.qpic.cn/psb?/V13ysUCU2Lf4XI/hY*.ped01bNWe1c2TrMQSe*SxWe6.KK2Mx*g4g0rfIs!/b/dL8AAAAAAAAA&ek=1&kp=1&pt=0&bo=UwY4BAAAAAARN2k!&tl=3&vuin=1793769323&tm=1555732800&sce=60-2-2&rf=viewer_4)\n\n![](http://m.qpic.cn/psb?/V13ysUCU2Lf4XI/sF4WWqCiBWtnLgGVEl9CRqLXL.TIGCwMY.7X6YbLMRU!/b/dMIAAAAAAAAA&bo=UwY4BAAAAAARN2k!&rf=viewer_4)\n\n![](http://b191.photo.store.qq.com/psb?/V13ysUCU18H7oo/NS8OvGooh95RCilQnOJZ1dhObCQhQVNjGFoCTSdRb34!/b/dL8AAAAAAAAA&bo=VQhABlUIQAYRBzA!&rf=viewer_4)\n\n-------翻看相册就翻出来这几张，等后期学习些摄影技巧丰富我的相册。\n\n\n\n","slug":"photo","published":1,"updated":"2019-04-20T04:53:43.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxsi0012vovm7yw1ftmc","content":"<p>以前很少拍照，结果错失了很多珍贵的回忆，翻自己的相册都翻不出什么照片，最近买了个相机，准备摄影一波积累一些素材。</p>\n<a id=\"more\"></a>\n<p><img src=\"http://a4.qpic.cn/psb?/V13ysUCU2Lf4XI/hY*.ped01bNWe1c2TrMQSe*SxWe6.KK2Mx*g4g0rfIs!/b/dL8AAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=UwY4BAAAAAARN2k!&amp;tl=3&amp;vuin=1793769323&amp;tm=1555732800&amp;sce=60-2-2&amp;rf=viewer_4\" alt></p>\n<p><img src=\"http://m.qpic.cn/psb?/V13ysUCU2Lf4XI/sF4WWqCiBWtnLgGVEl9CRqLXL.TIGCwMY.7X6YbLMRU!/b/dMIAAAAAAAAA&amp;bo=UwY4BAAAAAARN2k!&amp;rf=viewer_4\" alt></p>\n<p><img src=\"http://b191.photo.store.qq.com/psb?/V13ysUCU18H7oo/NS8OvGooh95RCilQnOJZ1dhObCQhQVNjGFoCTSdRb34!/b/dL8AAAAAAAAA&amp;bo=VQhABlUIQAYRBzA!&amp;rf=viewer_4\" alt></p>\n<p>——-翻看相册就翻出来这几张，等后期学习些摄影技巧丰富我的相册。</p>\n","site":{"data":{}},"excerpt":"<p>以前很少拍照，结果错失了很多珍贵的回忆，翻自己的相册都翻不出什么照片，最近买了个相机，准备摄影一波积累一些素材。</p>","more":"<p><img src=\"http://a4.qpic.cn/psb?/V13ysUCU2Lf4XI/hY*.ped01bNWe1c2TrMQSe*SxWe6.KK2Mx*g4g0rfIs!/b/dL8AAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=UwY4BAAAAAARN2k!&amp;tl=3&amp;vuin=1793769323&amp;tm=1555732800&amp;sce=60-2-2&amp;rf=viewer_4\" alt></p>\n<p><img src=\"http://m.qpic.cn/psb?/V13ysUCU2Lf4XI/sF4WWqCiBWtnLgGVEl9CRqLXL.TIGCwMY.7X6YbLMRU!/b/dMIAAAAAAAAA&amp;bo=UwY4BAAAAAARN2k!&amp;rf=viewer_4\" alt></p>\n<p><img src=\"http://b191.photo.store.qq.com/psb?/V13ysUCU18H7oo/NS8OvGooh95RCilQnOJZ1dhObCQhQVNjGFoCTSdRb34!/b/dL8AAAAAAAAA&amp;bo=VQhABlUIQAYRBzA!&amp;rf=viewer_4\" alt></p>\n<p>——-翻看相册就翻出来这几张，等后期学习些摄影技巧丰富我的相册。</p>"},{"title":"nio学习笔记","date":"2019-04-26T03:49:48.000Z","_content":"作者：muggle\n\n# nio介绍\n\n传统的IO又称BIO，即阻塞式IO，NIO就是非阻塞IO了，而NIO在jdk1.7后又进行了升级成为nio.2也就是aio；\nJava IO的各种流是阻塞的。这意味着，当一个线程调用`read() `或 `write()`时，该线程被阻塞，直到有一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了。 Java NIO的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取。而不是保持线程阻塞，所以直至数据变的可以读取之前，该线程可以继续做其他的事情。 非阻塞写也是如此。一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。 线程通常将非阻塞IO的空闲时间用于在其它通道上执行IO操作，所以一个单独的线程现在可以管理多个输入和输出通道（channel）。\n\n<!--more-->\n\n# nio相关的类\n\nnio有四个很重要的类：`Selector`，`Channel`，`Buffer`，`Charset`\n## Channel\n\n Channel通过节点流的getChannel()方法来获得，成员map()用来将其部分或全部数据映射为Buffer，成员read()、write()方法来读写数据，而且只能通过Buffer作为缓冲来读写Channel关联的数据。\n\nChannel接口下有用于文件IO的`FileChannel`，用于UDP通信的`DatagramChannel`，用于TCP通信的`ocketChannel`、`ServerSocketChannel`，用于线程间通信的`Pipe.SinkChannel`、`Pipe.SourceChannel`等实现类。Channel也不是通过构造器来创建对象，而是通过节点流的getChannel()方法来获得，如通过`FileInputStream`、`FileOutputStream`、`andomAccessFile`的`getChannel()`获得对应的`FileChannel`。\n\n  `Channel`中常用的方法有`map()`、`read()`、`write()`，`map()`用来将`Channel`对应的部分或全部数据映射成`MappedByteBuffer`（`ByteBuffer`的子类），`read()/write()`用于对Buffer读写数据。\n\n## Buffer\n\nBuffer是一个缓冲区，它是一个抽象类，常用的子类:`ByteBuffer`,`MappedByteBuffer`,`CharBuffer`,`DoubleBuffer`,`FloatBuffer`,`IntBuffer`,`LongBuffer`,`ShortBuffer`等，通过它可以用来装入数据和输出数据。Buffer没有构造器，使用类方法`allocate()`来创建对应的Buffer对象，当向Buffer写入数据后，在读取Buffer中数据之前应该调用flip()方法来设置Buffer中的数据位置信息，读取Buffer中数据之后应该调用`clear()`方法来清空原来的数据位置信息。`compact()`方法只会清除已经读过的数据。任何未读的数据都被移到缓冲区的起始处，新写入的数据将放到缓冲区未读数据的后面。\n\n## charset\n\n Charset可以将Unicode字符串（CharBuffer）和字节序列（ByteBuffer）相互转化。\n\nJava中默认使用Unicode字符集，可以通过Charset来处理字节序列和字符序列（字符串）之间的转换，其`availableCharsets()`静态方法可以获得当前JDK支持的所有字符集。调用Charset的静态方法`forName()`可以获得指定字符集对应的Charset对象，调用该对象的`newEncoder()`、`newDecoder()`可以获得对应的编码器、解码器，调用编码器的encode()可以将CharBuffer或String转换为ByteBuffer，调用解码器的`decode()`可以将ByteBuffer转换为CharBuffer。\n\n ## Selector\n\nSelector允许单线程处理多个 Channel。如果你的应用打开了多个连接（通道），但每个连接的流量都很低，使用Selector就会很方便。Selector（选择器）是Java NIO中能够检测一到多个NIO通道，并能够知晓通道是否为诸如读写事件做好准备的组件。这样，一个单独的线程可以管理多个channel。通过调用`Selector.open()`方法创建一个Selector，将Channel注册到Selector上。通过`SelectableChannel.register()`方法来实现。与Selector一起使用时，Channel必须处于非阻塞模式下。这意味着不能将FileChannel与Selector一起使用，因为FileChannel不能切换到非阻塞模式。而套接字通道都可以。\n\n# nio使用须知\n\n缓冲区本质上是一块可以写入数据，然后可以从中读取数据的内存。这块内存被包装成NIO Buffer对象，并提供了一组方法，用来方便的访问该块内存。它的三个属性capacity,position和limit就是描述这块内存的了。capacity可以简单理解为这块内存的大小；写数据到Buffer中时，position表示当前的位置。初始的position值为0。当一个byte、long等数据写到Buffer后， position会向前移动到下一个可插入数据的Buffer单元。position最大可为capacity – 1.\n当读取数据时，也是从某个特定位置读。当将Buffer从写模式切换到读模式，position会被重置为0. 当从Buffer的position处读取数据时，position向前移动到下一个可读的位置。limit表示你最多能读（写）多少数据。\n\nbuffer的方法：\n\n- flip()：将Buffer从写模式切换到读模式。调用flip()方法会将position设回0，并将limit设置成之前position的值。\n- get()：从Buffer中读取数据\n- rewind()：将position设回0，所以你可以重读Buffer中的所有数据。limit保持不变，仍然表示能从Buffer中读取多少个元素（byte、char等）。\n- clear()：position将被设回0，limit被设置成 capacity的值。换句话说，Buffer 被清空了。Buffer中的数据并未清除，只是这些标记告诉我们可以从哪里开始往Buffer里写数据。\n- compact()：将所有未读的数据拷贝到Buffer起始处。然后将position设到最后一个未读元素正后面。limit属性依然像clear()方法一样，设置成capacity。\n-  put()：向Buffer存入数据，带索引参数的版本不会移动位置position。\n-  capacity()：获得Buffer的大小capacity。\n-  hasRemaining()：判断当前位置position和界限limit之间是否还有元素可供处理。\n-  remaining()：获得当前位置position和界限limit之间元素的个数。\n-  limit()：获得或者设置Buffer的界限limit的位置。\n-  position()：获得或者设置Buffer的位置position。\n-  mark()：设置Buffer的mark位置。\n-  reset()：将位置positon转到mark所在的位置。\n\n# nio使用示例\n\nNIO中，如果两个通道中有一个是FileChannel，那你可以直接将数据从一个channel传输到另外一个channel。\n\nFileChannel的transferFrom()方法可以将数据从源通道传输到FileChannel中。\n\nransferTo()方法将数据从FileChannel传输到其他的channel中。\n\nInputStream get出来的通道只能用于输入，outputStream同理\n\n文件读操作\n\n```java\nFile file = new File(\"test.txt\");\nFileInputStream fin = new FileInputStream(file);\n\nFileChannel channel = fin.getChannel();\nByteBuffer buf = ByteBuffer.allocate(10);\nint read = channel.read(buf);\nwhile (read>0){\n     buf.flip();\n    byte[] array = new byte[10];\n    int limit = buf.limit();\n    if (limit>=10){\n         buf.get(array);\n    }else {\n        array=new byte[limit];\n        buf.get(array);\n    }\n    String s = new String(array);\n    System.out.print(s);\n    buf.clear();\n     read = channel.read(buf);\n    }\n```\n\n文件写操作\n\n```java\nRandomAccessFile rw = new RandomAccessFile(\"test.txt\", \"rw\");\nFileChannel channel = rw.getChannel();\nByteBuffer allocate = ByteBuffer.allocate(1000);\nallocate.put(\"wwwww\".getBytes());\nallocate.flip();\nchannel.write(allocate);\nchannel.write(wrap);\n//      wrap 不需要 flip()\nByteBuffer wrap = ByteBuffer.wrap(\"sssssssssssss\".getBytes());\nchannel1.write(wrap);\nrw.close()\n```\n\n通道间数据传输\n\n```java\n  RandomAccessFile rw = new RandomAccessFile(\"test.txt\", \"rw\");\n  RandomAccessFile rw2 = new RandomAccessFile(\"test2.txt\", \"rw\");\n  FileChannel channel = rw.getChannel();\n  FileChannel channel2 = rw2.getChannel();\n  channel2.transferFrom(channel,0,channel.size());\n```\n\n","source":"_posts/nio.md","raw":"---\ntitle: nio学习笔记\ndate: 2019-04-26 11:49:48\ntags: javase\n---\n作者：muggle\n\n# nio介绍\n\n传统的IO又称BIO，即阻塞式IO，NIO就是非阻塞IO了，而NIO在jdk1.7后又进行了升级成为nio.2也就是aio；\nJava IO的各种流是阻塞的。这意味着，当一个线程调用`read() `或 `write()`时，该线程被阻塞，直到有一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了。 Java NIO的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取。而不是保持线程阻塞，所以直至数据变的可以读取之前，该线程可以继续做其他的事情。 非阻塞写也是如此。一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。 线程通常将非阻塞IO的空闲时间用于在其它通道上执行IO操作，所以一个单独的线程现在可以管理多个输入和输出通道（channel）。\n\n<!--more-->\n\n# nio相关的类\n\nnio有四个很重要的类：`Selector`，`Channel`，`Buffer`，`Charset`\n## Channel\n\n Channel通过节点流的getChannel()方法来获得，成员map()用来将其部分或全部数据映射为Buffer，成员read()、write()方法来读写数据，而且只能通过Buffer作为缓冲来读写Channel关联的数据。\n\nChannel接口下有用于文件IO的`FileChannel`，用于UDP通信的`DatagramChannel`，用于TCP通信的`ocketChannel`、`ServerSocketChannel`，用于线程间通信的`Pipe.SinkChannel`、`Pipe.SourceChannel`等实现类。Channel也不是通过构造器来创建对象，而是通过节点流的getChannel()方法来获得，如通过`FileInputStream`、`FileOutputStream`、`andomAccessFile`的`getChannel()`获得对应的`FileChannel`。\n\n  `Channel`中常用的方法有`map()`、`read()`、`write()`，`map()`用来将`Channel`对应的部分或全部数据映射成`MappedByteBuffer`（`ByteBuffer`的子类），`read()/write()`用于对Buffer读写数据。\n\n## Buffer\n\nBuffer是一个缓冲区，它是一个抽象类，常用的子类:`ByteBuffer`,`MappedByteBuffer`,`CharBuffer`,`DoubleBuffer`,`FloatBuffer`,`IntBuffer`,`LongBuffer`,`ShortBuffer`等，通过它可以用来装入数据和输出数据。Buffer没有构造器，使用类方法`allocate()`来创建对应的Buffer对象，当向Buffer写入数据后，在读取Buffer中数据之前应该调用flip()方法来设置Buffer中的数据位置信息，读取Buffer中数据之后应该调用`clear()`方法来清空原来的数据位置信息。`compact()`方法只会清除已经读过的数据。任何未读的数据都被移到缓冲区的起始处，新写入的数据将放到缓冲区未读数据的后面。\n\n## charset\n\n Charset可以将Unicode字符串（CharBuffer）和字节序列（ByteBuffer）相互转化。\n\nJava中默认使用Unicode字符集，可以通过Charset来处理字节序列和字符序列（字符串）之间的转换，其`availableCharsets()`静态方法可以获得当前JDK支持的所有字符集。调用Charset的静态方法`forName()`可以获得指定字符集对应的Charset对象，调用该对象的`newEncoder()`、`newDecoder()`可以获得对应的编码器、解码器，调用编码器的encode()可以将CharBuffer或String转换为ByteBuffer，调用解码器的`decode()`可以将ByteBuffer转换为CharBuffer。\n\n ## Selector\n\nSelector允许单线程处理多个 Channel。如果你的应用打开了多个连接（通道），但每个连接的流量都很低，使用Selector就会很方便。Selector（选择器）是Java NIO中能够检测一到多个NIO通道，并能够知晓通道是否为诸如读写事件做好准备的组件。这样，一个单独的线程可以管理多个channel。通过调用`Selector.open()`方法创建一个Selector，将Channel注册到Selector上。通过`SelectableChannel.register()`方法来实现。与Selector一起使用时，Channel必须处于非阻塞模式下。这意味着不能将FileChannel与Selector一起使用，因为FileChannel不能切换到非阻塞模式。而套接字通道都可以。\n\n# nio使用须知\n\n缓冲区本质上是一块可以写入数据，然后可以从中读取数据的内存。这块内存被包装成NIO Buffer对象，并提供了一组方法，用来方便的访问该块内存。它的三个属性capacity,position和limit就是描述这块内存的了。capacity可以简单理解为这块内存的大小；写数据到Buffer中时，position表示当前的位置。初始的position值为0。当一个byte、long等数据写到Buffer后， position会向前移动到下一个可插入数据的Buffer单元。position最大可为capacity – 1.\n当读取数据时，也是从某个特定位置读。当将Buffer从写模式切换到读模式，position会被重置为0. 当从Buffer的position处读取数据时，position向前移动到下一个可读的位置。limit表示你最多能读（写）多少数据。\n\nbuffer的方法：\n\n- flip()：将Buffer从写模式切换到读模式。调用flip()方法会将position设回0，并将limit设置成之前position的值。\n- get()：从Buffer中读取数据\n- rewind()：将position设回0，所以你可以重读Buffer中的所有数据。limit保持不变，仍然表示能从Buffer中读取多少个元素（byte、char等）。\n- clear()：position将被设回0，limit被设置成 capacity的值。换句话说，Buffer 被清空了。Buffer中的数据并未清除，只是这些标记告诉我们可以从哪里开始往Buffer里写数据。\n- compact()：将所有未读的数据拷贝到Buffer起始处。然后将position设到最后一个未读元素正后面。limit属性依然像clear()方法一样，设置成capacity。\n-  put()：向Buffer存入数据，带索引参数的版本不会移动位置position。\n-  capacity()：获得Buffer的大小capacity。\n-  hasRemaining()：判断当前位置position和界限limit之间是否还有元素可供处理。\n-  remaining()：获得当前位置position和界限limit之间元素的个数。\n-  limit()：获得或者设置Buffer的界限limit的位置。\n-  position()：获得或者设置Buffer的位置position。\n-  mark()：设置Buffer的mark位置。\n-  reset()：将位置positon转到mark所在的位置。\n\n# nio使用示例\n\nNIO中，如果两个通道中有一个是FileChannel，那你可以直接将数据从一个channel传输到另外一个channel。\n\nFileChannel的transferFrom()方法可以将数据从源通道传输到FileChannel中。\n\nransferTo()方法将数据从FileChannel传输到其他的channel中。\n\nInputStream get出来的通道只能用于输入，outputStream同理\n\n文件读操作\n\n```java\nFile file = new File(\"test.txt\");\nFileInputStream fin = new FileInputStream(file);\n\nFileChannel channel = fin.getChannel();\nByteBuffer buf = ByteBuffer.allocate(10);\nint read = channel.read(buf);\nwhile (read>0){\n     buf.flip();\n    byte[] array = new byte[10];\n    int limit = buf.limit();\n    if (limit>=10){\n         buf.get(array);\n    }else {\n        array=new byte[limit];\n        buf.get(array);\n    }\n    String s = new String(array);\n    System.out.print(s);\n    buf.clear();\n     read = channel.read(buf);\n    }\n```\n\n文件写操作\n\n```java\nRandomAccessFile rw = new RandomAccessFile(\"test.txt\", \"rw\");\nFileChannel channel = rw.getChannel();\nByteBuffer allocate = ByteBuffer.allocate(1000);\nallocate.put(\"wwwww\".getBytes());\nallocate.flip();\nchannel.write(allocate);\nchannel.write(wrap);\n//      wrap 不需要 flip()\nByteBuffer wrap = ByteBuffer.wrap(\"sssssssssssss\".getBytes());\nchannel1.write(wrap);\nrw.close()\n```\n\n通道间数据传输\n\n```java\n  RandomAccessFile rw = new RandomAccessFile(\"test.txt\", \"rw\");\n  RandomAccessFile rw2 = new RandomAccessFile(\"test2.txt\", \"rw\");\n  FileChannel channel = rw.getChannel();\n  FileChannel channel2 = rw2.getChannel();\n  channel2.transferFrom(channel,0,channel.size());\n```\n\n","slug":"nio","published":1,"updated":"2019-05-17T01:20:02.878Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxsi0014vovm4hwf96vl","content":"<p>作者：muggle</p>\n<h1 id=\"nio介绍\"><a href=\"#nio介绍\" class=\"headerlink\" title=\"nio介绍\"></a>nio介绍</h1><p>传统的IO又称BIO，即阻塞式IO，NIO就是非阻塞IO了，而NIO在jdk1.7后又进行了升级成为nio.2也就是aio；<br>Java IO的各种流是阻塞的。这意味着，当一个线程调用<code>read()</code>或 <code>write()</code>时，该线程被阻塞，直到有一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了。 Java NIO的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取。而不是保持线程阻塞，所以直至数据变的可以读取之前，该线程可以继续做其他的事情。 非阻塞写也是如此。一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。 线程通常将非阻塞IO的空闲时间用于在其它通道上执行IO操作，所以一个单独的线程现在可以管理多个输入和输出通道（channel）。</p>\n<a id=\"more\"></a>\n<h1 id=\"nio相关的类\"><a href=\"#nio相关的类\" class=\"headerlink\" title=\"nio相关的类\"></a>nio相关的类</h1><p>nio有四个很重要的类：<code>Selector</code>，<code>Channel</code>，<code>Buffer</code>，<code>Charset</code></p>\n<h2 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h2><p> Channel通过节点流的getChannel()方法来获得，成员map()用来将其部分或全部数据映射为Buffer，成员read()、write()方法来读写数据，而且只能通过Buffer作为缓冲来读写Channel关联的数据。</p>\n<p>Channel接口下有用于文件IO的<code>FileChannel</code>，用于UDP通信的<code>DatagramChannel</code>，用于TCP通信的<code>ocketChannel</code>、<code>ServerSocketChannel</code>，用于线程间通信的<code>Pipe.SinkChannel</code>、<code>Pipe.SourceChannel</code>等实现类。Channel也不是通过构造器来创建对象，而是通过节点流的getChannel()方法来获得，如通过<code>FileInputStream</code>、<code>FileOutputStream</code>、<code>andomAccessFile</code>的<code>getChannel()</code>获得对应的<code>FileChannel</code>。</p>\n<p>  <code>Channel</code>中常用的方法有<code>map()</code>、<code>read()</code>、<code>write()</code>，<code>map()</code>用来将<code>Channel</code>对应的部分或全部数据映射成<code>MappedByteBuffer</code>（<code>ByteBuffer</code>的子类），<code>read()/write()</code>用于对Buffer读写数据。</p>\n<h2 id=\"Buffer\"><a href=\"#Buffer\" class=\"headerlink\" title=\"Buffer\"></a>Buffer</h2><p>Buffer是一个缓冲区，它是一个抽象类，常用的子类:<code>ByteBuffer</code>,<code>MappedByteBuffer</code>,<code>CharBuffer</code>,<code>DoubleBuffer</code>,<code>FloatBuffer</code>,<code>IntBuffer</code>,<code>LongBuffer</code>,<code>ShortBuffer</code>等，通过它可以用来装入数据和输出数据。Buffer没有构造器，使用类方法<code>allocate()</code>来创建对应的Buffer对象，当向Buffer写入数据后，在读取Buffer中数据之前应该调用flip()方法来设置Buffer中的数据位置信息，读取Buffer中数据之后应该调用<code>clear()</code>方法来清空原来的数据位置信息。<code>compact()</code>方法只会清除已经读过的数据。任何未读的数据都被移到缓冲区的起始处，新写入的数据将放到缓冲区未读数据的后面。</p>\n<h2 id=\"charset\"><a href=\"#charset\" class=\"headerlink\" title=\"charset\"></a>charset</h2><p> Charset可以将Unicode字符串（CharBuffer）和字节序列（ByteBuffer）相互转化。</p>\n<p>Java中默认使用Unicode字符集，可以通过Charset来处理字节序列和字符序列（字符串）之间的转换，其<code>availableCharsets()</code>静态方法可以获得当前JDK支持的所有字符集。调用Charset的静态方法<code>forName()</code>可以获得指定字符集对应的Charset对象，调用该对象的<code>newEncoder()</code>、<code>newDecoder()</code>可以获得对应的编码器、解码器，调用编码器的encode()可以将CharBuffer或String转换为ByteBuffer，调用解码器的<code>decode()</code>可以将ByteBuffer转换为CharBuffer。</p>\n<h2 id=\"Selector\"><a href=\"#Selector\" class=\"headerlink\" title=\"Selector\"></a>Selector</h2><p>Selector允许单线程处理多个 Channel。如果你的应用打开了多个连接（通道），但每个连接的流量都很低，使用Selector就会很方便。Selector（选择器）是Java NIO中能够检测一到多个NIO通道，并能够知晓通道是否为诸如读写事件做好准备的组件。这样，一个单独的线程可以管理多个channel。通过调用<code>Selector.open()</code>方法创建一个Selector，将Channel注册到Selector上。通过<code>SelectableChannel.register()</code>方法来实现。与Selector一起使用时，Channel必须处于非阻塞模式下。这意味着不能将FileChannel与Selector一起使用，因为FileChannel不能切换到非阻塞模式。而套接字通道都可以。</p>\n<h1 id=\"nio使用须知\"><a href=\"#nio使用须知\" class=\"headerlink\" title=\"nio使用须知\"></a>nio使用须知</h1><p>缓冲区本质上是一块可以写入数据，然后可以从中读取数据的内存。这块内存被包装成NIO Buffer对象，并提供了一组方法，用来方便的访问该块内存。它的三个属性capacity,position和limit就是描述这块内存的了。capacity可以简单理解为这块内存的大小；写数据到Buffer中时，position表示当前的位置。初始的position值为0。当一个byte、long等数据写到Buffer后， position会向前移动到下一个可插入数据的Buffer单元。position最大可为capacity – 1.<br>当读取数据时，也是从某个特定位置读。当将Buffer从写模式切换到读模式，position会被重置为0. 当从Buffer的position处读取数据时，position向前移动到下一个可读的位置。limit表示你最多能读（写）多少数据。</p>\n<p>buffer的方法：</p>\n<ul>\n<li>flip()：将Buffer从写模式切换到读模式。调用flip()方法会将position设回0，并将limit设置成之前position的值。</li>\n<li>get()：从Buffer中读取数据</li>\n<li>rewind()：将position设回0，所以你可以重读Buffer中的所有数据。limit保持不变，仍然表示能从Buffer中读取多少个元素（byte、char等）。</li>\n<li>clear()：position将被设回0，limit被设置成 capacity的值。换句话说，Buffer 被清空了。Buffer中的数据并未清除，只是这些标记告诉我们可以从哪里开始往Buffer里写数据。</li>\n<li>compact()：将所有未读的数据拷贝到Buffer起始处。然后将position设到最后一个未读元素正后面。limit属性依然像clear()方法一样，设置成capacity。</li>\n<li>put()：向Buffer存入数据，带索引参数的版本不会移动位置position。</li>\n<li>capacity()：获得Buffer的大小capacity。</li>\n<li>hasRemaining()：判断当前位置position和界限limit之间是否还有元素可供处理。</li>\n<li>remaining()：获得当前位置position和界限limit之间元素的个数。</li>\n<li>limit()：获得或者设置Buffer的界限limit的位置。</li>\n<li>position()：获得或者设置Buffer的位置position。</li>\n<li>mark()：设置Buffer的mark位置。</li>\n<li>reset()：将位置positon转到mark所在的位置。</li>\n</ul>\n<h1 id=\"nio使用示例\"><a href=\"#nio使用示例\" class=\"headerlink\" title=\"nio使用示例\"></a>nio使用示例</h1><p>NIO中，如果两个通道中有一个是FileChannel，那你可以直接将数据从一个channel传输到另外一个channel。</p>\n<p>FileChannel的transferFrom()方法可以将数据从源通道传输到FileChannel中。</p>\n<p>ransferTo()方法将数据从FileChannel传输到其他的channel中。</p>\n<p>InputStream get出来的通道只能用于输入，outputStream同理</p>\n<p>文件读操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"test.txt\"</span>);</span><br><span class=\"line\">FileInputStream fin = <span class=\"keyword\">new</span> FileInputStream(file);</span><br><span class=\"line\"></span><br><span class=\"line\">FileChannel channel = fin.getChannel();</span><br><span class=\"line\">ByteBuffer buf = ByteBuffer.allocate(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> read = channel.read(buf);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (read&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">     buf.flip();</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] array = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> limit = buf.limit();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (limit&gt;=<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">         buf.get(array);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        array=<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[limit];</span><br><span class=\"line\">        buf.get(array);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String s = <span class=\"keyword\">new</span> String(array);</span><br><span class=\"line\">    System.out.print(s);</span><br><span class=\"line\">    buf.clear();</span><br><span class=\"line\">     read = channel.read(buf);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>文件写操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RandomAccessFile rw = <span class=\"keyword\">new</span> RandomAccessFile(<span class=\"string\">\"test.txt\"</span>, <span class=\"string\">\"rw\"</span>);</span><br><span class=\"line\">FileChannel channel = rw.getChannel();</span><br><span class=\"line\">ByteBuffer allocate = ByteBuffer.allocate(<span class=\"number\">1000</span>);</span><br><span class=\"line\">allocate.put(<span class=\"string\">\"wwwww\"</span>.getBytes());</span><br><span class=\"line\">allocate.flip();</span><br><span class=\"line\">channel.write(allocate);</span><br><span class=\"line\">channel.write(wrap);</span><br><span class=\"line\"><span class=\"comment\">//      wrap 不需要 flip()</span></span><br><span class=\"line\">ByteBuffer wrap = ByteBuffer.wrap(<span class=\"string\">\"sssssssssssss\"</span>.getBytes());</span><br><span class=\"line\">channel1.write(wrap);</span><br><span class=\"line\">rw.close()</span><br></pre></td></tr></table></figure>\n<p>通道间数据传输</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RandomAccessFile rw = <span class=\"keyword\">new</span> RandomAccessFile(<span class=\"string\">\"test.txt\"</span>, <span class=\"string\">\"rw\"</span>);</span><br><span class=\"line\">RandomAccessFile rw2 = <span class=\"keyword\">new</span> RandomAccessFile(<span class=\"string\">\"test2.txt\"</span>, <span class=\"string\">\"rw\"</span>);</span><br><span class=\"line\">FileChannel channel = rw.getChannel();</span><br><span class=\"line\">FileChannel channel2 = rw2.getChannel();</span><br><span class=\"line\">channel2.transferFrom(channel,<span class=\"number\">0</span>,channel.size());</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>作者：muggle</p>\n<h1 id=\"nio介绍\"><a href=\"#nio介绍\" class=\"headerlink\" title=\"nio介绍\"></a>nio介绍</h1><p>传统的IO又称BIO，即阻塞式IO，NIO就是非阻塞IO了，而NIO在jdk1.7后又进行了升级成为nio.2也就是aio；<br>Java IO的各种流是阻塞的。这意味着，当一个线程调用<code>read()</code>或 <code>write()</code>时，该线程被阻塞，直到有一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了。 Java NIO的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取。而不是保持线程阻塞，所以直至数据变的可以读取之前，该线程可以继续做其他的事情。 非阻塞写也是如此。一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。 线程通常将非阻塞IO的空闲时间用于在其它通道上执行IO操作，所以一个单独的线程现在可以管理多个输入和输出通道（channel）。</p>","more":"<h1 id=\"nio相关的类\"><a href=\"#nio相关的类\" class=\"headerlink\" title=\"nio相关的类\"></a>nio相关的类</h1><p>nio有四个很重要的类：<code>Selector</code>，<code>Channel</code>，<code>Buffer</code>，<code>Charset</code></p>\n<h2 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h2><p> Channel通过节点流的getChannel()方法来获得，成员map()用来将其部分或全部数据映射为Buffer，成员read()、write()方法来读写数据，而且只能通过Buffer作为缓冲来读写Channel关联的数据。</p>\n<p>Channel接口下有用于文件IO的<code>FileChannel</code>，用于UDP通信的<code>DatagramChannel</code>，用于TCP通信的<code>ocketChannel</code>、<code>ServerSocketChannel</code>，用于线程间通信的<code>Pipe.SinkChannel</code>、<code>Pipe.SourceChannel</code>等实现类。Channel也不是通过构造器来创建对象，而是通过节点流的getChannel()方法来获得，如通过<code>FileInputStream</code>、<code>FileOutputStream</code>、<code>andomAccessFile</code>的<code>getChannel()</code>获得对应的<code>FileChannel</code>。</p>\n<p>  <code>Channel</code>中常用的方法有<code>map()</code>、<code>read()</code>、<code>write()</code>，<code>map()</code>用来将<code>Channel</code>对应的部分或全部数据映射成<code>MappedByteBuffer</code>（<code>ByteBuffer</code>的子类），<code>read()/write()</code>用于对Buffer读写数据。</p>\n<h2 id=\"Buffer\"><a href=\"#Buffer\" class=\"headerlink\" title=\"Buffer\"></a>Buffer</h2><p>Buffer是一个缓冲区，它是一个抽象类，常用的子类:<code>ByteBuffer</code>,<code>MappedByteBuffer</code>,<code>CharBuffer</code>,<code>DoubleBuffer</code>,<code>FloatBuffer</code>,<code>IntBuffer</code>,<code>LongBuffer</code>,<code>ShortBuffer</code>等，通过它可以用来装入数据和输出数据。Buffer没有构造器，使用类方法<code>allocate()</code>来创建对应的Buffer对象，当向Buffer写入数据后，在读取Buffer中数据之前应该调用flip()方法来设置Buffer中的数据位置信息，读取Buffer中数据之后应该调用<code>clear()</code>方法来清空原来的数据位置信息。<code>compact()</code>方法只会清除已经读过的数据。任何未读的数据都被移到缓冲区的起始处，新写入的数据将放到缓冲区未读数据的后面。</p>\n<h2 id=\"charset\"><a href=\"#charset\" class=\"headerlink\" title=\"charset\"></a>charset</h2><p> Charset可以将Unicode字符串（CharBuffer）和字节序列（ByteBuffer）相互转化。</p>\n<p>Java中默认使用Unicode字符集，可以通过Charset来处理字节序列和字符序列（字符串）之间的转换，其<code>availableCharsets()</code>静态方法可以获得当前JDK支持的所有字符集。调用Charset的静态方法<code>forName()</code>可以获得指定字符集对应的Charset对象，调用该对象的<code>newEncoder()</code>、<code>newDecoder()</code>可以获得对应的编码器、解码器，调用编码器的encode()可以将CharBuffer或String转换为ByteBuffer，调用解码器的<code>decode()</code>可以将ByteBuffer转换为CharBuffer。</p>\n<h2 id=\"Selector\"><a href=\"#Selector\" class=\"headerlink\" title=\"Selector\"></a>Selector</h2><p>Selector允许单线程处理多个 Channel。如果你的应用打开了多个连接（通道），但每个连接的流量都很低，使用Selector就会很方便。Selector（选择器）是Java NIO中能够检测一到多个NIO通道，并能够知晓通道是否为诸如读写事件做好准备的组件。这样，一个单独的线程可以管理多个channel。通过调用<code>Selector.open()</code>方法创建一个Selector，将Channel注册到Selector上。通过<code>SelectableChannel.register()</code>方法来实现。与Selector一起使用时，Channel必须处于非阻塞模式下。这意味着不能将FileChannel与Selector一起使用，因为FileChannel不能切换到非阻塞模式。而套接字通道都可以。</p>\n<h1 id=\"nio使用须知\"><a href=\"#nio使用须知\" class=\"headerlink\" title=\"nio使用须知\"></a>nio使用须知</h1><p>缓冲区本质上是一块可以写入数据，然后可以从中读取数据的内存。这块内存被包装成NIO Buffer对象，并提供了一组方法，用来方便的访问该块内存。它的三个属性capacity,position和limit就是描述这块内存的了。capacity可以简单理解为这块内存的大小；写数据到Buffer中时，position表示当前的位置。初始的position值为0。当一个byte、long等数据写到Buffer后， position会向前移动到下一个可插入数据的Buffer单元。position最大可为capacity – 1.<br>当读取数据时，也是从某个特定位置读。当将Buffer从写模式切换到读模式，position会被重置为0. 当从Buffer的position处读取数据时，position向前移动到下一个可读的位置。limit表示你最多能读（写）多少数据。</p>\n<p>buffer的方法：</p>\n<ul>\n<li>flip()：将Buffer从写模式切换到读模式。调用flip()方法会将position设回0，并将limit设置成之前position的值。</li>\n<li>get()：从Buffer中读取数据</li>\n<li>rewind()：将position设回0，所以你可以重读Buffer中的所有数据。limit保持不变，仍然表示能从Buffer中读取多少个元素（byte、char等）。</li>\n<li>clear()：position将被设回0，limit被设置成 capacity的值。换句话说，Buffer 被清空了。Buffer中的数据并未清除，只是这些标记告诉我们可以从哪里开始往Buffer里写数据。</li>\n<li>compact()：将所有未读的数据拷贝到Buffer起始处。然后将position设到最后一个未读元素正后面。limit属性依然像clear()方法一样，设置成capacity。</li>\n<li>put()：向Buffer存入数据，带索引参数的版本不会移动位置position。</li>\n<li>capacity()：获得Buffer的大小capacity。</li>\n<li>hasRemaining()：判断当前位置position和界限limit之间是否还有元素可供处理。</li>\n<li>remaining()：获得当前位置position和界限limit之间元素的个数。</li>\n<li>limit()：获得或者设置Buffer的界限limit的位置。</li>\n<li>position()：获得或者设置Buffer的位置position。</li>\n<li>mark()：设置Buffer的mark位置。</li>\n<li>reset()：将位置positon转到mark所在的位置。</li>\n</ul>\n<h1 id=\"nio使用示例\"><a href=\"#nio使用示例\" class=\"headerlink\" title=\"nio使用示例\"></a>nio使用示例</h1><p>NIO中，如果两个通道中有一个是FileChannel，那你可以直接将数据从一个channel传输到另外一个channel。</p>\n<p>FileChannel的transferFrom()方法可以将数据从源通道传输到FileChannel中。</p>\n<p>ransferTo()方法将数据从FileChannel传输到其他的channel中。</p>\n<p>InputStream get出来的通道只能用于输入，outputStream同理</p>\n<p>文件读操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"test.txt\"</span>);</span><br><span class=\"line\">FileInputStream fin = <span class=\"keyword\">new</span> FileInputStream(file);</span><br><span class=\"line\"></span><br><span class=\"line\">FileChannel channel = fin.getChannel();</span><br><span class=\"line\">ByteBuffer buf = ByteBuffer.allocate(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> read = channel.read(buf);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (read&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">     buf.flip();</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] array = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> limit = buf.limit();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (limit&gt;=<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">         buf.get(array);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        array=<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[limit];</span><br><span class=\"line\">        buf.get(array);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String s = <span class=\"keyword\">new</span> String(array);</span><br><span class=\"line\">    System.out.print(s);</span><br><span class=\"line\">    buf.clear();</span><br><span class=\"line\">     read = channel.read(buf);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>文件写操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RandomAccessFile rw = <span class=\"keyword\">new</span> RandomAccessFile(<span class=\"string\">\"test.txt\"</span>, <span class=\"string\">\"rw\"</span>);</span><br><span class=\"line\">FileChannel channel = rw.getChannel();</span><br><span class=\"line\">ByteBuffer allocate = ByteBuffer.allocate(<span class=\"number\">1000</span>);</span><br><span class=\"line\">allocate.put(<span class=\"string\">\"wwwww\"</span>.getBytes());</span><br><span class=\"line\">allocate.flip();</span><br><span class=\"line\">channel.write(allocate);</span><br><span class=\"line\">channel.write(wrap);</span><br><span class=\"line\"><span class=\"comment\">//      wrap 不需要 flip()</span></span><br><span class=\"line\">ByteBuffer wrap = ByteBuffer.wrap(<span class=\"string\">\"sssssssssssss\"</span>.getBytes());</span><br><span class=\"line\">channel1.write(wrap);</span><br><span class=\"line\">rw.close()</span><br></pre></td></tr></table></figure>\n<p>通道间数据传输</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RandomAccessFile rw = <span class=\"keyword\">new</span> RandomAccessFile(<span class=\"string\">\"test.txt\"</span>, <span class=\"string\">\"rw\"</span>);</span><br><span class=\"line\">RandomAccessFile rw2 = <span class=\"keyword\">new</span> RandomAccessFile(<span class=\"string\">\"test2.txt\"</span>, <span class=\"string\">\"rw\"</span>);</span><br><span class=\"line\">FileChannel channel = rw.getChannel();</span><br><span class=\"line\">FileChannel channel2 = rw2.getChannel();</span><br><span class=\"line\">channel2.transferFrom(channel,<span class=\"number\">0</span>,channel.size());</span><br></pre></td></tr></table></figure>"},{"title":"reptile","date":"2019-04-30T08:06:11.000Z","_content":"\n# java撸一只爬虫\n\n<!--more-->","source":"_posts/reptile.md","raw":"---\ntitle: reptile\ndate: 2019-04-30 16:06:11\ntags: javase\n---\n\n# java撸一只爬虫\n\n<!--more-->","slug":"reptile","published":1,"updated":"2019-05-13T02:27:29.314Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxsj0016vovmv61pdun2","content":"<h1 id=\"java撸一只爬虫\"><a href=\"#java撸一只爬虫\" class=\"headerlink\" title=\"java撸一只爬虫\"></a>java撸一只爬虫</h1><a id=\"more\"></a>","site":{"data":{}},"excerpt":"<h1 id=\"java撸一只爬虫\"><a href=\"#java撸一只爬虫\" class=\"headerlink\" title=\"java撸一只爬虫\"></a>java撸一只爬虫</h1>","more":""},{"title":"spi","date":"2019-05-17T03:47:30.000Z","_content":"\n今天介绍两个你每天都在用但是你却很少去了解它的知识点：spi和jar运行机制\n\n首先我们新建一个普通的maven项目，在`resources`文件夹下新建`META-INF.services`\n\n然后https://mp.weixin.qq.com/s/OYzwKcGrpc8Spt-wlVssSQ","source":"_posts/spi.md","raw":"---\ntitle: spi\ndate: 2019-05-17 11:47:30\ntags: javase\n---\n\n今天介绍两个你每天都在用但是你却很少去了解它的知识点：spi和jar运行机制\n\n首先我们新建一个普通的maven项目，在`resources`文件夹下新建`META-INF.services`\n\n然后https://mp.weixin.qq.com/s/OYzwKcGrpc8Spt-wlVssSQ","slug":"spi","published":1,"updated":"2019-05-17T07:15:54.189Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxsk0018vovmny85p5kn","content":"<p>今天介绍两个你每天都在用但是你却很少去了解它的知识点：spi和jar运行机制</p>\n<p>首先我们新建一个普通的maven项目，在<code>resources</code>文件夹下新建<code>META-INF.services</code></p>\n<p>然后<a href=\"https://mp.weixin.qq.com/s/OYzwKcGrpc8Spt-wlVssSQ\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/OYzwKcGrpc8Spt-wlVssSQ</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天介绍两个你每天都在用但是你却很少去了解它的知识点：spi和jar运行机制</p>\n<p>首先我们新建一个普通的maven项目，在<code>resources</code>文件夹下新建<code>META-INF.services</code></p>\n<p>然后<a href=\"https://mp.weixin.qq.com/s/OYzwKcGrpc8Spt-wlVssSQ\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/OYzwKcGrpc8Spt-wlVssSQ</a></p>\n"},{"title":"springboot全面解读系列第一篇","date":"2019-04-16T02:35:48.000Z","_content":"\n作者：muggle\n\n## 序\n\n如果你研究过springboot，你就会发现它不仅仅是方便了我们搭建项目整合框架，它其中有许多很高明的编程思想值得去学习研究和模仿；\n\n<!--more-->\n\n## 如何构建springboot项目\n\n## springboot 项目结构分析\n\n## 嵌入式WEB容器\n\n## 自动装配 \n\n组件和角色\n\n@component的派生和层级\n\n@enable 模块\n\n具有相同领域是功能组件集合，组合所形成的一个独立的单元\n\n@enablewebmvc @enableAutoconfiguration\n\n实现方式： 编程和注解\n\n@enableWebmvc                     webmvc \n\n@enableTransactionManagement         事物\n\n@enbaleCahing   caching\n\n@enableMBeanExport   jmx\n\n@enableAsync 异步处理\n\n@enablewebflux   webflux\n\n@enableAspectJAutoProxy\n\n@enable AutoConfiguration\n\n@enableManagementContext\n\n@EnableConfigurationProperties\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/sppringboot.md","raw":"---\ntitle: springboot全面解读系列第一篇\ndate: 2019-04-16 10:35:48\ntags: springboot\n---\n\n作者：muggle\n\n## 序\n\n如果你研究过springboot，你就会发现它不仅仅是方便了我们搭建项目整合框架，它其中有许多很高明的编程思想值得去学习研究和模仿；\n\n<!--more-->\n\n## 如何构建springboot项目\n\n## springboot 项目结构分析\n\n## 嵌入式WEB容器\n\n## 自动装配 \n\n组件和角色\n\n@component的派生和层级\n\n@enable 模块\n\n具有相同领域是功能组件集合，组合所形成的一个独立的单元\n\n@enablewebmvc @enableAutoconfiguration\n\n实现方式： 编程和注解\n\n@enableWebmvc                     webmvc \n\n@enableTransactionManagement         事物\n\n@enbaleCahing   caching\n\n@enableMBeanExport   jmx\n\n@enableAsync 异步处理\n\n@enablewebflux   webflux\n\n@enableAspectJAutoProxy\n\n@enable AutoConfiguration\n\n@enableManagementContext\n\n@EnableConfigurationProperties\n\n\n\n\n\n\n\n\n\n\n\n","slug":"sppringboot","published":1,"updated":"2019-05-17T07:16:15.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxsl001bvovmpk841vce","content":"<p>作者：muggle</p>\n<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><p>如果你研究过springboot，你就会发现它不仅仅是方便了我们搭建项目整合框架，它其中有许多很高明的编程思想值得去学习研究和模仿；</p>\n<a id=\"more\"></a>\n<h2 id=\"如何构建springboot项目\"><a href=\"#如何构建springboot项目\" class=\"headerlink\" title=\"如何构建springboot项目\"></a>如何构建springboot项目</h2><h2 id=\"springboot-项目结构分析\"><a href=\"#springboot-项目结构分析\" class=\"headerlink\" title=\"springboot 项目结构分析\"></a>springboot 项目结构分析</h2><h2 id=\"嵌入式WEB容器\"><a href=\"#嵌入式WEB容器\" class=\"headerlink\" title=\"嵌入式WEB容器\"></a>嵌入式WEB容器</h2><h2 id=\"自动装配\"><a href=\"#自动装配\" class=\"headerlink\" title=\"自动装配\"></a>自动装配</h2><p>组件和角色</p>\n<p>@component的派生和层级</p>\n<p>@enable 模块</p>\n<p>具有相同领域是功能组件集合，组合所形成的一个独立的单元</p>\n<p>@enablewebmvc @enableAutoconfiguration</p>\n<p>实现方式： 编程和注解</p>\n<p>@enableWebmvc                     webmvc </p>\n<p>@enableTransactionManagement         事物</p>\n<p>@enbaleCahing   caching</p>\n<p>@enableMBeanExport   jmx</p>\n<p>@enableAsync 异步处理</p>\n<p>@enablewebflux   webflux</p>\n<p>@enableAspectJAutoProxy</p>\n<p>@enable AutoConfiguration</p>\n<p>@enableManagementContext</p>\n<p>@EnableConfigurationProperties</p>\n","site":{"data":{}},"excerpt":"<p>作者：muggle</p>\n<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><p>如果你研究过springboot，你就会发现它不仅仅是方便了我们搭建项目整合框架，它其中有许多很高明的编程思想值得去学习研究和模仿；</p>","more":"<h2 id=\"如何构建springboot项目\"><a href=\"#如何构建springboot项目\" class=\"headerlink\" title=\"如何构建springboot项目\"></a>如何构建springboot项目</h2><h2 id=\"springboot-项目结构分析\"><a href=\"#springboot-项目结构分析\" class=\"headerlink\" title=\"springboot 项目结构分析\"></a>springboot 项目结构分析</h2><h2 id=\"嵌入式WEB容器\"><a href=\"#嵌入式WEB容器\" class=\"headerlink\" title=\"嵌入式WEB容器\"></a>嵌入式WEB容器</h2><h2 id=\"自动装配\"><a href=\"#自动装配\" class=\"headerlink\" title=\"自动装配\"></a>自动装配</h2><p>组件和角色</p>\n<p>@component的派生和层级</p>\n<p>@enable 模块</p>\n<p>具有相同领域是功能组件集合，组合所形成的一个独立的单元</p>\n<p>@enablewebmvc @enableAutoconfiguration</p>\n<p>实现方式： 编程和注解</p>\n<p>@enableWebmvc                     webmvc </p>\n<p>@enableTransactionManagement         事物</p>\n<p>@enbaleCahing   caching</p>\n<p>@enableMBeanExport   jmx</p>\n<p>@enableAsync 异步处理</p>\n<p>@enablewebflux   webflux</p>\n<p>@enableAspectJAutoProxy</p>\n<p>@enable AutoConfiguration</p>\n<p>@enableManagementContext</p>\n<p>@EnableConfigurationProperties</p>"},{"title":"security-oauth2学习笔记","date":"2019-04-12T02:49:16.000Z","_content":"作者：muggle\n\n## oauth2 相关概念\n\n文章参考[理解OAuth 2.0](http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html)\n\n### oauth2 角色关系\n\n在oauth2中分为以下几个角色：Resource server、Authorization server、Resource Owner、application。\n\nResource server:资源服务器\n\nAuthorization server:认证服务器\n\nResource Owner:资源拥有者\n\napplication:第三方应用\n\noauth2的一次请求流程为：\n\n第三方应用获取认证token 向认证服务器认证，认证服务器通过认证后第三方应用便可向资源服务器拿资源；第三方应用的获取资源的范围由资源拥有者授权。\n\n显然由流程可知，oauth2要保证以下几点：\n1.token的有效期和更新方式要可控，安全性要好\n2.用户授权第三方应用要可以控制授权范围\n<!-- more -->\n\n### oauth2的授权方式\n\n第三方应用必须得到用户的授权（authorization grant），才能获得令牌（access token）。OAuth 2.0定义了四种授权方式。\n\n授权码模式（authorization code）\n简化模式（implicit）\n密码模式（resource owner password credentials）\n客户端模式（client credentials\n\n各个模式具体流程略微复杂，这里节省时间不做介绍，想了解的请参看[理解OAuth 2.0](http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html)\n\n## spring-security-oauth2原理分析\n\n### 授权端点一览表\n\noauth2提供了一系列URL来完成相应的认证授权相关功能，这些URL都是可配置的，下面贴出各url及其功能；\n\n| 授权端点             | /oauth/authorize      |                  |\n| -------------------- | --------------------- | ---------------- |\n| 令牌端点             | /oauth/token          | 获取一个令牌     |\n| 用户确认授权提交端点 | /oauth/confirm_access | 供用户授权第三方 |\n| 授权服务错误信息端点 | /oauth/error          |                  |\n| 令牌解析端点         | /oauth/check_token    |                  |\n| 公钥端点             | /oauth/token_key      |                  |\n\n\n\n### 认证服务器配置\n\n认证服务器相关配置继承`AuthorizationServerConfigurerAdapter`重写configure方法实现\n\n```java\npublic class AuthorizationServerConfigurerAdapter implements AuthorizationServerConfigurer {\n    public AuthorizationServerConfigurerAdapter() {\n    }\n\n    public void configure(AuthorizationServerSecurityConfigurer security) throws Exception {\n    }\n\n    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n    }\n\n    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {\n    }\n}\n```\n\n\n\n*ClientDetailsServiceConfigurer* 验证客户端的方式\n\n> 当一个客户端向认证服务器请求认证的时候，我们需要判别这个客户端是否通过认证；ClientDetailsServiceConfigurer提供了三种认证方式 ：\n>\n> - clients.withClientDetails()：类似于springSecurity的UserDetailService，对应的也有ClientDetailsService 和 ClientDetails；\n> \n>- clients.jdbc():传入一个dataSource(搞不懂，既然有withClientDetails了，为啥还来个这个)；\n> \n> - clients.inMemory() 基于内存，也就是在代码里写死\n\n验证参数说明\n\n>从ClientDetails我们就能很清晰的分辨出客户端需要配置哪些参数\n>\n>```java\n>public class MyClientDetail  implements ClientDetails {\n>@Override\n>public String getClientId() {\n>   return null;\n>}\n>\n>@Override\n>public Set<String> getResourceIds() {\n>   return null;\n>}\n>\n>@Override\n>public boolean isSecretRequired() {\n>   return false;\n>}\n>\n>@Override\n>public String getClientSecret() {\n>   return null;\n>}\n>\n>@Override\n>public boolean isScoped() {\n>   return false;\n>}\n>\n>@Override\n>public Set<String> getScope() {\n>   return null;\n>}\n>\n>@Override\n>public Set<String> getAuthorizedGrantTypes() {\n>   return null;\n>}\n>\n>@Override\n>public Set<String> getRegisteredRedirectUri() {\n>   return null;\n>}\n>\n>@Override\n>public Collection<GrantedAuthority> getAuthorities() {\n>   return null;\n>}\n>\n>@Override\n>public Integer getAccessTokenValiditySeconds() {\n>   return null;\n>}\n>\n>@Override\n>public Integer getRefreshTokenValiditySeconds() {\n>   return null;\n>}\n>\n>@Override\n>public boolean isAutoApprove(String s) {\n>   return false;\n>}\n>\n>@Override\n>public Map<String, Object> getAdditionalInformation() {\n>   return null;\n>}\n>}\n>```\n>clientId:客户端ID\n>\n>secret:客户端密钥\n>\n>scope:客户受限的范围。如果范围未定义或为空（默认值），则客户端不受范围限制\n>\n>authorizedGrantTypes:授权客户端使用的授权类型。默认值为空。\n>\n>authorities：授予客户端的权限（常规Spring Security权限）\n\n*AuthorizationServerSecurityConfigurer*\n\n>该类共有13个配置相关的方法：\n>\n>- passwordEncoder():通过源码猜测springSecurity中一样，用于编解码secret，未验证，官网也未发现资料\n>- tokenKeyAccess（）：oauth2授权服务器会提供一个`/oauth/token_key`的url来供资源服务器获取公钥，这个方法就是配置获取公钥的权限范围，它使用的是SpEL表达式且默认不开启，如果你没用到公钥，则不必管他，在[官方文档](<http://projects.spring.io/spring-security-oauth/docs/oauth2.html#resource-server-configuration>) 上使用JwtToken中使用了该方法，如果你用的是JwtToken请注意\n>- checkTokenAccess（）：授权服务器提供一个`/oauth/check_token`的url来供资源服务器解码令牌，该方法就是配置权限范围，同样使用的是SpEL表达式且默认不开启\n>- sslOnly()：普通HTTP适用于测试，但授权服务器只能在生产中通过SSL使用，调用方法`sslOnly()`则强制使用ssl。\n>- getTokenKeyAccess()：就方法名的意思，获得tokenKeyAccess所设置的SpEL表达式\n>- getCheckTokenAccess()：同上\n>- accessDeniedHandler()：拒绝访问处理器，猜测和springSecurity中类似，未验证\n>- realm()：默认值为 \"oauth2/client\",用处未知\n>- authenticationEntryPoint():在springSecurity中是处理验证失败的，这里同样未做验证\n>- 是allowFormAuthenticationForClients： 允许客户端进行表单身份验证，主要是让/oauth/token支持client_id以及client_secret作登录认证\n>- addTokenEndpointAuthenticationFilter：添加令牌端点身份验证过滤器\n>- tokenEndpointAuthenticationFilters：添加多个过滤器\n>- init():初始化方法\n>\n\n*AuthorizationServerEndpointsConfigurer*\n\n>该类配置方法太多了，且官方资料不全，在这里只列举几个常用的配置方法\n>\n>- pathMapping()：修改授权端点一览表的那些URL\n>- tokenStore()：生成Token后的存储方式，可以new RedisTokenStore()来使用redis存储\n>-  authenticationManager()：身份验证管理器，参考springSecurity中的 authenticationManager\n>- allowedTokenEndpointRequestMethods()：允许的请求方式\n\n### 认证服务器使用\n\n为便于学习，我们单独搭一个认证服务器并使用它\n\n","source":"_posts/security-oauth2学习笔记.md","raw":"---\ntitle: security-oauth2学习笔记\ndate: 2019-04-12 10:49:16\ntags: security\n---\n作者：muggle\n\n## oauth2 相关概念\n\n文章参考[理解OAuth 2.0](http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html)\n\n### oauth2 角色关系\n\n在oauth2中分为以下几个角色：Resource server、Authorization server、Resource Owner、application。\n\nResource server:资源服务器\n\nAuthorization server:认证服务器\n\nResource Owner:资源拥有者\n\napplication:第三方应用\n\noauth2的一次请求流程为：\n\n第三方应用获取认证token 向认证服务器认证，认证服务器通过认证后第三方应用便可向资源服务器拿资源；第三方应用的获取资源的范围由资源拥有者授权。\n\n显然由流程可知，oauth2要保证以下几点：\n1.token的有效期和更新方式要可控，安全性要好\n2.用户授权第三方应用要可以控制授权范围\n<!-- more -->\n\n### oauth2的授权方式\n\n第三方应用必须得到用户的授权（authorization grant），才能获得令牌（access token）。OAuth 2.0定义了四种授权方式。\n\n授权码模式（authorization code）\n简化模式（implicit）\n密码模式（resource owner password credentials）\n客户端模式（client credentials\n\n各个模式具体流程略微复杂，这里节省时间不做介绍，想了解的请参看[理解OAuth 2.0](http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html)\n\n## spring-security-oauth2原理分析\n\n### 授权端点一览表\n\noauth2提供了一系列URL来完成相应的认证授权相关功能，这些URL都是可配置的，下面贴出各url及其功能；\n\n| 授权端点             | /oauth/authorize      |                  |\n| -------------------- | --------------------- | ---------------- |\n| 令牌端点             | /oauth/token          | 获取一个令牌     |\n| 用户确认授权提交端点 | /oauth/confirm_access | 供用户授权第三方 |\n| 授权服务错误信息端点 | /oauth/error          |                  |\n| 令牌解析端点         | /oauth/check_token    |                  |\n| 公钥端点             | /oauth/token_key      |                  |\n\n\n\n### 认证服务器配置\n\n认证服务器相关配置继承`AuthorizationServerConfigurerAdapter`重写configure方法实现\n\n```java\npublic class AuthorizationServerConfigurerAdapter implements AuthorizationServerConfigurer {\n    public AuthorizationServerConfigurerAdapter() {\n    }\n\n    public void configure(AuthorizationServerSecurityConfigurer security) throws Exception {\n    }\n\n    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n    }\n\n    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {\n    }\n}\n```\n\n\n\n*ClientDetailsServiceConfigurer* 验证客户端的方式\n\n> 当一个客户端向认证服务器请求认证的时候，我们需要判别这个客户端是否通过认证；ClientDetailsServiceConfigurer提供了三种认证方式 ：\n>\n> - clients.withClientDetails()：类似于springSecurity的UserDetailService，对应的也有ClientDetailsService 和 ClientDetails；\n> \n>- clients.jdbc():传入一个dataSource(搞不懂，既然有withClientDetails了，为啥还来个这个)；\n> \n> - clients.inMemory() 基于内存，也就是在代码里写死\n\n验证参数说明\n\n>从ClientDetails我们就能很清晰的分辨出客户端需要配置哪些参数\n>\n>```java\n>public class MyClientDetail  implements ClientDetails {\n>@Override\n>public String getClientId() {\n>   return null;\n>}\n>\n>@Override\n>public Set<String> getResourceIds() {\n>   return null;\n>}\n>\n>@Override\n>public boolean isSecretRequired() {\n>   return false;\n>}\n>\n>@Override\n>public String getClientSecret() {\n>   return null;\n>}\n>\n>@Override\n>public boolean isScoped() {\n>   return false;\n>}\n>\n>@Override\n>public Set<String> getScope() {\n>   return null;\n>}\n>\n>@Override\n>public Set<String> getAuthorizedGrantTypes() {\n>   return null;\n>}\n>\n>@Override\n>public Set<String> getRegisteredRedirectUri() {\n>   return null;\n>}\n>\n>@Override\n>public Collection<GrantedAuthority> getAuthorities() {\n>   return null;\n>}\n>\n>@Override\n>public Integer getAccessTokenValiditySeconds() {\n>   return null;\n>}\n>\n>@Override\n>public Integer getRefreshTokenValiditySeconds() {\n>   return null;\n>}\n>\n>@Override\n>public boolean isAutoApprove(String s) {\n>   return false;\n>}\n>\n>@Override\n>public Map<String, Object> getAdditionalInformation() {\n>   return null;\n>}\n>}\n>```\n>clientId:客户端ID\n>\n>secret:客户端密钥\n>\n>scope:客户受限的范围。如果范围未定义或为空（默认值），则客户端不受范围限制\n>\n>authorizedGrantTypes:授权客户端使用的授权类型。默认值为空。\n>\n>authorities：授予客户端的权限（常规Spring Security权限）\n\n*AuthorizationServerSecurityConfigurer*\n\n>该类共有13个配置相关的方法：\n>\n>- passwordEncoder():通过源码猜测springSecurity中一样，用于编解码secret，未验证，官网也未发现资料\n>- tokenKeyAccess（）：oauth2授权服务器会提供一个`/oauth/token_key`的url来供资源服务器获取公钥，这个方法就是配置获取公钥的权限范围，它使用的是SpEL表达式且默认不开启，如果你没用到公钥，则不必管他，在[官方文档](<http://projects.spring.io/spring-security-oauth/docs/oauth2.html#resource-server-configuration>) 上使用JwtToken中使用了该方法，如果你用的是JwtToken请注意\n>- checkTokenAccess（）：授权服务器提供一个`/oauth/check_token`的url来供资源服务器解码令牌，该方法就是配置权限范围，同样使用的是SpEL表达式且默认不开启\n>- sslOnly()：普通HTTP适用于测试，但授权服务器只能在生产中通过SSL使用，调用方法`sslOnly()`则强制使用ssl。\n>- getTokenKeyAccess()：就方法名的意思，获得tokenKeyAccess所设置的SpEL表达式\n>- getCheckTokenAccess()：同上\n>- accessDeniedHandler()：拒绝访问处理器，猜测和springSecurity中类似，未验证\n>- realm()：默认值为 \"oauth2/client\",用处未知\n>- authenticationEntryPoint():在springSecurity中是处理验证失败的，这里同样未做验证\n>- 是allowFormAuthenticationForClients： 允许客户端进行表单身份验证，主要是让/oauth/token支持client_id以及client_secret作登录认证\n>- addTokenEndpointAuthenticationFilter：添加令牌端点身份验证过滤器\n>- tokenEndpointAuthenticationFilters：添加多个过滤器\n>- init():初始化方法\n>\n\n*AuthorizationServerEndpointsConfigurer*\n\n>该类配置方法太多了，且官方资料不全，在这里只列举几个常用的配置方法\n>\n>- pathMapping()：修改授权端点一览表的那些URL\n>- tokenStore()：生成Token后的存储方式，可以new RedisTokenStore()来使用redis存储\n>-  authenticationManager()：身份验证管理器，参考springSecurity中的 authenticationManager\n>- allowedTokenEndpointRequestMethods()：允许的请求方式\n\n### 认证服务器使用\n\n为便于学习，我们单独搭一个认证服务器并使用它\n\n","slug":"security-oauth2学习笔记","published":1,"updated":"2019-04-23T09:24:14.382Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxsm001dvovmjhdf3yxu","content":"<p>作者：muggle</p>\n<h2 id=\"oauth2-相关概念\"><a href=\"#oauth2-相关概念\" class=\"headerlink\" title=\"oauth2 相关概念\"></a>oauth2 相关概念</h2><p>文章参考<a href=\"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html\" target=\"_blank\" rel=\"noopener\">理解OAuth 2.0</a></p>\n<h3 id=\"oauth2-角色关系\"><a href=\"#oauth2-角色关系\" class=\"headerlink\" title=\"oauth2 角色关系\"></a>oauth2 角色关系</h3><p>在oauth2中分为以下几个角色：Resource server、Authorization server、Resource Owner、application。</p>\n<p>Resource server:资源服务器</p>\n<p>Authorization server:认证服务器</p>\n<p>Resource Owner:资源拥有者</p>\n<p>application:第三方应用</p>\n<p>oauth2的一次请求流程为：</p>\n<p>第三方应用获取认证token 向认证服务器认证，认证服务器通过认证后第三方应用便可向资源服务器拿资源；第三方应用的获取资源的范围由资源拥有者授权。</p>\n<p>显然由流程可知，oauth2要保证以下几点：<br>1.token的有效期和更新方式要可控，安全性要好<br>2.用户授权第三方应用要可以控制授权范围<br><a id=\"more\"></a></p>\n<h3 id=\"oauth2的授权方式\"><a href=\"#oauth2的授权方式\" class=\"headerlink\" title=\"oauth2的授权方式\"></a>oauth2的授权方式</h3><p>第三方应用必须得到用户的授权（authorization grant），才能获得令牌（access token）。OAuth 2.0定义了四种授权方式。</p>\n<p>授权码模式（authorization code）<br>简化模式（implicit）<br>密码模式（resource owner password credentials）<br>客户端模式（client credentials</p>\n<p>各个模式具体流程略微复杂，这里节省时间不做介绍，想了解的请参看<a href=\"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html\" target=\"_blank\" rel=\"noopener\">理解OAuth 2.0</a></p>\n<h2 id=\"spring-security-oauth2原理分析\"><a href=\"#spring-security-oauth2原理分析\" class=\"headerlink\" title=\"spring-security-oauth2原理分析\"></a>spring-security-oauth2原理分析</h2><h3 id=\"授权端点一览表\"><a href=\"#授权端点一览表\" class=\"headerlink\" title=\"授权端点一览表\"></a>授权端点一览表</h3><p>oauth2提供了一系列URL来完成相应的认证授权相关功能，这些URL都是可配置的，下面贴出各url及其功能；</p>\n<table>\n<thead>\n<tr>\n<th>授权端点</th>\n<th>/oauth/authorize</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>令牌端点</td>\n<td>/oauth/token</td>\n<td>获取一个令牌</td>\n</tr>\n<tr>\n<td>用户确认授权提交端点</td>\n<td>/oauth/confirm_access</td>\n<td>供用户授权第三方</td>\n</tr>\n<tr>\n<td>授权服务错误信息端点</td>\n<td>/oauth/error</td>\n<td></td>\n</tr>\n<tr>\n<td>令牌解析端点</td>\n<td>/oauth/check_token</td>\n<td></td>\n</tr>\n<tr>\n<td>公钥端点</td>\n<td>/oauth/token_key</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"认证服务器配置\"><a href=\"#认证服务器配置\" class=\"headerlink\" title=\"认证服务器配置\"></a>认证服务器配置</h3><p>认证服务器相关配置继承<code>AuthorizationServerConfigurerAdapter</code>重写configure方法实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthorizationServerConfigurerAdapter</span> <span class=\"keyword\">implements</span> <span class=\"title\">AuthorizationServerConfigurer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AuthorizationServerConfigurerAdapter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthorizationServerSecurityConfigurer security)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(ClientDetailsServiceConfigurer clients)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>ClientDetailsServiceConfigurer</em> 验证客户端的方式</p>\n<blockquote>\n<p>当一个客户端向认证服务器请求认证的时候，我们需要判别这个客户端是否通过认证；ClientDetailsServiceConfigurer提供了三种认证方式 ：</p>\n<ul>\n<li><p>clients.withClientDetails()：类似于springSecurity的UserDetailService，对应的也有ClientDetailsService 和 ClientDetails；</p>\n</li>\n<li><p>clients.jdbc():传入一个dataSource(搞不懂，既然有withClientDetails了，为啥还来个这个)；</p>\n</li>\n<li><p>clients.inMemory() 基于内存，也就是在代码里写死</p>\n</li>\n</ul>\n</blockquote>\n<p>验证参数说明</p>\n<blockquote>\n<p>从ClientDetails我们就能很清晰的分辨出客户端需要配置哪些参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClientDetail</span>  <span class=\"keyword\">implements</span> <span class=\"title\">ClientDetails</span> </span>&#123;</span><br><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getClientId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">getResourceIds</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSecretRequired</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getClientSecret</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isScoped</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">getScope</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">getAuthorizedGrantTypes</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">getRegisteredRedirectUri</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">public</span> Collection&lt;GrantedAuthority&gt; <span class=\"title\">getAuthorities</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getAccessTokenValiditySeconds</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getRefreshTokenValiditySeconds</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isAutoApprove</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getAdditionalInformation</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>clientId:客户端ID</p>\n<p>secret:客户端密钥</p>\n<p>scope:客户受限的范围。如果范围未定义或为空（默认值），则客户端不受范围限制</p>\n<p>authorizedGrantTypes:授权客户端使用的授权类型。默认值为空。</p>\n<p>authorities：授予客户端的权限（常规Spring Security权限）</p>\n</blockquote>\n<p><em>AuthorizationServerSecurityConfigurer</em></p>\n<blockquote>\n<p>该类共有13个配置相关的方法：</p>\n<ul>\n<li>passwordEncoder():通过源码猜测springSecurity中一样，用于编解码secret，未验证，官网也未发现资料</li>\n<li>tokenKeyAccess（）：oauth2授权服务器会提供一个<code>/oauth/token_key</code>的url来供资源服务器获取公钥，这个方法就是配置获取公钥的权限范围，它使用的是SpEL表达式且默认不开启，如果你没用到公钥，则不必管他，在<a href=\"http://projects.spring.io/spring-security-oauth/docs/oauth2.html#resource-server-configuration\" target=\"_blank\" rel=\"noopener\">官方文档</a> 上使用JwtToken中使用了该方法，如果你用的是JwtToken请注意</li>\n<li>checkTokenAccess（）：授权服务器提供一个<code>/oauth/check_token</code>的url来供资源服务器解码令牌，该方法就是配置权限范围，同样使用的是SpEL表达式且默认不开启</li>\n<li>sslOnly()：普通HTTP适用于测试，但授权服务器只能在生产中通过SSL使用，调用方法<code>sslOnly()</code>则强制使用ssl。</li>\n<li>getTokenKeyAccess()：就方法名的意思，获得tokenKeyAccess所设置的SpEL表达式</li>\n<li>getCheckTokenAccess()：同上</li>\n<li>accessDeniedHandler()：拒绝访问处理器，猜测和springSecurity中类似，未验证</li>\n<li>realm()：默认值为 “oauth2/client”,用处未知</li>\n<li>authenticationEntryPoint():在springSecurity中是处理验证失败的，这里同样未做验证</li>\n<li>是allowFormAuthenticationForClients： 允许客户端进行表单身份验证，主要是让/oauth/token支持client_id以及client_secret作登录认证</li>\n<li>addTokenEndpointAuthenticationFilter：添加令牌端点身份验证过滤器</li>\n<li>tokenEndpointAuthenticationFilters：添加多个过滤器</li>\n<li>init():初始化方法</li>\n</ul>\n</blockquote>\n<p><em>AuthorizationServerEndpointsConfigurer</em></p>\n<blockquote>\n<p>该类配置方法太多了，且官方资料不全，在这里只列举几个常用的配置方法</p>\n<ul>\n<li>pathMapping()：修改授权端点一览表的那些URL</li>\n<li>tokenStore()：生成Token后的存储方式，可以new RedisTokenStore()来使用redis存储</li>\n<li>authenticationManager()：身份验证管理器，参考springSecurity中的 authenticationManager</li>\n<li>allowedTokenEndpointRequestMethods()：允许的请求方式</li>\n</ul>\n</blockquote>\n<h3 id=\"认证服务器使用\"><a href=\"#认证服务器使用\" class=\"headerlink\" title=\"认证服务器使用\"></a>认证服务器使用</h3><p>为便于学习，我们单独搭一个认证服务器并使用它</p>\n","site":{"data":{}},"excerpt":"<p>作者：muggle</p>\n<h2 id=\"oauth2-相关概念\"><a href=\"#oauth2-相关概念\" class=\"headerlink\" title=\"oauth2 相关概念\"></a>oauth2 相关概念</h2><p>文章参考<a href=\"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html\" target=\"_blank\" rel=\"noopener\">理解OAuth 2.0</a></p>\n<h3 id=\"oauth2-角色关系\"><a href=\"#oauth2-角色关系\" class=\"headerlink\" title=\"oauth2 角色关系\"></a>oauth2 角色关系</h3><p>在oauth2中分为以下几个角色：Resource server、Authorization server、Resource Owner、application。</p>\n<p>Resource server:资源服务器</p>\n<p>Authorization server:认证服务器</p>\n<p>Resource Owner:资源拥有者</p>\n<p>application:第三方应用</p>\n<p>oauth2的一次请求流程为：</p>\n<p>第三方应用获取认证token 向认证服务器认证，认证服务器通过认证后第三方应用便可向资源服务器拿资源；第三方应用的获取资源的范围由资源拥有者授权。</p>\n<p>显然由流程可知，oauth2要保证以下几点：<br>1.token的有效期和更新方式要可控，安全性要好<br>2.用户授权第三方应用要可以控制授权范围<br>","more":"</p>\n<h3 id=\"oauth2的授权方式\"><a href=\"#oauth2的授权方式\" class=\"headerlink\" title=\"oauth2的授权方式\"></a>oauth2的授权方式</h3><p>第三方应用必须得到用户的授权（authorization grant），才能获得令牌（access token）。OAuth 2.0定义了四种授权方式。</p>\n<p>授权码模式（authorization code）<br>简化模式（implicit）<br>密码模式（resource owner password credentials）<br>客户端模式（client credentials</p>\n<p>各个模式具体流程略微复杂，这里节省时间不做介绍，想了解的请参看<a href=\"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html\" target=\"_blank\" rel=\"noopener\">理解OAuth 2.0</a></p>\n<h2 id=\"spring-security-oauth2原理分析\"><a href=\"#spring-security-oauth2原理分析\" class=\"headerlink\" title=\"spring-security-oauth2原理分析\"></a>spring-security-oauth2原理分析</h2><h3 id=\"授权端点一览表\"><a href=\"#授权端点一览表\" class=\"headerlink\" title=\"授权端点一览表\"></a>授权端点一览表</h3><p>oauth2提供了一系列URL来完成相应的认证授权相关功能，这些URL都是可配置的，下面贴出各url及其功能；</p>\n<table>\n<thead>\n<tr>\n<th>授权端点</th>\n<th>/oauth/authorize</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>令牌端点</td>\n<td>/oauth/token</td>\n<td>获取一个令牌</td>\n</tr>\n<tr>\n<td>用户确认授权提交端点</td>\n<td>/oauth/confirm_access</td>\n<td>供用户授权第三方</td>\n</tr>\n<tr>\n<td>授权服务错误信息端点</td>\n<td>/oauth/error</td>\n<td></td>\n</tr>\n<tr>\n<td>令牌解析端点</td>\n<td>/oauth/check_token</td>\n<td></td>\n</tr>\n<tr>\n<td>公钥端点</td>\n<td>/oauth/token_key</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"认证服务器配置\"><a href=\"#认证服务器配置\" class=\"headerlink\" title=\"认证服务器配置\"></a>认证服务器配置</h3><p>认证服务器相关配置继承<code>AuthorizationServerConfigurerAdapter</code>重写configure方法实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthorizationServerConfigurerAdapter</span> <span class=\"keyword\">implements</span> <span class=\"title\">AuthorizationServerConfigurer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AuthorizationServerConfigurerAdapter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthorizationServerSecurityConfigurer security)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(ClientDetailsServiceConfigurer clients)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>ClientDetailsServiceConfigurer</em> 验证客户端的方式</p>\n<blockquote>\n<p>当一个客户端向认证服务器请求认证的时候，我们需要判别这个客户端是否通过认证；ClientDetailsServiceConfigurer提供了三种认证方式 ：</p>\n<ul>\n<li><p>clients.withClientDetails()：类似于springSecurity的UserDetailService，对应的也有ClientDetailsService 和 ClientDetails；</p>\n</li>\n<li><p>clients.jdbc():传入一个dataSource(搞不懂，既然有withClientDetails了，为啥还来个这个)；</p>\n</li>\n<li><p>clients.inMemory() 基于内存，也就是在代码里写死</p>\n</li>\n</ul>\n</blockquote>\n<p>验证参数说明</p>\n<blockquote>\n<p>从ClientDetails我们就能很清晰的分辨出客户端需要配置哪些参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClientDetail</span>  <span class=\"keyword\">implements</span> <span class=\"title\">ClientDetails</span> </span>&#123;</span><br><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getClientId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">getResourceIds</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSecretRequired</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getClientSecret</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isScoped</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">getScope</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">getAuthorizedGrantTypes</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">getRegisteredRedirectUri</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">public</span> Collection&lt;GrantedAuthority&gt; <span class=\"title\">getAuthorities</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getAccessTokenValiditySeconds</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getRefreshTokenValiditySeconds</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isAutoApprove</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getAdditionalInformation</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>clientId:客户端ID</p>\n<p>secret:客户端密钥</p>\n<p>scope:客户受限的范围。如果范围未定义或为空（默认值），则客户端不受范围限制</p>\n<p>authorizedGrantTypes:授权客户端使用的授权类型。默认值为空。</p>\n<p>authorities：授予客户端的权限（常规Spring Security权限）</p>\n</blockquote>\n<p><em>AuthorizationServerSecurityConfigurer</em></p>\n<blockquote>\n<p>该类共有13个配置相关的方法：</p>\n<ul>\n<li>passwordEncoder():通过源码猜测springSecurity中一样，用于编解码secret，未验证，官网也未发现资料</li>\n<li>tokenKeyAccess（）：oauth2授权服务器会提供一个<code>/oauth/token_key</code>的url来供资源服务器获取公钥，这个方法就是配置获取公钥的权限范围，它使用的是SpEL表达式且默认不开启，如果你没用到公钥，则不必管他，在<a href=\"http://projects.spring.io/spring-security-oauth/docs/oauth2.html#resource-server-configuration\" target=\"_blank\" rel=\"noopener\">官方文档</a> 上使用JwtToken中使用了该方法，如果你用的是JwtToken请注意</li>\n<li>checkTokenAccess（）：授权服务器提供一个<code>/oauth/check_token</code>的url来供资源服务器解码令牌，该方法就是配置权限范围，同样使用的是SpEL表达式且默认不开启</li>\n<li>sslOnly()：普通HTTP适用于测试，但授权服务器只能在生产中通过SSL使用，调用方法<code>sslOnly()</code>则强制使用ssl。</li>\n<li>getTokenKeyAccess()：就方法名的意思，获得tokenKeyAccess所设置的SpEL表达式</li>\n<li>getCheckTokenAccess()：同上</li>\n<li>accessDeniedHandler()：拒绝访问处理器，猜测和springSecurity中类似，未验证</li>\n<li>realm()：默认值为 “oauth2/client”,用处未知</li>\n<li>authenticationEntryPoint():在springSecurity中是处理验证失败的，这里同样未做验证</li>\n<li>是allowFormAuthenticationForClients： 允许客户端进行表单身份验证，主要是让/oauth/token支持client_id以及client_secret作登录认证</li>\n<li>addTokenEndpointAuthenticationFilter：添加令牌端点身份验证过滤器</li>\n<li>tokenEndpointAuthenticationFilters：添加多个过滤器</li>\n<li>init():初始化方法</li>\n</ul>\n</blockquote>\n<p><em>AuthorizationServerEndpointsConfigurer</em></p>\n<blockquote>\n<p>该类配置方法太多了，且官方资料不全，在这里只列举几个常用的配置方法</p>\n<ul>\n<li>pathMapping()：修改授权端点一览表的那些URL</li>\n<li>tokenStore()：生成Token后的存储方式，可以new RedisTokenStore()来使用redis存储</li>\n<li>authenticationManager()：身份验证管理器，参考springSecurity中的 authenticationManager</li>\n<li>allowedTokenEndpointRequestMethods()：允许的请求方式</li>\n</ul>\n</blockquote>\n<h3 id=\"认证服务器使用\"><a href=\"#认证服务器使用\" class=\"headerlink\" title=\"认证服务器使用\"></a>认证服务器使用</h3><p>为便于学习，我们单独搭一个认证服务器并使用它</p>"},{"title":"spring笔记","date":"2019-05-08T09:54:00.000Z","_content":"\n分为20个模块\n\ncore container\n\n<!--more-->\n\ncore beans context expression language\n\n![image.png](https://upload-images.jianshu.io/upload_images/13612520-f726082d79be3e72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![image.png](https://upload-images.jianshu.io/upload_images/13612520-16a1a229cda57201.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nspring\n\n1. 读取bean的配置信息\n2. 根据配置信息实例化一个bean\n3. 调用实例化后的实例\n\nbeanFactory\n\nbean被当做一种资源，各个factory完成对bean的增删改查，注入读取，初始化等功能\n\ninputStreamSource 封装inputstream\n\nfactoryBean :\n\nspring的标准实例化bean的流程是在xml中提供配置信息然后读取配置信息。factoryBean通过实现接口的方式实例化bean（java代码配置bean信息）\n\ndemo\n\n![image.png](https://upload-images.jianshu.io/upload_images/13612520-ca7b32793a6d88cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n单例在spring同一个容器中只会被创建一次，后续直接从单例缓存中获取\n\n循环依赖\n\nobjectFactory\n\nsingletonFactory\n\n1. 检查缓存是否已经加载过\n2. 若没加载就记录下来\n\n创建bean\n\n1. classname\n2. 检查override\n3. 检查bean是否已经存在\n4. 创建bean\n\n实例化前置处理器\n\n实例化后置处理器\n\n循环依赖\n\n检查是否循环依赖\n\n循环依赖会导致内存溢出\n\n构造器循环依赖\n\n![image.png](https://upload-images.jianshu.io/upload_images/13612520-3ca9287803145b3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n支持用户扩展\n\n### SpringMVC流程\n\n1、 用户发送请求至前端控制器DispatcherServlet。\n\n2、 DispatcherServlet收到请求调用HandlerMapping处理器映射器。\n\n3、 处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。\n\n4、 DispatcherServlet调用HandlerAdapter处理器适配器。\n\n5、 HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。\n\n6、 Controller执行完成返回ModelAndView。\n\n7、 HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。\n\n8、 DispatcherServlet将ModelAndView传给ViewReslover视图解析器。\n\n9、 ViewReslover解析后返回具体View。\n\n10、DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。\n\n11、 DispatcherServlet响应用户。\n\n**组件：**  **1、前端控制器DispatcherServlet（不需要工程师开发）,由框架提供**  作用：接收请求，响应结果，相当于转发器，中央处理器。有了dispatcherServlet减少了其它组件之间的耦合度。  用户请求到达前端控制器，它就相当于mvc模式中的c，dispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet的存在降低了组件之间的耦合性。\n\n**2、处理器映射器HandlerMapping(不需要工程师开发),由框架提供**  作用：根据请求的url查找Handler  HandlerMapping负责根据用户请求找到Handler即处理器，springmvc提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。\n\n**3、处理器适配器HandlerAdapter**  作用：按照特定规则（HandlerAdapter要求的规则）去执行Handler  通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。\n\n**4、处理器Handler(需要工程师开发)**  **注意：编写Handler时按照HandlerAdapter的要求去做，这样适配器才可以去正确执行Handler**  Handler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。  由于Handler涉及到具体的用户业务请求，所以一般情况需要工程师根据业务需求开发Handler。\n\n**5、视图解析器View resolver(不需要工程师开发),由框架提供**  作用：进行视图解析，根据逻辑视图名解析成真正的视图（view）  View Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。 springmvc框架提供了很多的View视图类型，包括：jstlView、freemarkerView、pdfView等。  一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由工程师根据业务需求开发具体的页面。\n\n**6、视图View(需要工程师开发jsp...)**  View是一个接口，实现类支持不同的View类型（jsp、freemarker、pdf...）\n\n**核心架构的具体流程步骤如下：**  1、首先用户发送请求——>DispatcherServlet，前端控制器收到请求后自己不进行处理，而是委托给其他的解析器进行处理，作为统一访问点，进行全局的流程控制；  2、DispatcherServlet——>HandlerMapping， HandlerMapping 将会把请求映射为HandlerExecutionChain 对象（包含一个Handler 处理器（页面控制器）对象、多个HandlerInterceptor 拦截器）对象，通过这种策略模式，很容易添加新的映射策略；  3、DispatcherServlet——>HandlerAdapter，HandlerAdapter 将会把处理器包装为适配器，从而支持多种类型的处理器，即适配器设计模式的应用，从而很容易支持很多类型的处理器；  4、HandlerAdapter——>处理器功能处理方法的调用，HandlerAdapter 将会根据适配的结果调用真正的处理器的功能处理方法，完成功能处理；并返回一个ModelAndView 对象（包含模型数据、逻辑视图名）；  5、ModelAndView的逻辑视图名——> ViewResolver， ViewResolver 将把逻辑视图名解析为具体的View，通过这种策略模式，很容易更换其他视图技术；  6、View——>渲染，View会根据传进来的Model模型数据进行渲染，此处的Model实际是一个Map数据结构，因此很容易支持其他视图技术；  7、返回控制权给DispatcherServlet，由DispatcherServlet返回响应给用户，到此一个流程结束。\n\n下边两个组件通常情况下需要开发：\n\nHandler：处理器，即后端控制器用controller表示。\n\nView：视图，即展示给用户的界面，视图中通常需要标签语言展示模型数据。\n\nWebApplicationContext\n\nServletContext\n\nApplicationContext\n\n问：\n\n我们可以通过\n\nApplicationContext ap = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\n得到一个spring容器，那么在传统ssm项目中是如何。。知道了","source":"_posts/spring-1.md","raw":"---\ntitle: spring笔记\ndate: 2019-05-08 17:54:00\ntags: spring\n---\n\n分为20个模块\n\ncore container\n\n<!--more-->\n\ncore beans context expression language\n\n![image.png](https://upload-images.jianshu.io/upload_images/13612520-f726082d79be3e72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![image.png](https://upload-images.jianshu.io/upload_images/13612520-16a1a229cda57201.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nspring\n\n1. 读取bean的配置信息\n2. 根据配置信息实例化一个bean\n3. 调用实例化后的实例\n\nbeanFactory\n\nbean被当做一种资源，各个factory完成对bean的增删改查，注入读取，初始化等功能\n\ninputStreamSource 封装inputstream\n\nfactoryBean :\n\nspring的标准实例化bean的流程是在xml中提供配置信息然后读取配置信息。factoryBean通过实现接口的方式实例化bean（java代码配置bean信息）\n\ndemo\n\n![image.png](https://upload-images.jianshu.io/upload_images/13612520-ca7b32793a6d88cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n单例在spring同一个容器中只会被创建一次，后续直接从单例缓存中获取\n\n循环依赖\n\nobjectFactory\n\nsingletonFactory\n\n1. 检查缓存是否已经加载过\n2. 若没加载就记录下来\n\n创建bean\n\n1. classname\n2. 检查override\n3. 检查bean是否已经存在\n4. 创建bean\n\n实例化前置处理器\n\n实例化后置处理器\n\n循环依赖\n\n检查是否循环依赖\n\n循环依赖会导致内存溢出\n\n构造器循环依赖\n\n![image.png](https://upload-images.jianshu.io/upload_images/13612520-3ca9287803145b3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n支持用户扩展\n\n### SpringMVC流程\n\n1、 用户发送请求至前端控制器DispatcherServlet。\n\n2、 DispatcherServlet收到请求调用HandlerMapping处理器映射器。\n\n3、 处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。\n\n4、 DispatcherServlet调用HandlerAdapter处理器适配器。\n\n5、 HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。\n\n6、 Controller执行完成返回ModelAndView。\n\n7、 HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。\n\n8、 DispatcherServlet将ModelAndView传给ViewReslover视图解析器。\n\n9、 ViewReslover解析后返回具体View。\n\n10、DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。\n\n11、 DispatcherServlet响应用户。\n\n**组件：**  **1、前端控制器DispatcherServlet（不需要工程师开发）,由框架提供**  作用：接收请求，响应结果，相当于转发器，中央处理器。有了dispatcherServlet减少了其它组件之间的耦合度。  用户请求到达前端控制器，它就相当于mvc模式中的c，dispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet的存在降低了组件之间的耦合性。\n\n**2、处理器映射器HandlerMapping(不需要工程师开发),由框架提供**  作用：根据请求的url查找Handler  HandlerMapping负责根据用户请求找到Handler即处理器，springmvc提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。\n\n**3、处理器适配器HandlerAdapter**  作用：按照特定规则（HandlerAdapter要求的规则）去执行Handler  通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。\n\n**4、处理器Handler(需要工程师开发)**  **注意：编写Handler时按照HandlerAdapter的要求去做，这样适配器才可以去正确执行Handler**  Handler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。  由于Handler涉及到具体的用户业务请求，所以一般情况需要工程师根据业务需求开发Handler。\n\n**5、视图解析器View resolver(不需要工程师开发),由框架提供**  作用：进行视图解析，根据逻辑视图名解析成真正的视图（view）  View Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。 springmvc框架提供了很多的View视图类型，包括：jstlView、freemarkerView、pdfView等。  一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由工程师根据业务需求开发具体的页面。\n\n**6、视图View(需要工程师开发jsp...)**  View是一个接口，实现类支持不同的View类型（jsp、freemarker、pdf...）\n\n**核心架构的具体流程步骤如下：**  1、首先用户发送请求——>DispatcherServlet，前端控制器收到请求后自己不进行处理，而是委托给其他的解析器进行处理，作为统一访问点，进行全局的流程控制；  2、DispatcherServlet——>HandlerMapping， HandlerMapping 将会把请求映射为HandlerExecutionChain 对象（包含一个Handler 处理器（页面控制器）对象、多个HandlerInterceptor 拦截器）对象，通过这种策略模式，很容易添加新的映射策略；  3、DispatcherServlet——>HandlerAdapter，HandlerAdapter 将会把处理器包装为适配器，从而支持多种类型的处理器，即适配器设计模式的应用，从而很容易支持很多类型的处理器；  4、HandlerAdapter——>处理器功能处理方法的调用，HandlerAdapter 将会根据适配的结果调用真正的处理器的功能处理方法，完成功能处理；并返回一个ModelAndView 对象（包含模型数据、逻辑视图名）；  5、ModelAndView的逻辑视图名——> ViewResolver， ViewResolver 将把逻辑视图名解析为具体的View，通过这种策略模式，很容易更换其他视图技术；  6、View——>渲染，View会根据传进来的Model模型数据进行渲染，此处的Model实际是一个Map数据结构，因此很容易支持其他视图技术；  7、返回控制权给DispatcherServlet，由DispatcherServlet返回响应给用户，到此一个流程结束。\n\n下边两个组件通常情况下需要开发：\n\nHandler：处理器，即后端控制器用controller表示。\n\nView：视图，即展示给用户的界面，视图中通常需要标签语言展示模型数据。\n\nWebApplicationContext\n\nServletContext\n\nApplicationContext\n\n问：\n\n我们可以通过\n\nApplicationContext ap = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\n得到一个spring容器，那么在传统ssm项目中是如何。。知道了","slug":"spring-1","published":1,"updated":"2019-05-17T07:39:00.904Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxso001gvovmpxx61u5g","content":"<p>分为20个模块</p>\n<p>core container</p>\n<a id=\"more\"></a>\n<p>core beans context expression language</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/13612520-f726082d79be3e72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/13612520-16a1a229cda57201.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>spring</p>\n<ol>\n<li>读取bean的配置信息</li>\n<li>根据配置信息实例化一个bean</li>\n<li>调用实例化后的实例</li>\n</ol>\n<p>beanFactory</p>\n<p>bean被当做一种资源，各个factory完成对bean的增删改查，注入读取，初始化等功能</p>\n<p>inputStreamSource 封装inputstream</p>\n<p>factoryBean :</p>\n<p>spring的标准实例化bean的流程是在xml中提供配置信息然后读取配置信息。factoryBean通过实现接口的方式实例化bean（java代码配置bean信息）</p>\n<p>demo</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/13612520-ca7b32793a6d88cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>单例在spring同一个容器中只会被创建一次，后续直接从单例缓存中获取</p>\n<p>循环依赖</p>\n<p>objectFactory</p>\n<p>singletonFactory</p>\n<ol>\n<li>检查缓存是否已经加载过</li>\n<li>若没加载就记录下来</li>\n</ol>\n<p>创建bean</p>\n<ol>\n<li>classname</li>\n<li>检查override</li>\n<li>检查bean是否已经存在</li>\n<li>创建bean</li>\n</ol>\n<p>实例化前置处理器</p>\n<p>实例化后置处理器</p>\n<p>循环依赖</p>\n<p>检查是否循环依赖</p>\n<p>循环依赖会导致内存溢出</p>\n<p>构造器循环依赖</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/13612520-3ca9287803145b3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>支持用户扩展</p>\n<h3 id=\"SpringMVC流程\"><a href=\"#SpringMVC流程\" class=\"headerlink\" title=\"SpringMVC流程\"></a>SpringMVC流程</h3><p>1、 用户发送请求至前端控制器DispatcherServlet。</p>\n<p>2、 DispatcherServlet收到请求调用HandlerMapping处理器映射器。</p>\n<p>3、 处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</p>\n<p>4、 DispatcherServlet调用HandlerAdapter处理器适配器。</p>\n<p>5、 HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。</p>\n<p>6、 Controller执行完成返回ModelAndView。</p>\n<p>7、 HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。</p>\n<p>8、 DispatcherServlet将ModelAndView传给ViewReslover视图解析器。</p>\n<p>9、 ViewReslover解析后返回具体View。</p>\n<p>10、DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。</p>\n<p>11、 DispatcherServlet响应用户。</p>\n<p><strong>组件：</strong>  <strong>1、前端控制器DispatcherServlet（不需要工程师开发）,由框架提供</strong>  作用：接收请求，响应结果，相当于转发器，中央处理器。有了dispatcherServlet减少了其它组件之间的耦合度。  用户请求到达前端控制器，它就相当于mvc模式中的c，dispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet的存在降低了组件之间的耦合性。</p>\n<p><strong>2、处理器映射器HandlerMapping(不需要工程师开发),由框架提供</strong>  作用：根据请求的url查找Handler  HandlerMapping负责根据用户请求找到Handler即处理器，springmvc提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</p>\n<p><strong>3、处理器适配器HandlerAdapter</strong>  作用：按照特定规则（HandlerAdapter要求的规则）去执行Handler  通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</p>\n<p><strong>4、处理器Handler(需要工程师开发)</strong>  <strong>注意：编写Handler时按照HandlerAdapter的要求去做，这样适配器才可以去正确执行Handler</strong>  Handler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。  由于Handler涉及到具体的用户业务请求，所以一般情况需要工程师根据业务需求开发Handler。</p>\n<p><strong>5、视图解析器View resolver(不需要工程师开发),由框架提供</strong>  作用：进行视图解析，根据逻辑视图名解析成真正的视图（view）  View Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。 springmvc框架提供了很多的View视图类型，包括：jstlView、freemarkerView、pdfView等。  一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由工程师根据业务需求开发具体的页面。</p>\n<p><strong>6、视图View(需要工程师开发jsp…)</strong>  View是一个接口，实现类支持不同的View类型（jsp、freemarker、pdf…）</p>\n<p><strong>核心架构的具体流程步骤如下：</strong>  1、首先用户发送请求——&gt;DispatcherServlet，前端控制器收到请求后自己不进行处理，而是委托给其他的解析器进行处理，作为统一访问点，进行全局的流程控制；  2、DispatcherServlet——&gt;HandlerMapping， HandlerMapping 将会把请求映射为HandlerExecutionChain 对象（包含一个Handler 处理器（页面控制器）对象、多个HandlerInterceptor 拦截器）对象，通过这种策略模式，很容易添加新的映射策略；  3、DispatcherServlet——&gt;HandlerAdapter，HandlerAdapter 将会把处理器包装为适配器，从而支持多种类型的处理器，即适配器设计模式的应用，从而很容易支持很多类型的处理器；  4、HandlerAdapter——&gt;处理器功能处理方法的调用，HandlerAdapter 将会根据适配的结果调用真正的处理器的功能处理方法，完成功能处理；并返回一个ModelAndView 对象（包含模型数据、逻辑视图名）；  5、ModelAndView的逻辑视图名——&gt; ViewResolver， ViewResolver 将把逻辑视图名解析为具体的View，通过这种策略模式，很容易更换其他视图技术；  6、View——&gt;渲染，View会根据传进来的Model模型数据进行渲染，此处的Model实际是一个Map数据结构，因此很容易支持其他视图技术；  7、返回控制权给DispatcherServlet，由DispatcherServlet返回响应给用户，到此一个流程结束。</p>\n<p>下边两个组件通常情况下需要开发：</p>\n<p>Handler：处理器，即后端控制器用controller表示。</p>\n<p>View：视图，即展示给用户的界面，视图中通常需要标签语言展示模型数据。</p>\n<p>WebApplicationContext</p>\n<p>ServletContext</p>\n<p>ApplicationContext</p>\n<p>问：</p>\n<p>我们可以通过</p>\n<p>ApplicationContext ap = new ClassPathXmlApplicationContext(“applicationContext.xml”);</p>\n<p>得到一个spring容器，那么在传统ssm项目中是如何。。知道了</p>\n","site":{"data":{}},"excerpt":"<p>分为20个模块</p>\n<p>core container</p>","more":"<p>core beans context expression language</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/13612520-f726082d79be3e72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/13612520-16a1a229cda57201.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>spring</p>\n<ol>\n<li>读取bean的配置信息</li>\n<li>根据配置信息实例化一个bean</li>\n<li>调用实例化后的实例</li>\n</ol>\n<p>beanFactory</p>\n<p>bean被当做一种资源，各个factory完成对bean的增删改查，注入读取，初始化等功能</p>\n<p>inputStreamSource 封装inputstream</p>\n<p>factoryBean :</p>\n<p>spring的标准实例化bean的流程是在xml中提供配置信息然后读取配置信息。factoryBean通过实现接口的方式实例化bean（java代码配置bean信息）</p>\n<p>demo</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/13612520-ca7b32793a6d88cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>单例在spring同一个容器中只会被创建一次，后续直接从单例缓存中获取</p>\n<p>循环依赖</p>\n<p>objectFactory</p>\n<p>singletonFactory</p>\n<ol>\n<li>检查缓存是否已经加载过</li>\n<li>若没加载就记录下来</li>\n</ol>\n<p>创建bean</p>\n<ol>\n<li>classname</li>\n<li>检查override</li>\n<li>检查bean是否已经存在</li>\n<li>创建bean</li>\n</ol>\n<p>实例化前置处理器</p>\n<p>实例化后置处理器</p>\n<p>循环依赖</p>\n<p>检查是否循环依赖</p>\n<p>循环依赖会导致内存溢出</p>\n<p>构造器循环依赖</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/13612520-3ca9287803145b3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>支持用户扩展</p>\n<h3 id=\"SpringMVC流程\"><a href=\"#SpringMVC流程\" class=\"headerlink\" title=\"SpringMVC流程\"></a>SpringMVC流程</h3><p>1、 用户发送请求至前端控制器DispatcherServlet。</p>\n<p>2、 DispatcherServlet收到请求调用HandlerMapping处理器映射器。</p>\n<p>3、 处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</p>\n<p>4、 DispatcherServlet调用HandlerAdapter处理器适配器。</p>\n<p>5、 HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。</p>\n<p>6、 Controller执行完成返回ModelAndView。</p>\n<p>7、 HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。</p>\n<p>8、 DispatcherServlet将ModelAndView传给ViewReslover视图解析器。</p>\n<p>9、 ViewReslover解析后返回具体View。</p>\n<p>10、DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。</p>\n<p>11、 DispatcherServlet响应用户。</p>\n<p><strong>组件：</strong>  <strong>1、前端控制器DispatcherServlet（不需要工程师开发）,由框架提供</strong>  作用：接收请求，响应结果，相当于转发器，中央处理器。有了dispatcherServlet减少了其它组件之间的耦合度。  用户请求到达前端控制器，它就相当于mvc模式中的c，dispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet的存在降低了组件之间的耦合性。</p>\n<p><strong>2、处理器映射器HandlerMapping(不需要工程师开发),由框架提供</strong>  作用：根据请求的url查找Handler  HandlerMapping负责根据用户请求找到Handler即处理器，springmvc提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</p>\n<p><strong>3、处理器适配器HandlerAdapter</strong>  作用：按照特定规则（HandlerAdapter要求的规则）去执行Handler  通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</p>\n<p><strong>4、处理器Handler(需要工程师开发)</strong>  <strong>注意：编写Handler时按照HandlerAdapter的要求去做，这样适配器才可以去正确执行Handler</strong>  Handler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。  由于Handler涉及到具体的用户业务请求，所以一般情况需要工程师根据业务需求开发Handler。</p>\n<p><strong>5、视图解析器View resolver(不需要工程师开发),由框架提供</strong>  作用：进行视图解析，根据逻辑视图名解析成真正的视图（view）  View Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。 springmvc框架提供了很多的View视图类型，包括：jstlView、freemarkerView、pdfView等。  一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由工程师根据业务需求开发具体的页面。</p>\n<p><strong>6、视图View(需要工程师开发jsp…)</strong>  View是一个接口，实现类支持不同的View类型（jsp、freemarker、pdf…）</p>\n<p><strong>核心架构的具体流程步骤如下：</strong>  1、首先用户发送请求——&gt;DispatcherServlet，前端控制器收到请求后自己不进行处理，而是委托给其他的解析器进行处理，作为统一访问点，进行全局的流程控制；  2、DispatcherServlet——&gt;HandlerMapping， HandlerMapping 将会把请求映射为HandlerExecutionChain 对象（包含一个Handler 处理器（页面控制器）对象、多个HandlerInterceptor 拦截器）对象，通过这种策略模式，很容易添加新的映射策略；  3、DispatcherServlet——&gt;HandlerAdapter，HandlerAdapter 将会把处理器包装为适配器，从而支持多种类型的处理器，即适配器设计模式的应用，从而很容易支持很多类型的处理器；  4、HandlerAdapter——&gt;处理器功能处理方法的调用，HandlerAdapter 将会根据适配的结果调用真正的处理器的功能处理方法，完成功能处理；并返回一个ModelAndView 对象（包含模型数据、逻辑视图名）；  5、ModelAndView的逻辑视图名——&gt; ViewResolver， ViewResolver 将把逻辑视图名解析为具体的View，通过这种策略模式，很容易更换其他视图技术；  6、View——&gt;渲染，View会根据传进来的Model模型数据进行渲染，此处的Model实际是一个Map数据结构，因此很容易支持其他视图技术；  7、返回控制权给DispatcherServlet，由DispatcherServlet返回响应给用户，到此一个流程结束。</p>\n<p>下边两个组件通常情况下需要开发：</p>\n<p>Handler：处理器，即后端控制器用controller表示。</p>\n<p>View：视图，即展示给用户的界面，视图中通常需要标签语言展示模型数据。</p>\n<p>WebApplicationContext</p>\n<p>ServletContext</p>\n<p>ApplicationContext</p>\n<p>问：</p>\n<p>我们可以通过</p>\n<p>ApplicationContext ap = new ClassPathXmlApplicationContext(“applicationContext.xml”);</p>\n<p>得到一个spring容器，那么在传统ssm项目中是如何。。知道了</p>"},{"title":"写一个spring-boot-starter","date":"2019-05-15T08:27:12.000Z","_content":"\n废话不多说直接开始\n\n","source":"_posts/spring-boot-starter.md","raw":"---\ntitle: 写一个spring-boot-starter\ndate: 2019-05-15 16:27:12\ntags: developing\n---\n\n废话不多说直接开始\n\n","slug":"spring-boot-starter","published":1,"updated":"2019-05-15T08:49:46.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxsp001ivovm5j4fzpxk","content":"<p>废话不多说直接开始</p>\n","site":{"data":{}},"excerpt":"","more":"<p>废话不多说直接开始</p>\n"},{"title":"springcloud核心组件介绍","date":"2019-04-26T03:30:45.000Z","_content":"\n作者：muggle\n\n注：参考大佬博客[牧码小子](https://mp.weixin.qq.com/s?__biz=MzI1NDY0MTkzNQ==&mid=2247483878&idx=1&sn=d49f2eb61bada3d34443a0a4017a7b72&scene=21#wechat_redirect) \n\n### springcloud的核心功能：\n\n> 负载均衡，服务注册与发现，监控，分布式配置管理，api网关 分布式追踪\n\n<!--more-->\n\n###  SpringCloudGateway：\n\n> Spring Cloud Gateway是Spring官方基于Spring 5.0，Spring Boot 2.0和Project Reactor等技术开发的网关，Spring Cloud Gateway旨在为微服务架构提供一种简单而有效的统一的API路由管理方式。Spring Cloud Gateway作为Spring Cloud生态系中的网关，目标是替代Netflix ZUUL，其不仅提供统一的路由方式，并且基于Filter链的方式提供了网关基本的功能，例如：安全，监控/埋点，和限流等。\n\n### SpringCloudNetflix\n\n> 包含组件有Netflix Eureka，Netflix Hystrix，Netflix Zuul等\n\n### SpringCloudConfig\n\n> 配置中心，配置管理工具包，让你可以把配置放到远程服务器，集中化管理集群配置，目前支持本地存储、Git以及Subversion。\n\n### SpringCloudBus\n\n> Spring Cloud Bus 将分布式的节点用轻量的消息代理连接起来。它可以用于广播配置文件的更改或者服务之间的通讯，也可以用于监控\n\n### SpringCloudforCloudFoundry\n\n> Spring Cloud for Cloudfoundry可以轻松在Cloud Foundry（平台即服务）中运行Spring Cloud应用程序。 Cloud Foundry有一个“服务”的概念，它是“绑定”到应用程序的中间件，本质上为其提供包含凭据的环境变量（例如，用于服务的位置和用户名）。——不太明白这玩意\n\n### SpringCloudCluster\n\n> Spring Cloud Cluster将取代Spring Integration。提供在分布式系统中的集群所需要的基础功能支持，如：选举、集群的状态一致性、全局锁、tokens等常见状态模式的抽象和实现。\n\n### SpringCloudConsul\n\n> Consul是一个支持多数据中心分布式高可用的服务发现和配置共享的服务软件,由 HashiCorp 公司用 Go 语言开发, 基于 Mozilla Public License 2.0 的协议进行开源. Consul 支持健康检查,并允许 HTTP 和 DNS 协议调用 API 存储键值对.\n> Spring Cloud Consul封装了Consul操作，consul是一个服务发现与配置工具，与Docker容器可以无缝集成。\n\n### Spring Cloud Security\n\n> 安全框架\n\n### Spring Cloud Sleuth\n\n> 日志收集工具包，封装了Dapper和log-based追踪以及Zipkin和HTrace操作，为SpringCloud应用实现了一种分布式追踪解决方案。\n\n还有其他组件，不再罗列","source":"_posts/springcloud-1.md","raw":"---\ntitle: springcloud核心组件介绍\ndate: 2019-04-26 11:30:45\ntags: cloud\n---\n\n作者：muggle\n\n注：参考大佬博客[牧码小子](https://mp.weixin.qq.com/s?__biz=MzI1NDY0MTkzNQ==&mid=2247483878&idx=1&sn=d49f2eb61bada3d34443a0a4017a7b72&scene=21#wechat_redirect) \n\n### springcloud的核心功能：\n\n> 负载均衡，服务注册与发现，监控，分布式配置管理，api网关 分布式追踪\n\n<!--more-->\n\n###  SpringCloudGateway：\n\n> Spring Cloud Gateway是Spring官方基于Spring 5.0，Spring Boot 2.0和Project Reactor等技术开发的网关，Spring Cloud Gateway旨在为微服务架构提供一种简单而有效的统一的API路由管理方式。Spring Cloud Gateway作为Spring Cloud生态系中的网关，目标是替代Netflix ZUUL，其不仅提供统一的路由方式，并且基于Filter链的方式提供了网关基本的功能，例如：安全，监控/埋点，和限流等。\n\n### SpringCloudNetflix\n\n> 包含组件有Netflix Eureka，Netflix Hystrix，Netflix Zuul等\n\n### SpringCloudConfig\n\n> 配置中心，配置管理工具包，让你可以把配置放到远程服务器，集中化管理集群配置，目前支持本地存储、Git以及Subversion。\n\n### SpringCloudBus\n\n> Spring Cloud Bus 将分布式的节点用轻量的消息代理连接起来。它可以用于广播配置文件的更改或者服务之间的通讯，也可以用于监控\n\n### SpringCloudforCloudFoundry\n\n> Spring Cloud for Cloudfoundry可以轻松在Cloud Foundry（平台即服务）中运行Spring Cloud应用程序。 Cloud Foundry有一个“服务”的概念，它是“绑定”到应用程序的中间件，本质上为其提供包含凭据的环境变量（例如，用于服务的位置和用户名）。——不太明白这玩意\n\n### SpringCloudCluster\n\n> Spring Cloud Cluster将取代Spring Integration。提供在分布式系统中的集群所需要的基础功能支持，如：选举、集群的状态一致性、全局锁、tokens等常见状态模式的抽象和实现。\n\n### SpringCloudConsul\n\n> Consul是一个支持多数据中心分布式高可用的服务发现和配置共享的服务软件,由 HashiCorp 公司用 Go 语言开发, 基于 Mozilla Public License 2.0 的协议进行开源. Consul 支持健康检查,并允许 HTTP 和 DNS 协议调用 API 存储键值对.\n> Spring Cloud Consul封装了Consul操作，consul是一个服务发现与配置工具，与Docker容器可以无缝集成。\n\n### Spring Cloud Security\n\n> 安全框架\n\n### Spring Cloud Sleuth\n\n> 日志收集工具包，封装了Dapper和log-based追踪以及Zipkin和HTrace操作，为SpringCloud应用实现了一种分布式追踪解决方案。\n\n还有其他组件，不再罗列","slug":"springcloud-1","published":1,"updated":"2019-04-26T07:29:35.538Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxsr001lvovmwps0cfr2","content":"<p>作者：muggle</p>\n<p>注：参考大佬博客<a href=\"https://mp.weixin.qq.com/s?__biz=MzI1NDY0MTkzNQ==&amp;mid=2247483878&amp;idx=1&amp;sn=d49f2eb61bada3d34443a0a4017a7b72&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">牧码小子</a> </p>\n<h3 id=\"springcloud的核心功能：\"><a href=\"#springcloud的核心功能：\" class=\"headerlink\" title=\"springcloud的核心功能：\"></a>springcloud的核心功能：</h3><blockquote>\n<p>负载均衡，服务注册与发现，监控，分布式配置管理，api网关 分布式追踪</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"SpringCloudGateway：\"><a href=\"#SpringCloudGateway：\" class=\"headerlink\" title=\"SpringCloudGateway：\"></a>SpringCloudGateway：</h3><blockquote>\n<p>Spring Cloud Gateway是Spring官方基于Spring 5.0，Spring Boot 2.0和Project Reactor等技术开发的网关，Spring Cloud Gateway旨在为微服务架构提供一种简单而有效的统一的API路由管理方式。Spring Cloud Gateway作为Spring Cloud生态系中的网关，目标是替代Netflix ZUUL，其不仅提供统一的路由方式，并且基于Filter链的方式提供了网关基本的功能，例如：安全，监控/埋点，和限流等。</p>\n</blockquote>\n<h3 id=\"SpringCloudNetflix\"><a href=\"#SpringCloudNetflix\" class=\"headerlink\" title=\"SpringCloudNetflix\"></a>SpringCloudNetflix</h3><blockquote>\n<p>包含组件有Netflix Eureka，Netflix Hystrix，Netflix Zuul等</p>\n</blockquote>\n<h3 id=\"SpringCloudConfig\"><a href=\"#SpringCloudConfig\" class=\"headerlink\" title=\"SpringCloudConfig\"></a>SpringCloudConfig</h3><blockquote>\n<p>配置中心，配置管理工具包，让你可以把配置放到远程服务器，集中化管理集群配置，目前支持本地存储、Git以及Subversion。</p>\n</blockquote>\n<h3 id=\"SpringCloudBus\"><a href=\"#SpringCloudBus\" class=\"headerlink\" title=\"SpringCloudBus\"></a>SpringCloudBus</h3><blockquote>\n<p>Spring Cloud Bus 将分布式的节点用轻量的消息代理连接起来。它可以用于广播配置文件的更改或者服务之间的通讯，也可以用于监控</p>\n</blockquote>\n<h3 id=\"SpringCloudforCloudFoundry\"><a href=\"#SpringCloudforCloudFoundry\" class=\"headerlink\" title=\"SpringCloudforCloudFoundry\"></a>SpringCloudforCloudFoundry</h3><blockquote>\n<p>Spring Cloud for Cloudfoundry可以轻松在Cloud Foundry（平台即服务）中运行Spring Cloud应用程序。 Cloud Foundry有一个“服务”的概念，它是“绑定”到应用程序的中间件，本质上为其提供包含凭据的环境变量（例如，用于服务的位置和用户名）。——不太明白这玩意</p>\n</blockquote>\n<h3 id=\"SpringCloudCluster\"><a href=\"#SpringCloudCluster\" class=\"headerlink\" title=\"SpringCloudCluster\"></a>SpringCloudCluster</h3><blockquote>\n<p>Spring Cloud Cluster将取代Spring Integration。提供在分布式系统中的集群所需要的基础功能支持，如：选举、集群的状态一致性、全局锁、tokens等常见状态模式的抽象和实现。</p>\n</blockquote>\n<h3 id=\"SpringCloudConsul\"><a href=\"#SpringCloudConsul\" class=\"headerlink\" title=\"SpringCloudConsul\"></a>SpringCloudConsul</h3><blockquote>\n<p>Consul是一个支持多数据中心分布式高可用的服务发现和配置共享的服务软件,由 HashiCorp 公司用 Go 语言开发, 基于 Mozilla Public License 2.0 的协议进行开源. Consul 支持健康检查,并允许 HTTP 和 DNS 协议调用 API 存储键值对.<br>Spring Cloud Consul封装了Consul操作，consul是一个服务发现与配置工具，与Docker容器可以无缝集成。</p>\n</blockquote>\n<h3 id=\"Spring-Cloud-Security\"><a href=\"#Spring-Cloud-Security\" class=\"headerlink\" title=\"Spring Cloud Security\"></a>Spring Cloud Security</h3><blockquote>\n<p>安全框架</p>\n</blockquote>\n<h3 id=\"Spring-Cloud-Sleuth\"><a href=\"#Spring-Cloud-Sleuth\" class=\"headerlink\" title=\"Spring Cloud Sleuth\"></a>Spring Cloud Sleuth</h3><blockquote>\n<p>日志收集工具包，封装了Dapper和log-based追踪以及Zipkin和HTrace操作，为SpringCloud应用实现了一种分布式追踪解决方案。</p>\n</blockquote>\n<p>还有其他组件，不再罗列</p>\n","site":{"data":{}},"excerpt":"<p>作者：muggle</p>\n<p>注：参考大佬博客<a href=\"https://mp.weixin.qq.com/s?__biz=MzI1NDY0MTkzNQ==&amp;mid=2247483878&amp;idx=1&amp;sn=d49f2eb61bada3d34443a0a4017a7b72&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">牧码小子</a> </p>\n<h3 id=\"springcloud的核心功能：\"><a href=\"#springcloud的核心功能：\" class=\"headerlink\" title=\"springcloud的核心功能：\"></a>springcloud的核心功能：</h3><blockquote>\n<p>负载均衡，服务注册与发现，监控，分布式配置管理，api网关 分布式追踪</p>\n</blockquote>","more":"<h3 id=\"SpringCloudGateway：\"><a href=\"#SpringCloudGateway：\" class=\"headerlink\" title=\"SpringCloudGateway：\"></a>SpringCloudGateway：</h3><blockquote>\n<p>Spring Cloud Gateway是Spring官方基于Spring 5.0，Spring Boot 2.0和Project Reactor等技术开发的网关，Spring Cloud Gateway旨在为微服务架构提供一种简单而有效的统一的API路由管理方式。Spring Cloud Gateway作为Spring Cloud生态系中的网关，目标是替代Netflix ZUUL，其不仅提供统一的路由方式，并且基于Filter链的方式提供了网关基本的功能，例如：安全，监控/埋点，和限流等。</p>\n</blockquote>\n<h3 id=\"SpringCloudNetflix\"><a href=\"#SpringCloudNetflix\" class=\"headerlink\" title=\"SpringCloudNetflix\"></a>SpringCloudNetflix</h3><blockquote>\n<p>包含组件有Netflix Eureka，Netflix Hystrix，Netflix Zuul等</p>\n</blockquote>\n<h3 id=\"SpringCloudConfig\"><a href=\"#SpringCloudConfig\" class=\"headerlink\" title=\"SpringCloudConfig\"></a>SpringCloudConfig</h3><blockquote>\n<p>配置中心，配置管理工具包，让你可以把配置放到远程服务器，集中化管理集群配置，目前支持本地存储、Git以及Subversion。</p>\n</blockquote>\n<h3 id=\"SpringCloudBus\"><a href=\"#SpringCloudBus\" class=\"headerlink\" title=\"SpringCloudBus\"></a>SpringCloudBus</h3><blockquote>\n<p>Spring Cloud Bus 将分布式的节点用轻量的消息代理连接起来。它可以用于广播配置文件的更改或者服务之间的通讯，也可以用于监控</p>\n</blockquote>\n<h3 id=\"SpringCloudforCloudFoundry\"><a href=\"#SpringCloudforCloudFoundry\" class=\"headerlink\" title=\"SpringCloudforCloudFoundry\"></a>SpringCloudforCloudFoundry</h3><blockquote>\n<p>Spring Cloud for Cloudfoundry可以轻松在Cloud Foundry（平台即服务）中运行Spring Cloud应用程序。 Cloud Foundry有一个“服务”的概念，它是“绑定”到应用程序的中间件，本质上为其提供包含凭据的环境变量（例如，用于服务的位置和用户名）。——不太明白这玩意</p>\n</blockquote>\n<h3 id=\"SpringCloudCluster\"><a href=\"#SpringCloudCluster\" class=\"headerlink\" title=\"SpringCloudCluster\"></a>SpringCloudCluster</h3><blockquote>\n<p>Spring Cloud Cluster将取代Spring Integration。提供在分布式系统中的集群所需要的基础功能支持，如：选举、集群的状态一致性、全局锁、tokens等常见状态模式的抽象和实现。</p>\n</blockquote>\n<h3 id=\"SpringCloudConsul\"><a href=\"#SpringCloudConsul\" class=\"headerlink\" title=\"SpringCloudConsul\"></a>SpringCloudConsul</h3><blockquote>\n<p>Consul是一个支持多数据中心分布式高可用的服务发现和配置共享的服务软件,由 HashiCorp 公司用 Go 语言开发, 基于 Mozilla Public License 2.0 的协议进行开源. Consul 支持健康检查,并允许 HTTP 和 DNS 协议调用 API 存储键值对.<br>Spring Cloud Consul封装了Consul操作，consul是一个服务发现与配置工具，与Docker容器可以无缝集成。</p>\n</blockquote>\n<h3 id=\"Spring-Cloud-Security\"><a href=\"#Spring-Cloud-Security\" class=\"headerlink\" title=\"Spring Cloud Security\"></a>Spring Cloud Security</h3><blockquote>\n<p>安全框架</p>\n</blockquote>\n<h3 id=\"Spring-Cloud-Sleuth\"><a href=\"#Spring-Cloud-Sleuth\" class=\"headerlink\" title=\"Spring Cloud Sleuth\"></a>Spring Cloud Sleuth</h3><blockquote>\n<p>日志收集工具包，封装了Dapper和log-based追踪以及Zipkin和HTrace操作，为SpringCloud应用实现了一种分布式追踪解决方案。</p>\n</blockquote>\n<p>还有其他组件，不再罗列</p>"},{"title":"springcloud-Eureka","date":"2019-04-26T03:34:15.000Z","_content":"\n作者：muggle\n\n### 服务治理\n\n 服务治理是微服务架构中最为核心和基础的模块。它主要用来实现各个微服务实例的自动化注册与发现。随着服务的越来越多，越来越杂，服务之间的调用会越来越复杂，越来越难以管理。而当某个服务发生了变化，或者由于压力性能问题，多部署了几台服务，怎么让服务的消费者知晓变化，就显得很重要了。不然就会存在调用的服务其实已经下线了，但调用者不知道等异常情况。这个时候有个服务组件去统一治理就相当重要了。Eureka便是服务治理的组件。\n\n<!--more-->\n\n### Eureka介绍\n\n Eureka包含Server和Client两部分。Server也称为注册中心，用于提供服务的注册与发现（服务注册是指微服务在启动时，将自己的信息注册到服务治理组件上的过程，服务发现是指查询可用微服务列表及其网络地址的机制。）。支持高可用配置，依托与强一致性提供良好的服务实例可用性，可以应对多种不同的故障场景。\n\n Client主要处理服务的注册与发现；客户端服务通过注解和参数配置方式，嵌入在客户端的应用程序代码中，在应用程序启动时，向注册中心注册自身提供的服务并周期性地发送心跳来更新它的服务租约。同时，它也能从服务端查询当前注册的服务信息并把它们缓存到本地并周期性地刷新服务状态。\n\n### 创建Eureka服务端\n\n1.创建一个springboot工程，导入依赖：\n\n```java\n<dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n</dependency>\n\n```\n\n2.配置\n\n```java\nspring.application.name=eureka-service\n# 修改端口\nserver.port=8180\n\n# 实例的主机名称\neureka.instance.hostname=localhost\n\n## 不要向注册中心注册自己\neureka.client.register-with-eureka=false\n## 表示不去检索其他的服务，因为服务注册中心本身的职责就是维护服务实例，它也不需要去检索其他服务\neureka.client.fetch-registry=false\n\n# 指定服务注册中心地址 这里直接指向了本服务 localhost:8180/eureka/\n# map对象，使用IDE的提示功能是不会出现 注意大小写\neureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/\n\n```\n\n3.启动类上添加注解@EnableEurekaServer\n\n```java\nEnableEurekaServer\n@SpringBootApplication\npublic class SpringcloudApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringcloudApplication.class, args);\n    }\n}\n```\n\n启动项目后访问 http://localhost:8180/ 就能看到注册中心界面了\n\n### 创建Eureka客户端\n\nEureka客户端，其实就是服务的提供方，对外提供服务的应用。\n\n1.创建一个springboot项目，导入依赖\n\n```java\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n    </dependency>\n    // 写一个接口方便测试\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n\n```\n\n2.配置\n\n```java\nspring.application.name=eureka-client\nserver.port=8080\n\n# 注册中心地址\neureka.client.service-url.defaultZone=http://localhost:8180/eureka\n# 启用ip配置 这样在注册中心列表中看见的是以ip+端口呈现的\neureka.instance.prefer-ip-address=true\n# 实例名称  最后呈现地址：ip:8080\neureka.instance.instance-id=${spring.cloud.client.ip-address}:${server.port}\n\n```\n\n3.启动类加入注解@EnableEurekaClient (也可使用 @EnableDiscoveryClient)\n\n```java\n@EnableEurekaClient\n@SpringBootApplication\npublic class MsetApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(MsetApplication.class, args);\n    }\n}\n```\n\n4.写个接口\n\n```java\nRestController\npublic class TestController {\n    @GetMapping(\"/\")\n    public String index(){\n        return \"sss\";\n    }\n}\n```\n\n启动应用，再次访问：http://localhost:8180/ ，可以看见服务已经注册成功。\n\n### Eureka自我保护模式\n\n默认情况下，如果Eureka Server在一定时间内没有接收到某个微服务实例的心跳，Eureka Server将会注销该实例（默认90秒）。但是当网络分区故障发生时，微服务与Eureka Server之间无法正常通信，这就可能变得非常危险了，因为微服务本身是健康的，此时本不应该注销这个微服务。\n\nEureka Server通过“自我保护模式”来解决这个问题，当Eureka Server节点在短时间内丢失过多客户端时（可能发生了网络分区故障），那么这个节点就会进入自我保护模式。一旦进入该模式，Eureka Server就会保护服务注册表中的信息，不再删除服务注册表中的数据（也就是不会注销任何微服务）。当网络故障恢复后，该Eureka Server节点会自动退出自我保护模式。\n\n可以通过配置：\n\n```java\neureka.server.enable-self-preservation=false\n```\n\n关闭自我保护模式。\n\n[springcloud官方文档](http://cloud.spring.io/spring-cloud-static/Finchley.RELEASE/single/spring-cloud.html#_appendix_compendium_of_configuration_properties)","source":"_posts/springcloud-2.md","raw":"---\ntitle: springcloud-Eureka\ndate: 2019-04-26 11:34:15\ntags: cloud\n---\n\n作者：muggle\n\n### 服务治理\n\n 服务治理是微服务架构中最为核心和基础的模块。它主要用来实现各个微服务实例的自动化注册与发现。随着服务的越来越多，越来越杂，服务之间的调用会越来越复杂，越来越难以管理。而当某个服务发生了变化，或者由于压力性能问题，多部署了几台服务，怎么让服务的消费者知晓变化，就显得很重要了。不然就会存在调用的服务其实已经下线了，但调用者不知道等异常情况。这个时候有个服务组件去统一治理就相当重要了。Eureka便是服务治理的组件。\n\n<!--more-->\n\n### Eureka介绍\n\n Eureka包含Server和Client两部分。Server也称为注册中心，用于提供服务的注册与发现（服务注册是指微服务在启动时，将自己的信息注册到服务治理组件上的过程，服务发现是指查询可用微服务列表及其网络地址的机制。）。支持高可用配置，依托与强一致性提供良好的服务实例可用性，可以应对多种不同的故障场景。\n\n Client主要处理服务的注册与发现；客户端服务通过注解和参数配置方式，嵌入在客户端的应用程序代码中，在应用程序启动时，向注册中心注册自身提供的服务并周期性地发送心跳来更新它的服务租约。同时，它也能从服务端查询当前注册的服务信息并把它们缓存到本地并周期性地刷新服务状态。\n\n### 创建Eureka服务端\n\n1.创建一个springboot工程，导入依赖：\n\n```java\n<dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n</dependency>\n\n```\n\n2.配置\n\n```java\nspring.application.name=eureka-service\n# 修改端口\nserver.port=8180\n\n# 实例的主机名称\neureka.instance.hostname=localhost\n\n## 不要向注册中心注册自己\neureka.client.register-with-eureka=false\n## 表示不去检索其他的服务，因为服务注册中心本身的职责就是维护服务实例，它也不需要去检索其他服务\neureka.client.fetch-registry=false\n\n# 指定服务注册中心地址 这里直接指向了本服务 localhost:8180/eureka/\n# map对象，使用IDE的提示功能是不会出现 注意大小写\neureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/\n\n```\n\n3.启动类上添加注解@EnableEurekaServer\n\n```java\nEnableEurekaServer\n@SpringBootApplication\npublic class SpringcloudApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringcloudApplication.class, args);\n    }\n}\n```\n\n启动项目后访问 http://localhost:8180/ 就能看到注册中心界面了\n\n### 创建Eureka客户端\n\nEureka客户端，其实就是服务的提供方，对外提供服务的应用。\n\n1.创建一个springboot项目，导入依赖\n\n```java\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n    </dependency>\n    // 写一个接口方便测试\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n\n```\n\n2.配置\n\n```java\nspring.application.name=eureka-client\nserver.port=8080\n\n# 注册中心地址\neureka.client.service-url.defaultZone=http://localhost:8180/eureka\n# 启用ip配置 这样在注册中心列表中看见的是以ip+端口呈现的\neureka.instance.prefer-ip-address=true\n# 实例名称  最后呈现地址：ip:8080\neureka.instance.instance-id=${spring.cloud.client.ip-address}:${server.port}\n\n```\n\n3.启动类加入注解@EnableEurekaClient (也可使用 @EnableDiscoveryClient)\n\n```java\n@EnableEurekaClient\n@SpringBootApplication\npublic class MsetApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(MsetApplication.class, args);\n    }\n}\n```\n\n4.写个接口\n\n```java\nRestController\npublic class TestController {\n    @GetMapping(\"/\")\n    public String index(){\n        return \"sss\";\n    }\n}\n```\n\n启动应用，再次访问：http://localhost:8180/ ，可以看见服务已经注册成功。\n\n### Eureka自我保护模式\n\n默认情况下，如果Eureka Server在一定时间内没有接收到某个微服务实例的心跳，Eureka Server将会注销该实例（默认90秒）。但是当网络分区故障发生时，微服务与Eureka Server之间无法正常通信，这就可能变得非常危险了，因为微服务本身是健康的，此时本不应该注销这个微服务。\n\nEureka Server通过“自我保护模式”来解决这个问题，当Eureka Server节点在短时间内丢失过多客户端时（可能发生了网络分区故障），那么这个节点就会进入自我保护模式。一旦进入该模式，Eureka Server就会保护服务注册表中的信息，不再删除服务注册表中的数据（也就是不会注销任何微服务）。当网络故障恢复后，该Eureka Server节点会自动退出自我保护模式。\n\n可以通过配置：\n\n```java\neureka.server.enable-self-preservation=false\n```\n\n关闭自我保护模式。\n\n[springcloud官方文档](http://cloud.spring.io/spring-cloud-static/Finchley.RELEASE/single/spring-cloud.html#_appendix_compendium_of_configuration_properties)","slug":"springcloud-2","published":1,"updated":"2019-04-26T07:29:41.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxss001nvovmzes4c2vf","content":"<p>作者：muggle</p>\n<h3 id=\"服务治理\"><a href=\"#服务治理\" class=\"headerlink\" title=\"服务治理\"></a>服务治理</h3><p> 服务治理是微服务架构中最为核心和基础的模块。它主要用来实现各个微服务实例的自动化注册与发现。随着服务的越来越多，越来越杂，服务之间的调用会越来越复杂，越来越难以管理。而当某个服务发生了变化，或者由于压力性能问题，多部署了几台服务，怎么让服务的消费者知晓变化，就显得很重要了。不然就会存在调用的服务其实已经下线了，但调用者不知道等异常情况。这个时候有个服务组件去统一治理就相当重要了。Eureka便是服务治理的组件。</p>\n<a id=\"more\"></a>\n<h3 id=\"Eureka介绍\"><a href=\"#Eureka介绍\" class=\"headerlink\" title=\"Eureka介绍\"></a>Eureka介绍</h3><p> Eureka包含Server和Client两部分。Server也称为注册中心，用于提供服务的注册与发现（服务注册是指微服务在启动时，将自己的信息注册到服务治理组件上的过程，服务发现是指查询可用微服务列表及其网络地址的机制。）。支持高可用配置，依托与强一致性提供良好的服务实例可用性，可以应对多种不同的故障场景。</p>\n<p> Client主要处理服务的注册与发现；客户端服务通过注解和参数配置方式，嵌入在客户端的应用程序代码中，在应用程序启动时，向注册中心注册自身提供的服务并周期性地发送心跳来更新它的服务租约。同时，它也能从服务端查询当前注册的服务信息并把它们缓存到本地并周期性地刷新服务状态。</p>\n<h3 id=\"创建Eureka服务端\"><a href=\"#创建Eureka服务端\" class=\"headerlink\" title=\"创建Eureka服务端\"></a>创建Eureka服务端</h3><p>1.创建一个springboot工程，导入依赖：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>2.配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.application.name=eureka-service</span><br><span class=\"line\"># 修改端口</span><br><span class=\"line\">server.port=<span class=\"number\">8180</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 实例的主机名称</span><br><span class=\"line\">eureka.instance.hostname=localhost</span><br><span class=\"line\"></span><br><span class=\"line\">## 不要向注册中心注册自己</span><br><span class=\"line\">eureka.client.register-with-eureka=<span class=\"keyword\">false</span></span><br><span class=\"line\">## 表示不去检索其他的服务，因为服务注册中心本身的职责就是维护服务实例，它也不需要去检索其他服务</span><br><span class=\"line\">eureka.client.fetch-registry=<span class=\"keyword\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 指定服务注册中心地址 这里直接指向了本服务 localhost:8180/eureka/</span><br><span class=\"line\"># map对象，使用IDE的提示功能是不会出现 注意大小写</span><br><span class=\"line\">eureka.client.service-url.defaultZone=http:<span class=\"comment\">//$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>\n<p>3.启动类上添加注解@EnableEurekaServer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EnableEurekaServer</span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringcloudApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringcloudApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动项目后访问 <a href=\"http://localhost:8180/\" target=\"_blank\" rel=\"noopener\">http://localhost:8180/</a> 就能看到注册中心界面了</p>\n<h3 id=\"创建Eureka客户端\"><a href=\"#创建Eureka客户端\" class=\"headerlink\" title=\"创建Eureka客户端\"></a>创建Eureka客户端</h3><p>Eureka客户端，其实就是服务的提供方，对外提供服务的应用。</p>\n<p>1.创建一个springboot项目，导入依赖</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"><span class=\"comment\">// 写一个接口方便测试</span></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>2.配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.application.name=eureka-client</span><br><span class=\"line\">server.port=<span class=\"number\">8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 注册中心地址</span><br><span class=\"line\">eureka.client.service-url.defaultZone=http:<span class=\"comment\">//localhost:8180/eureka</span></span><br><span class=\"line\"># 启用ip配置 这样在注册中心列表中看见的是以ip+端口呈现的</span><br><span class=\"line\">eureka.instance.prefer-ip-address=<span class=\"keyword\">true</span></span><br><span class=\"line\"># 实例名称  最后呈现地址：ip:8080</span><br><span class=\"line\">eureka.instance.instance-id=$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br></pre></td></tr></table></figure>\n<p>3.启动类加入注解@EnableEurekaClient (也可使用 @EnableDiscoveryClient)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MsetApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(MsetApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4.写个接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RestController</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"sss\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动应用，再次访问：<a href=\"http://localhost:8180/\" target=\"_blank\" rel=\"noopener\">http://localhost:8180/</a> ，可以看见服务已经注册成功。</p>\n<h3 id=\"Eureka自我保护模式\"><a href=\"#Eureka自我保护模式\" class=\"headerlink\" title=\"Eureka自我保护模式\"></a>Eureka自我保护模式</h3><p>默认情况下，如果Eureka Server在一定时间内没有接收到某个微服务实例的心跳，Eureka Server将会注销该实例（默认90秒）。但是当网络分区故障发生时，微服务与Eureka Server之间无法正常通信，这就可能变得非常危险了，因为微服务本身是健康的，此时本不应该注销这个微服务。</p>\n<p>Eureka Server通过“自我保护模式”来解决这个问题，当Eureka Server节点在短时间内丢失过多客户端时（可能发生了网络分区故障），那么这个节点就会进入自我保护模式。一旦进入该模式，Eureka Server就会保护服务注册表中的信息，不再删除服务注册表中的数据（也就是不会注销任何微服务）。当网络故障恢复后，该Eureka Server节点会自动退出自我保护模式。</p>\n<p>可以通过配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eureka.server.enable-self-preservation=<span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure>\n<p>关闭自我保护模式。</p>\n<p><a href=\"http://cloud.spring.io/spring-cloud-static/Finchley.RELEASE/single/spring-cloud.html#_appendix_compendium_of_configuration_properties\" target=\"_blank\" rel=\"noopener\">springcloud官方文档</a></p>\n","site":{"data":{}},"excerpt":"<p>作者：muggle</p>\n<h3 id=\"服务治理\"><a href=\"#服务治理\" class=\"headerlink\" title=\"服务治理\"></a>服务治理</h3><p> 服务治理是微服务架构中最为核心和基础的模块。它主要用来实现各个微服务实例的自动化注册与发现。随着服务的越来越多，越来越杂，服务之间的调用会越来越复杂，越来越难以管理。而当某个服务发生了变化，或者由于压力性能问题，多部署了几台服务，怎么让服务的消费者知晓变化，就显得很重要了。不然就会存在调用的服务其实已经下线了，但调用者不知道等异常情况。这个时候有个服务组件去统一治理就相当重要了。Eureka便是服务治理的组件。</p>","more":"<h3 id=\"Eureka介绍\"><a href=\"#Eureka介绍\" class=\"headerlink\" title=\"Eureka介绍\"></a>Eureka介绍</h3><p> Eureka包含Server和Client两部分。Server也称为注册中心，用于提供服务的注册与发现（服务注册是指微服务在启动时，将自己的信息注册到服务治理组件上的过程，服务发现是指查询可用微服务列表及其网络地址的机制。）。支持高可用配置，依托与强一致性提供良好的服务实例可用性，可以应对多种不同的故障场景。</p>\n<p> Client主要处理服务的注册与发现；客户端服务通过注解和参数配置方式，嵌入在客户端的应用程序代码中，在应用程序启动时，向注册中心注册自身提供的服务并周期性地发送心跳来更新它的服务租约。同时，它也能从服务端查询当前注册的服务信息并把它们缓存到本地并周期性地刷新服务状态。</p>\n<h3 id=\"创建Eureka服务端\"><a href=\"#创建Eureka服务端\" class=\"headerlink\" title=\"创建Eureka服务端\"></a>创建Eureka服务端</h3><p>1.创建一个springboot工程，导入依赖：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>2.配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.application.name=eureka-service</span><br><span class=\"line\"># 修改端口</span><br><span class=\"line\">server.port=<span class=\"number\">8180</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 实例的主机名称</span><br><span class=\"line\">eureka.instance.hostname=localhost</span><br><span class=\"line\"></span><br><span class=\"line\">## 不要向注册中心注册自己</span><br><span class=\"line\">eureka.client.register-with-eureka=<span class=\"keyword\">false</span></span><br><span class=\"line\">## 表示不去检索其他的服务，因为服务注册中心本身的职责就是维护服务实例，它也不需要去检索其他服务</span><br><span class=\"line\">eureka.client.fetch-registry=<span class=\"keyword\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 指定服务注册中心地址 这里直接指向了本服务 localhost:8180/eureka/</span><br><span class=\"line\"># map对象，使用IDE的提示功能是不会出现 注意大小写</span><br><span class=\"line\">eureka.client.service-url.defaultZone=http:<span class=\"comment\">//$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>\n<p>3.启动类上添加注解@EnableEurekaServer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EnableEurekaServer</span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringcloudApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringcloudApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动项目后访问 <a href=\"http://localhost:8180/\" target=\"_blank\" rel=\"noopener\">http://localhost:8180/</a> 就能看到注册中心界面了</p>\n<h3 id=\"创建Eureka客户端\"><a href=\"#创建Eureka客户端\" class=\"headerlink\" title=\"创建Eureka客户端\"></a>创建Eureka客户端</h3><p>Eureka客户端，其实就是服务的提供方，对外提供服务的应用。</p>\n<p>1.创建一个springboot项目，导入依赖</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"><span class=\"comment\">// 写一个接口方便测试</span></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>2.配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.application.name=eureka-client</span><br><span class=\"line\">server.port=<span class=\"number\">8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 注册中心地址</span><br><span class=\"line\">eureka.client.service-url.defaultZone=http:<span class=\"comment\">//localhost:8180/eureka</span></span><br><span class=\"line\"># 启用ip配置 这样在注册中心列表中看见的是以ip+端口呈现的</span><br><span class=\"line\">eureka.instance.prefer-ip-address=<span class=\"keyword\">true</span></span><br><span class=\"line\"># 实例名称  最后呈现地址：ip:8080</span><br><span class=\"line\">eureka.instance.instance-id=$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br></pre></td></tr></table></figure>\n<p>3.启动类加入注解@EnableEurekaClient (也可使用 @EnableDiscoveryClient)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MsetApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(MsetApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4.写个接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RestController</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"sss\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动应用，再次访问：<a href=\"http://localhost:8180/\" target=\"_blank\" rel=\"noopener\">http://localhost:8180/</a> ，可以看见服务已经注册成功。</p>\n<h3 id=\"Eureka自我保护模式\"><a href=\"#Eureka自我保护模式\" class=\"headerlink\" title=\"Eureka自我保护模式\"></a>Eureka自我保护模式</h3><p>默认情况下，如果Eureka Server在一定时间内没有接收到某个微服务实例的心跳，Eureka Server将会注销该实例（默认90秒）。但是当网络分区故障发生时，微服务与Eureka Server之间无法正常通信，这就可能变得非常危险了，因为微服务本身是健康的，此时本不应该注销这个微服务。</p>\n<p>Eureka Server通过“自我保护模式”来解决这个问题，当Eureka Server节点在短时间内丢失过多客户端时（可能发生了网络分区故障），那么这个节点就会进入自我保护模式。一旦进入该模式，Eureka Server就会保护服务注册表中的信息，不再删除服务注册表中的数据（也就是不会注销任何微服务）。当网络故障恢复后，该Eureka Server节点会自动退出自我保护模式。</p>\n<p>可以通过配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eureka.server.enable-self-preservation=<span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure>\n<p>关闭自我保护模式。</p>\n<p><a href=\"http://cloud.spring.io/spring-cloud-static/Finchley.RELEASE/single/spring-cloud.html#_appendix_compendium_of_configuration_properties\" target=\"_blank\" rel=\"noopener\">springcloud官方文档</a></p>"},{"title":"test","date":"2019-02-07T06:18:30.000Z","_content":"\n### 基本资料\n\n姓名 ：\n\n<!--more-->\n\n学历 ：本科\n\n邮箱 ：isocket@outlook.com\n\n手机号码 ：15013653025\n\n### 专业技能\n\n1. 熟悉netty框架\n2. redis\n3. kafa、rabbitMQ\n4. security oauth2 jpa mybaits \n5. quartz flowable logback\n6. rpc 谷歌protobuf\n7. springcloud 组件 euruka nacos sentinel\n8. sql优化\n9. docker nginx es ZK\n\n### 工作经验\n\n果美 app\n\n深传互动\n\n### 项目\n\n果美\n\nerp\n\n服务大厅管理系统\n\n","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2019-02-07 14:18:30\ntags: home\n---\n\n### 基本资料\n\n姓名 ：\n\n<!--more-->\n\n学历 ：本科\n\n邮箱 ：isocket@outlook.com\n\n手机号码 ：15013653025\n\n### 专业技能\n\n1. 熟悉netty框架\n2. redis\n3. kafa、rabbitMQ\n4. security oauth2 jpa mybaits \n5. quartz flowable logback\n6. rpc 谷歌protobuf\n7. springcloud 组件 euruka nacos sentinel\n8. sql优化\n9. docker nginx es ZK\n\n### 工作经验\n\n果美 app\n\n深传互动\n\n### 项目\n\n果美\n\nerp\n\n服务大厅管理系统\n\n","slug":"test","published":1,"updated":"2019-05-13T02:27:40.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxst001qvovmm5pvf2uq","content":"<h3 id=\"基本资料\"><a href=\"#基本资料\" class=\"headerlink\" title=\"基本资料\"></a>基本资料</h3><p>姓名 ：</p>\n<a id=\"more\"></a>\n<p>学历 ：本科</p>\n<p>邮箱 ：<a href=\"mailto:isocket@outlook.com\" target=\"_blank\" rel=\"noopener\">isocket@outlook.com</a></p>\n<p>手机号码 ：15013653025</p>\n<h3 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h3><ol>\n<li>熟悉netty框架</li>\n<li>redis</li>\n<li>kafa、rabbitMQ</li>\n<li>security oauth2 jpa mybaits </li>\n<li>quartz flowable logback</li>\n<li>rpc 谷歌protobuf</li>\n<li>springcloud 组件 euruka nacos sentinel</li>\n<li>sql优化</li>\n<li>docker nginx es ZK</li>\n</ol>\n<h3 id=\"工作经验\"><a href=\"#工作经验\" class=\"headerlink\" title=\"工作经验\"></a>工作经验</h3><p>果美 app</p>\n<p>深传互动</p>\n<h3 id=\"项目\"><a href=\"#项目\" class=\"headerlink\" title=\"项目\"></a>项目</h3><p>果美</p>\n<p>erp</p>\n<p>服务大厅管理系统</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"基本资料\"><a href=\"#基本资料\" class=\"headerlink\" title=\"基本资料\"></a>基本资料</h3><p>姓名 ：</p>","more":"<p>学历 ：本科</p>\n<p>邮箱 ：<a href=\"mailto:isocket@outlook.com\" target=\"_blank\" rel=\"noopener\">isocket@outlook.com</a></p>\n<p>手机号码 ：15013653025</p>\n<h3 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h3><ol>\n<li>熟悉netty框架</li>\n<li>redis</li>\n<li>kafa、rabbitMQ</li>\n<li>security oauth2 jpa mybaits </li>\n<li>quartz flowable logback</li>\n<li>rpc 谷歌protobuf</li>\n<li>springcloud 组件 euruka nacos sentinel</li>\n<li>sql优化</li>\n<li>docker nginx es ZK</li>\n</ol>\n<h3 id=\"工作经验\"><a href=\"#工作经验\" class=\"headerlink\" title=\"工作经验\"></a>工作经验</h3><p>果美 app</p>\n<p>深传互动</p>\n<h3 id=\"项目\"><a href=\"#项目\" class=\"headerlink\" title=\"项目\"></a>项目</h3><p>果美</p>\n<p>erp</p>\n<p>服务大厅管理系统</p>"},{"title":"springCloud学习笔记——配置高可用Eureka","date":"2019-04-27T02:02:18.000Z","_content":"\n# CAP 定理\n\n> 原文链接 http://www.ruanyifeng.com/blog/2018/07/cap.html<br>\n>  分布式系统的最大难点，就是各个节点的状态如何同步。CAP 定理是这方面的基本定理，也是理解分布式系统的起点。\n\n- Consistency 中文叫做\"一致性\"。意思是，写操作之后的读操作，必须返回该值。\n- Availability Availability 中文叫做\"可用性\"，意思是只要收到用户的请求，服务器就必须给出回应。\n- Partition tolerance 中文叫做\"分区容错\"。大多数分布式系统都分布在多个子网络。每个子网络就叫做一个区（partition）。分区容错的意思是，区间通信可能失败。\n\n 这三个指标不可能同时做到，一般来说，分区容错无法避免，因此可以认为 CAP 的 P 总是成立。CAP 定理告诉我们，剩下的 C 和 A 无法同时做到。对于Eureka而言，其是满足AP的。\n\n<!--more-->\n\n# Eureka特性：\n> - 优先保证可用性\n\n- 各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务\n- 在向某个Eureka注册时如果发现连接失败，则会自动切换至其它节点，只要有一台Eureka还在，就能保证注册服务可用(保证可用性)，只不过查到的信息可能不是最新的(不保证强一致性)\n\n# Eureka的高可用:\n\nEureka Server可以运行多个实例来构建集群，解决单点问题，Eureka Server采用的是Peer to Peer对等通信。这是一种去中心化的架构，无master/slave区分，每一个Peer都是对等的。在这种架构中，节点通过彼此互相注册来提高可用性，每个节点需要添加一个或多个有效的serviceUrl指向其他节点。每个节点都可被视为其他节点的副本。\n\n如果某台Eureka Server宕机，Eureka Client的请求会自动切换到新的Eureka Server节点，当宕机的服务器重新恢复后，Eureka会再次将其纳入到服务器集群管理之中。当节点开始接受客户端请求时，所有的操作都会进行replicateToPeer（节点间复制）操作，将请求复制到其他Eureka Server当前所知的所有节点中。\n\nEureka Server的高可用，实际上就是将自己也作为服务向其他服务注册中心进行注册，这样就可以形成一组相互注册的服务注册中心，以实现服务清单的互相同步，达到高可用的效果。\n\n通过点对点配置，Eureka注册中心通过相互注册来实现高可用配置。以下构建一个双节点的集群模式。\n\n1.创建一个application-tran.properties配置文件，同时修改application.properties文件。修改本地的hosts文件\n增加两个域名\n\n```java\n127.0.0.1 test1\n127.0.0.1 test2\n```\n\napplication-tran.properties:\n\n```java\nspring.application.name=eureka-service\n# 修改端口\nserver.port=8181\n\n# 实例名称 两个名称需要不一样 值为域名或者ip\neureka.instance.hostname=test2\n\n## 不要向注册中心注册自己\neureka.client.register-with-eureka=false\n## 表示不去检索其他的服务，因为服务注册中心本身的职责就是维护服务实例，它也不需要去检索其他服务\neureka.client.fetch-registry=false\n\n# 指定服务注册中心地址\neureka.client.service-url.defaultZone=http://test1:8180/eureka\n\n```\n\napplication.properties:\n\n```java\nspring.application.name=eureka-service\nserver.port=8180\n# 实例名称 两个名称需要不一样 值为域名或者ip\neureka.instance.hostname=test1\neureka.client.register-with-eureka=false\neureka.client.fetch-registry=false\neureka.client.service-url.defaultZone=http://test2:8181/eureka\n```\n\n使用spring.profiles.active特性来启动注册中心，spring.profiles.active相关知识这里不做介绍，第一个注册中心启动时会报错，等另外一个启动成功就正常了。\n而向注册中心注册服务只需改一个地方\n\n```java\neureka.client.service-url.defaultZone=http://test1:8180/eureka,http://test2:8181/eureka\n```\n\n也可只注册到某个节点上，其他的节点也会有此服务列表的，一般建议以集群方式进行配置，即多注册中心配置。避免单点故障，Eureka在搜索注册中心时，根据defaultZone列表，找到一个可用的，之后就不会继续去下一个注册中心地址拉取服务列表了，此时若其中一个注册中心挂了，这个时候客户端会继续去第二个注册中心拉取服务列表的。","source":"_posts/springcloud-3.md","raw":"---\ntitle: springCloud学习笔记——配置高可用Eureka\ndate: 2019-04-27 10:02:18\ntags: cloud\n---\n\n# CAP 定理\n\n> 原文链接 http://www.ruanyifeng.com/blog/2018/07/cap.html<br>\n>  分布式系统的最大难点，就是各个节点的状态如何同步。CAP 定理是这方面的基本定理，也是理解分布式系统的起点。\n\n- Consistency 中文叫做\"一致性\"。意思是，写操作之后的读操作，必须返回该值。\n- Availability Availability 中文叫做\"可用性\"，意思是只要收到用户的请求，服务器就必须给出回应。\n- Partition tolerance 中文叫做\"分区容错\"。大多数分布式系统都分布在多个子网络。每个子网络就叫做一个区（partition）。分区容错的意思是，区间通信可能失败。\n\n 这三个指标不可能同时做到，一般来说，分区容错无法避免，因此可以认为 CAP 的 P 总是成立。CAP 定理告诉我们，剩下的 C 和 A 无法同时做到。对于Eureka而言，其是满足AP的。\n\n<!--more-->\n\n# Eureka特性：\n> - 优先保证可用性\n\n- 各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务\n- 在向某个Eureka注册时如果发现连接失败，则会自动切换至其它节点，只要有一台Eureka还在，就能保证注册服务可用(保证可用性)，只不过查到的信息可能不是最新的(不保证强一致性)\n\n# Eureka的高可用:\n\nEureka Server可以运行多个实例来构建集群，解决单点问题，Eureka Server采用的是Peer to Peer对等通信。这是一种去中心化的架构，无master/slave区分，每一个Peer都是对等的。在这种架构中，节点通过彼此互相注册来提高可用性，每个节点需要添加一个或多个有效的serviceUrl指向其他节点。每个节点都可被视为其他节点的副本。\n\n如果某台Eureka Server宕机，Eureka Client的请求会自动切换到新的Eureka Server节点，当宕机的服务器重新恢复后，Eureka会再次将其纳入到服务器集群管理之中。当节点开始接受客户端请求时，所有的操作都会进行replicateToPeer（节点间复制）操作，将请求复制到其他Eureka Server当前所知的所有节点中。\n\nEureka Server的高可用，实际上就是将自己也作为服务向其他服务注册中心进行注册，这样就可以形成一组相互注册的服务注册中心，以实现服务清单的互相同步，达到高可用的效果。\n\n通过点对点配置，Eureka注册中心通过相互注册来实现高可用配置。以下构建一个双节点的集群模式。\n\n1.创建一个application-tran.properties配置文件，同时修改application.properties文件。修改本地的hosts文件\n增加两个域名\n\n```java\n127.0.0.1 test1\n127.0.0.1 test2\n```\n\napplication-tran.properties:\n\n```java\nspring.application.name=eureka-service\n# 修改端口\nserver.port=8181\n\n# 实例名称 两个名称需要不一样 值为域名或者ip\neureka.instance.hostname=test2\n\n## 不要向注册中心注册自己\neureka.client.register-with-eureka=false\n## 表示不去检索其他的服务，因为服务注册中心本身的职责就是维护服务实例，它也不需要去检索其他服务\neureka.client.fetch-registry=false\n\n# 指定服务注册中心地址\neureka.client.service-url.defaultZone=http://test1:8180/eureka\n\n```\n\napplication.properties:\n\n```java\nspring.application.name=eureka-service\nserver.port=8180\n# 实例名称 两个名称需要不一样 值为域名或者ip\neureka.instance.hostname=test1\neureka.client.register-with-eureka=false\neureka.client.fetch-registry=false\neureka.client.service-url.defaultZone=http://test2:8181/eureka\n```\n\n使用spring.profiles.active特性来启动注册中心，spring.profiles.active相关知识这里不做介绍，第一个注册中心启动时会报错，等另外一个启动成功就正常了。\n而向注册中心注册服务只需改一个地方\n\n```java\neureka.client.service-url.defaultZone=http://test1:8180/eureka,http://test2:8181/eureka\n```\n\n也可只注册到某个节点上，其他的节点也会有此服务列表的，一般建议以集群方式进行配置，即多注册中心配置。避免单点故障，Eureka在搜索注册中心时，根据defaultZone列表，找到一个可用的，之后就不会继续去下一个注册中心地址拉取服务列表了，此时若其中一个注册中心挂了，这个时候客户端会继续去第二个注册中心拉取服务列表的。","slug":"springcloud-3","published":1,"updated":"2019-04-27T03:04:54.900Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxsu001svovm6hg495b3","content":"<h1 id=\"CAP-定理\"><a href=\"#CAP-定理\" class=\"headerlink\" title=\"CAP 定理\"></a>CAP 定理</h1><blockquote>\n<p>原文链接 <a href=\"http://www.ruanyifeng.com/blog/2018/07/cap.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2018/07/cap.html</a><br><br> 分布式系统的最大难点，就是各个节点的状态如何同步。CAP 定理是这方面的基本定理，也是理解分布式系统的起点。</p>\n</blockquote>\n<ul>\n<li>Consistency 中文叫做”一致性”。意思是，写操作之后的读操作，必须返回该值。</li>\n<li>Availability Availability 中文叫做”可用性”，意思是只要收到用户的请求，服务器就必须给出回应。</li>\n<li><p>Partition tolerance 中文叫做”分区容错”。大多数分布式系统都分布在多个子网络。每个子网络就叫做一个区（partition）。分区容错的意思是，区间通信可能失败。</p>\n<p>这三个指标不可能同时做到，一般来说，分区容错无法避免，因此可以认为 CAP 的 P 总是成立。CAP 定理告诉我们，剩下的 C 和 A 无法同时做到。对于Eureka而言，其是满足AP的。</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"Eureka特性：\"><a href=\"#Eureka特性：\" class=\"headerlink\" title=\"Eureka特性：\"></a>Eureka特性：</h1><blockquote>\n<ul>\n<li>优先保证可用性</li>\n</ul>\n</blockquote>\n<ul>\n<li>各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务</li>\n<li>在向某个Eureka注册时如果发现连接失败，则会自动切换至其它节点，只要有一台Eureka还在，就能保证注册服务可用(保证可用性)，只不过查到的信息可能不是最新的(不保证强一致性)</li>\n</ul>\n<h1 id=\"Eureka的高可用\"><a href=\"#Eureka的高可用\" class=\"headerlink\" title=\"Eureka的高可用:\"></a>Eureka的高可用:</h1><p>Eureka Server可以运行多个实例来构建集群，解决单点问题，Eureka Server采用的是Peer to Peer对等通信。这是一种去中心化的架构，无master/slave区分，每一个Peer都是对等的。在这种架构中，节点通过彼此互相注册来提高可用性，每个节点需要添加一个或多个有效的serviceUrl指向其他节点。每个节点都可被视为其他节点的副本。</p>\n<p>如果某台Eureka Server宕机，Eureka Client的请求会自动切换到新的Eureka Server节点，当宕机的服务器重新恢复后，Eureka会再次将其纳入到服务器集群管理之中。当节点开始接受客户端请求时，所有的操作都会进行replicateToPeer（节点间复制）操作，将请求复制到其他Eureka Server当前所知的所有节点中。</p>\n<p>Eureka Server的高可用，实际上就是将自己也作为服务向其他服务注册中心进行注册，这样就可以形成一组相互注册的服务注册中心，以实现服务清单的互相同步，达到高可用的效果。</p>\n<p>通过点对点配置，Eureka注册中心通过相互注册来实现高可用配置。以下构建一个双节点的集群模式。</p>\n<p>1.创建一个application-tran.properties配置文件，同时修改application.properties文件。修改本地的hosts文件<br>增加两个域名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127.0</span>.0.1 test1</span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1 test2</span><br></pre></td></tr></table></figure>\n<p>application-tran.properties:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.application.name=eureka-service</span><br><span class=\"line\"># 修改端口</span><br><span class=\"line\">server.port=<span class=\"number\">8181</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 实例名称 两个名称需要不一样 值为域名或者ip</span><br><span class=\"line\">eureka.instance.hostname=test2</span><br><span class=\"line\"></span><br><span class=\"line\">## 不要向注册中心注册自己</span><br><span class=\"line\">eureka.client.register-with-eureka=<span class=\"keyword\">false</span></span><br><span class=\"line\">## 表示不去检索其他的服务，因为服务注册中心本身的职责就是维护服务实例，它也不需要去检索其他服务</span><br><span class=\"line\">eureka.client.fetch-registry=<span class=\"keyword\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 指定服务注册中心地址</span><br><span class=\"line\">eureka.client.service-url.defaultZone=http:<span class=\"comment\">//test1:8180/eureka</span></span><br></pre></td></tr></table></figure>\n<p>application.properties:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.application.name=eureka-service</span><br><span class=\"line\">server.port=<span class=\"number\">8180</span></span><br><span class=\"line\"># 实例名称 两个名称需要不一样 值为域名或者ip</span><br><span class=\"line\">eureka.instance.hostname=test1</span><br><span class=\"line\">eureka.client.register-with-eureka=<span class=\"keyword\">false</span></span><br><span class=\"line\">eureka.client.fetch-registry=<span class=\"keyword\">false</span></span><br><span class=\"line\">eureka.client.service-url.defaultZone=http:<span class=\"comment\">//test2:8181/eureka</span></span><br></pre></td></tr></table></figure>\n<p>使用spring.profiles.active特性来启动注册中心，spring.profiles.active相关知识这里不做介绍，第一个注册中心启动时会报错，等另外一个启动成功就正常了。<br>而向注册中心注册服务只需改一个地方</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eureka.client.service-url.defaultZone=http:<span class=\"comment\">//test1:8180/eureka,http://test2:8181/eureka</span></span><br></pre></td></tr></table></figure>\n<p>也可只注册到某个节点上，其他的节点也会有此服务列表的，一般建议以集群方式进行配置，即多注册中心配置。避免单点故障，Eureka在搜索注册中心时，根据defaultZone列表，找到一个可用的，之后就不会继续去下一个注册中心地址拉取服务列表了，此时若其中一个注册中心挂了，这个时候客户端会继续去第二个注册中心拉取服务列表的。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"CAP-定理\"><a href=\"#CAP-定理\" class=\"headerlink\" title=\"CAP 定理\"></a>CAP 定理</h1><blockquote>\n<p>原文链接 <a href=\"http://www.ruanyifeng.com/blog/2018/07/cap.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2018/07/cap.html</a><br><br> 分布式系统的最大难点，就是各个节点的状态如何同步。CAP 定理是这方面的基本定理，也是理解分布式系统的起点。</p>\n</blockquote>\n<ul>\n<li>Consistency 中文叫做”一致性”。意思是，写操作之后的读操作，必须返回该值。</li>\n<li>Availability Availability 中文叫做”可用性”，意思是只要收到用户的请求，服务器就必须给出回应。</li>\n<li><p>Partition tolerance 中文叫做”分区容错”。大多数分布式系统都分布在多个子网络。每个子网络就叫做一个区（partition）。分区容错的意思是，区间通信可能失败。</p>\n<p>这三个指标不可能同时做到，一般来说，分区容错无法避免，因此可以认为 CAP 的 P 总是成立。CAP 定理告诉我们，剩下的 C 和 A 无法同时做到。对于Eureka而言，其是满足AP的。</p>\n</li>\n</ul>","more":"<h1 id=\"Eureka特性：\"><a href=\"#Eureka特性：\" class=\"headerlink\" title=\"Eureka特性：\"></a>Eureka特性：</h1><blockquote>\n<ul>\n<li>优先保证可用性</li>\n</ul>\n</blockquote>\n<ul>\n<li>各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务</li>\n<li>在向某个Eureka注册时如果发现连接失败，则会自动切换至其它节点，只要有一台Eureka还在，就能保证注册服务可用(保证可用性)，只不过查到的信息可能不是最新的(不保证强一致性)</li>\n</ul>\n<h1 id=\"Eureka的高可用\"><a href=\"#Eureka的高可用\" class=\"headerlink\" title=\"Eureka的高可用:\"></a>Eureka的高可用:</h1><p>Eureka Server可以运行多个实例来构建集群，解决单点问题，Eureka Server采用的是Peer to Peer对等通信。这是一种去中心化的架构，无master/slave区分，每一个Peer都是对等的。在这种架构中，节点通过彼此互相注册来提高可用性，每个节点需要添加一个或多个有效的serviceUrl指向其他节点。每个节点都可被视为其他节点的副本。</p>\n<p>如果某台Eureka Server宕机，Eureka Client的请求会自动切换到新的Eureka Server节点，当宕机的服务器重新恢复后，Eureka会再次将其纳入到服务器集群管理之中。当节点开始接受客户端请求时，所有的操作都会进行replicateToPeer（节点间复制）操作，将请求复制到其他Eureka Server当前所知的所有节点中。</p>\n<p>Eureka Server的高可用，实际上就是将自己也作为服务向其他服务注册中心进行注册，这样就可以形成一组相互注册的服务注册中心，以实现服务清单的互相同步，达到高可用的效果。</p>\n<p>通过点对点配置，Eureka注册中心通过相互注册来实现高可用配置。以下构建一个双节点的集群模式。</p>\n<p>1.创建一个application-tran.properties配置文件，同时修改application.properties文件。修改本地的hosts文件<br>增加两个域名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127.0</span>.0.1 test1</span><br><span class=\"line\"><span class=\"number\">127.0</span>.0.1 test2</span><br></pre></td></tr></table></figure>\n<p>application-tran.properties:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.application.name=eureka-service</span><br><span class=\"line\"># 修改端口</span><br><span class=\"line\">server.port=<span class=\"number\">8181</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 实例名称 两个名称需要不一样 值为域名或者ip</span><br><span class=\"line\">eureka.instance.hostname=test2</span><br><span class=\"line\"></span><br><span class=\"line\">## 不要向注册中心注册自己</span><br><span class=\"line\">eureka.client.register-with-eureka=<span class=\"keyword\">false</span></span><br><span class=\"line\">## 表示不去检索其他的服务，因为服务注册中心本身的职责就是维护服务实例，它也不需要去检索其他服务</span><br><span class=\"line\">eureka.client.fetch-registry=<span class=\"keyword\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 指定服务注册中心地址</span><br><span class=\"line\">eureka.client.service-url.defaultZone=http:<span class=\"comment\">//test1:8180/eureka</span></span><br></pre></td></tr></table></figure>\n<p>application.properties:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.application.name=eureka-service</span><br><span class=\"line\">server.port=<span class=\"number\">8180</span></span><br><span class=\"line\"># 实例名称 两个名称需要不一样 值为域名或者ip</span><br><span class=\"line\">eureka.instance.hostname=test1</span><br><span class=\"line\">eureka.client.register-with-eureka=<span class=\"keyword\">false</span></span><br><span class=\"line\">eureka.client.fetch-registry=<span class=\"keyword\">false</span></span><br><span class=\"line\">eureka.client.service-url.defaultZone=http:<span class=\"comment\">//test2:8181/eureka</span></span><br></pre></td></tr></table></figure>\n<p>使用spring.profiles.active特性来启动注册中心，spring.profiles.active相关知识这里不做介绍，第一个注册中心启动时会报错，等另外一个启动成功就正常了。<br>而向注册中心注册服务只需改一个地方</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eureka.client.service-url.defaultZone=http:<span class=\"comment\">//test1:8180/eureka,http://test2:8181/eureka</span></span><br></pre></td></tr></table></figure>\n<p>也可只注册到某个节点上，其他的节点也会有此服务列表的，一般建议以集群方式进行配置，即多注册中心配置。避免单点故障，Eureka在搜索注册中心时，根据defaultZone列表，找到一个可用的，之后就不会继续去下一个注册中心地址拉取服务列表了，此时若其中一个注册中心挂了，这个时候客户端会继续去第二个注册中心拉取服务列表的。</p>"},{"title":"多线程编程基础第一篇","date":"2019-04-22T08:20:55.000Z","_content":"\n作者：muggle\n## java并发相关概念\n\n### 同步和异步\n同步和异步通常来形容一次方法的调用。同步方法一旦开始，调用者必须等到方法结束才能执行后续动作；异步方法则是在调用该方法后不必等到该方法执行完就能执行后面的代码，该方法会在另一个线程异步执行，异步方法总是伴随着回调，通过回调来获得异步方法的执行结果；\n\n### 并发和并行\n很多人都将并发与并行混淆在一起，它们虽然都可以表示两个或者多个任务一起执行，但执行过程上是有区别的。并发是多个任务交替执行，多任务之间还是串行的；而并行是多个任务同时执行，和并发有本质区别。\n对计算机而言，如果系统内只有一个cpu，而使用多进程或者多线程执行任务，那么这种情况下多线程或者多进程就是并行执行，并行只可能出现在多核系统中。当然，对java程序而言，我们不必去关心程序是并行还是并发。\n\n<!--more-->\n\n### 临界区\n\n临界区表示的是多个线程共享但同时只能有一个线程使用它的资源。在并行程序中临界区资源是受保护的，必须确保同一时刻只有一个线程能使用它。\n\n### 阻塞\n\n如果一个线程占有了临界区的资源，其他需要使用这个临界区资源的线程必须在这个临界区进行等待——线程被挂起，这种情况就是发生了阻塞——线程停滞不前。\n\n### 死锁\\饥饿\\活锁\n\n死锁就是多个线程需要其他线程的资源才能释放它所拥有的资源，而其他线程释放这个线程需要的资源必须先获得这个线程所拥有的资源，这样造成了矛盾无法解开；如图1情形就是发生死锁现象：\n\n![](http://a2.qpic.cn/psb?/V13ysUCU2bV4he/zBrKU1zKzRRphjYm8*58YnBjOH0x7EvRxnWkrr.0oeE!/b/dMEAAAAAAAAA&ek=1&kp=1&pt=0&bo=2QENAQAAAAARF*Q!&tl=3&vuin=1793769323&tm=1555678800&sce=60-2-2&rf=viewer_4)\n\n<center>图1：生活中的死锁现象</center>\n\n活锁就是两个线程互相谦让资源，结果就是谁也拿不到资源导致活锁；就好比过马路，行人给车让道，车又给行人让道，结果就是车和行人都停在那不走。\n\n饥饿就是，某个线程优先级特别低老是拿不到资源，导致这个线程一直无法执行\n\n### 并发级别\n\n并发级别分为阻塞，无饥饿，无障碍，无锁，无等待几个级别；根据名字我们也能大概猜出这几个级别对应的什么情形；阻塞，无饥饿和无锁都好理解；我们说一下无障碍和无等待；\n\n无障碍：无障碍级别默认各个线程不会发生冲突，不会互相抢占资源，一旦抢占资源就认为线程发生错误，进行回滚。\n\n无等待：无等待是在无锁上的进一步优化，限制每个线程完成任务的步数；\n\n### 并行的两个定理\n\n加速比：加速比=优化前系统耗时/优化后系统耗时\n\nAmdahl定理： 加速比=1/[F+(1-F)/n] 其中 n表示处理器个数 ，F是程序中只能串行执行的比例——串行率；由公式可知，想要以最小投入，得到最高加速比即 F+(1-F)/n取到最小值，F和n都对结果有很大影响，在深入研究就是数学问题了；\n\nGustafson定律： 加速比=n-F(n-1)，这两定律区别不大，都体现了单纯的减少串行率，或者单纯的加CPU都无法得到最优解。\n\n## Java中的并行基础\n\n### volatile关键字和程序的原子性，可见性，有序性\n\n原子性指的是一个操作是不可中断的，要么成功要么失败，不会被其他线程所干扰；比如 int=1,这一操作在cpu中分为好几个指令，但对程序而言这几个指令是一体的，只有可能执行成功或者失败，不可能发生只执行了一半的操作；对不同CPU而言保证原子性的的实现方式各有不同，就英特尔CPU而言是使用一个lock指令来保证的。\n\n可见性指某一线程改变某一共享变量，其他线程未必会马上知道。\n\n有序性指对一个操作而言指令是按一定顺序执行的，但编译器为了提高程序执行的速度，会重排程序指令；cpu在执行指令的时候采用的是流水线的形式，上一个指令和下一个指令差一个工步。比如A指令分三个工步：1. 操作内存a，2.操作内存b，3.操作内存c；现假设有个指令B操作流程和A一样，那么先执行指令A在执行指令B时间全利用上了，中间没有停顿等待；但如果有三个这样的指令在流水线上执行：a>b>c，b>e>c，c>e>a；这样的指令顺序就会发生等待降低了CPU的效率，编译器为了避免这种事情发生，会适当优化指令的顺序进行重排。\n\nvolatile关键字在java中的作用是保证变量的可见性和防止指令重排。\n\n### 线程的相关操作\n\n*创建线程有三种方法*\n\n- 继承Thread类创建线程\n- 实现Runnable接口创建线程\n- 使用Callable和Future创建线程\n\n*终止线程的方法*\n\n终止线程可调用stop()方法，但这个方法是被废弃不建议使用的，因为强制终止一个线程会引起数据的不一致问题。比如一个线程数据写到一半被终止了，释放了锁，其他线程拿到锁继续写数据，结果导致数据发生了错误。终止线程比较好的方法是“让程序自己终止”，比如定义一个标识符，当标识符为true的时候直让程序走到终点，这样就能达到“自己终止”的目的。\n\n*线程的中断等待和通知*\n\ninterrupt()方法可以中断当前程序，object.wait() 方法让线程进入等待队列，object.notify()随机唤醒等待队列的一个线程， object.notifyAll()唤醒等待队列的所有线程。object.wait()必须在synchronzied语句中调用；执行wait，notify方法必须获得对象的监视器，执行结束后释放监视器供其他线程获取。\n\n*join*\n\njoin()方法功能是等待其他线程“加入”，可以理解为将某个线程并为自己的子线程，等子线程走完或者等子线程走规定的时间，主线程才往下走；join的本质是调用调用线程对象的wait方法，当我们执行wait或者notify方法不应该获取线程对象的的监听器，因为可能会影响到其他线程的join。\n\n*yield*\n\nyield是线程的“谦让”机制，可以理解为当线程抢到cpu资源时，放弃这次资源重新抢占，yield()是Thread里的一个静态方法。\n\n### 线程组\n\n如果一个多线程系统线程数量众多而且分工明确，那么可以使用线程组来分类。\n\n```java\n\t\n    @Test\n    public void contextLoads() {\n        ThreadGroup testGroup=new ThreadGroup(\"testGroup\");\n        Thread a = new Thread(testGroup, new MyRunnable(), \"a\");\n        Thread b = new Thread(testGroup, new MyRunnable(), \"b\");\n        a.start();\n        b.start();\n        int i = testGroup.activeCount();\n    }\n\n    public static class MyRunnable implements Runnable{\n        @Override\n        public void run() {\n            System.out.println(\"test\");\n        }\n    }\n```\n\n图示代码创建了一个\"testGroup\"线程组。\n\n### 守护线程\n\n守护线程是一种特殊线程，它类似java中的异常系统，主要是概念上的分类，与之对应的是用户线程。它功能应该是在后台完成一些系统性的服务；设置一个线程为守护线程应该在线程start之前setDaemon()。\n\n### 线程优先级\n\njava中线程可以有自己的优先级，优先级高的更有优势抢占资源；线程优先级高的不一定能抢占到资源，只是一个概率问题，而对应优先级低的线程可能会发生饥饿；\n\n在java中使用1到10表示线程的优先级，使用setPriority()方法来进行设置，数字越大代表优先级越高；\n\n","source":"_posts/thread-1.md","raw":"---\ntitle: 多线程编程基础第一篇\ndate: 2019-04-22 16:20:55\ntags: thread\n---\n\n作者：muggle\n## java并发相关概念\n\n### 同步和异步\n同步和异步通常来形容一次方法的调用。同步方法一旦开始，调用者必须等到方法结束才能执行后续动作；异步方法则是在调用该方法后不必等到该方法执行完就能执行后面的代码，该方法会在另一个线程异步执行，异步方法总是伴随着回调，通过回调来获得异步方法的执行结果；\n\n### 并发和并行\n很多人都将并发与并行混淆在一起，它们虽然都可以表示两个或者多个任务一起执行，但执行过程上是有区别的。并发是多个任务交替执行，多任务之间还是串行的；而并行是多个任务同时执行，和并发有本质区别。\n对计算机而言，如果系统内只有一个cpu，而使用多进程或者多线程执行任务，那么这种情况下多线程或者多进程就是并行执行，并行只可能出现在多核系统中。当然，对java程序而言，我们不必去关心程序是并行还是并发。\n\n<!--more-->\n\n### 临界区\n\n临界区表示的是多个线程共享但同时只能有一个线程使用它的资源。在并行程序中临界区资源是受保护的，必须确保同一时刻只有一个线程能使用它。\n\n### 阻塞\n\n如果一个线程占有了临界区的资源，其他需要使用这个临界区资源的线程必须在这个临界区进行等待——线程被挂起，这种情况就是发生了阻塞——线程停滞不前。\n\n### 死锁\\饥饿\\活锁\n\n死锁就是多个线程需要其他线程的资源才能释放它所拥有的资源，而其他线程释放这个线程需要的资源必须先获得这个线程所拥有的资源，这样造成了矛盾无法解开；如图1情形就是发生死锁现象：\n\n![](http://a2.qpic.cn/psb?/V13ysUCU2bV4he/zBrKU1zKzRRphjYm8*58YnBjOH0x7EvRxnWkrr.0oeE!/b/dMEAAAAAAAAA&ek=1&kp=1&pt=0&bo=2QENAQAAAAARF*Q!&tl=3&vuin=1793769323&tm=1555678800&sce=60-2-2&rf=viewer_4)\n\n<center>图1：生活中的死锁现象</center>\n\n活锁就是两个线程互相谦让资源，结果就是谁也拿不到资源导致活锁；就好比过马路，行人给车让道，车又给行人让道，结果就是车和行人都停在那不走。\n\n饥饿就是，某个线程优先级特别低老是拿不到资源，导致这个线程一直无法执行\n\n### 并发级别\n\n并发级别分为阻塞，无饥饿，无障碍，无锁，无等待几个级别；根据名字我们也能大概猜出这几个级别对应的什么情形；阻塞，无饥饿和无锁都好理解；我们说一下无障碍和无等待；\n\n无障碍：无障碍级别默认各个线程不会发生冲突，不会互相抢占资源，一旦抢占资源就认为线程发生错误，进行回滚。\n\n无等待：无等待是在无锁上的进一步优化，限制每个线程完成任务的步数；\n\n### 并行的两个定理\n\n加速比：加速比=优化前系统耗时/优化后系统耗时\n\nAmdahl定理： 加速比=1/[F+(1-F)/n] 其中 n表示处理器个数 ，F是程序中只能串行执行的比例——串行率；由公式可知，想要以最小投入，得到最高加速比即 F+(1-F)/n取到最小值，F和n都对结果有很大影响，在深入研究就是数学问题了；\n\nGustafson定律： 加速比=n-F(n-1)，这两定律区别不大，都体现了单纯的减少串行率，或者单纯的加CPU都无法得到最优解。\n\n## Java中的并行基础\n\n### volatile关键字和程序的原子性，可见性，有序性\n\n原子性指的是一个操作是不可中断的，要么成功要么失败，不会被其他线程所干扰；比如 int=1,这一操作在cpu中分为好几个指令，但对程序而言这几个指令是一体的，只有可能执行成功或者失败，不可能发生只执行了一半的操作；对不同CPU而言保证原子性的的实现方式各有不同，就英特尔CPU而言是使用一个lock指令来保证的。\n\n可见性指某一线程改变某一共享变量，其他线程未必会马上知道。\n\n有序性指对一个操作而言指令是按一定顺序执行的，但编译器为了提高程序执行的速度，会重排程序指令；cpu在执行指令的时候采用的是流水线的形式，上一个指令和下一个指令差一个工步。比如A指令分三个工步：1. 操作内存a，2.操作内存b，3.操作内存c；现假设有个指令B操作流程和A一样，那么先执行指令A在执行指令B时间全利用上了，中间没有停顿等待；但如果有三个这样的指令在流水线上执行：a>b>c，b>e>c，c>e>a；这样的指令顺序就会发生等待降低了CPU的效率，编译器为了避免这种事情发生，会适当优化指令的顺序进行重排。\n\nvolatile关键字在java中的作用是保证变量的可见性和防止指令重排。\n\n### 线程的相关操作\n\n*创建线程有三种方法*\n\n- 继承Thread类创建线程\n- 实现Runnable接口创建线程\n- 使用Callable和Future创建线程\n\n*终止线程的方法*\n\n终止线程可调用stop()方法，但这个方法是被废弃不建议使用的，因为强制终止一个线程会引起数据的不一致问题。比如一个线程数据写到一半被终止了，释放了锁，其他线程拿到锁继续写数据，结果导致数据发生了错误。终止线程比较好的方法是“让程序自己终止”，比如定义一个标识符，当标识符为true的时候直让程序走到终点，这样就能达到“自己终止”的目的。\n\n*线程的中断等待和通知*\n\ninterrupt()方法可以中断当前程序，object.wait() 方法让线程进入等待队列，object.notify()随机唤醒等待队列的一个线程， object.notifyAll()唤醒等待队列的所有线程。object.wait()必须在synchronzied语句中调用；执行wait，notify方法必须获得对象的监视器，执行结束后释放监视器供其他线程获取。\n\n*join*\n\njoin()方法功能是等待其他线程“加入”，可以理解为将某个线程并为自己的子线程，等子线程走完或者等子线程走规定的时间，主线程才往下走；join的本质是调用调用线程对象的wait方法，当我们执行wait或者notify方法不应该获取线程对象的的监听器，因为可能会影响到其他线程的join。\n\n*yield*\n\nyield是线程的“谦让”机制，可以理解为当线程抢到cpu资源时，放弃这次资源重新抢占，yield()是Thread里的一个静态方法。\n\n### 线程组\n\n如果一个多线程系统线程数量众多而且分工明确，那么可以使用线程组来分类。\n\n```java\n\t\n    @Test\n    public void contextLoads() {\n        ThreadGroup testGroup=new ThreadGroup(\"testGroup\");\n        Thread a = new Thread(testGroup, new MyRunnable(), \"a\");\n        Thread b = new Thread(testGroup, new MyRunnable(), \"b\");\n        a.start();\n        b.start();\n        int i = testGroup.activeCount();\n    }\n\n    public static class MyRunnable implements Runnable{\n        @Override\n        public void run() {\n            System.out.println(\"test\");\n        }\n    }\n```\n\n图示代码创建了一个\"testGroup\"线程组。\n\n### 守护线程\n\n守护线程是一种特殊线程，它类似java中的异常系统，主要是概念上的分类，与之对应的是用户线程。它功能应该是在后台完成一些系统性的服务；设置一个线程为守护线程应该在线程start之前setDaemon()。\n\n### 线程优先级\n\njava中线程可以有自己的优先级，优先级高的更有优势抢占资源；线程优先级高的不一定能抢占到资源，只是一个概率问题，而对应优先级低的线程可能会发生饥饿；\n\n在java中使用1到10表示线程的优先级，使用setPriority()方法来进行设置，数字越大代表优先级越高；\n\n","slug":"thread-1","published":1,"updated":"2019-04-27T08:36:22.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxsv001vvovm85hpd4lp","content":"<p>作者：muggle</p>\n<h2 id=\"java并发相关概念\"><a href=\"#java并发相关概念\" class=\"headerlink\" title=\"java并发相关概念\"></a>java并发相关概念</h2><h3 id=\"同步和异步\"><a href=\"#同步和异步\" class=\"headerlink\" title=\"同步和异步\"></a>同步和异步</h3><p>同步和异步通常来形容一次方法的调用。同步方法一旦开始，调用者必须等到方法结束才能执行后续动作；异步方法则是在调用该方法后不必等到该方法执行完就能执行后面的代码，该方法会在另一个线程异步执行，异步方法总是伴随着回调，通过回调来获得异步方法的执行结果；</p>\n<h3 id=\"并发和并行\"><a href=\"#并发和并行\" class=\"headerlink\" title=\"并发和并行\"></a>并发和并行</h3><p>很多人都将并发与并行混淆在一起，它们虽然都可以表示两个或者多个任务一起执行，但执行过程上是有区别的。并发是多个任务交替执行，多任务之间还是串行的；而并行是多个任务同时执行，和并发有本质区别。<br>对计算机而言，如果系统内只有一个cpu，而使用多进程或者多线程执行任务，那么这种情况下多线程或者多进程就是并行执行，并行只可能出现在多核系统中。当然，对java程序而言，我们不必去关心程序是并行还是并发。</p>\n<a id=\"more\"></a>\n<h3 id=\"临界区\"><a href=\"#临界区\" class=\"headerlink\" title=\"临界区\"></a>临界区</h3><p>临界区表示的是多个线程共享但同时只能有一个线程使用它的资源。在并行程序中临界区资源是受保护的，必须确保同一时刻只有一个线程能使用它。</p>\n<h3 id=\"阻塞\"><a href=\"#阻塞\" class=\"headerlink\" title=\"阻塞\"></a>阻塞</h3><p>如果一个线程占有了临界区的资源，其他需要使用这个临界区资源的线程必须在这个临界区进行等待——线程被挂起，这种情况就是发生了阻塞——线程停滞不前。</p>\n<h3 id=\"死锁-饥饿-活锁\"><a href=\"#死锁-饥饿-活锁\" class=\"headerlink\" title=\"死锁\\饥饿\\活锁\"></a>死锁\\饥饿\\活锁</h3><p>死锁就是多个线程需要其他线程的资源才能释放它所拥有的资源，而其他线程释放这个线程需要的资源必须先获得这个线程所拥有的资源，这样造成了矛盾无法解开；如图1情形就是发生死锁现象：</p>\n<p><img src=\"http://a2.qpic.cn/psb?/V13ysUCU2bV4he/zBrKU1zKzRRphjYm8*58YnBjOH0x7EvRxnWkrr.0oeE!/b/dMEAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=2QENAQAAAAARF*Q!&amp;tl=3&amp;vuin=1793769323&amp;tm=1555678800&amp;sce=60-2-2&amp;rf=viewer_4\" alt></p>\n<center>图1：生活中的死锁现象</center>\n\n<p>活锁就是两个线程互相谦让资源，结果就是谁也拿不到资源导致活锁；就好比过马路，行人给车让道，车又给行人让道，结果就是车和行人都停在那不走。</p>\n<p>饥饿就是，某个线程优先级特别低老是拿不到资源，导致这个线程一直无法执行</p>\n<h3 id=\"并发级别\"><a href=\"#并发级别\" class=\"headerlink\" title=\"并发级别\"></a>并发级别</h3><p>并发级别分为阻塞，无饥饿，无障碍，无锁，无等待几个级别；根据名字我们也能大概猜出这几个级别对应的什么情形；阻塞，无饥饿和无锁都好理解；我们说一下无障碍和无等待；</p>\n<p>无障碍：无障碍级别默认各个线程不会发生冲突，不会互相抢占资源，一旦抢占资源就认为线程发生错误，进行回滚。</p>\n<p>无等待：无等待是在无锁上的进一步优化，限制每个线程完成任务的步数；</p>\n<h3 id=\"并行的两个定理\"><a href=\"#并行的两个定理\" class=\"headerlink\" title=\"并行的两个定理\"></a>并行的两个定理</h3><p>加速比：加速比=优化前系统耗时/优化后系统耗时</p>\n<p>Amdahl定理： 加速比=1/[F+(1-F)/n] 其中 n表示处理器个数 ，F是程序中只能串行执行的比例——串行率；由公式可知，想要以最小投入，得到最高加速比即 F+(1-F)/n取到最小值，F和n都对结果有很大影响，在深入研究就是数学问题了；</p>\n<p>Gustafson定律： 加速比=n-F(n-1)，这两定律区别不大，都体现了单纯的减少串行率，或者单纯的加CPU都无法得到最优解。</p>\n<h2 id=\"Java中的并行基础\"><a href=\"#Java中的并行基础\" class=\"headerlink\" title=\"Java中的并行基础\"></a>Java中的并行基础</h2><h3 id=\"volatile关键字和程序的原子性，可见性，有序性\"><a href=\"#volatile关键字和程序的原子性，可见性，有序性\" class=\"headerlink\" title=\"volatile关键字和程序的原子性，可见性，有序性\"></a>volatile关键字和程序的原子性，可见性，有序性</h3><p>原子性指的是一个操作是不可中断的，要么成功要么失败，不会被其他线程所干扰；比如 int=1,这一操作在cpu中分为好几个指令，但对程序而言这几个指令是一体的，只有可能执行成功或者失败，不可能发生只执行了一半的操作；对不同CPU而言保证原子性的的实现方式各有不同，就英特尔CPU而言是使用一个lock指令来保证的。</p>\n<p>可见性指某一线程改变某一共享变量，其他线程未必会马上知道。</p>\n<p>有序性指对一个操作而言指令是按一定顺序执行的，但编译器为了提高程序执行的速度，会重排程序指令；cpu在执行指令的时候采用的是流水线的形式，上一个指令和下一个指令差一个工步。比如A指令分三个工步：1. 操作内存a，2.操作内存b，3.操作内存c；现假设有个指令B操作流程和A一样，那么先执行指令A在执行指令B时间全利用上了，中间没有停顿等待；但如果有三个这样的指令在流水线上执行：a&gt;b&gt;c，b&gt;e&gt;c，c&gt;e&gt;a；这样的指令顺序就会发生等待降低了CPU的效率，编译器为了避免这种事情发生，会适当优化指令的顺序进行重排。</p>\n<p>volatile关键字在java中的作用是保证变量的可见性和防止指令重排。</p>\n<h3 id=\"线程的相关操作\"><a href=\"#线程的相关操作\" class=\"headerlink\" title=\"线程的相关操作\"></a>线程的相关操作</h3><p><em>创建线程有三种方法</em></p>\n<ul>\n<li>继承Thread类创建线程</li>\n<li>实现Runnable接口创建线程</li>\n<li>使用Callable和Future创建线程</li>\n</ul>\n<p><em>终止线程的方法</em></p>\n<p>终止线程可调用stop()方法，但这个方法是被废弃不建议使用的，因为强制终止一个线程会引起数据的不一致问题。比如一个线程数据写到一半被终止了，释放了锁，其他线程拿到锁继续写数据，结果导致数据发生了错误。终止线程比较好的方法是“让程序自己终止”，比如定义一个标识符，当标识符为true的时候直让程序走到终点，这样就能达到“自己终止”的目的。</p>\n<p><em>线程的中断等待和通知</em></p>\n<p>interrupt()方法可以中断当前程序，object.wait() 方法让线程进入等待队列，object.notify()随机唤醒等待队列的一个线程， object.notifyAll()唤醒等待队列的所有线程。object.wait()必须在synchronzied语句中调用；执行wait，notify方法必须获得对象的监视器，执行结束后释放监视器供其他线程获取。</p>\n<p><em>join</em></p>\n<p>join()方法功能是等待其他线程“加入”，可以理解为将某个线程并为自己的子线程，等子线程走完或者等子线程走规定的时间，主线程才往下走；join的本质是调用调用线程对象的wait方法，当我们执行wait或者notify方法不应该获取线程对象的的监听器，因为可能会影响到其他线程的join。</p>\n<p><em>yield</em></p>\n<p>yield是线程的“谦让”机制，可以理解为当线程抢到cpu资源时，放弃这次资源重新抢占，yield()是Thread里的一个静态方法。</p>\n<h3 id=\"线程组\"><a href=\"#线程组\" class=\"headerlink\" title=\"线程组\"></a>线程组</h3><p>如果一个多线程系统线程数量众多而且分工明确，那么可以使用线程组来分类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ThreadGroup testGroup=<span class=\"keyword\">new</span> ThreadGroup(<span class=\"string\">\"testGroup\"</span>);</span><br><span class=\"line\">    Thread a = <span class=\"keyword\">new</span> Thread(testGroup, <span class=\"keyword\">new</span> MyRunnable(), <span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">    Thread b = <span class=\"keyword\">new</span> Thread(testGroup, <span class=\"keyword\">new</span> MyRunnable(), <span class=\"string\">\"b\"</span>);</span><br><span class=\"line\">    a.start();</span><br><span class=\"line\">    b.start();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = testGroup.activeCount();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>图示代码创建了一个”testGroup”线程组。</p>\n<h3 id=\"守护线程\"><a href=\"#守护线程\" class=\"headerlink\" title=\"守护线程\"></a>守护线程</h3><p>守护线程是一种特殊线程，它类似java中的异常系统，主要是概念上的分类，与之对应的是用户线程。它功能应该是在后台完成一些系统性的服务；设置一个线程为守护线程应该在线程start之前setDaemon()。</p>\n<h3 id=\"线程优先级\"><a href=\"#线程优先级\" class=\"headerlink\" title=\"线程优先级\"></a>线程优先级</h3><p>java中线程可以有自己的优先级，优先级高的更有优势抢占资源；线程优先级高的不一定能抢占到资源，只是一个概率问题，而对应优先级低的线程可能会发生饥饿；</p>\n<p>在java中使用1到10表示线程的优先级，使用setPriority()方法来进行设置，数字越大代表优先级越高；</p>\n","site":{"data":{}},"excerpt":"<p>作者：muggle</p>\n<h2 id=\"java并发相关概念\"><a href=\"#java并发相关概念\" class=\"headerlink\" title=\"java并发相关概念\"></a>java并发相关概念</h2><h3 id=\"同步和异步\"><a href=\"#同步和异步\" class=\"headerlink\" title=\"同步和异步\"></a>同步和异步</h3><p>同步和异步通常来形容一次方法的调用。同步方法一旦开始，调用者必须等到方法结束才能执行后续动作；异步方法则是在调用该方法后不必等到该方法执行完就能执行后面的代码，该方法会在另一个线程异步执行，异步方法总是伴随着回调，通过回调来获得异步方法的执行结果；</p>\n<h3 id=\"并发和并行\"><a href=\"#并发和并行\" class=\"headerlink\" title=\"并发和并行\"></a>并发和并行</h3><p>很多人都将并发与并行混淆在一起，它们虽然都可以表示两个或者多个任务一起执行，但执行过程上是有区别的。并发是多个任务交替执行，多任务之间还是串行的；而并行是多个任务同时执行，和并发有本质区别。<br>对计算机而言，如果系统内只有一个cpu，而使用多进程或者多线程执行任务，那么这种情况下多线程或者多进程就是并行执行，并行只可能出现在多核系统中。当然，对java程序而言，我们不必去关心程序是并行还是并发。</p>","more":"<h3 id=\"临界区\"><a href=\"#临界区\" class=\"headerlink\" title=\"临界区\"></a>临界区</h3><p>临界区表示的是多个线程共享但同时只能有一个线程使用它的资源。在并行程序中临界区资源是受保护的，必须确保同一时刻只有一个线程能使用它。</p>\n<h3 id=\"阻塞\"><a href=\"#阻塞\" class=\"headerlink\" title=\"阻塞\"></a>阻塞</h3><p>如果一个线程占有了临界区的资源，其他需要使用这个临界区资源的线程必须在这个临界区进行等待——线程被挂起，这种情况就是发生了阻塞——线程停滞不前。</p>\n<h3 id=\"死锁-饥饿-活锁\"><a href=\"#死锁-饥饿-活锁\" class=\"headerlink\" title=\"死锁\\饥饿\\活锁\"></a>死锁\\饥饿\\活锁</h3><p>死锁就是多个线程需要其他线程的资源才能释放它所拥有的资源，而其他线程释放这个线程需要的资源必须先获得这个线程所拥有的资源，这样造成了矛盾无法解开；如图1情形就是发生死锁现象：</p>\n<p><img src=\"http://a2.qpic.cn/psb?/V13ysUCU2bV4he/zBrKU1zKzRRphjYm8*58YnBjOH0x7EvRxnWkrr.0oeE!/b/dMEAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=2QENAQAAAAARF*Q!&amp;tl=3&amp;vuin=1793769323&amp;tm=1555678800&amp;sce=60-2-2&amp;rf=viewer_4\" alt></p>\n<center>图1：生活中的死锁现象</center>\n\n<p>活锁就是两个线程互相谦让资源，结果就是谁也拿不到资源导致活锁；就好比过马路，行人给车让道，车又给行人让道，结果就是车和行人都停在那不走。</p>\n<p>饥饿就是，某个线程优先级特别低老是拿不到资源，导致这个线程一直无法执行</p>\n<h3 id=\"并发级别\"><a href=\"#并发级别\" class=\"headerlink\" title=\"并发级别\"></a>并发级别</h3><p>并发级别分为阻塞，无饥饿，无障碍，无锁，无等待几个级别；根据名字我们也能大概猜出这几个级别对应的什么情形；阻塞，无饥饿和无锁都好理解；我们说一下无障碍和无等待；</p>\n<p>无障碍：无障碍级别默认各个线程不会发生冲突，不会互相抢占资源，一旦抢占资源就认为线程发生错误，进行回滚。</p>\n<p>无等待：无等待是在无锁上的进一步优化，限制每个线程完成任务的步数；</p>\n<h3 id=\"并行的两个定理\"><a href=\"#并行的两个定理\" class=\"headerlink\" title=\"并行的两个定理\"></a>并行的两个定理</h3><p>加速比：加速比=优化前系统耗时/优化后系统耗时</p>\n<p>Amdahl定理： 加速比=1/[F+(1-F)/n] 其中 n表示处理器个数 ，F是程序中只能串行执行的比例——串行率；由公式可知，想要以最小投入，得到最高加速比即 F+(1-F)/n取到最小值，F和n都对结果有很大影响，在深入研究就是数学问题了；</p>\n<p>Gustafson定律： 加速比=n-F(n-1)，这两定律区别不大，都体现了单纯的减少串行率，或者单纯的加CPU都无法得到最优解。</p>\n<h2 id=\"Java中的并行基础\"><a href=\"#Java中的并行基础\" class=\"headerlink\" title=\"Java中的并行基础\"></a>Java中的并行基础</h2><h3 id=\"volatile关键字和程序的原子性，可见性，有序性\"><a href=\"#volatile关键字和程序的原子性，可见性，有序性\" class=\"headerlink\" title=\"volatile关键字和程序的原子性，可见性，有序性\"></a>volatile关键字和程序的原子性，可见性，有序性</h3><p>原子性指的是一个操作是不可中断的，要么成功要么失败，不会被其他线程所干扰；比如 int=1,这一操作在cpu中分为好几个指令，但对程序而言这几个指令是一体的，只有可能执行成功或者失败，不可能发生只执行了一半的操作；对不同CPU而言保证原子性的的实现方式各有不同，就英特尔CPU而言是使用一个lock指令来保证的。</p>\n<p>可见性指某一线程改变某一共享变量，其他线程未必会马上知道。</p>\n<p>有序性指对一个操作而言指令是按一定顺序执行的，但编译器为了提高程序执行的速度，会重排程序指令；cpu在执行指令的时候采用的是流水线的形式，上一个指令和下一个指令差一个工步。比如A指令分三个工步：1. 操作内存a，2.操作内存b，3.操作内存c；现假设有个指令B操作流程和A一样，那么先执行指令A在执行指令B时间全利用上了，中间没有停顿等待；但如果有三个这样的指令在流水线上执行：a&gt;b&gt;c，b&gt;e&gt;c，c&gt;e&gt;a；这样的指令顺序就会发生等待降低了CPU的效率，编译器为了避免这种事情发生，会适当优化指令的顺序进行重排。</p>\n<p>volatile关键字在java中的作用是保证变量的可见性和防止指令重排。</p>\n<h3 id=\"线程的相关操作\"><a href=\"#线程的相关操作\" class=\"headerlink\" title=\"线程的相关操作\"></a>线程的相关操作</h3><p><em>创建线程有三种方法</em></p>\n<ul>\n<li>继承Thread类创建线程</li>\n<li>实现Runnable接口创建线程</li>\n<li>使用Callable和Future创建线程</li>\n</ul>\n<p><em>终止线程的方法</em></p>\n<p>终止线程可调用stop()方法，但这个方法是被废弃不建议使用的，因为强制终止一个线程会引起数据的不一致问题。比如一个线程数据写到一半被终止了，释放了锁，其他线程拿到锁继续写数据，结果导致数据发生了错误。终止线程比较好的方法是“让程序自己终止”，比如定义一个标识符，当标识符为true的时候直让程序走到终点，这样就能达到“自己终止”的目的。</p>\n<p><em>线程的中断等待和通知</em></p>\n<p>interrupt()方法可以中断当前程序，object.wait() 方法让线程进入等待队列，object.notify()随机唤醒等待队列的一个线程， object.notifyAll()唤醒等待队列的所有线程。object.wait()必须在synchronzied语句中调用；执行wait，notify方法必须获得对象的监视器，执行结束后释放监视器供其他线程获取。</p>\n<p><em>join</em></p>\n<p>join()方法功能是等待其他线程“加入”，可以理解为将某个线程并为自己的子线程，等子线程走完或者等子线程走规定的时间，主线程才往下走；join的本质是调用调用线程对象的wait方法，当我们执行wait或者notify方法不应该获取线程对象的的监听器，因为可能会影响到其他线程的join。</p>\n<p><em>yield</em></p>\n<p>yield是线程的“谦让”机制，可以理解为当线程抢到cpu资源时，放弃这次资源重新抢占，yield()是Thread里的一个静态方法。</p>\n<h3 id=\"线程组\"><a href=\"#线程组\" class=\"headerlink\" title=\"线程组\"></a>线程组</h3><p>如果一个多线程系统线程数量众多而且分工明确，那么可以使用线程组来分类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ThreadGroup testGroup=<span class=\"keyword\">new</span> ThreadGroup(<span class=\"string\">\"testGroup\"</span>);</span><br><span class=\"line\">    Thread a = <span class=\"keyword\">new</span> Thread(testGroup, <span class=\"keyword\">new</span> MyRunnable(), <span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">    Thread b = <span class=\"keyword\">new</span> Thread(testGroup, <span class=\"keyword\">new</span> MyRunnable(), <span class=\"string\">\"b\"</span>);</span><br><span class=\"line\">    a.start();</span><br><span class=\"line\">    b.start();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = testGroup.activeCount();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>图示代码创建了一个”testGroup”线程组。</p>\n<h3 id=\"守护线程\"><a href=\"#守护线程\" class=\"headerlink\" title=\"守护线程\"></a>守护线程</h3><p>守护线程是一种特殊线程，它类似java中的异常系统，主要是概念上的分类，与之对应的是用户线程。它功能应该是在后台完成一些系统性的服务；设置一个线程为守护线程应该在线程start之前setDaemon()。</p>\n<h3 id=\"线程优先级\"><a href=\"#线程优先级\" class=\"headerlink\" title=\"线程优先级\"></a>线程优先级</h3><p>java中线程可以有自己的优先级，优先级高的更有优势抢占资源；线程优先级高的不一定能抢占到资源，只是一个概率问题，而对应优先级低的线程可能会发生饥饿；</p>\n<p>在java中使用1到10表示线程的优先级，使用setPriority()方法来进行设置，数字越大代表优先级越高；</p>"},{"title":"windows使用技巧","date":"2019-05-13T02:04:45.000Z","_content":"\n## window使用技巧\n\nmuggle [六个核弹](javascript:void(0);) *2018-11-19*\n\n### window使用技巧\n\n**每次开机都启动一堆软件，很麻烦，该肿么办？**\n\n写个批处理文件 步骤（这里以启动微信为例 ）：\n\n1. 新建一个文本文档\n2. 输入以下命令：\n\n> start \"xx\" \"xxx\"\n\nxx 代表程序名称，可以随便起；xxx代表你想启动的程序的位置 获取程序位置的方法：\n\n<!--more-->\n\n> 右击程序对应的桌面快捷方式，选择属性，其中的目标栏就是程序的位置了\n\n![image](http://upload-images.jianshu.io/upload_images/13612520-236984bb739b0420?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n获得程序的位置信息\n\n3.将.txt后缀改为.bat(你的电脑可能设置隐藏后缀，让它显示出来就行)\n\n结果就像这样：\n\n![image](http://upload-images.jianshu.io/upload_images/13612520-6aa760879ee20e25?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n编写程序启动命名\n\n![image](http://upload-images.jianshu.io/upload_images/13612520-8af85a2b881eec7c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image](http://upload-images.jianshu.io/upload_images/13612520-74ed965c7bb7ad54?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n修改文件后缀\n\n点击一下就可以启动微信了，想一次性启动多个程序在下一行添加对应的命令就可以，像这样：\n\n![image](http://upload-images.jianshu.io/upload_images/13612520-05960c45af65d05c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n编写多条启动命令\n\n这样就能做到点一下启动多个程序了。\n\n#### 一些简单好用的快捷键和命令\n\n1.  win+d:显示桌面\n\n2.  alt+tab 切换\n\n3.  win+l 锁屏\n\n4.  win+r：运行常用命令，这些命令比较好用的有cmd(控制台窗口)、control(控制面板)、mspaint(画图)、regedit(注册表)、explorer(资源管理器)、services.msc(查看服务，可以利用这个命令禁用服务列表里的windows更新程序，免得它老是提示更新)，mstsc(远程连接，需要进行相应的设置)","source":"_posts/windows.md","raw":"---\ntitle: windows使用技巧\ndate: 2019-05-13 10:04:45\ntags: tool\n---\n\n## window使用技巧\n\nmuggle [六个核弹](javascript:void(0);) *2018-11-19*\n\n### window使用技巧\n\n**每次开机都启动一堆软件，很麻烦，该肿么办？**\n\n写个批处理文件 步骤（这里以启动微信为例 ）：\n\n1. 新建一个文本文档\n2. 输入以下命令：\n\n> start \"xx\" \"xxx\"\n\nxx 代表程序名称，可以随便起；xxx代表你想启动的程序的位置 获取程序位置的方法：\n\n<!--more-->\n\n> 右击程序对应的桌面快捷方式，选择属性，其中的目标栏就是程序的位置了\n\n![image](http://upload-images.jianshu.io/upload_images/13612520-236984bb739b0420?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n获得程序的位置信息\n\n3.将.txt后缀改为.bat(你的电脑可能设置隐藏后缀，让它显示出来就行)\n\n结果就像这样：\n\n![image](http://upload-images.jianshu.io/upload_images/13612520-6aa760879ee20e25?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n编写程序启动命名\n\n![image](http://upload-images.jianshu.io/upload_images/13612520-8af85a2b881eec7c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image](http://upload-images.jianshu.io/upload_images/13612520-74ed965c7bb7ad54?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n修改文件后缀\n\n点击一下就可以启动微信了，想一次性启动多个程序在下一行添加对应的命令就可以，像这样：\n\n![image](http://upload-images.jianshu.io/upload_images/13612520-05960c45af65d05c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n编写多条启动命令\n\n这样就能做到点一下启动多个程序了。\n\n#### 一些简单好用的快捷键和命令\n\n1.  win+d:显示桌面\n\n2.  alt+tab 切换\n\n3.  win+l 锁屏\n\n4.  win+r：运行常用命令，这些命令比较好用的有cmd(控制台窗口)、control(控制面板)、mspaint(画图)、regedit(注册表)、explorer(资源管理器)、services.msc(查看服务，可以利用这个命令禁用服务列表里的windows更新程序，免得它老是提示更新)，mstsc(远程连接，需要进行相应的设置)","slug":"windows","published":1,"updated":"2019-05-14T10:01:51.781Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxsw001xvovmhsmqvhuk","content":"<h2 id=\"window使用技巧\"><a href=\"#window使用技巧\" class=\"headerlink\" title=\"window使用技巧\"></a>window使用技巧</h2><p>muggle <a href=\"javascript:void(0\" target=\"_blank\" rel=\"noopener\">六个核弹</a>;) <em>2018-11-19</em></p>\n<h3 id=\"window使用技巧-1\"><a href=\"#window使用技巧-1\" class=\"headerlink\" title=\"window使用技巧\"></a>window使用技巧</h3><p><strong>每次开机都启动一堆软件，很麻烦，该肿么办？</strong></p>\n<p>写个批处理文件 步骤（这里以启动微信为例 ）：</p>\n<ol>\n<li>新建一个文本文档</li>\n<li>输入以下命令：</li>\n</ol>\n<blockquote>\n<p>start “xx” “xxx”</p>\n</blockquote>\n<p>xx 代表程序名称，可以随便起；xxx代表你想启动的程序的位置 获取程序位置的方法：</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>右击程序对应的桌面快捷方式，选择属性，其中的目标栏就是程序的位置了</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/13612520-236984bb739b0420?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>获得程序的位置信息</p>\n<p>3.将.txt后缀改为.bat(你的电脑可能设置隐藏后缀，让它显示出来就行)</p>\n<p>结果就像这样：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/13612520-6aa760879ee20e25?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>编写程序启动命名</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/13612520-8af85a2b881eec7c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/13612520-74ed965c7bb7ad54?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>修改文件后缀</p>\n<p>点击一下就可以启动微信了，想一次性启动多个程序在下一行添加对应的命令就可以，像这样：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/13612520-05960c45af65d05c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>编写多条启动命令</p>\n<p>这样就能做到点一下启动多个程序了。</p>\n<h4 id=\"一些简单好用的快捷键和命令\"><a href=\"#一些简单好用的快捷键和命令\" class=\"headerlink\" title=\"一些简单好用的快捷键和命令\"></a>一些简单好用的快捷键和命令</h4><ol>\n<li><p>win+d:显示桌面</p>\n</li>\n<li><p>alt+tab 切换</p>\n</li>\n<li><p>win+l 锁屏</p>\n</li>\n<li><p>win+r：运行常用命令，这些命令比较好用的有cmd(控制台窗口)、control(控制面板)、mspaint(画图)、regedit(注册表)、explorer(资源管理器)、services.msc(查看服务，可以利用这个命令禁用服务列表里的windows更新程序，免得它老是提示更新)，mstsc(远程连接，需要进行相应的设置)</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"window使用技巧\"><a href=\"#window使用技巧\" class=\"headerlink\" title=\"window使用技巧\"></a>window使用技巧</h2><p>muggle <a href=\"javascript:void(0\" target=\"_blank\" rel=\"noopener\">六个核弹</a>;) <em>2018-11-19</em></p>\n<h3 id=\"window使用技巧-1\"><a href=\"#window使用技巧-1\" class=\"headerlink\" title=\"window使用技巧\"></a>window使用技巧</h3><p><strong>每次开机都启动一堆软件，很麻烦，该肿么办？</strong></p>\n<p>写个批处理文件 步骤（这里以启动微信为例 ）：</p>\n<ol>\n<li>新建一个文本文档</li>\n<li>输入以下命令：</li>\n</ol>\n<blockquote>\n<p>start “xx” “xxx”</p>\n</blockquote>\n<p>xx 代表程序名称，可以随便起；xxx代表你想启动的程序的位置 获取程序位置的方法：</p>","more":"<blockquote>\n<p>右击程序对应的桌面快捷方式，选择属性，其中的目标栏就是程序的位置了</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/13612520-236984bb739b0420?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>获得程序的位置信息</p>\n<p>3.将.txt后缀改为.bat(你的电脑可能设置隐藏后缀，让它显示出来就行)</p>\n<p>结果就像这样：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/13612520-6aa760879ee20e25?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>编写程序启动命名</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/13612520-8af85a2b881eec7c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/13612520-74ed965c7bb7ad54?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>修改文件后缀</p>\n<p>点击一下就可以启动微信了，想一次性启动多个程序在下一行添加对应的命令就可以，像这样：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/13612520-05960c45af65d05c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>编写多条启动命令</p>\n<p>这样就能做到点一下启动多个程序了。</p>\n<h4 id=\"一些简单好用的快捷键和命令\"><a href=\"#一些简单好用的快捷键和命令\" class=\"headerlink\" title=\"一些简单好用的快捷键和命令\"></a>一些简单好用的快捷键和命令</h4><ol>\n<li><p>win+d:显示桌面</p>\n</li>\n<li><p>alt+tab 切换</p>\n</li>\n<li><p>win+l 锁屏</p>\n</li>\n<li><p>win+r：运行常用命令，这些命令比较好用的有cmd(控制台窗口)、control(控制面板)、mspaint(画图)、regedit(注册表)、explorer(资源管理器)、services.msc(查看服务，可以利用这个命令禁用服务列表里的windows更新程序，免得它老是提示更新)，mstsc(远程连接，需要进行相应的设置)</p>\n</li>\n</ol>"},{"title":"在vscode中编写markdown ","date":"2019-04-12T03:50:38.000Z","_content":"作者：muggle\n\n#### 为什么要markdown\n\n&nbsp;&nbsp;markdown语法学习成本低，而且非常方便排版，如果你经常写文章，那么你就很有必要掌握markdown了，而且在vscode中编写markdown也非常方便，只需掌握几个快捷键，安装几个插件就能极大的提高你的写作效率。\n\n#### 插件安装使用\n\n##### 使用设置相关\n\nctr+shift+x 输入markdown preview enhanced下载安装，\n安装好之后新建 .md文件就能愉快的写文章了，这里对markdown语法就不做介绍了，比较简单；\n说一下插件怎么使用\nctrl+shift+v 打开预览，按F1或者ctr+shift+p输入Markdown Preview Enhanced: Customize Css 可改预览样式；对于一些常用的代码段还可以在vsocde中设置代码段快捷键，一键生成代码或文字。\n<!--more-->\n\n附上自己常用的预览样式\n\n```js\n.markdown-preview.markdown-preview {\n  background-color: rgb(46, 45, 45);\n  color: rgb(204,120,50);\n  font-size: 16px;\n  font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n  h1{\n    font-size: 70px;\n    color: bisque;\n  }\n  h2{\n    font-size: 55px;\n    color: bisque;\n  }\n  h3{\n    font-size: 40px;\n    color: bisque;\n  }\n  h4{\n    font-size: 30px;\n    color: bisque;\n  }\n  h5{\n    font-size: 20px;\n    color: bisque;\n  }\n  h6{\n    font-size: 15px;\n    color: bisque;\n  }\n  code{\n    color: red;\n    \n  }\n  pre{\n    // color:oldlace;\n    \n  }\n  \n  blockquote{\n    color: skyblue;\n  }\n  .slides{\n    color: antiquewhite;\n  }\n}\n\n```\n\n##### 插件使用的一些语法\n\n具体使用细节可查看[markdown preview enhanced](https://www.bookstack.cn/read/mpe/zh-cn-customize-css.md),这里只是对常用功能做介绍\n\n###### toc\n\n在你的文档里输入\n> [TOC]\n\n就能产生一个目录\n\n###### 引入外部文件\n语法为：\n> @import \"你的文件\"\n\n可引入 md 图片 html等，文件的路径为绝对路径或相对路径或者网络路径\n\n###### 制作幻灯片\n幻灯片语法为：\n```js\n---\npresentation:\n  width: 800\n  height: 600\n---\n<!-- slide -->\n在这里编写你的幻灯片。。。\n\n```\n\n##### 导出为PDF Word 等\npdf需要在 markdown 文件中的 front-matter 里声明 pdf_document 的输出类型：\n```js\n---\ntitle: \"test\"\nauthor: test\ndate: March 22, 2020\noutput: pdf_document\n---\n```\n你可以通过 path 来定义文档的输出路径。例如：\n```js\n---\ntitle: \"Habits\"\noutput:\n  pdf_document:\n    path: /Exports/Habits.pdf\n---\n```\nword需要在 markdown 文件中的 front-matter 里声明 word_document 的输出类型：\n```\n---\ntitle: \"Habits\"\nauthor: John Doe\ndate: March 22, 2005\noutput: word_document\n---\n```\n输出路径同pdf;\n\n保持为markdown可以包含所有的绘制的图形（为 png 图片），code chunks，以及数学表达式（图片形式）等等\n通过 front-matter 来设置图片的保存路径以及输出路径。\n\n```\n---\nmarkdown:\n  image_dir: /assets\n  path: output.md\n  ignore_from_front_matter: true\n  absolute_image_path: false\n---\n```\nimage_dir 可选\n定义了哪里将保存你的图片。例如，/assets 意味着所有的图片将会被保存到项目目录下的 assets 文件夹内。如果 image_dir。如果 image_dir 没有被定义，那么插件设置中的 Image save folder path 将会被使用。默认为 /assets。\n\npath 可选\n定义了哪里输出你的 markdown 文件。如果 path 没有被定义，filename_.md 将会被使用。\n\nignore_from_front_matter 可选\n如果设置为 false，那么 markdown 将会被包含于导出的文件中的 front-matter 中。\n\nabsolute_image_path 可选\n是否使用绝对（相对于项目文件夹）图片路径。\n\n\n对于vscode 中编写markdown就介绍这么多，小伙伴有任何疑问都可以与我邮件或者微信qq交流\n\n#### vscode的一些快捷键\nCtrl+n： new 一个文件\nCtrl+b: 关闭左侧菜单\nctr+左右方向键：光标跳跃到下一个单词\nalt+上下方向键：上/下移一行\nctrl+d：选中一个单词\nctrl+x:删除一行\nctrl+1/2/3:分屏\nctrl+w：关闭当前窗口","source":"_posts/在vscode中编写markdown.md","raw":"---\ntitle: '在vscode中编写markdown '\ndate: 2019-04-12 11:50:38\ntags: tool\n---\n作者：muggle\n\n#### 为什么要markdown\n\n&nbsp;&nbsp;markdown语法学习成本低，而且非常方便排版，如果你经常写文章，那么你就很有必要掌握markdown了，而且在vscode中编写markdown也非常方便，只需掌握几个快捷键，安装几个插件就能极大的提高你的写作效率。\n\n#### 插件安装使用\n\n##### 使用设置相关\n\nctr+shift+x 输入markdown preview enhanced下载安装，\n安装好之后新建 .md文件就能愉快的写文章了，这里对markdown语法就不做介绍了，比较简单；\n说一下插件怎么使用\nctrl+shift+v 打开预览，按F1或者ctr+shift+p输入Markdown Preview Enhanced: Customize Css 可改预览样式；对于一些常用的代码段还可以在vsocde中设置代码段快捷键，一键生成代码或文字。\n<!--more-->\n\n附上自己常用的预览样式\n\n```js\n.markdown-preview.markdown-preview {\n  background-color: rgb(46, 45, 45);\n  color: rgb(204,120,50);\n  font-size: 16px;\n  font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n  h1{\n    font-size: 70px;\n    color: bisque;\n  }\n  h2{\n    font-size: 55px;\n    color: bisque;\n  }\n  h3{\n    font-size: 40px;\n    color: bisque;\n  }\n  h4{\n    font-size: 30px;\n    color: bisque;\n  }\n  h5{\n    font-size: 20px;\n    color: bisque;\n  }\n  h6{\n    font-size: 15px;\n    color: bisque;\n  }\n  code{\n    color: red;\n    \n  }\n  pre{\n    // color:oldlace;\n    \n  }\n  \n  blockquote{\n    color: skyblue;\n  }\n  .slides{\n    color: antiquewhite;\n  }\n}\n\n```\n\n##### 插件使用的一些语法\n\n具体使用细节可查看[markdown preview enhanced](https://www.bookstack.cn/read/mpe/zh-cn-customize-css.md),这里只是对常用功能做介绍\n\n###### toc\n\n在你的文档里输入\n> [TOC]\n\n就能产生一个目录\n\n###### 引入外部文件\n语法为：\n> @import \"你的文件\"\n\n可引入 md 图片 html等，文件的路径为绝对路径或相对路径或者网络路径\n\n###### 制作幻灯片\n幻灯片语法为：\n```js\n---\npresentation:\n  width: 800\n  height: 600\n---\n<!-- slide -->\n在这里编写你的幻灯片。。。\n\n```\n\n##### 导出为PDF Word 等\npdf需要在 markdown 文件中的 front-matter 里声明 pdf_document 的输出类型：\n```js\n---\ntitle: \"test\"\nauthor: test\ndate: March 22, 2020\noutput: pdf_document\n---\n```\n你可以通过 path 来定义文档的输出路径。例如：\n```js\n---\ntitle: \"Habits\"\noutput:\n  pdf_document:\n    path: /Exports/Habits.pdf\n---\n```\nword需要在 markdown 文件中的 front-matter 里声明 word_document 的输出类型：\n```\n---\ntitle: \"Habits\"\nauthor: John Doe\ndate: March 22, 2005\noutput: word_document\n---\n```\n输出路径同pdf;\n\n保持为markdown可以包含所有的绘制的图形（为 png 图片），code chunks，以及数学表达式（图片形式）等等\n通过 front-matter 来设置图片的保存路径以及输出路径。\n\n```\n---\nmarkdown:\n  image_dir: /assets\n  path: output.md\n  ignore_from_front_matter: true\n  absolute_image_path: false\n---\n```\nimage_dir 可选\n定义了哪里将保存你的图片。例如，/assets 意味着所有的图片将会被保存到项目目录下的 assets 文件夹内。如果 image_dir。如果 image_dir 没有被定义，那么插件设置中的 Image save folder path 将会被使用。默认为 /assets。\n\npath 可选\n定义了哪里输出你的 markdown 文件。如果 path 没有被定义，filename_.md 将会被使用。\n\nignore_from_front_matter 可选\n如果设置为 false，那么 markdown 将会被包含于导出的文件中的 front-matter 中。\n\nabsolute_image_path 可选\n是否使用绝对（相对于项目文件夹）图片路径。\n\n\n对于vscode 中编写markdown就介绍这么多，小伙伴有任何疑问都可以与我邮件或者微信qq交流\n\n#### vscode的一些快捷键\nCtrl+n： new 一个文件\nCtrl+b: 关闭左侧菜单\nctr+左右方向键：光标跳跃到下一个单词\nalt+上下方向键：上/下移一行\nctrl+d：选中一个单词\nctrl+x:删除一行\nctrl+1/2/3:分屏\nctrl+w：关闭当前窗口","slug":"在vscode中编写markdown","published":1,"updated":"2019-04-23T09:25:17.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxsx0020vovmyvjy5kyr","content":"<p>作者：muggle</p>\n<h4 id=\"为什么要markdown\"><a href=\"#为什么要markdown\" class=\"headerlink\" title=\"为什么要markdown\"></a>为什么要markdown</h4><p>&nbsp;&nbsp;markdown语法学习成本低，而且非常方便排版，如果你经常写文章，那么你就很有必要掌握markdown了，而且在vscode中编写markdown也非常方便，只需掌握几个快捷键，安装几个插件就能极大的提高你的写作效率。</p>\n<h4 id=\"插件安装使用\"><a href=\"#插件安装使用\" class=\"headerlink\" title=\"插件安装使用\"></a>插件安装使用</h4><h5 id=\"使用设置相关\"><a href=\"#使用设置相关\" class=\"headerlink\" title=\"使用设置相关\"></a>使用设置相关</h5><p>ctr+shift+x 输入markdown preview enhanced下载安装，<br>安装好之后新建 .md文件就能愉快的写文章了，这里对markdown语法就不做介绍了，比较简单；<br>说一下插件怎么使用<br>ctrl+shift+v 打开预览，按F1或者ctr+shift+p输入Markdown Preview Enhanced: Customize Css 可改预览样式；对于一些常用的代码段还可以在vsocde中设置代码段快捷键，一键生成代码或文字。<br><a id=\"more\"></a></p>\n<p>附上自己常用的预览样式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.markdown-preview.markdown-preview &#123;</span><br><span class=\"line\">  background-color: rgb(<span class=\"number\">46</span>, <span class=\"number\">45</span>, <span class=\"number\">45</span>);</span><br><span class=\"line\">  color: rgb(<span class=\"number\">204</span>,<span class=\"number\">120</span>,<span class=\"number\">50</span>);</span><br><span class=\"line\">  font-size: <span class=\"number\">16</span>px;</span><br><span class=\"line\">  font-family: <span class=\"string\">'Franklin Gothic Medium'</span>, <span class=\"string\">'Arial Narrow'</span>, Arial, sans-serif;</span><br><span class=\"line\">  h1&#123;</span><br><span class=\"line\">    font-size: <span class=\"number\">70</span>px;</span><br><span class=\"line\">    color: bisque;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  h2&#123;</span><br><span class=\"line\">    font-size: <span class=\"number\">55</span>px;</span><br><span class=\"line\">    color: bisque;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  h3&#123;</span><br><span class=\"line\">    font-size: <span class=\"number\">40</span>px;</span><br><span class=\"line\">    color: bisque;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  h4&#123;</span><br><span class=\"line\">    font-size: <span class=\"number\">30</span>px;</span><br><span class=\"line\">    color: bisque;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  h5&#123;</span><br><span class=\"line\">    font-size: <span class=\"number\">20</span>px;</span><br><span class=\"line\">    color: bisque;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  h6&#123;</span><br><span class=\"line\">    font-size: <span class=\"number\">15</span>px;</span><br><span class=\"line\">    color: bisque;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  code&#123;</span><br><span class=\"line\">    color: red;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pre&#123;</span><br><span class=\"line\">    <span class=\"comment\">// color:oldlace;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  blockquote&#123;</span><br><span class=\"line\">    color: skyblue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .slides&#123;</span><br><span class=\"line\">    color: antiquewhite;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"插件使用的一些语法\"><a href=\"#插件使用的一些语法\" class=\"headerlink\" title=\"插件使用的一些语法\"></a>插件使用的一些语法</h5><p>具体使用细节可查看<a href=\"https://www.bookstack.cn/read/mpe/zh-cn-customize-css.md\" target=\"_blank\" rel=\"noopener\">markdown preview enhanced</a>,这里只是对常用功能做介绍</p>\n<h6 id=\"toc\"><a href=\"#toc\" class=\"headerlink\" title=\"toc\"></a>toc</h6><p>在你的文档里输入</p>\n<blockquote>\n<p>[TOC]</p>\n</blockquote>\n<p>就能产生一个目录</p>\n<h6 id=\"引入外部文件\"><a href=\"#引入外部文件\" class=\"headerlink\" title=\"引入外部文件\"></a>引入外部文件</h6><p>语法为：</p>\n<blockquote>\n<p>@import “你的文件”</p>\n</blockquote>\n<p>可引入 md 图片 html等，文件的路径为绝对路径或相对路径或者网络路径</p>\n<h6 id=\"制作幻灯片\"><a href=\"#制作幻灯片\" class=\"headerlink\" title=\"制作幻灯片\"></a>制作幻灯片</h6><p>幻灯片语法为：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">presentation:</span><br><span class=\"line\">  width: <span class=\"number\">800</span></span><br><span class=\"line\">  height: <span class=\"number\">600</span></span><br><span class=\"line\">---</span><br><span class=\"line\">&lt;!-- slide --&gt;</span><br><span class=\"line\">在这里编写你的幻灯片。。。</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"导出为PDF-Word-等\"><a href=\"#导出为PDF-Word-等\" class=\"headerlink\" title=\"导出为PDF Word 等\"></a>导出为PDF Word 等</h5><p>pdf需要在 markdown 文件中的 front-matter 里声明 pdf_document 的输出类型：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: <span class=\"string\">\"test\"</span></span><br><span class=\"line\">author: test</span><br><span class=\"line\">date: March <span class=\"number\">22</span>, <span class=\"number\">2020</span></span><br><span class=\"line\">output: pdf_document</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<p>你可以通过 path 来定义文档的输出路径。例如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: <span class=\"string\">\"Habits\"</span></span><br><span class=\"line\">output:</span><br><span class=\"line\">  pdf_document:</span><br><span class=\"line\">    path: <span class=\"regexp\">/Exports/</span>Habits.pdf</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<p>word需要在 markdown 文件中的 front-matter 里声明 word_document 的输出类型：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: &quot;Habits&quot;</span><br><span class=\"line\">author: John Doe</span><br><span class=\"line\">date: March 22, 2005</span><br><span class=\"line\">output: word_document</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<p>输出路径同pdf;</p>\n<p>保持为markdown可以包含所有的绘制的图形（为 png 图片），code chunks，以及数学表达式（图片形式）等等<br>通过 front-matter 来设置图片的保存路径以及输出路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">markdown:</span><br><span class=\"line\">  image_dir: /assets</span><br><span class=\"line\">  path: output.md</span><br><span class=\"line\">  ignore_from_front_matter: true</span><br><span class=\"line\">  absolute_image_path: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>image_dir 可选<br>定义了哪里将保存你的图片。例如，/assets 意味着所有的图片将会被保存到项目目录下的 assets 文件夹内。如果 image_dir。如果 image_dir 没有被定义，那么插件设置中的 Image save folder path 将会被使用。默认为 /assets。</p>\n<p>path 可选<br>定义了哪里输出你的 markdown 文件。如果 path 没有被定义，filename_.md 将会被使用。</p>\n<p>ignore_from_front_matter 可选<br>如果设置为 false，那么 markdown 将会被包含于导出的文件中的 front-matter 中。</p>\n<p>absolute_image_path 可选<br>是否使用绝对（相对于项目文件夹）图片路径。</p>\n<p>对于vscode 中编写markdown就介绍这么多，小伙伴有任何疑问都可以与我邮件或者微信qq交流</p>\n<h4 id=\"vscode的一些快捷键\"><a href=\"#vscode的一些快捷键\" class=\"headerlink\" title=\"vscode的一些快捷键\"></a>vscode的一些快捷键</h4><p>Ctrl+n： new 一个文件<br>Ctrl+b: 关闭左侧菜单<br>ctr+左右方向键：光标跳跃到下一个单词<br>alt+上下方向键：上/下移一行<br>ctrl+d：选中一个单词<br>ctrl+x:删除一行<br>ctrl+1/2/3:分屏<br>ctrl+w：关闭当前窗口</p>\n","site":{"data":{}},"excerpt":"<p>作者：muggle</p>\n<h4 id=\"为什么要markdown\"><a href=\"#为什么要markdown\" class=\"headerlink\" title=\"为什么要markdown\"></a>为什么要markdown</h4><p>&nbsp;&nbsp;markdown语法学习成本低，而且非常方便排版，如果你经常写文章，那么你就很有必要掌握markdown了，而且在vscode中编写markdown也非常方便，只需掌握几个快捷键，安装几个插件就能极大的提高你的写作效率。</p>\n<h4 id=\"插件安装使用\"><a href=\"#插件安装使用\" class=\"headerlink\" title=\"插件安装使用\"></a>插件安装使用</h4><h5 id=\"使用设置相关\"><a href=\"#使用设置相关\" class=\"headerlink\" title=\"使用设置相关\"></a>使用设置相关</h5><p>ctr+shift+x 输入markdown preview enhanced下载安装，<br>安装好之后新建 .md文件就能愉快的写文章了，这里对markdown语法就不做介绍了，比较简单；<br>说一下插件怎么使用<br>ctrl+shift+v 打开预览，按F1或者ctr+shift+p输入Markdown Preview Enhanced: Customize Css 可改预览样式；对于一些常用的代码段还可以在vsocde中设置代码段快捷键，一键生成代码或文字。<br>","more":"</p>\n<p>附上自己常用的预览样式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.markdown-preview.markdown-preview &#123;</span><br><span class=\"line\">  background-color: rgb(<span class=\"number\">46</span>, <span class=\"number\">45</span>, <span class=\"number\">45</span>);</span><br><span class=\"line\">  color: rgb(<span class=\"number\">204</span>,<span class=\"number\">120</span>,<span class=\"number\">50</span>);</span><br><span class=\"line\">  font-size: <span class=\"number\">16</span>px;</span><br><span class=\"line\">  font-family: <span class=\"string\">'Franklin Gothic Medium'</span>, <span class=\"string\">'Arial Narrow'</span>, Arial, sans-serif;</span><br><span class=\"line\">  h1&#123;</span><br><span class=\"line\">    font-size: <span class=\"number\">70</span>px;</span><br><span class=\"line\">    color: bisque;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  h2&#123;</span><br><span class=\"line\">    font-size: <span class=\"number\">55</span>px;</span><br><span class=\"line\">    color: bisque;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  h3&#123;</span><br><span class=\"line\">    font-size: <span class=\"number\">40</span>px;</span><br><span class=\"line\">    color: bisque;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  h4&#123;</span><br><span class=\"line\">    font-size: <span class=\"number\">30</span>px;</span><br><span class=\"line\">    color: bisque;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  h5&#123;</span><br><span class=\"line\">    font-size: <span class=\"number\">20</span>px;</span><br><span class=\"line\">    color: bisque;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  h6&#123;</span><br><span class=\"line\">    font-size: <span class=\"number\">15</span>px;</span><br><span class=\"line\">    color: bisque;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  code&#123;</span><br><span class=\"line\">    color: red;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pre&#123;</span><br><span class=\"line\">    <span class=\"comment\">// color:oldlace;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  blockquote&#123;</span><br><span class=\"line\">    color: skyblue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .slides&#123;</span><br><span class=\"line\">    color: antiquewhite;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"插件使用的一些语法\"><a href=\"#插件使用的一些语法\" class=\"headerlink\" title=\"插件使用的一些语法\"></a>插件使用的一些语法</h5><p>具体使用细节可查看<a href=\"https://www.bookstack.cn/read/mpe/zh-cn-customize-css.md\" target=\"_blank\" rel=\"noopener\">markdown preview enhanced</a>,这里只是对常用功能做介绍</p>\n<h6 id=\"toc\"><a href=\"#toc\" class=\"headerlink\" title=\"toc\"></a>toc</h6><p>在你的文档里输入</p>\n<blockquote>\n<p>[TOC]</p>\n</blockquote>\n<p>就能产生一个目录</p>\n<h6 id=\"引入外部文件\"><a href=\"#引入外部文件\" class=\"headerlink\" title=\"引入外部文件\"></a>引入外部文件</h6><p>语法为：</p>\n<blockquote>\n<p>@import “你的文件”</p>\n</blockquote>\n<p>可引入 md 图片 html等，文件的路径为绝对路径或相对路径或者网络路径</p>\n<h6 id=\"制作幻灯片\"><a href=\"#制作幻灯片\" class=\"headerlink\" title=\"制作幻灯片\"></a>制作幻灯片</h6><p>幻灯片语法为：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">presentation:</span><br><span class=\"line\">  width: <span class=\"number\">800</span></span><br><span class=\"line\">  height: <span class=\"number\">600</span></span><br><span class=\"line\">---</span><br><span class=\"line\">&lt;!-- slide --&gt;</span><br><span class=\"line\">在这里编写你的幻灯片。。。</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"导出为PDF-Word-等\"><a href=\"#导出为PDF-Word-等\" class=\"headerlink\" title=\"导出为PDF Word 等\"></a>导出为PDF Word 等</h5><p>pdf需要在 markdown 文件中的 front-matter 里声明 pdf_document 的输出类型：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: <span class=\"string\">\"test\"</span></span><br><span class=\"line\">author: test</span><br><span class=\"line\">date: March <span class=\"number\">22</span>, <span class=\"number\">2020</span></span><br><span class=\"line\">output: pdf_document</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<p>你可以通过 path 来定义文档的输出路径。例如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: <span class=\"string\">\"Habits\"</span></span><br><span class=\"line\">output:</span><br><span class=\"line\">  pdf_document:</span><br><span class=\"line\">    path: <span class=\"regexp\">/Exports/</span>Habits.pdf</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<p>word需要在 markdown 文件中的 front-matter 里声明 word_document 的输出类型：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: &quot;Habits&quot;</span><br><span class=\"line\">author: John Doe</span><br><span class=\"line\">date: March 22, 2005</span><br><span class=\"line\">output: word_document</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<p>输出路径同pdf;</p>\n<p>保持为markdown可以包含所有的绘制的图形（为 png 图片），code chunks，以及数学表达式（图片形式）等等<br>通过 front-matter 来设置图片的保存路径以及输出路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">markdown:</span><br><span class=\"line\">  image_dir: /assets</span><br><span class=\"line\">  path: output.md</span><br><span class=\"line\">  ignore_from_front_matter: true</span><br><span class=\"line\">  absolute_image_path: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>image_dir 可选<br>定义了哪里将保存你的图片。例如，/assets 意味着所有的图片将会被保存到项目目录下的 assets 文件夹内。如果 image_dir。如果 image_dir 没有被定义，那么插件设置中的 Image save folder path 将会被使用。默认为 /assets。</p>\n<p>path 可选<br>定义了哪里输出你的 markdown 文件。如果 path 没有被定义，filename_.md 将会被使用。</p>\n<p>ignore_from_front_matter 可选<br>如果设置为 false，那么 markdown 将会被包含于导出的文件中的 front-matter 中。</p>\n<p>absolute_image_path 可选<br>是否使用绝对（相对于项目文件夹）图片路径。</p>\n<p>对于vscode 中编写markdown就介绍这么多，小伙伴有任何疑问都可以与我邮件或者微信qq交流</p>\n<h4 id=\"vscode的一些快捷键\"><a href=\"#vscode的一些快捷键\" class=\"headerlink\" title=\"vscode的一些快捷键\"></a>vscode的一些快捷键</h4><p>Ctrl+n： new 一个文件<br>Ctrl+b: 关闭左侧菜单<br>ctr+左右方向键：光标跳跃到下一个单词<br>alt+上下方向键：上/下移一行<br>ctrl+d：选中一个单词<br>ctrl+x:删除一行<br>ctrl+1/2/3:分屏<br>ctrl+w：关闭当前窗口</p>"},{"title":"博客搭建新司机指南","date":"2019-04-22T07:17:24.000Z","_content":"\n作者：muggle\n\n## 准备工作\n\n### 安装hexo并创建一个博客项目\n\n在安装hexo之前请确保安装了git 和node.js\n\n打开cmd，输入\n\n```js\nnpm install -g hexo-cli\n```\n\n<!--more-->\n\n创建一个名为blog的博客项目\n\n```\n$ hexo init blog\n$ cd blog\n$ npm install\n```\n\n新建完成后，指定文件夹的目录如下：\n\n```xml\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n\n### 配置\n\n可以在 `_config.yml` 中修改大部分的配置。配置参数说明：\n\n| 参数          | 描述                                                         |\n| :------------ | :----------------------------------------------------------- |\n| `title`       | 网站标题                                                     |\n| `subtitle`    | 网站副标题                                                   |\n| `description` | 网站描述                                                     |\n| `author`      | 您的名字                                                     |\n| `language`    | 网站使用的语言                                               |\n| `timezone`    | 网站时区。Hexo 默认使用您电脑的时区。[时区列表](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)。比如说：`America/New_York`, `Japan`, 和 `UTC` 。 |\n\n## 撸博客\n\n### 新建文章并查看效果\n\n在项目文件夹下打开cmd 执行\n\n```java\nhexo new \"test\"\n```\n\ntest 为你的文件名，在source文件下的_posts 文件夹里有一个test.md；用markdown编辑器打开，就能写博客辣。\n\n在这个md文件头部有一个`title`的属性，就是你的博客名，还可以在该头部配置日期等属性，这个文件最上方以 `---` 分隔的区域叫Front-matter。以下是一些预先定义的参数，您可在模板中使用这些参数值并加以利用。\n\n| 参数         | 描述                 | 默认值       |\n| :----------- | :------------------- | :----------- |\n| `layout`     | 布局                 |              |\n| `title`      | 标题                 |              |\n| `date`       | 建立日期             | 文件建立日期 |\n| `updated`    | 更新日期             | 文件更新日期 |\n| `comments`   | 开启文章的评论功能   | true         |\n| `tags`       | 标签（不适用于分页） |              |\n| `categories` | 分类（不适用于分页） |              |\n| `permalink`  | 覆盖文章网址         |              |\n\n写完文章保存后，在原来打开的命令窗口 运行\n\n```java\nhexo g\n```\n\n这个指令是构建静态页面，它会在项目下生成一个public文件夹，里面就是我们`hexo g`得到博客静态页面，运行\n\n```java\nhexo s\n```\n\n将代码部署到本地，访问http://localhost:4000/可以查看你的博客效果\n\n### 上传\n\n博客上传之前需要在github上建立一个仓库，仓库名称要为`用户名.github.io`，因为我们博客就算基于gitpages来搭建的，所以我们要按照github的要求来命名。\n\n创建成功之后，修改 hexo 的 `_config.yml` 文件，配置 GitHub 地址，如下：\n\n```java\ndeploy:  \n\ttype: git  \n\trepo: 仓库地址  \n\tbranch: master\n```\n\n配置完成运行\n\n```java\nhexo d \n```\n\n完成部署，这个时候可以访问 `用户名.github.io`这个网址来查看自己的博客\n\n### hexo命令一览\n\n```\n$ hexo init [folder]\n```\n\n新建一个网站。如果没有设置 `folder` ，Hexo 默认在目前的文件夹建立网站。\n\n**new**\n\n```\n$ hexo new [layout] <title>\n```\n\n新建一篇文章。如果没有设置 `layout` 的话，默认使用 [_config.yml](https://hexo.io/zh-cn/docs/configuration) 中的 `default_layout` 参数代替。如果标题包含空格的话，请使用引号括起来。\n\n```\n$ hexo new \"post title with whitespace\"\n```\n\n**generate**\n\n```\n$ hexo generate\n```\n\n生成静态文件。\n\n| 选项             | 描述                   |\n| :--------------- | :--------------------- |\n| `-d`, `--deploy` | 文件生成后立即部署网站 |\n| `-w`, `--watch`  | 监视文件变动           |\n\n该命令可以简写为\n\n```\n$ hexo g\n```\n\n**publish**\n\n```\n$ hexo publish [layout] <filename>\n```\n\n发表草稿。\n\n**server**\n\n```\n$ hexo server\n```\n\n启动服务器。默认情况下，访问网址为： `http://localhost:4000/`。\n\n| 选项             | 描述                           |\n| :--------------- | :----------------------------- |\n| `-p`, `--port`   | 重设端口                       |\n| `-s`, `--static` | 只使用静态文件                 |\n| `-l`, `--log`    | 启动日记记录，使用覆盖记录格式 |\n\n**deploy**\n\n```\n$ hexo deploy\n```\n\n部署网站。\n\n| 参数               | 描述                     |\n| :----------------- | :----------------------- |\n| `-g`, `--generate` | 部署之前预先生成静态文件 |\n\n该命令可以简写为：\n\n```\n$ hexo d\n```\n\n**render**\n\n```\n$ hexo render <file1> [file2] ...\n```\n\n渲染文件。\n\n| 参数             | 描述         |\n| :--------------- | :----------- |\n| `-o`, `--output` | 设置输出路径 |\n\n**migrate**\n\n```\n$ hexo migrate <type>\n```\n\n从其他博客系统 [迁移内容](https://hexo.io/zh-cn/docs/migration)。\n\n**clean**\n\n```\n$ hexo clean\n```\n\n清除缓存文件 (`db.json`) 和已生成的静态文件 (`public`)。\n\n在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。\n\n**list**\n\n```\n$ hexo list <type>\n```\n\n列出网站资料。\n\n**version**\n\n```\n$ hexo version\n```\n\n显示 Hexo 版本。\n\n**选项**\n\n**安全模式**\n\n```\n$ hexo --safe\n```\n\n在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。\n\n**调试模式**\n\n```\n$ hexo --debug\n```\n\n在终端中显示调试信息并记录到 `debug.log`。当您碰到问题时，可以尝试用调试模式重新执行一次，并 [提交调试信息到 GitHub](https://github.com/hexojs/hexo/issues/new)。\n\n**简洁模式**\n\n```\n$ hexo --silent\n```\n\n隐藏终端信息。\n\n**自定义配置文件的路径**\n\n```\n$ hexo --config custom.yml\n```\n\n自定义配置文件的路径，执行后将不再使用 `_config.yml`。\n\n**显示草稿**\n\n```\n$ hexo --draft\n```\n\n显示 `source/_drafts` 文件夹中的草稿文章。\n\n**自定义 CWD**\n\n```\n$ hexo --cwd /path/to/cwd\n```\n\n自定义当前工作目录（Current working directory）的路径。\n\n## 进阶\n\n### 换主题\n\n下载主题到`./themes`目录下，修改 hexo 的 _config.yml 文件的theme属性为你的主题名就ok了，下面推荐几个hexo主题\n\n- [hexo-theme-next](<https://github.com/iissnan/hexo-theme-next>)\n- [hexo-theme-yilia](https://link.zhihu.com/?target=https%3A//github.com/litten/hexo-theme-yilia)\n- [uno](https://link.zhihu.com/?target=https%3A//github.com/daleanthony/uno)\n- [hexo-theme-strict](https://link.zhihu.com/?target=https%3A//github.com/17/hexo-theme-strict)\n\n### 换域名\n\n首先申请一个域名，然后在博客所在目录下的 source 目录中，创建一个 CNAME 文件，文件内容就是你的域名，然后执行 `hexo d` 命令将这个文件上传到 GitHub就可以了；域名换好后需要配置域名解析。\n\n## 附\n\n### markdown 语法一览\n\n```java\n# 这是一级标题\n## 这是二级标题\n### 这是三级标题\n#### 这是四级标题\n##### 这是五级标题\n###### 这是六级标题\n**这是加粗的文字**\n*这是倾斜的文字*\n***这是斜体加粗的文字***\n~~ 这是加删除线的文字~~\n> 这是引用的内容\n三个或者三个以上的 - 或者 *为分割线\n![图片alt](图片地址 ''图片title'')\n[超链接名](超链接地址 \"超链接title\")\n    \n- 列表内容\n+ 列表内容\n* 列表内容\n注意：- + * 跟内容之间都要有一个空格\n\n1.列表内容\n2.列表内容\n3.列表内容\n\n注意：序号跟内容之间要有空格\n\n表头|表头|表头\n---|:--:|---:\n内容|内容|内容\n内容|内容|内容\n`代码内容`\n​```\n代码内容\n​```\n```\n\n\n\n### markdown文档编辑器Typora\n\n百度Typora 下载安装好之后点 文件>偏好设置>勾选自动保存，这样就不怕忘记保存而文档丢失了；\n\n快捷键：\n- 标题：ctrl+数字\n- 表格：ctrl+t\n- 生成目录：[TOC]按回车\n- 选中一整行：ctrl+l\n- 选中单词：ctrl+d\n- 选中相同格式的文字：ctrl+e\n- 跳转到文章开头：ctrl+home\n- 跳转到文章结尾：ctrl+end\n- 搜索：ctrl+f\n- 替换：ctrl+h\n- 引用：输入>之后输入空格\n- 代码块：ctrl+alt+f\n- 加粗：ctrl+b\n- 倾斜：ctrl+i\n- 下划线：ctrl+u\n- 删除线：alt+shift+5\n- 插入图片：直接拖动到指定位置即可或者ctrl+shift+i\n- 插入链接：ctrl + k\n\n左下角有一个 O 和 </>的符号 O表示打开侧边栏 </>查看文档源代码；\n\n可去官网下载好主题之后点 文件>偏好设置>打开主题文件夹将解压好的主题相关文件复制粘贴到该目录下（一般是一个  主题名称文件夹 和一个 主题名称.css文件）之后重启编辑器 然后点 主题可看见安装好的主题。\n\n","source":"_posts/blog-origin.md","raw":"---\ntitle: 博客搭建新司机指南\ndate: 2019-04-22 15:17:24\ntags: tool\n---\n\n作者：muggle\n\n## 准备工作\n\n### 安装hexo并创建一个博客项目\n\n在安装hexo之前请确保安装了git 和node.js\n\n打开cmd，输入\n\n```js\nnpm install -g hexo-cli\n```\n\n<!--more-->\n\n创建一个名为blog的博客项目\n\n```\n$ hexo init blog\n$ cd blog\n$ npm install\n```\n\n新建完成后，指定文件夹的目录如下：\n\n```xml\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n\n### 配置\n\n可以在 `_config.yml` 中修改大部分的配置。配置参数说明：\n\n| 参数          | 描述                                                         |\n| :------------ | :----------------------------------------------------------- |\n| `title`       | 网站标题                                                     |\n| `subtitle`    | 网站副标题                                                   |\n| `description` | 网站描述                                                     |\n| `author`      | 您的名字                                                     |\n| `language`    | 网站使用的语言                                               |\n| `timezone`    | 网站时区。Hexo 默认使用您电脑的时区。[时区列表](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)。比如说：`America/New_York`, `Japan`, 和 `UTC` 。 |\n\n## 撸博客\n\n### 新建文章并查看效果\n\n在项目文件夹下打开cmd 执行\n\n```java\nhexo new \"test\"\n```\n\ntest 为你的文件名，在source文件下的_posts 文件夹里有一个test.md；用markdown编辑器打开，就能写博客辣。\n\n在这个md文件头部有一个`title`的属性，就是你的博客名，还可以在该头部配置日期等属性，这个文件最上方以 `---` 分隔的区域叫Front-matter。以下是一些预先定义的参数，您可在模板中使用这些参数值并加以利用。\n\n| 参数         | 描述                 | 默认值       |\n| :----------- | :------------------- | :----------- |\n| `layout`     | 布局                 |              |\n| `title`      | 标题                 |              |\n| `date`       | 建立日期             | 文件建立日期 |\n| `updated`    | 更新日期             | 文件更新日期 |\n| `comments`   | 开启文章的评论功能   | true         |\n| `tags`       | 标签（不适用于分页） |              |\n| `categories` | 分类（不适用于分页） |              |\n| `permalink`  | 覆盖文章网址         |              |\n\n写完文章保存后，在原来打开的命令窗口 运行\n\n```java\nhexo g\n```\n\n这个指令是构建静态页面，它会在项目下生成一个public文件夹，里面就是我们`hexo g`得到博客静态页面，运行\n\n```java\nhexo s\n```\n\n将代码部署到本地，访问http://localhost:4000/可以查看你的博客效果\n\n### 上传\n\n博客上传之前需要在github上建立一个仓库，仓库名称要为`用户名.github.io`，因为我们博客就算基于gitpages来搭建的，所以我们要按照github的要求来命名。\n\n创建成功之后，修改 hexo 的 `_config.yml` 文件，配置 GitHub 地址，如下：\n\n```java\ndeploy:  \n\ttype: git  \n\trepo: 仓库地址  \n\tbranch: master\n```\n\n配置完成运行\n\n```java\nhexo d \n```\n\n完成部署，这个时候可以访问 `用户名.github.io`这个网址来查看自己的博客\n\n### hexo命令一览\n\n```\n$ hexo init [folder]\n```\n\n新建一个网站。如果没有设置 `folder` ，Hexo 默认在目前的文件夹建立网站。\n\n**new**\n\n```\n$ hexo new [layout] <title>\n```\n\n新建一篇文章。如果没有设置 `layout` 的话，默认使用 [_config.yml](https://hexo.io/zh-cn/docs/configuration) 中的 `default_layout` 参数代替。如果标题包含空格的话，请使用引号括起来。\n\n```\n$ hexo new \"post title with whitespace\"\n```\n\n**generate**\n\n```\n$ hexo generate\n```\n\n生成静态文件。\n\n| 选项             | 描述                   |\n| :--------------- | :--------------------- |\n| `-d`, `--deploy` | 文件生成后立即部署网站 |\n| `-w`, `--watch`  | 监视文件变动           |\n\n该命令可以简写为\n\n```\n$ hexo g\n```\n\n**publish**\n\n```\n$ hexo publish [layout] <filename>\n```\n\n发表草稿。\n\n**server**\n\n```\n$ hexo server\n```\n\n启动服务器。默认情况下，访问网址为： `http://localhost:4000/`。\n\n| 选项             | 描述                           |\n| :--------------- | :----------------------------- |\n| `-p`, `--port`   | 重设端口                       |\n| `-s`, `--static` | 只使用静态文件                 |\n| `-l`, `--log`    | 启动日记记录，使用覆盖记录格式 |\n\n**deploy**\n\n```\n$ hexo deploy\n```\n\n部署网站。\n\n| 参数               | 描述                     |\n| :----------------- | :----------------------- |\n| `-g`, `--generate` | 部署之前预先生成静态文件 |\n\n该命令可以简写为：\n\n```\n$ hexo d\n```\n\n**render**\n\n```\n$ hexo render <file1> [file2] ...\n```\n\n渲染文件。\n\n| 参数             | 描述         |\n| :--------------- | :----------- |\n| `-o`, `--output` | 设置输出路径 |\n\n**migrate**\n\n```\n$ hexo migrate <type>\n```\n\n从其他博客系统 [迁移内容](https://hexo.io/zh-cn/docs/migration)。\n\n**clean**\n\n```\n$ hexo clean\n```\n\n清除缓存文件 (`db.json`) 和已生成的静态文件 (`public`)。\n\n在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。\n\n**list**\n\n```\n$ hexo list <type>\n```\n\n列出网站资料。\n\n**version**\n\n```\n$ hexo version\n```\n\n显示 Hexo 版本。\n\n**选项**\n\n**安全模式**\n\n```\n$ hexo --safe\n```\n\n在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。\n\n**调试模式**\n\n```\n$ hexo --debug\n```\n\n在终端中显示调试信息并记录到 `debug.log`。当您碰到问题时，可以尝试用调试模式重新执行一次，并 [提交调试信息到 GitHub](https://github.com/hexojs/hexo/issues/new)。\n\n**简洁模式**\n\n```\n$ hexo --silent\n```\n\n隐藏终端信息。\n\n**自定义配置文件的路径**\n\n```\n$ hexo --config custom.yml\n```\n\n自定义配置文件的路径，执行后将不再使用 `_config.yml`。\n\n**显示草稿**\n\n```\n$ hexo --draft\n```\n\n显示 `source/_drafts` 文件夹中的草稿文章。\n\n**自定义 CWD**\n\n```\n$ hexo --cwd /path/to/cwd\n```\n\n自定义当前工作目录（Current working directory）的路径。\n\n## 进阶\n\n### 换主题\n\n下载主题到`./themes`目录下，修改 hexo 的 _config.yml 文件的theme属性为你的主题名就ok了，下面推荐几个hexo主题\n\n- [hexo-theme-next](<https://github.com/iissnan/hexo-theme-next>)\n- [hexo-theme-yilia](https://link.zhihu.com/?target=https%3A//github.com/litten/hexo-theme-yilia)\n- [uno](https://link.zhihu.com/?target=https%3A//github.com/daleanthony/uno)\n- [hexo-theme-strict](https://link.zhihu.com/?target=https%3A//github.com/17/hexo-theme-strict)\n\n### 换域名\n\n首先申请一个域名，然后在博客所在目录下的 source 目录中，创建一个 CNAME 文件，文件内容就是你的域名，然后执行 `hexo d` 命令将这个文件上传到 GitHub就可以了；域名换好后需要配置域名解析。\n\n## 附\n\n### markdown 语法一览\n\n```java\n# 这是一级标题\n## 这是二级标题\n### 这是三级标题\n#### 这是四级标题\n##### 这是五级标题\n###### 这是六级标题\n**这是加粗的文字**\n*这是倾斜的文字*\n***这是斜体加粗的文字***\n~~ 这是加删除线的文字~~\n> 这是引用的内容\n三个或者三个以上的 - 或者 *为分割线\n![图片alt](图片地址 ''图片title'')\n[超链接名](超链接地址 \"超链接title\")\n    \n- 列表内容\n+ 列表内容\n* 列表内容\n注意：- + * 跟内容之间都要有一个空格\n\n1.列表内容\n2.列表内容\n3.列表内容\n\n注意：序号跟内容之间要有空格\n\n表头|表头|表头\n---|:--:|---:\n内容|内容|内容\n内容|内容|内容\n`代码内容`\n​```\n代码内容\n​```\n```\n\n\n\n### markdown文档编辑器Typora\n\n百度Typora 下载安装好之后点 文件>偏好设置>勾选自动保存，这样就不怕忘记保存而文档丢失了；\n\n快捷键：\n- 标题：ctrl+数字\n- 表格：ctrl+t\n- 生成目录：[TOC]按回车\n- 选中一整行：ctrl+l\n- 选中单词：ctrl+d\n- 选中相同格式的文字：ctrl+e\n- 跳转到文章开头：ctrl+home\n- 跳转到文章结尾：ctrl+end\n- 搜索：ctrl+f\n- 替换：ctrl+h\n- 引用：输入>之后输入空格\n- 代码块：ctrl+alt+f\n- 加粗：ctrl+b\n- 倾斜：ctrl+i\n- 下划线：ctrl+u\n- 删除线：alt+shift+5\n- 插入图片：直接拖动到指定位置即可或者ctrl+shift+i\n- 插入链接：ctrl + k\n\n左下角有一个 O 和 </>的符号 O表示打开侧边栏 </>查看文档源代码；\n\n可去官网下载好主题之后点 文件>偏好设置>打开主题文件夹将解压好的主题相关文件复制粘贴到该目录下（一般是一个  主题名称文件夹 和一个 主题名称.css文件）之后重启编辑器 然后点 主题可看见安装好的主题。\n\n","slug":"blog-origin","published":1,"updated":"2019-04-26T08:51:09.011Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxt8002nvovmwo21yzkw","content":"<p>作者：muggle</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装hexo并创建一个博客项目\"><a href=\"#安装hexo并创建一个博客项目\" class=\"headerlink\" title=\"安装hexo并创建一个博客项目\"></a>安装hexo并创建一个博客项目</h3><p>在安装hexo之前请确保安装了git 和node.js</p>\n<p>打开cmd，输入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>创建一个名为blog的博客项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init blog</span><br><span class=\"line\">$ cd blog</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p>新建完成后，指定文件夹的目录如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>可以在 <code>_config.yml</code> 中修改大部分的配置。配置参数说明：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>title</code></td>\n<td style=\"text-align:left\">网站标题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>subtitle</code></td>\n<td style=\"text-align:left\">网站副标题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>description</code></td>\n<td style=\"text-align:left\">网站描述</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>author</code></td>\n<td style=\"text-align:left\">您的名字</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>language</code></td>\n<td style=\"text-align:left\">网站使用的语言</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>timezone</code></td>\n<td style=\"text-align:left\">网站时区。Hexo 默认使用您电脑的时区。<a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"_blank\" rel=\"noopener\">时区列表</a>。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"撸博客\"><a href=\"#撸博客\" class=\"headerlink\" title=\"撸博客\"></a>撸博客</h2><h3 id=\"新建文章并查看效果\"><a href=\"#新建文章并查看效果\" class=\"headerlink\" title=\"新建文章并查看效果\"></a>新建文章并查看效果</h3><p>在项目文件夹下打开cmd 执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">\"test\"</span></span><br></pre></td></tr></table></figure>\n<p>test 为你的文件名，在source文件下的_posts 文件夹里有一个test.md；用markdown编辑器打开，就能写博客辣。</p>\n<p>在这个md文件头部有一个<code>title</code>的属性，就是你的博客名，还可以在该头部配置日期等属性，这个文件最上方以 <code>---</code> 分隔的区域叫Front-matter。以下是一些预先定义的参数，您可在模板中使用这些参数值并加以利用。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>layout</code></td>\n<td style=\"text-align:left\">布局</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>title</code></td>\n<td style=\"text-align:left\">标题</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>date</code></td>\n<td style=\"text-align:left\">建立日期</td>\n<td style=\"text-align:left\">文件建立日期</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>updated</code></td>\n<td style=\"text-align:left\">更新日期</td>\n<td style=\"text-align:left\">文件更新日期</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>comments</code></td>\n<td style=\"text-align:left\">开启文章的评论功能</td>\n<td style=\"text-align:left\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>tags</code></td>\n<td style=\"text-align:left\">标签（不适用于分页）</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>categories</code></td>\n<td style=\"text-align:left\">分类（不适用于分页）</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>permalink</code></td>\n<td style=\"text-align:left\">覆盖文章网址</td>\n</tr>\n</tbody>\n</table>\n<p>写完文章保存后，在原来打开的命令窗口 运行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n<p>这个指令是构建静态页面，它会在项目下生成一个public文件夹，里面就是我们<code>hexo g</code>得到博客静态页面，运行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>将代码部署到本地，访问<a href=\"http://localhost:4000/可以查看你的博客效果\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/可以查看你的博客效果</a></p>\n<h3 id=\"上传\"><a href=\"#上传\" class=\"headerlink\" title=\"上传\"></a>上传</h3><p>博客上传之前需要在github上建立一个仓库，仓库名称要为<code>用户名.github.io</code>，因为我们博客就算基于gitpages来搭建的，所以我们要按照github的要求来命名。</p>\n<p>创建成功之后，修改 hexo 的 <code>_config.yml</code> 文件，配置 GitHub 地址，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:  </span><br><span class=\"line\">\ttype: git  </span><br><span class=\"line\">\trepo: 仓库地址  </span><br><span class=\"line\">\tbranch: master</span><br></pre></td></tr></table></figure>\n<p>配置完成运行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>完成部署，这个时候可以访问 <code>用户名.github.io</code>这个网址来查看自己的博客</p>\n<h3 id=\"hexo命令一览\"><a href=\"#hexo命令一览\" class=\"headerlink\" title=\"hexo命令一览\"></a>hexo命令一览</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init [folder]</span><br></pre></td></tr></table></figure>\n<p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>\n<p><strong>new</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href=\"https://hexo.io/zh-cn/docs/configuration\" target=\"_blank\" rel=\"noopener\">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new &quot;post title with whitespace&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>generate</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>生成静态文件。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>-d</code>, <code>--deploy</code></td>\n<td style=\"text-align:left\">文件生成后立即部署网站</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-w</code>, <code>--watch</code></td>\n<td style=\"text-align:left\">监视文件变动</td>\n</tr>\n</tbody>\n</table>\n<p>该命令可以简写为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br></pre></td></tr></table></figure>\n<p><strong>publish</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n<p>发表草稿。</p>\n<p><strong>server</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>-p</code>, <code>--port</code></td>\n<td style=\"text-align:left\">重设端口</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-s</code>, <code>--static</code></td>\n<td style=\"text-align:left\">只使用静态文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-l</code>, <code>--log</code></td>\n<td style=\"text-align:left\">启动日记记录，使用覆盖记录格式</td>\n</tr>\n</tbody>\n</table>\n<p><strong>deploy</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>部署网站。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>-g</code>, <code>--generate</code></td>\n<td style=\"text-align:left\">部署之前预先生成静态文件</td>\n</tr>\n</tbody>\n</table>\n<p>该命令可以简写为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n<p><strong>render</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>\n<p>渲染文件。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>-o</code>, <code>--output</code></td>\n<td style=\"text-align:left\">设置输出路径</td>\n</tr>\n</tbody>\n</table>\n<p><strong>migrate</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo migrate &lt;type&gt;</span><br></pre></td></tr></table></figure>\n<p>从其他博客系统 <a href=\"https://hexo.io/zh-cn/docs/migration\" target=\"_blank\" rel=\"noopener\">迁移内容</a>。</p>\n<p><strong>clean</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>\n<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>\n<p><strong>list</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure>\n<p>列出网站资料。</p>\n<p><strong>version</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo version</span><br></pre></td></tr></table></figure>\n<p>显示 Hexo 版本。</p>\n<p><strong>选项</strong></p>\n<p><strong>安全模式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --safe</span><br></pre></td></tr></table></figure>\n<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>\n<p><strong>调试模式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --debug</span><br></pre></td></tr></table></figure>\n<p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href=\"https://github.com/hexojs/hexo/issues/new\" target=\"_blank\" rel=\"noopener\">提交调试信息到 GitHub</a>。</p>\n<p><strong>简洁模式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --silent</span><br></pre></td></tr></table></figure>\n<p>隐藏终端信息。</p>\n<p><strong>自定义配置文件的路径</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --config custom.yml</span><br></pre></td></tr></table></figure>\n<p>自定义配置文件的路径，执行后将不再使用 <code>_config.yml</code>。</p>\n<p><strong>显示草稿</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --draft</span><br></pre></td></tr></table></figure>\n<p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p>\n<p><strong>自定义 CWD</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --cwd /path/to/cwd</span><br></pre></td></tr></table></figure>\n<p>自定义当前工作目录（Current working directory）的路径。</p>\n<h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2><h3 id=\"换主题\"><a href=\"#换主题\" class=\"headerlink\" title=\"换主题\"></a>换主题</h3><p>下载主题到<code>./themes</code>目录下，修改 hexo 的 _config.yml 文件的theme属性为你的主题名就ok了，下面推荐几个hexo主题</p>\n<ul>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">hexo-theme-next</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"noopener\">hexo-theme-yilia</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/daleanthony/uno\" target=\"_blank\" rel=\"noopener\">uno</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/17/hexo-theme-strict\" target=\"_blank\" rel=\"noopener\">hexo-theme-strict</a></li>\n</ul>\n<h3 id=\"换域名\"><a href=\"#换域名\" class=\"headerlink\" title=\"换域名\"></a>换域名</h3><p>首先申请一个域名，然后在博客所在目录下的 source 目录中，创建一个 CNAME 文件，文件内容就是你的域名，然后执行 <code>hexo d</code> 命令将这个文件上传到 GitHub就可以了；域名换好后需要配置域名解析。</p>\n<h2 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h2><h3 id=\"markdown-语法一览\"><a href=\"#markdown-语法一览\" class=\"headerlink\" title=\"markdown 语法一览\"></a>markdown 语法一览</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这是一级标题</span><br><span class=\"line\">## 这是二级标题</span><br><span class=\"line\">### 这是三级标题</span><br><span class=\"line\">#### 这是四级标题</span><br><span class=\"line\">##### 这是五级标题</span><br><span class=\"line\">###### 这是六级标题</span><br><span class=\"line\">**这是加粗的文字**</span><br><span class=\"line\">*这是倾斜的文字*</span><br><span class=\"line\">***这是斜体加粗的文字***</span><br><span class=\"line\">~~ 这是加删除线的文字~~</span><br><span class=\"line\">&gt; 这是引用的内容</span><br><span class=\"line\">三个或者三个以上的 - 或者 *为分割线</span><br><span class=\"line\">![图片alt](图片地址 <span class=\"string\">''</span>图片title<span class=\"string\">''</span>)</span><br><span class=\"line\">[超链接名](超链接地址 <span class=\"string\">\"超链接title\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">- 列表内容</span><br><span class=\"line\">+ 列表内容</span><br><span class=\"line\">* 列表内容</span><br><span class=\"line\">注意：- + * 跟内容之间都要有一个空格</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>.列表内容</span><br><span class=\"line\"><span class=\"number\">2</span>.列表内容</span><br><span class=\"line\"><span class=\"number\">3</span>.列表内容</span><br><span class=\"line\"></span><br><span class=\"line\">注意：序号跟内容之间要有空格</span><br><span class=\"line\"></span><br><span class=\"line\">表头|表头|表头</span><br><span class=\"line\">---|:--:|---:</span><br><span class=\"line\">内容|内容|内容</span><br><span class=\"line\">内容|内容|内容</span><br><span class=\"line\">`代码内容`</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure>\n<p>代码内容<br>​<code></code></p>\n<h3 id=\"markdown文档编辑器Typora\"><a href=\"#markdown文档编辑器Typora\" class=\"headerlink\" title=\"markdown文档编辑器Typora\"></a>markdown文档编辑器Typora</h3><p>百度Typora 下载安装好之后点 文件&gt;偏好设置&gt;勾选自动保存，这样就不怕忘记保存而文档丢失了；</p>\n<p>快捷键：</p>\n<ul>\n<li>标题：ctrl+数字</li>\n<li>表格：ctrl+t</li>\n<li>生成目录：[TOC]按回车</li>\n<li>选中一整行：ctrl+l</li>\n<li>选中单词：ctrl+d</li>\n<li>选中相同格式的文字：ctrl+e</li>\n<li>跳转到文章开头：ctrl+home</li>\n<li>跳转到文章结尾：ctrl+end</li>\n<li>搜索：ctrl+f</li>\n<li>替换：ctrl+h</li>\n<li>引用：输入&gt;之后输入空格</li>\n<li>代码块：ctrl+alt+f</li>\n<li>加粗：ctrl+b</li>\n<li>倾斜：ctrl+i</li>\n<li>下划线：ctrl+u</li>\n<li>删除线：alt+shift+5</li>\n<li>插入图片：直接拖动到指定位置即可或者ctrl+shift+i</li>\n<li>插入链接：ctrl + k</li>\n</ul>\n<p>左下角有一个 O 和 &lt;/&gt;的符号 O表示打开侧边栏 &lt;/&gt;查看文档源代码；</p>\n<p>可去官网下载好主题之后点 文件&gt;偏好设置&gt;打开主题文件夹将解压好的主题相关文件复制粘贴到该目录下（一般是一个  主题名称文件夹 和一个 主题名称.css文件）之后重启编辑器 然后点 主题可看见安装好的主题。</p>\n","site":{"data":{}},"excerpt":"<p>作者：muggle</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装hexo并创建一个博客项目\"><a href=\"#安装hexo并创建一个博客项目\" class=\"headerlink\" title=\"安装hexo并创建一个博客项目\"></a>安装hexo并创建一个博客项目</h3><p>在安装hexo之前请确保安装了git 和node.js</p>\n<p>打开cmd，输入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>","more":"<p>创建一个名为blog的博客项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init blog</span><br><span class=\"line\">$ cd blog</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p>新建完成后，指定文件夹的目录如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>可以在 <code>_config.yml</code> 中修改大部分的配置。配置参数说明：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>title</code></td>\n<td style=\"text-align:left\">网站标题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>subtitle</code></td>\n<td style=\"text-align:left\">网站副标题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>description</code></td>\n<td style=\"text-align:left\">网站描述</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>author</code></td>\n<td style=\"text-align:left\">您的名字</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>language</code></td>\n<td style=\"text-align:left\">网站使用的语言</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>timezone</code></td>\n<td style=\"text-align:left\">网站时区。Hexo 默认使用您电脑的时区。<a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"_blank\" rel=\"noopener\">时区列表</a>。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"撸博客\"><a href=\"#撸博客\" class=\"headerlink\" title=\"撸博客\"></a>撸博客</h2><h3 id=\"新建文章并查看效果\"><a href=\"#新建文章并查看效果\" class=\"headerlink\" title=\"新建文章并查看效果\"></a>新建文章并查看效果</h3><p>在项目文件夹下打开cmd 执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">\"test\"</span></span><br></pre></td></tr></table></figure>\n<p>test 为你的文件名，在source文件下的_posts 文件夹里有一个test.md；用markdown编辑器打开，就能写博客辣。</p>\n<p>在这个md文件头部有一个<code>title</code>的属性，就是你的博客名，还可以在该头部配置日期等属性，这个文件最上方以 <code>---</code> 分隔的区域叫Front-matter。以下是一些预先定义的参数，您可在模板中使用这些参数值并加以利用。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>layout</code></td>\n<td style=\"text-align:left\">布局</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>title</code></td>\n<td style=\"text-align:left\">标题</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>date</code></td>\n<td style=\"text-align:left\">建立日期</td>\n<td style=\"text-align:left\">文件建立日期</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>updated</code></td>\n<td style=\"text-align:left\">更新日期</td>\n<td style=\"text-align:left\">文件更新日期</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>comments</code></td>\n<td style=\"text-align:left\">开启文章的评论功能</td>\n<td style=\"text-align:left\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>tags</code></td>\n<td style=\"text-align:left\">标签（不适用于分页）</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>categories</code></td>\n<td style=\"text-align:left\">分类（不适用于分页）</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>permalink</code></td>\n<td style=\"text-align:left\">覆盖文章网址</td>\n</tr>\n</tbody>\n</table>\n<p>写完文章保存后，在原来打开的命令窗口 运行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n<p>这个指令是构建静态页面，它会在项目下生成一个public文件夹，里面就是我们<code>hexo g</code>得到博客静态页面，运行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>将代码部署到本地，访问<a href=\"http://localhost:4000/可以查看你的博客效果\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/可以查看你的博客效果</a></p>\n<h3 id=\"上传\"><a href=\"#上传\" class=\"headerlink\" title=\"上传\"></a>上传</h3><p>博客上传之前需要在github上建立一个仓库，仓库名称要为<code>用户名.github.io</code>，因为我们博客就算基于gitpages来搭建的，所以我们要按照github的要求来命名。</p>\n<p>创建成功之后，修改 hexo 的 <code>_config.yml</code> 文件，配置 GitHub 地址，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:  </span><br><span class=\"line\">\ttype: git  </span><br><span class=\"line\">\trepo: 仓库地址  </span><br><span class=\"line\">\tbranch: master</span><br></pre></td></tr></table></figure>\n<p>配置完成运行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>完成部署，这个时候可以访问 <code>用户名.github.io</code>这个网址来查看自己的博客</p>\n<h3 id=\"hexo命令一览\"><a href=\"#hexo命令一览\" class=\"headerlink\" title=\"hexo命令一览\"></a>hexo命令一览</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init [folder]</span><br></pre></td></tr></table></figure>\n<p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>\n<p><strong>new</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href=\"https://hexo.io/zh-cn/docs/configuration\" target=\"_blank\" rel=\"noopener\">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new &quot;post title with whitespace&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>generate</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>生成静态文件。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>-d</code>, <code>--deploy</code></td>\n<td style=\"text-align:left\">文件生成后立即部署网站</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-w</code>, <code>--watch</code></td>\n<td style=\"text-align:left\">监视文件变动</td>\n</tr>\n</tbody>\n</table>\n<p>该命令可以简写为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br></pre></td></tr></table></figure>\n<p><strong>publish</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n<p>发表草稿。</p>\n<p><strong>server</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>-p</code>, <code>--port</code></td>\n<td style=\"text-align:left\">重设端口</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-s</code>, <code>--static</code></td>\n<td style=\"text-align:left\">只使用静态文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-l</code>, <code>--log</code></td>\n<td style=\"text-align:left\">启动日记记录，使用覆盖记录格式</td>\n</tr>\n</tbody>\n</table>\n<p><strong>deploy</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>部署网站。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>-g</code>, <code>--generate</code></td>\n<td style=\"text-align:left\">部署之前预先生成静态文件</td>\n</tr>\n</tbody>\n</table>\n<p>该命令可以简写为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n<p><strong>render</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>\n<p>渲染文件。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>-o</code>, <code>--output</code></td>\n<td style=\"text-align:left\">设置输出路径</td>\n</tr>\n</tbody>\n</table>\n<p><strong>migrate</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo migrate &lt;type&gt;</span><br></pre></td></tr></table></figure>\n<p>从其他博客系统 <a href=\"https://hexo.io/zh-cn/docs/migration\" target=\"_blank\" rel=\"noopener\">迁移内容</a>。</p>\n<p><strong>clean</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>\n<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>\n<p><strong>list</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure>\n<p>列出网站资料。</p>\n<p><strong>version</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo version</span><br></pre></td></tr></table></figure>\n<p>显示 Hexo 版本。</p>\n<p><strong>选项</strong></p>\n<p><strong>安全模式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --safe</span><br></pre></td></tr></table></figure>\n<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>\n<p><strong>调试模式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --debug</span><br></pre></td></tr></table></figure>\n<p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href=\"https://github.com/hexojs/hexo/issues/new\" target=\"_blank\" rel=\"noopener\">提交调试信息到 GitHub</a>。</p>\n<p><strong>简洁模式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --silent</span><br></pre></td></tr></table></figure>\n<p>隐藏终端信息。</p>\n<p><strong>自定义配置文件的路径</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --config custom.yml</span><br></pre></td></tr></table></figure>\n<p>自定义配置文件的路径，执行后将不再使用 <code>_config.yml</code>。</p>\n<p><strong>显示草稿</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --draft</span><br></pre></td></tr></table></figure>\n<p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p>\n<p><strong>自定义 CWD</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --cwd /path/to/cwd</span><br></pre></td></tr></table></figure>\n<p>自定义当前工作目录（Current working directory）的路径。</p>\n<h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2><h3 id=\"换主题\"><a href=\"#换主题\" class=\"headerlink\" title=\"换主题\"></a>换主题</h3><p>下载主题到<code>./themes</code>目录下，修改 hexo 的 _config.yml 文件的theme属性为你的主题名就ok了，下面推荐几个hexo主题</p>\n<ul>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">hexo-theme-next</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"noopener\">hexo-theme-yilia</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/daleanthony/uno\" target=\"_blank\" rel=\"noopener\">uno</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/17/hexo-theme-strict\" target=\"_blank\" rel=\"noopener\">hexo-theme-strict</a></li>\n</ul>\n<h3 id=\"换域名\"><a href=\"#换域名\" class=\"headerlink\" title=\"换域名\"></a>换域名</h3><p>首先申请一个域名，然后在博客所在目录下的 source 目录中，创建一个 CNAME 文件，文件内容就是你的域名，然后执行 <code>hexo d</code> 命令将这个文件上传到 GitHub就可以了；域名换好后需要配置域名解析。</p>\n<h2 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h2><h3 id=\"markdown-语法一览\"><a href=\"#markdown-语法一览\" class=\"headerlink\" title=\"markdown 语法一览\"></a>markdown 语法一览</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这是一级标题</span><br><span class=\"line\">## 这是二级标题</span><br><span class=\"line\">### 这是三级标题</span><br><span class=\"line\">#### 这是四级标题</span><br><span class=\"line\">##### 这是五级标题</span><br><span class=\"line\">###### 这是六级标题</span><br><span class=\"line\">**这是加粗的文字**</span><br><span class=\"line\">*这是倾斜的文字*</span><br><span class=\"line\">***这是斜体加粗的文字***</span><br><span class=\"line\">~~ 这是加删除线的文字~~</span><br><span class=\"line\">&gt; 这是引用的内容</span><br><span class=\"line\">三个或者三个以上的 - 或者 *为分割线</span><br><span class=\"line\">![图片alt](图片地址 <span class=\"string\">''</span>图片title<span class=\"string\">''</span>)</span><br><span class=\"line\">[超链接名](超链接地址 <span class=\"string\">\"超链接title\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">- 列表内容</span><br><span class=\"line\">+ 列表内容</span><br><span class=\"line\">* 列表内容</span><br><span class=\"line\">注意：- + * 跟内容之间都要有一个空格</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>.列表内容</span><br><span class=\"line\"><span class=\"number\">2</span>.列表内容</span><br><span class=\"line\"><span class=\"number\">3</span>.列表内容</span><br><span class=\"line\"></span><br><span class=\"line\">注意：序号跟内容之间要有空格</span><br><span class=\"line\"></span><br><span class=\"line\">表头|表头|表头</span><br><span class=\"line\">---|:--:|---:</span><br><span class=\"line\">内容|内容|内容</span><br><span class=\"line\">内容|内容|内容</span><br><span class=\"line\">`代码内容`</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure>\n<p>代码内容<br>​<code></code></p>\n<h3 id=\"markdown文档编辑器Typora\"><a href=\"#markdown文档编辑器Typora\" class=\"headerlink\" title=\"markdown文档编辑器Typora\"></a>markdown文档编辑器Typora</h3><p>百度Typora 下载安装好之后点 文件&gt;偏好设置&gt;勾选自动保存，这样就不怕忘记保存而文档丢失了；</p>\n<p>快捷键：</p>\n<ul>\n<li>标题：ctrl+数字</li>\n<li>表格：ctrl+t</li>\n<li>生成目录：[TOC]按回车</li>\n<li>选中一整行：ctrl+l</li>\n<li>选中单词：ctrl+d</li>\n<li>选中相同格式的文字：ctrl+e</li>\n<li>跳转到文章开头：ctrl+home</li>\n<li>跳转到文章结尾：ctrl+end</li>\n<li>搜索：ctrl+f</li>\n<li>替换：ctrl+h</li>\n<li>引用：输入&gt;之后输入空格</li>\n<li>代码块：ctrl+alt+f</li>\n<li>加粗：ctrl+b</li>\n<li>倾斜：ctrl+i</li>\n<li>下划线：ctrl+u</li>\n<li>删除线：alt+shift+5</li>\n<li>插入图片：直接拖动到指定位置即可或者ctrl+shift+i</li>\n<li>插入链接：ctrl + k</li>\n</ul>\n<p>左下角有一个 O 和 &lt;/&gt;的符号 O表示打开侧边栏 &lt;/&gt;查看文档源代码；</p>\n<p>可去官网下载好主题之后点 文件&gt;偏好设置&gt;打开主题文件夹将解压好的主题相关文件复制粘贴到该目录下（一般是一个  主题名称文件夹 和一个 主题名称.css文件）之后重启编辑器 然后点 主题可看见安装好的主题。</p>"},{"title":"gradle+idea 快速上手","date":"2019-05-15T09:29:58.000Z","_content":"\n## gradle介绍\n\nGradle是一个构建工具，定位和maven一样，用于管理项目依赖和构建项目。和maven比起来的优势是：语法更灵活，更方便管理项目（个人很讨厌XML）。\n\ngradle具有以下特点：\n\n- 按约定声明构建和建设；\n- 强大的支持多工程的构建；\n- 强大的依赖管理（基于Apache Ivy），提供最大的便利去构建工程；\n- 全力支持已有的 Maven 或者Ivy仓库基础建设；\n- 支持传递性依赖管理； \t\n- 基于groovy脚本构建，groovy简单易学； \t\n- 具有广泛的领域模型支持构建； \n- 易迁移； \n- 自由和开放源码；\n\n<!--more-->\n\n可以说是maven有得gradle也有，maven没有的gradle也有。gradle在windows下安装也很简单，和maven一样：\n\n1. 从[gradle官网](<https://gradle.org/releases/>) 下载安装包并解压\n2. 将解压的文件夹路径配置到环境变量，先添加一个`GRADLE_HOME` 然后在path下添加 `%GRADLE_HOME%\\bin`\n3. cmd跑 `gradle -v` 查看配置是否成功\n4. [gradle 用户手册](<https://docs.gradle.org/current/userguide/userguide.html>) 方便平时查询相关操作\n\n## gradle的基本使用\n\nidea中已经集成gradle环境，你可以使用idea来构建gradle项目也可以通过命令行来使用gradle。在idea中 file-> setting ->搜索框输入gradle可查看gradle相关配置。\n\n### 使用gradle新建项目\n\n新建普通项目：\n![new_normal.png](https://upload-images.jianshu.io/upload_images/13612520-7aec3520435c32c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n新建springboot项目：\n\n在如下图界面时选择`Gradle Project`即可 \n\n![springboot.png](https://upload-images.jianshu.io/upload_images/13612520-cd7434a02af3bd86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### gradle项目结构及配置文件说明\n\n使用idea创建的gradle项目如图：\n![dir.png](https://upload-images.jianshu.io/upload_images/13612520-681237c249232a34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\nsrc结构和maven无异，不再介绍；gradle文件夹 存放gradle wrapper相关文件；build.gradle相当于maven里面的pom.xml，setting.gradle用于多模块的配置。\n\ngradle wrapper是gradle项目构建工具，它能在本地没有gradle的情况下，从远程下载gradle并自动解压缩以构建项目，自动管理gradle版本。`gradle-wrapper.properties`是gradle wrapper的配置，`distributionUrl`指定本地没有配置gradle的情况下从哪下载gradle，`distributionBase`指定gradle下载和缓存jar的根目录，默认用户目录。在实际使用中我们一般不直接使用gradle，而是使用gradle wrapper,而对于idea而言我们可以不去关心两者区别，idea的gradle环境是基于gradle wrapper的\n\nbuild.gradle结构\n\n```groovy\nplugins {\n    id 'java'\n}\ngroup 'com.muggle'\nversion '1.0-SNAPSHOT'\nsourceCompatibility = 1.8\nrepositories {\n    // mavenCentral()\n    maven { url \"http://maven.aliyun.com/nexus/content/groups/public/\" }\n}\ndependencies {\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n\n```\n\n节点说明\n\n- sourceCompatibility：指定编译.java文件的jdk版本\n- plugins：插件配置；格式为`id «plugin id» version «plugin version» [apply «false»]` Gradle的核心插件只需提供id的简称就可以\n- repositories：仓库配置，`mavenCentral()`代表中央仓库，你也可以用`maven{url  ‘<url>’}`的方式添加一个仓库\n- dependencies：依赖的坐标集合\n\n### dependencies说明\n\n在idea中，你复制好maven的xml格式依赖 直接粘贴到`dependencies`节点里面它会自动调整成`compile 'groupId :artifactId:version' `而不需要我们手动去改（但似乎有个时候不管用）。\n\n在gradle中，项目依赖的格式为`作用范修饰符 'groupId:artifactId:version'`，作用范围修饰符包括\n\n1. complie：编译范围依赖在所有的 classpath 中可用，同时它们也会被打包，这个是最常用的\n2. runtime：runtime 依赖在运行和测试系统的时候需要，但在编译的时候不需要。\n3. testComplie：测试期编译需要的附加依赖\n4. testRuntime：测试运行期需要\n\n### gradle打包\n![build.png](https://upload-images.jianshu.io/upload_images/13612520-d99c0ddc3495634b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n和在idea中使用maven一样，点击右侧gradle标签可看到上图相关gradle的操作，build对应的是`./gradlew build`命令；右键运行build会生成一个build文件夹 class文件和jar包都在里面。\n\n## groovy 语言简单学习\n\nGroovy 和java有很大程度上相似，学习成本低，只是为了更好使用gradle 简单学习Groovy \n\n在idea中打开groovy console 点击 tool->groovy console 打开\n\n![groovy.png](https://upload-images.jianshu.io/upload_images/13612520-3d8398f4cdb5af0b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n写第一个程序\n\n```groovy\n// 这是一行注释\nprintln (\"test\")\n// 简写\nprintln \"ssssss\"\n```\n\nctrl+enter 执行代码\n\nlist map的应用\n\n```groovy\n// 定义变量 相当于var 弱类型\ndef i=15\nprintln(i)\ndef s =\"nihao\"\nprintln s\n// 集合定义\ndef list=['s','a']\n// 添加元素\nlist << 'c'\n// 取出 元素\nprintln list.get(0)\nprintln list.get(0)\n// map\ndef map=['key':'value']\nprintln map.get('key')\n// 添\nmap.test='add'\nprintln map.get('test')\n```\n\n闭包的语法\n\n```groovy\n// 闭包 相当于函数式编程\ndef close1={\n    println \"你好\"\n}\n// 方法定义\ndef test(Closure closure){\n    closure()\n}\n//使用闭包\ntest(close1)\n// 带参闭包\ndef  close2={\n    v-> println v+v+v\n}\ndef test2(Closure closure){\n    closure(\"sss\")\n}\n//使用带参闭包\ntest2(close2)\n// 占位符\ndef close3={\n    v->\n        println(\"test $v \")\n}\ntest2(close3)\n```\n\n## gradle 实践\n\n### 多模块\n\n在idea中构建多模块很简单，和maven操作一样，但项目结构有所不同。在父模块中有一个`settings.gradle`文件，指定了子模块包含哪些，而需要继承给子模块的东西需要在父模块`build.gradle`中配置`subprojects`闭包。\n\n父模块`build.gradle` 示例\n\n\n\n```groovy\n\nplugins {\n    id 'java'\n}\ngroup 'com.muggle'\nversion '1.0-SNAPSHOT'\nsourceCompatibility = 1.8\nrepositories {\n    mavenCentral()\n}\nsubprojects {\n    apply plugin: 'java'\n    apply plugin: 'idea'\n\n    version = '1.0'\n    // JVM 版本号要求\n    sourceCompatibility = 1.8\n    targetCompatibility = 1.8\n    // java编译的时候缺省状态下会因为中文字符而失败\n    [compileJava,compileTestJava,javadoc]*.options*.encoding = 'UTF-8'\n    //相当于maven的properties\n    ext {\n        springVersion = '4.3.3.RELEASE'\n    }\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        // 通用依赖\n        compile(\n                \"org.springframework:spring-context:$springVersion\",\n                \"org.springframework:spring-orm:$springVersion\",\n        )\n        // 依赖maven中不存在的jar\n        ext.jarTree = fileTree(dir: 'libs', include: '**/*.jar')\n        // 测试依赖\n        testCompile(\n                \"org.springframework:spring-test:$springVersion\",\n                \"junit:junit:4.12\"\n        )\n    }\n    // 显示当前项目下所有用于 compile 的 jar.\n    task listJars(description: 'Display all compile jars.') << {\n        configurations.compile.each { File file -> println file.name }\n    }\n}\n```\n\n子模块模块之间相互依赖方式：\n\n```groovy\ndependencies{  \n    // 这个子模块 依赖 test 模块\n    compile project(\":test\")  \n}  \n```\n\n如果项目需要达成war包 添加插件`apply plugin: 'war'`。\n\n### task\n\ntask是gradle中的任务，包括任务动作(task action)和任务依赖(task dependency)。task代表细分的下来的构建任务：编译classes、生成jar包相关信息等一些任务。所以我们能编写task来控制打包过程。task和task之间也存在依赖关系，通过`task dependency`来指定。\n\n其实build指令本质就是执行各个task，在做protobuf开发的开发的时候我就可以通过配置task来在指定指定位置生成对应的java代码。\n\ntask 示例代码\n\n```java\ntask first {\n    doLast {\n        println \">>>>>>>>>>>>>>\"\n    }\n}\n```\n右击idea右侧gradle中的first执行task\n\n\t\t\t\t![demo.png](https://upload-images.jianshu.io/upload_images/13612520-25ae17571ab12d27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n控制台输出：\n```java\n\n> Task :first\n>>>>>>>>>>>>>>\n\n```\n\n\n\n## 总结\n\ngradle相较maven来说更灵活，但现在市场占有率最大的还是maven，gradle在安卓开发的领域使用比较多。看过spring源码的就知道，spring就是用gradle来管理的。读完本篇博客后我希望你能顺畅的使用gradle构建一个普通的java项目、一个springboot项目、一个多模块项目。感谢阅读。","source":"_posts/gradle.md","raw":"---\ntitle: gradle+idea 快速上手\ndate: 2019-05-15 17:29:58\ntags: tool\n---\n\n## gradle介绍\n\nGradle是一个构建工具，定位和maven一样，用于管理项目依赖和构建项目。和maven比起来的优势是：语法更灵活，更方便管理项目（个人很讨厌XML）。\n\ngradle具有以下特点：\n\n- 按约定声明构建和建设；\n- 强大的支持多工程的构建；\n- 强大的依赖管理（基于Apache Ivy），提供最大的便利去构建工程；\n- 全力支持已有的 Maven 或者Ivy仓库基础建设；\n- 支持传递性依赖管理； \t\n- 基于groovy脚本构建，groovy简单易学； \t\n- 具有广泛的领域模型支持构建； \n- 易迁移； \n- 自由和开放源码；\n\n<!--more-->\n\n可以说是maven有得gradle也有，maven没有的gradle也有。gradle在windows下安装也很简单，和maven一样：\n\n1. 从[gradle官网](<https://gradle.org/releases/>) 下载安装包并解压\n2. 将解压的文件夹路径配置到环境变量，先添加一个`GRADLE_HOME` 然后在path下添加 `%GRADLE_HOME%\\bin`\n3. cmd跑 `gradle -v` 查看配置是否成功\n4. [gradle 用户手册](<https://docs.gradle.org/current/userguide/userguide.html>) 方便平时查询相关操作\n\n## gradle的基本使用\n\nidea中已经集成gradle环境，你可以使用idea来构建gradle项目也可以通过命令行来使用gradle。在idea中 file-> setting ->搜索框输入gradle可查看gradle相关配置。\n\n### 使用gradle新建项目\n\n新建普通项目：\n![new_normal.png](https://upload-images.jianshu.io/upload_images/13612520-7aec3520435c32c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n新建springboot项目：\n\n在如下图界面时选择`Gradle Project`即可 \n\n![springboot.png](https://upload-images.jianshu.io/upload_images/13612520-cd7434a02af3bd86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### gradle项目结构及配置文件说明\n\n使用idea创建的gradle项目如图：\n![dir.png](https://upload-images.jianshu.io/upload_images/13612520-681237c249232a34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\nsrc结构和maven无异，不再介绍；gradle文件夹 存放gradle wrapper相关文件；build.gradle相当于maven里面的pom.xml，setting.gradle用于多模块的配置。\n\ngradle wrapper是gradle项目构建工具，它能在本地没有gradle的情况下，从远程下载gradle并自动解压缩以构建项目，自动管理gradle版本。`gradle-wrapper.properties`是gradle wrapper的配置，`distributionUrl`指定本地没有配置gradle的情况下从哪下载gradle，`distributionBase`指定gradle下载和缓存jar的根目录，默认用户目录。在实际使用中我们一般不直接使用gradle，而是使用gradle wrapper,而对于idea而言我们可以不去关心两者区别，idea的gradle环境是基于gradle wrapper的\n\nbuild.gradle结构\n\n```groovy\nplugins {\n    id 'java'\n}\ngroup 'com.muggle'\nversion '1.0-SNAPSHOT'\nsourceCompatibility = 1.8\nrepositories {\n    // mavenCentral()\n    maven { url \"http://maven.aliyun.com/nexus/content/groups/public/\" }\n}\ndependencies {\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n\n```\n\n节点说明\n\n- sourceCompatibility：指定编译.java文件的jdk版本\n- plugins：插件配置；格式为`id «plugin id» version «plugin version» [apply «false»]` Gradle的核心插件只需提供id的简称就可以\n- repositories：仓库配置，`mavenCentral()`代表中央仓库，你也可以用`maven{url  ‘<url>’}`的方式添加一个仓库\n- dependencies：依赖的坐标集合\n\n### dependencies说明\n\n在idea中，你复制好maven的xml格式依赖 直接粘贴到`dependencies`节点里面它会自动调整成`compile 'groupId :artifactId:version' `而不需要我们手动去改（但似乎有个时候不管用）。\n\n在gradle中，项目依赖的格式为`作用范修饰符 'groupId:artifactId:version'`，作用范围修饰符包括\n\n1. complie：编译范围依赖在所有的 classpath 中可用，同时它们也会被打包，这个是最常用的\n2. runtime：runtime 依赖在运行和测试系统的时候需要，但在编译的时候不需要。\n3. testComplie：测试期编译需要的附加依赖\n4. testRuntime：测试运行期需要\n\n### gradle打包\n![build.png](https://upload-images.jianshu.io/upload_images/13612520-d99c0ddc3495634b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n和在idea中使用maven一样，点击右侧gradle标签可看到上图相关gradle的操作，build对应的是`./gradlew build`命令；右键运行build会生成一个build文件夹 class文件和jar包都在里面。\n\n## groovy 语言简单学习\n\nGroovy 和java有很大程度上相似，学习成本低，只是为了更好使用gradle 简单学习Groovy \n\n在idea中打开groovy console 点击 tool->groovy console 打开\n\n![groovy.png](https://upload-images.jianshu.io/upload_images/13612520-3d8398f4cdb5af0b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n写第一个程序\n\n```groovy\n// 这是一行注释\nprintln (\"test\")\n// 简写\nprintln \"ssssss\"\n```\n\nctrl+enter 执行代码\n\nlist map的应用\n\n```groovy\n// 定义变量 相当于var 弱类型\ndef i=15\nprintln(i)\ndef s =\"nihao\"\nprintln s\n// 集合定义\ndef list=['s','a']\n// 添加元素\nlist << 'c'\n// 取出 元素\nprintln list.get(0)\nprintln list.get(0)\n// map\ndef map=['key':'value']\nprintln map.get('key')\n// 添\nmap.test='add'\nprintln map.get('test')\n```\n\n闭包的语法\n\n```groovy\n// 闭包 相当于函数式编程\ndef close1={\n    println \"你好\"\n}\n// 方法定义\ndef test(Closure closure){\n    closure()\n}\n//使用闭包\ntest(close1)\n// 带参闭包\ndef  close2={\n    v-> println v+v+v\n}\ndef test2(Closure closure){\n    closure(\"sss\")\n}\n//使用带参闭包\ntest2(close2)\n// 占位符\ndef close3={\n    v->\n        println(\"test $v \")\n}\ntest2(close3)\n```\n\n## gradle 实践\n\n### 多模块\n\n在idea中构建多模块很简单，和maven操作一样，但项目结构有所不同。在父模块中有一个`settings.gradle`文件，指定了子模块包含哪些，而需要继承给子模块的东西需要在父模块`build.gradle`中配置`subprojects`闭包。\n\n父模块`build.gradle` 示例\n\n\n\n```groovy\n\nplugins {\n    id 'java'\n}\ngroup 'com.muggle'\nversion '1.0-SNAPSHOT'\nsourceCompatibility = 1.8\nrepositories {\n    mavenCentral()\n}\nsubprojects {\n    apply plugin: 'java'\n    apply plugin: 'idea'\n\n    version = '1.0'\n    // JVM 版本号要求\n    sourceCompatibility = 1.8\n    targetCompatibility = 1.8\n    // java编译的时候缺省状态下会因为中文字符而失败\n    [compileJava,compileTestJava,javadoc]*.options*.encoding = 'UTF-8'\n    //相当于maven的properties\n    ext {\n        springVersion = '4.3.3.RELEASE'\n    }\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        // 通用依赖\n        compile(\n                \"org.springframework:spring-context:$springVersion\",\n                \"org.springframework:spring-orm:$springVersion\",\n        )\n        // 依赖maven中不存在的jar\n        ext.jarTree = fileTree(dir: 'libs', include: '**/*.jar')\n        // 测试依赖\n        testCompile(\n                \"org.springframework:spring-test:$springVersion\",\n                \"junit:junit:4.12\"\n        )\n    }\n    // 显示当前项目下所有用于 compile 的 jar.\n    task listJars(description: 'Display all compile jars.') << {\n        configurations.compile.each { File file -> println file.name }\n    }\n}\n```\n\n子模块模块之间相互依赖方式：\n\n```groovy\ndependencies{  \n    // 这个子模块 依赖 test 模块\n    compile project(\":test\")  \n}  \n```\n\n如果项目需要达成war包 添加插件`apply plugin: 'war'`。\n\n### task\n\ntask是gradle中的任务，包括任务动作(task action)和任务依赖(task dependency)。task代表细分的下来的构建任务：编译classes、生成jar包相关信息等一些任务。所以我们能编写task来控制打包过程。task和task之间也存在依赖关系，通过`task dependency`来指定。\n\n其实build指令本质就是执行各个task，在做protobuf开发的开发的时候我就可以通过配置task来在指定指定位置生成对应的java代码。\n\ntask 示例代码\n\n```java\ntask first {\n    doLast {\n        println \">>>>>>>>>>>>>>\"\n    }\n}\n```\n右击idea右侧gradle中的first执行task\n\n\t\t\t\t![demo.png](https://upload-images.jianshu.io/upload_images/13612520-25ae17571ab12d27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n控制台输出：\n```java\n\n> Task :first\n>>>>>>>>>>>>>>\n\n```\n\n\n\n## 总结\n\ngradle相较maven来说更灵活，但现在市场占有率最大的还是maven，gradle在安卓开发的领域使用比较多。看过spring源码的就知道，spring就是用gradle来管理的。读完本篇博客后我希望你能顺畅的使用gradle构建一个普通的java项目、一个springboot项目、一个多模块项目。感谢阅读。","slug":"gradle","published":1,"updated":"2019-05-15T07:50:26.969Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxt9002ovovmka1mm6ox","content":"<h2 id=\"gradle介绍\"><a href=\"#gradle介绍\" class=\"headerlink\" title=\"gradle介绍\"></a>gradle介绍</h2><p>Gradle是一个构建工具，定位和maven一样，用于管理项目依赖和构建项目。和maven比起来的优势是：语法更灵活，更方便管理项目（个人很讨厌XML）。</p>\n<p>gradle具有以下特点：</p>\n<ul>\n<li>按约定声明构建和建设；</li>\n<li>强大的支持多工程的构建；</li>\n<li>强大的依赖管理（基于Apache Ivy），提供最大的便利去构建工程；</li>\n<li>全力支持已有的 Maven 或者Ivy仓库基础建设；</li>\n<li>支持传递性依赖管理；     </li>\n<li>基于groovy脚本构建，groovy简单易学；     </li>\n<li>具有广泛的领域模型支持构建； </li>\n<li>易迁移； </li>\n<li>自由和开放源码；</li>\n</ul>\n<a id=\"more\"></a>\n<p>可以说是maven有得gradle也有，maven没有的gradle也有。gradle在windows下安装也很简单，和maven一样：</p>\n<ol>\n<li>从<a href=\"https://gradle.org/releases/\" target=\"_blank\" rel=\"noopener\">gradle官网</a> 下载安装包并解压</li>\n<li>将解压的文件夹路径配置到环境变量，先添加一个<code>GRADLE_HOME</code> 然后在path下添加 <code>%GRADLE_HOME%\\bin</code></li>\n<li>cmd跑 <code>gradle -v</code> 查看配置是否成功</li>\n<li><a href=\"https://docs.gradle.org/current/userguide/userguide.html\" target=\"_blank\" rel=\"noopener\">gradle 用户手册</a> 方便平时查询相关操作</li>\n</ol>\n<h2 id=\"gradle的基本使用\"><a href=\"#gradle的基本使用\" class=\"headerlink\" title=\"gradle的基本使用\"></a>gradle的基本使用</h2><p>idea中已经集成gradle环境，你可以使用idea来构建gradle项目也可以通过命令行来使用gradle。在idea中 file-&gt; setting -&gt;搜索框输入gradle可查看gradle相关配置。</p>\n<h3 id=\"使用gradle新建项目\"><a href=\"#使用gradle新建项目\" class=\"headerlink\" title=\"使用gradle新建项目\"></a>使用gradle新建项目</h3><p>新建普通项目：<br><img src=\"https://upload-images.jianshu.io/upload_images/13612520-7aec3520435c32c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"new_normal.png\"><br>新建springboot项目：</p>\n<p>在如下图界面时选择<code>Gradle Project</code>即可 </p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/13612520-cd7434a02af3bd86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"springboot.png\"></p>\n<h3 id=\"gradle项目结构及配置文件说明\"><a href=\"#gradle项目结构及配置文件说明\" class=\"headerlink\" title=\"gradle项目结构及配置文件说明\"></a>gradle项目结构及配置文件说明</h3><p>使用idea创建的gradle项目如图：<br><img src=\"https://upload-images.jianshu.io/upload_images/13612520-681237c249232a34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"dir.png\"></p>\n<p>src结构和maven无异，不再介绍；gradle文件夹 存放gradle wrapper相关文件；build.gradle相当于maven里面的pom.xml，setting.gradle用于多模块的配置。</p>\n<p>gradle wrapper是gradle项目构建工具，它能在本地没有gradle的情况下，从远程下载gradle并自动解压缩以构建项目，自动管理gradle版本。<code>gradle-wrapper.properties</code>是gradle wrapper的配置，<code>distributionUrl</code>指定本地没有配置gradle的情况下从哪下载gradle，<code>distributionBase</code>指定gradle下载和缓存jar的根目录，默认用户目录。在实际使用中我们一般不直接使用gradle，而是使用gradle wrapper,而对于idea而言我们可以不去关心两者区别，idea的gradle环境是基于gradle wrapper的</p>\n<p>build.gradle结构</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    id <span class=\"string\">'java'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">group <span class=\"string\">'com.muggle'</span></span><br><span class=\"line\">version <span class=\"string\">'1.0-SNAPSHOT'</span></span><br><span class=\"line\">sourceCompatibility = <span class=\"number\">1.8</span></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    <span class=\"comment\">// mavenCentral()</span></span><br><span class=\"line\">    maven &#123; url <span class=\"string\">\"http://maven.aliyun.com/nexus/content/groups/public/\"</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    testCompile <span class=\"string\">group:</span> <span class=\"string\">'junit'</span>, <span class=\"string\">name:</span> <span class=\"string\">'junit'</span>, <span class=\"string\">version:</span> <span class=\"string\">'4.12'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>节点说明</p>\n<ul>\n<li>sourceCompatibility：指定编译.java文件的jdk版本</li>\n<li>plugins：插件配置；格式为<code>id «plugin id» version «plugin version» [apply «false»]</code> Gradle的核心插件只需提供id的简称就可以</li>\n<li>repositories：仓库配置，<code>mavenCentral()</code>代表中央仓库，你也可以用<code>maven{url  ‘&lt;url&gt;’}</code>的方式添加一个仓库</li>\n<li>dependencies：依赖的坐标集合</li>\n</ul>\n<h3 id=\"dependencies说明\"><a href=\"#dependencies说明\" class=\"headerlink\" title=\"dependencies说明\"></a>dependencies说明</h3><p>在idea中，你复制好maven的xml格式依赖 直接粘贴到<code>dependencies</code>节点里面它会自动调整成<code>compile &#39;groupId :artifactId:version&#39;</code>而不需要我们手动去改（但似乎有个时候不管用）。</p>\n<p>在gradle中，项目依赖的格式为<code>作用范修饰符 &#39;groupId:artifactId:version&#39;</code>，作用范围修饰符包括</p>\n<ol>\n<li>complie：编译范围依赖在所有的 classpath 中可用，同时它们也会被打包，这个是最常用的</li>\n<li>runtime：runtime 依赖在运行和测试系统的时候需要，但在编译的时候不需要。</li>\n<li>testComplie：测试期编译需要的附加依赖</li>\n<li>testRuntime：测试运行期需要</li>\n</ol>\n<h3 id=\"gradle打包\"><a href=\"#gradle打包\" class=\"headerlink\" title=\"gradle打包\"></a>gradle打包</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/13612520-d99c0ddc3495634b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"build.png\"><br>和在idea中使用maven一样，点击右侧gradle标签可看到上图相关gradle的操作，build对应的是<code>./gradlew build</code>命令；右键运行build会生成一个build文件夹 class文件和jar包都在里面。</p>\n<h2 id=\"groovy-语言简单学习\"><a href=\"#groovy-语言简单学习\" class=\"headerlink\" title=\"groovy 语言简单学习\"></a>groovy 语言简单学习</h2><p>Groovy 和java有很大程度上相似，学习成本低，只是为了更好使用gradle 简单学习Groovy </p>\n<p>在idea中打开groovy console 点击 tool-&gt;groovy console 打开</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/13612520-3d8398f4cdb5af0b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"groovy.png\"></p>\n<p>写第一个程序</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是一行注释</span></span><br><span class=\"line\">println (<span class=\"string\">\"test\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 简写</span></span><br><span class=\"line\">println <span class=\"string\">\"ssssss\"</span></span><br></pre></td></tr></table></figure>\n<p>ctrl+enter 执行代码</p>\n<p>list map的应用</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义变量 相当于var 弱类型</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> i=<span class=\"number\">15</span></span><br><span class=\"line\">println(i)</span><br><span class=\"line\"><span class=\"keyword\">def</span> s =<span class=\"string\">\"nihao\"</span></span><br><span class=\"line\">println s</span><br><span class=\"line\"><span class=\"comment\">// 集合定义</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> list=[<span class=\"string\">'s'</span>,<span class=\"string\">'a'</span>]</span><br><span class=\"line\"><span class=\"comment\">// 添加元素</span></span><br><span class=\"line\">list &lt;&lt; <span class=\"string\">'c'</span></span><br><span class=\"line\"><span class=\"comment\">// 取出 元素</span></span><br><span class=\"line\">println list.get(<span class=\"number\">0</span>)</span><br><span class=\"line\">println list.get(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">// map</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> map=[<span class=\"string\">'key'</span>:<span class=\"string\">'value'</span>]</span><br><span class=\"line\">println map.get(<span class=\"string\">'key'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 添</span></span><br><span class=\"line\">map.test=<span class=\"string\">'add'</span></span><br><span class=\"line\">println map.get(<span class=\"string\">'test'</span>)</span><br></pre></td></tr></table></figure>\n<p>闭包的语法</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 闭包 相当于函数式编程</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> close1=&#123;</span><br><span class=\"line\">    println <span class=\"string\">\"你好\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 方法定义</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> test(Closure closure)&#123;</span><br><span class=\"line\">    closure()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用闭包</span></span><br><span class=\"line\">test(close1)</span><br><span class=\"line\"><span class=\"comment\">// 带参闭包</span></span><br><span class=\"line\"><span class=\"keyword\">def</span>  close2=&#123;</span><br><span class=\"line\">    v-&gt; println v+v+v</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">def</span> test2(Closure closure)&#123;</span><br><span class=\"line\">    closure(<span class=\"string\">\"sss\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用带参闭包</span></span><br><span class=\"line\">test2(close2)</span><br><span class=\"line\"><span class=\"comment\">// 占位符</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> close3=&#123;</span><br><span class=\"line\">    v-&gt;</span><br><span class=\"line\">        println(<span class=\"string\">\"test $v \"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test2(close3)</span><br></pre></td></tr></table></figure>\n<h2 id=\"gradle-实践\"><a href=\"#gradle-实践\" class=\"headerlink\" title=\"gradle 实践\"></a>gradle 实践</h2><h3 id=\"多模块\"><a href=\"#多模块\" class=\"headerlink\" title=\"多模块\"></a>多模块</h3><p>在idea中构建多模块很简单，和maven操作一样，但项目结构有所不同。在父模块中有一个<code>settings.gradle</code>文件，指定了子模块包含哪些，而需要继承给子模块的东西需要在父模块<code>build.gradle</code>中配置<code>subprojects</code>闭包。</p>\n<p>父模块<code>build.gradle</code> 示例</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    id <span class=\"string\">'java'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">group <span class=\"string\">'com.muggle'</span></span><br><span class=\"line\">version <span class=\"string\">'1.0-SNAPSHOT'</span></span><br><span class=\"line\">sourceCompatibility = <span class=\"number\">1.8</span></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">subprojects &#123;</span><br><span class=\"line\">    apply <span class=\"string\">plugin:</span> <span class=\"string\">'java'</span></span><br><span class=\"line\">    apply <span class=\"string\">plugin:</span> <span class=\"string\">'idea'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    version = <span class=\"string\">'1.0'</span></span><br><span class=\"line\">    <span class=\"comment\">// JVM 版本号要求</span></span><br><span class=\"line\">    sourceCompatibility = <span class=\"number\">1.8</span></span><br><span class=\"line\">    targetCompatibility = <span class=\"number\">1.8</span></span><br><span class=\"line\">    <span class=\"comment\">// java编译的时候缺省状态下会因为中文字符而失败</span></span><br><span class=\"line\">    [compileJava,compileTestJava,javadoc]*.options*.encoding = <span class=\"string\">'UTF-8'</span></span><br><span class=\"line\">    <span class=\"comment\">//相当于maven的properties</span></span><br><span class=\"line\">    ext &#123;</span><br><span class=\"line\">        springVersion = <span class=\"string\">'4.3.3.RELEASE'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        mavenCentral()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 通用依赖</span></span><br><span class=\"line\">        compile(</span><br><span class=\"line\">                <span class=\"string\">\"org.springframework:spring-context:$springVersion\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"org.springframework:spring-orm:$springVersion\"</span>,</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\">// 依赖maven中不存在的jar</span></span><br><span class=\"line\">        ext.jarTree = fileTree(<span class=\"string\">dir:</span> <span class=\"string\">'libs'</span>, <span class=\"string\">include:</span> <span class=\"string\">'**/*.jar'</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 测试依赖</span></span><br><span class=\"line\">        testCompile(</span><br><span class=\"line\">                <span class=\"string\">\"org.springframework:spring-test:$springVersion\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"junit:junit:4.12\"</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 显示当前项目下所有用于 compile 的 jar.</span></span><br><span class=\"line\">    task listJars(<span class=\"string\">description:</span> <span class=\"string\">'Display all compile jars.'</span>) &lt;&lt; &#123;</span><br><span class=\"line\">        configurations.compile.each &#123; File file -&gt; println file.name &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>子模块模块之间相互依赖方式：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies&#123;  </span><br><span class=\"line\">    <span class=\"comment\">// 这个子模块 依赖 test 模块</span></span><br><span class=\"line\">    compile project(<span class=\"string\">\":test\"</span>)  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果项目需要达成war包 添加插件<code>apply plugin: &#39;war&#39;</code>。</p>\n<h3 id=\"task\"><a href=\"#task\" class=\"headerlink\" title=\"task\"></a>task</h3><p>task是gradle中的任务，包括任务动作(task action)和任务依赖(task dependency)。task代表细分的下来的构建任务：编译classes、生成jar包相关信息等一些任务。所以我们能编写task来控制打包过程。task和task之间也存在依赖关系，通过<code>task dependency</code>来指定。</p>\n<p>其实build指令本质就是执行各个task，在做protobuf开发的开发的时候我就可以通过配置task来在指定指定位置生成对应的java代码。</p>\n<p>task 示例代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task first &#123;</span><br><span class=\"line\">    doLast &#123;</span><br><span class=\"line\">        println <span class=\"string\">\"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>右击idea右侧gradle中的first执行task</p>\n<pre><code>![demo.png](https://upload-images.jianshu.io/upload_images/13612520-25ae17571ab12d27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n</code></pre><p>控制台输出：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt; Task :first</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>gradle相较maven来说更灵活，但现在市场占有率最大的还是maven，gradle在安卓开发的领域使用比较多。看过spring源码的就知道，spring就是用gradle来管理的。读完本篇博客后我希望你能顺畅的使用gradle构建一个普通的java项目、一个springboot项目、一个多模块项目。感谢阅读。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"gradle介绍\"><a href=\"#gradle介绍\" class=\"headerlink\" title=\"gradle介绍\"></a>gradle介绍</h2><p>Gradle是一个构建工具，定位和maven一样，用于管理项目依赖和构建项目。和maven比起来的优势是：语法更灵活，更方便管理项目（个人很讨厌XML）。</p>\n<p>gradle具有以下特点：</p>\n<ul>\n<li>按约定声明构建和建设；</li>\n<li>强大的支持多工程的构建；</li>\n<li>强大的依赖管理（基于Apache Ivy），提供最大的便利去构建工程；</li>\n<li>全力支持已有的 Maven 或者Ivy仓库基础建设；</li>\n<li>支持传递性依赖管理；     </li>\n<li>基于groovy脚本构建，groovy简单易学；     </li>\n<li>具有广泛的领域模型支持构建； </li>\n<li>易迁移； </li>\n<li>自由和开放源码；</li>\n</ul>","more":"<p>可以说是maven有得gradle也有，maven没有的gradle也有。gradle在windows下安装也很简单，和maven一样：</p>\n<ol>\n<li>从<a href=\"https://gradle.org/releases/\" target=\"_blank\" rel=\"noopener\">gradle官网</a> 下载安装包并解压</li>\n<li>将解压的文件夹路径配置到环境变量，先添加一个<code>GRADLE_HOME</code> 然后在path下添加 <code>%GRADLE_HOME%\\bin</code></li>\n<li>cmd跑 <code>gradle -v</code> 查看配置是否成功</li>\n<li><a href=\"https://docs.gradle.org/current/userguide/userguide.html\" target=\"_blank\" rel=\"noopener\">gradle 用户手册</a> 方便平时查询相关操作</li>\n</ol>\n<h2 id=\"gradle的基本使用\"><a href=\"#gradle的基本使用\" class=\"headerlink\" title=\"gradle的基本使用\"></a>gradle的基本使用</h2><p>idea中已经集成gradle环境，你可以使用idea来构建gradle项目也可以通过命令行来使用gradle。在idea中 file-&gt; setting -&gt;搜索框输入gradle可查看gradle相关配置。</p>\n<h3 id=\"使用gradle新建项目\"><a href=\"#使用gradle新建项目\" class=\"headerlink\" title=\"使用gradle新建项目\"></a>使用gradle新建项目</h3><p>新建普通项目：<br><img src=\"https://upload-images.jianshu.io/upload_images/13612520-7aec3520435c32c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"new_normal.png\"><br>新建springboot项目：</p>\n<p>在如下图界面时选择<code>Gradle Project</code>即可 </p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/13612520-cd7434a02af3bd86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"springboot.png\"></p>\n<h3 id=\"gradle项目结构及配置文件说明\"><a href=\"#gradle项目结构及配置文件说明\" class=\"headerlink\" title=\"gradle项目结构及配置文件说明\"></a>gradle项目结构及配置文件说明</h3><p>使用idea创建的gradle项目如图：<br><img src=\"https://upload-images.jianshu.io/upload_images/13612520-681237c249232a34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"dir.png\"></p>\n<p>src结构和maven无异，不再介绍；gradle文件夹 存放gradle wrapper相关文件；build.gradle相当于maven里面的pom.xml，setting.gradle用于多模块的配置。</p>\n<p>gradle wrapper是gradle项目构建工具，它能在本地没有gradle的情况下，从远程下载gradle并自动解压缩以构建项目，自动管理gradle版本。<code>gradle-wrapper.properties</code>是gradle wrapper的配置，<code>distributionUrl</code>指定本地没有配置gradle的情况下从哪下载gradle，<code>distributionBase</code>指定gradle下载和缓存jar的根目录，默认用户目录。在实际使用中我们一般不直接使用gradle，而是使用gradle wrapper,而对于idea而言我们可以不去关心两者区别，idea的gradle环境是基于gradle wrapper的</p>\n<p>build.gradle结构</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    id <span class=\"string\">'java'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">group <span class=\"string\">'com.muggle'</span></span><br><span class=\"line\">version <span class=\"string\">'1.0-SNAPSHOT'</span></span><br><span class=\"line\">sourceCompatibility = <span class=\"number\">1.8</span></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    <span class=\"comment\">// mavenCentral()</span></span><br><span class=\"line\">    maven &#123; url <span class=\"string\">\"http://maven.aliyun.com/nexus/content/groups/public/\"</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    testCompile <span class=\"string\">group:</span> <span class=\"string\">'junit'</span>, <span class=\"string\">name:</span> <span class=\"string\">'junit'</span>, <span class=\"string\">version:</span> <span class=\"string\">'4.12'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>节点说明</p>\n<ul>\n<li>sourceCompatibility：指定编译.java文件的jdk版本</li>\n<li>plugins：插件配置；格式为<code>id «plugin id» version «plugin version» [apply «false»]</code> Gradle的核心插件只需提供id的简称就可以</li>\n<li>repositories：仓库配置，<code>mavenCentral()</code>代表中央仓库，你也可以用<code>maven{url  ‘&lt;url&gt;’}</code>的方式添加一个仓库</li>\n<li>dependencies：依赖的坐标集合</li>\n</ul>\n<h3 id=\"dependencies说明\"><a href=\"#dependencies说明\" class=\"headerlink\" title=\"dependencies说明\"></a>dependencies说明</h3><p>在idea中，你复制好maven的xml格式依赖 直接粘贴到<code>dependencies</code>节点里面它会自动调整成<code>compile &#39;groupId :artifactId:version&#39;</code>而不需要我们手动去改（但似乎有个时候不管用）。</p>\n<p>在gradle中，项目依赖的格式为<code>作用范修饰符 &#39;groupId:artifactId:version&#39;</code>，作用范围修饰符包括</p>\n<ol>\n<li>complie：编译范围依赖在所有的 classpath 中可用，同时它们也会被打包，这个是最常用的</li>\n<li>runtime：runtime 依赖在运行和测试系统的时候需要，但在编译的时候不需要。</li>\n<li>testComplie：测试期编译需要的附加依赖</li>\n<li>testRuntime：测试运行期需要</li>\n</ol>\n<h3 id=\"gradle打包\"><a href=\"#gradle打包\" class=\"headerlink\" title=\"gradle打包\"></a>gradle打包</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/13612520-d99c0ddc3495634b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"build.png\"><br>和在idea中使用maven一样，点击右侧gradle标签可看到上图相关gradle的操作，build对应的是<code>./gradlew build</code>命令；右键运行build会生成一个build文件夹 class文件和jar包都在里面。</p>\n<h2 id=\"groovy-语言简单学习\"><a href=\"#groovy-语言简单学习\" class=\"headerlink\" title=\"groovy 语言简单学习\"></a>groovy 语言简单学习</h2><p>Groovy 和java有很大程度上相似，学习成本低，只是为了更好使用gradle 简单学习Groovy </p>\n<p>在idea中打开groovy console 点击 tool-&gt;groovy console 打开</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/13612520-3d8398f4cdb5af0b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"groovy.png\"></p>\n<p>写第一个程序</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是一行注释</span></span><br><span class=\"line\">println (<span class=\"string\">\"test\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 简写</span></span><br><span class=\"line\">println <span class=\"string\">\"ssssss\"</span></span><br></pre></td></tr></table></figure>\n<p>ctrl+enter 执行代码</p>\n<p>list map的应用</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义变量 相当于var 弱类型</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> i=<span class=\"number\">15</span></span><br><span class=\"line\">println(i)</span><br><span class=\"line\"><span class=\"keyword\">def</span> s =<span class=\"string\">\"nihao\"</span></span><br><span class=\"line\">println s</span><br><span class=\"line\"><span class=\"comment\">// 集合定义</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> list=[<span class=\"string\">'s'</span>,<span class=\"string\">'a'</span>]</span><br><span class=\"line\"><span class=\"comment\">// 添加元素</span></span><br><span class=\"line\">list &lt;&lt; <span class=\"string\">'c'</span></span><br><span class=\"line\"><span class=\"comment\">// 取出 元素</span></span><br><span class=\"line\">println list.get(<span class=\"number\">0</span>)</span><br><span class=\"line\">println list.get(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">// map</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> map=[<span class=\"string\">'key'</span>:<span class=\"string\">'value'</span>]</span><br><span class=\"line\">println map.get(<span class=\"string\">'key'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 添</span></span><br><span class=\"line\">map.test=<span class=\"string\">'add'</span></span><br><span class=\"line\">println map.get(<span class=\"string\">'test'</span>)</span><br></pre></td></tr></table></figure>\n<p>闭包的语法</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 闭包 相当于函数式编程</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> close1=&#123;</span><br><span class=\"line\">    println <span class=\"string\">\"你好\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 方法定义</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> test(Closure closure)&#123;</span><br><span class=\"line\">    closure()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用闭包</span></span><br><span class=\"line\">test(close1)</span><br><span class=\"line\"><span class=\"comment\">// 带参闭包</span></span><br><span class=\"line\"><span class=\"keyword\">def</span>  close2=&#123;</span><br><span class=\"line\">    v-&gt; println v+v+v</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">def</span> test2(Closure closure)&#123;</span><br><span class=\"line\">    closure(<span class=\"string\">\"sss\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用带参闭包</span></span><br><span class=\"line\">test2(close2)</span><br><span class=\"line\"><span class=\"comment\">// 占位符</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> close3=&#123;</span><br><span class=\"line\">    v-&gt;</span><br><span class=\"line\">        println(<span class=\"string\">\"test $v \"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test2(close3)</span><br></pre></td></tr></table></figure>\n<h2 id=\"gradle-实践\"><a href=\"#gradle-实践\" class=\"headerlink\" title=\"gradle 实践\"></a>gradle 实践</h2><h3 id=\"多模块\"><a href=\"#多模块\" class=\"headerlink\" title=\"多模块\"></a>多模块</h3><p>在idea中构建多模块很简单，和maven操作一样，但项目结构有所不同。在父模块中有一个<code>settings.gradle</code>文件，指定了子模块包含哪些，而需要继承给子模块的东西需要在父模块<code>build.gradle</code>中配置<code>subprojects</code>闭包。</p>\n<p>父模块<code>build.gradle</code> 示例</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    id <span class=\"string\">'java'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">group <span class=\"string\">'com.muggle'</span></span><br><span class=\"line\">version <span class=\"string\">'1.0-SNAPSHOT'</span></span><br><span class=\"line\">sourceCompatibility = <span class=\"number\">1.8</span></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">subprojects &#123;</span><br><span class=\"line\">    apply <span class=\"string\">plugin:</span> <span class=\"string\">'java'</span></span><br><span class=\"line\">    apply <span class=\"string\">plugin:</span> <span class=\"string\">'idea'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    version = <span class=\"string\">'1.0'</span></span><br><span class=\"line\">    <span class=\"comment\">// JVM 版本号要求</span></span><br><span class=\"line\">    sourceCompatibility = <span class=\"number\">1.8</span></span><br><span class=\"line\">    targetCompatibility = <span class=\"number\">1.8</span></span><br><span class=\"line\">    <span class=\"comment\">// java编译的时候缺省状态下会因为中文字符而失败</span></span><br><span class=\"line\">    [compileJava,compileTestJava,javadoc]*.options*.encoding = <span class=\"string\">'UTF-8'</span></span><br><span class=\"line\">    <span class=\"comment\">//相当于maven的properties</span></span><br><span class=\"line\">    ext &#123;</span><br><span class=\"line\">        springVersion = <span class=\"string\">'4.3.3.RELEASE'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        mavenCentral()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 通用依赖</span></span><br><span class=\"line\">        compile(</span><br><span class=\"line\">                <span class=\"string\">\"org.springframework:spring-context:$springVersion\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"org.springframework:spring-orm:$springVersion\"</span>,</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\">// 依赖maven中不存在的jar</span></span><br><span class=\"line\">        ext.jarTree = fileTree(<span class=\"string\">dir:</span> <span class=\"string\">'libs'</span>, <span class=\"string\">include:</span> <span class=\"string\">'**/*.jar'</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 测试依赖</span></span><br><span class=\"line\">        testCompile(</span><br><span class=\"line\">                <span class=\"string\">\"org.springframework:spring-test:$springVersion\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"junit:junit:4.12\"</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 显示当前项目下所有用于 compile 的 jar.</span></span><br><span class=\"line\">    task listJars(<span class=\"string\">description:</span> <span class=\"string\">'Display all compile jars.'</span>) &lt;&lt; &#123;</span><br><span class=\"line\">        configurations.compile.each &#123; File file -&gt; println file.name &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>子模块模块之间相互依赖方式：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies&#123;  </span><br><span class=\"line\">    <span class=\"comment\">// 这个子模块 依赖 test 模块</span></span><br><span class=\"line\">    compile project(<span class=\"string\">\":test\"</span>)  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果项目需要达成war包 添加插件<code>apply plugin: &#39;war&#39;</code>。</p>\n<h3 id=\"task\"><a href=\"#task\" class=\"headerlink\" title=\"task\"></a>task</h3><p>task是gradle中的任务，包括任务动作(task action)和任务依赖(task dependency)。task代表细分的下来的构建任务：编译classes、生成jar包相关信息等一些任务。所以我们能编写task来控制打包过程。task和task之间也存在依赖关系，通过<code>task dependency</code>来指定。</p>\n<p>其实build指令本质就是执行各个task，在做protobuf开发的开发的时候我就可以通过配置task来在指定指定位置生成对应的java代码。</p>\n<p>task 示例代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task first &#123;</span><br><span class=\"line\">    doLast &#123;</span><br><span class=\"line\">        println <span class=\"string\">\"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>右击idea右侧gradle中的first执行task</p>\n<pre><code>![demo.png](https://upload-images.jianshu.io/upload_images/13612520-25ae17571ab12d27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n</code></pre><p>控制台输出：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt; Task :first</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>gradle相较maven来说更灵活，但现在市场占有率最大的还是maven，gradle在安卓开发的领域使用比较多。看过spring源码的就知道，spring就是用gradle来管理的。读完本篇博客后我希望你能顺畅的使用gradle构建一个普通的java项目、一个springboot项目、一个多模块项目。感谢阅读。</p>"},{"title":"服务注册发现与配置中心新选择——nacos","date":"2019-04-27T02:17:48.000Z","_content":"\n### 编辑中\n\n\n\n# nacos简介\n\n​\t在nacos-0.3的时候我就开始关注，期间还写过一篇作为springcloud配置中心的使用记录的博客。在前不久，nacos终于出了正式版，赶个时髦出篇博客吹一波，[nacos官方文档](https://nacos.io/zh-cn/index.html)\n\n<!--more-->\n\n## nacos特性\n\n###  服务发现和服务健康监测\n\n支持基于 DNS 和基于 RPC 的服务发现（**可替代eureka**）。Nacos 提供对服务的实时的健康检查，阻止向不健康的主机或服务实例发送请求。Nacos 支持传输层 (PING 或 TCP)和应用层 (如 HTTP、MySQL、用户自定义）的健康检查。 对于复杂的云环境和网络拓扑环境中（如 VPC、边缘网络等）服务的健康检查，Nacos 提供了 agent 上报模式和服务端主动检测2种健康检查模式。Nacos 还提供了统一的健康检查仪表盘，帮助您根据健康状态管理服务的可用性及流量。\n\n### 动态配置服务\n\n动态配置服务可以让您以中心化、外部化和动态化的方式管理所有环境的应用配置和服务配置（**可以作为配置中心**）。动态配置消除了配置变更时重新部署应用和服务的需要，让配置管理变得更加高效和敏捷。配置中心化管理让实现无状态服务变得更简单，让服务按需弹性扩展变得更容易。Nacos 提供了一个简洁易用的UI ([控制台样例 Demo](http://console.nacos.io/nacos/index.html)) 帮助您管理所有的服务和应用的配置。Nacos 还提供包括配置版本跟踪、金丝雀发布、一键回滚配置以及客户端配置更新状态跟踪在内的一系列开箱即用的配置管理特性，帮助您更安全地在生产环境中管理配置变更和降低配置变更带来的风险。\n\n### 动态 DNS 服务\n\n动态 DNS 服务支持权重路由，让您更容易地实现中间层负载均衡、更灵活的路由策略、流量控制以及数据中心内网的简单DNS解析服务（**可做负载均衡**）。动态DNS服务还能让您更容易地实现以 DNS 协议为基础的服务发现，以帮助您消除耦合到厂商私有服务发现 API 上的风险。\n\n### 服务及其元数据管理\n\nNacos 能让您从微服务平台建设的视角管理数据中心的所有服务及元数据，包括管理服务的描述、生命周期、服务的静态依赖分析、服务的健康状态、服务的流量管理、路由及安全策略、服务的 SLA 以及最首要的 metrics 统计数据（**不知道啥意思，以后研究**）。\n\n## nacos的相关概念\n\n- 地域 （Region）：物理的数据中心，资源创建成功后不能更换。\n- 可用区（Available Zone）：同一地域内，电力和网络互相独立的物理区域。同一可用区内，实例的网络延迟较低。\n- 接入点（Endpoint）：地域的某个服务的入口域名。\n- 命名空间（Namespace）：用于进行租户粒度的配置隔离。不同的命名空间下，可以存在相同的 Group 或 Data ID 的配置。Namespace 的常用场景之一是不同环境的配置的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等。\n- 元信息(Metadata)：Nacos数据（如配置和服务）描述信息，如服务版本、权重、容灾策略、负载均衡策略、鉴权配置、各种自定义标签 (label)，从作用范围来看，分为服务级别的元信息、集群的元信息及实例的元信息。\n- 实例（Instance）：提供一个或多个服务的具有可访问网络地址（IP:Port）的进程。\n- 权重（Weight）：实例级别的配置。权重为浮点数。权重越大，分配给该实例的流量越大。\n- 健康检测（Health Check）：以指定方式检查服务下挂载的实例 (Instance) 的健康度，从而确认该实例 (Instance) 是否能提供服务。根据检查结果，实例 (Instance) 会被判断为健康或不健康。对服务发起解析请求时，不健康的实例 (Instance) 不会返回给客户端。\n- 健康保护阈值（Protect Threshold）：为了防止因过多实例 (Instance) 不健康导致流量全部流向健康实例 (Instance) ，继而造成流量压力把健康 健康实例 (Instance) 压垮并形成雪崩效应，应将健康保护阈值定义为一个 0 到 1 之间的浮点数。当域名健康实例 (Instance) 占总服务实例 (Instance) 的比例小于该值时，无论实例 (Instance) 是否健康，都会将这个实例 (Instance) 返回给客户端。这样做虽然损失了一部分流量，但是保证了集群的剩余健康实例 (Instance) 能正常工作。\n- 服务分组（Service Group）：不同的服务可以归类到同一分组。\n- 虚拟集群（Virtual Cluster）：同一个服务下的所有服务实例组成一个默认集群, 集群可以被进一步按需求划分，划分的单位可以是虚拟集群。\n\n# nacos 使用\n\n## 安装\n\n可在github上下载安装包安装，或者采用docker安装；\n\nwindows上运行：[nacos github地址](<https://github.com/alibaba/nacos>) 在github查看该项目的releases并下载最新版，解压后进入bin目录 运行`startup.cmd`。\n\ndocker上运行：docker run --name nacos-standalone -e MODE=standalone -p 8848:8848 nacos/nacos-server:latest 可运行一个单机版nacos\n\n浏览器上访问 ip:8848/nacos 进入登陆界面，用户名和密码都是nacos；登陆成功就能看到控制台UI界面了。在安装包的./conf目录下有一个application.properties文件，这是nacos的配置文件，相关配置后期会说。\n\n## 作为配置中心\n\n### 示例\n\n这里为方便讲解，我们现在Windows环境下运行一个单机版nacos，启动后登陆；创建一个springboot应用，导入依赖\n\n```xml\n <dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-alibaba-nacos-config</artifactId>\n    <version>0.9.0.RELEASE</version>\n </dependency>\n```\n\n然后删除application.properties 新建一个bootstrap.properties。这里可能还有同学不知道application和bootstrap的区别；在这里科普一下：在 Spring Boot 中有两种上下文，一种是 bootstrap, 另外一种是 application, bootstrap 是应用程序的父上下文，也就是说 bootstrap 加载优先于 applicaton。bootstrap 主要用于从额外的资源来加载配置信息，还可以在本地外部配置文件中解密属性。这两个上下文共用一个环境，它是任何Spring应用程序的外部属性的来源。bootstrap 里面的属性会优先加载，它们默认也不能被本地相同配置覆盖。bootstrap比application要先加载，bootstrap只在cloud项目中使用。\n\n添加配置：\n\n```properties\n#服务名\nspring.application.name=nacos-config-example\n# 配置中心url\nspring.cloud.nacos.config.server-addr=127.0.0.1:8848\n# 配置中心的配置语法\nspring.cloud.nacos.config.file-extension=properties\n```\n\n现在在nacos配置中心新建配置：\n\ndataId:nacos-config-example.properties\n\n![1556523308515](C:\\Users\\isock\\AppData\\Roaming\\Typora\\typora-user-images\\1556523308515.png)\n\n启动项目，发现项目端口号是8082，我们的配置成功了。\n\n### 说明\n\n注意 图中几个选项 TEXT\\JSON\\ XML \\YAML\\ HTML\\Propertiest这些并不是指定nacos以何种语法去解析配置文件，仅仅是提供语法提示，代码高亮辅助样式；第一次使用的人很容易被误导。我们要指定配置文件语法要在bootstrap做如下配置：\n\n```properties\nspring.cloud.nacos.config.file-extension=properties\nspring.cloud.nacos.config.file-extension=yaml\n```\n\n配置中心配置依靠dataId将配置信息和客户端绑定，我们来看看dataId组成规则：\n\n```java\n${prefix}-${spring.profile.active}.${file-extension}\n```\n\n- `prefix` 默认为 `spring.application.name` 的值，也可以通过配置项 `spring.cloud.nacos.config.prefix`来配置。\n\n- `spring.profile.active` 即为当前环境对应的 profile， **注意：当 spring.profile.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 ${prefix}.${file-extension}**\n- `file-exetension` 为配置内容的数据格式，可以通过配置项 `spring.cloud.nacos.config.file-extension` 来配置。目前只支持 `properties` 和 `yaml` 类型。\n\n也就是说我们这个配置中心的dataId和我们平时用springboot命名配置文件只有一个prefix的区别\n\n现在我们来修改一下配置文件，bootstrap加一项：\n\n```properties\nspring.cloud.nacos.config.prefix=config-test\nspring.profiles.active=dev\n```\n\n配置中心弄两个配置方便比较，一个dataId是`config-test-dev.properties`，一个dataId是`config-test-prod.properties`配置端口号分别为8081和8082测试。启动项目后发现项目端口号为8081，然后修改配置重启：\n\n```properties\nspring.profiles.active=prod\n```\n\n此时端口变成了8082。用法和springboot的配置文件区别不大。\n\n### 命名空间和分组\n\n命名空间和分组相当于一个配置文件的\"年级和班次\"，在同一个group下，配置文件名不能重复，所以当需要创建文件名称相同的两个配置文件时，将两个配置文件创建在不同的group下即可。而namespace范围比group大，目的是一样的。\n\n定义命名空间方式如图\n\n![1556525537769](C:\\Users\\isock\\AppData\\Roaming\\Typora\\typora-user-images\\1556525537769.png)\n\n在bootstrap中对应配置\n\n```properties\nspring.cloud.nacos.config.namespace=命名空间ID\n```\n\n分组则在配置中心新建配置的时候可指定，在bootstrap中对应配置\n\n```properties\nspring.cloud.nacos.config.group=group\n```\n\n### 配置自动更新\n\n通过 Spring Cloud 原生注解 `@RefreshScope` 实现配置自动更新，示例：\n\n```java\n@Service\n@RefreshScope\npublic class ConfigController {\n\n    @Value(\"${config.test}\")\n    private String test;\n\tpublic void testStr(){\n        System.out.print(test)\n    }\n    \n}\n```\n\n当你在配置中心更新`config.test`的 客户端的test的值也会刷新，并且你还能在客户端看到值变更的相关日志。\n\n### 小结\n\n别的不说，这比spring cloud config好用太多了有木有，和apollo比起来配置太容易了有木有；这么好用的东西，出正式版了，等坑都排完了妥妥的神器有木有。我选nacos，你呢。\n\n## 作为注册中心\n\n### 介绍\n\n服务治理是微服务架构中最为核心和基础的模块。它主要用来实现各个微服务实例的自动化注册与发现。随着服务的越来越多，越来越杂，服务之间的调用会越来越复杂，越来越难以管理。而当某个服务发生了变化，或者由于压力性能问题，多部署了几台服务，怎么让服务的消费者知晓变化，就显得很重要了。不然就会存在调用的服务其实已经下线了，但调用者不知道等异常情况。这个时候有个服务组件去统一治理就相当重要了。注册中心便是做这个事情的，我们的服务上下线和发现服务都要依赖于注册中心。\n\nnacos注册中心有哪些特性呢？首先nacos从cap的角度来说，它能针对不同模式采用cp还是ap原则。然后它对服务发现的支持种类也有很多，比如：gRpc、Dubbo RpcService、Spring Cloud RESTful Service。并且ncos本身提供了很直观的注册中心管理界面。方便我们查看管理服务，其api也很丰富，我们完全可以在做二次开发去写一个我们自己满意的管理页面。Nacos 提供对服务的实时的健康检查，阻止向不健康的主机或服务实例发送请求。Nacos 支持传输层 (PING 或 TCP)和应用层 (如 HTTP、MySQL、用户自定义）的健康检查。\n\n### 示例\n\n新建一个springboot项目，添加如下依赖\n\n```xml\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n            <version>0.9.0.RELEASE</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter</artifactId>\n            <version>2.1.1.RELEASE</version>\n        </dependency>\n```\n\n在启动类上加上`@EnableDiscoveryClient`注解\n\n```java\n@SpringBootApplication\n@EnableDiscoveryClient\npublic class MytestApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(MytestApplication.class, args);\n    }\n\n}\n```\n\napplication添加配置\n\n```properties\n\nserver.port=8081\nspring.application.name=service-mytest\nspring.cloud.nacos.discovery.server-addr=127.0.0.1:8848\n```\n\n\n\n启动服务后，我们能看到nacos管理页面注册上了一个服务。点击查看详情：\n\n![1557666285270](C:\\Users\\isock\\AppData\\Roaming\\Typora\\typora-user-images\\1557666285270.png)\n\n列表上有一列是临时实例，临时实例通常使用AP一致性，因此如果发生网络分区，注册临时实例仍然有效。持久化实例使用CP一致性，这保证了数据的一致性。而持久化配置则是配置集群和数据库，本文不做介绍。后期搭建集群的时候我们在做测试。权重则是指调用服务时路由到该实例的优先系数，数字越大优先级越高，为0则不会使用该实例。\n\n# 总结\n\n我们能用nacos作为配置中心或者注册中心，其本身提供管理界面也很方便。nacos的使用企业也很多，下面放出一张github上nacos的使用企业截图：![1557667876620](C:\\Users\\isock\\AppData\\Roaming\\Typora\\typora-user-images\\1557667876620.png)\t\t\n\n官方文档还有提到nacos支持动态DNS，也就是说支持DNS的负载均衡，但本人没找到很好的资料，后续再做研究。关于nacos集群和持久化配置后续更新，感谢阅读。\n\n","source":"_posts/nacos.md","raw":"---\ntitle: 服务注册发现与配置中心新选择——nacos\ndate: 2019-04-27 10:17:48\ntags: cloud\n---\n\n### 编辑中\n\n\n\n# nacos简介\n\n​\t在nacos-0.3的时候我就开始关注，期间还写过一篇作为springcloud配置中心的使用记录的博客。在前不久，nacos终于出了正式版，赶个时髦出篇博客吹一波，[nacos官方文档](https://nacos.io/zh-cn/index.html)\n\n<!--more-->\n\n## nacos特性\n\n###  服务发现和服务健康监测\n\n支持基于 DNS 和基于 RPC 的服务发现（**可替代eureka**）。Nacos 提供对服务的实时的健康检查，阻止向不健康的主机或服务实例发送请求。Nacos 支持传输层 (PING 或 TCP)和应用层 (如 HTTP、MySQL、用户自定义）的健康检查。 对于复杂的云环境和网络拓扑环境中（如 VPC、边缘网络等）服务的健康检查，Nacos 提供了 agent 上报模式和服务端主动检测2种健康检查模式。Nacos 还提供了统一的健康检查仪表盘，帮助您根据健康状态管理服务的可用性及流量。\n\n### 动态配置服务\n\n动态配置服务可以让您以中心化、外部化和动态化的方式管理所有环境的应用配置和服务配置（**可以作为配置中心**）。动态配置消除了配置变更时重新部署应用和服务的需要，让配置管理变得更加高效和敏捷。配置中心化管理让实现无状态服务变得更简单，让服务按需弹性扩展变得更容易。Nacos 提供了一个简洁易用的UI ([控制台样例 Demo](http://console.nacos.io/nacos/index.html)) 帮助您管理所有的服务和应用的配置。Nacos 还提供包括配置版本跟踪、金丝雀发布、一键回滚配置以及客户端配置更新状态跟踪在内的一系列开箱即用的配置管理特性，帮助您更安全地在生产环境中管理配置变更和降低配置变更带来的风险。\n\n### 动态 DNS 服务\n\n动态 DNS 服务支持权重路由，让您更容易地实现中间层负载均衡、更灵活的路由策略、流量控制以及数据中心内网的简单DNS解析服务（**可做负载均衡**）。动态DNS服务还能让您更容易地实现以 DNS 协议为基础的服务发现，以帮助您消除耦合到厂商私有服务发现 API 上的风险。\n\n### 服务及其元数据管理\n\nNacos 能让您从微服务平台建设的视角管理数据中心的所有服务及元数据，包括管理服务的描述、生命周期、服务的静态依赖分析、服务的健康状态、服务的流量管理、路由及安全策略、服务的 SLA 以及最首要的 metrics 统计数据（**不知道啥意思，以后研究**）。\n\n## nacos的相关概念\n\n- 地域 （Region）：物理的数据中心，资源创建成功后不能更换。\n- 可用区（Available Zone）：同一地域内，电力和网络互相独立的物理区域。同一可用区内，实例的网络延迟较低。\n- 接入点（Endpoint）：地域的某个服务的入口域名。\n- 命名空间（Namespace）：用于进行租户粒度的配置隔离。不同的命名空间下，可以存在相同的 Group 或 Data ID 的配置。Namespace 的常用场景之一是不同环境的配置的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等。\n- 元信息(Metadata)：Nacos数据（如配置和服务）描述信息，如服务版本、权重、容灾策略、负载均衡策略、鉴权配置、各种自定义标签 (label)，从作用范围来看，分为服务级别的元信息、集群的元信息及实例的元信息。\n- 实例（Instance）：提供一个或多个服务的具有可访问网络地址（IP:Port）的进程。\n- 权重（Weight）：实例级别的配置。权重为浮点数。权重越大，分配给该实例的流量越大。\n- 健康检测（Health Check）：以指定方式检查服务下挂载的实例 (Instance) 的健康度，从而确认该实例 (Instance) 是否能提供服务。根据检查结果，实例 (Instance) 会被判断为健康或不健康。对服务发起解析请求时，不健康的实例 (Instance) 不会返回给客户端。\n- 健康保护阈值（Protect Threshold）：为了防止因过多实例 (Instance) 不健康导致流量全部流向健康实例 (Instance) ，继而造成流量压力把健康 健康实例 (Instance) 压垮并形成雪崩效应，应将健康保护阈值定义为一个 0 到 1 之间的浮点数。当域名健康实例 (Instance) 占总服务实例 (Instance) 的比例小于该值时，无论实例 (Instance) 是否健康，都会将这个实例 (Instance) 返回给客户端。这样做虽然损失了一部分流量，但是保证了集群的剩余健康实例 (Instance) 能正常工作。\n- 服务分组（Service Group）：不同的服务可以归类到同一分组。\n- 虚拟集群（Virtual Cluster）：同一个服务下的所有服务实例组成一个默认集群, 集群可以被进一步按需求划分，划分的单位可以是虚拟集群。\n\n# nacos 使用\n\n## 安装\n\n可在github上下载安装包安装，或者采用docker安装；\n\nwindows上运行：[nacos github地址](<https://github.com/alibaba/nacos>) 在github查看该项目的releases并下载最新版，解压后进入bin目录 运行`startup.cmd`。\n\ndocker上运行：docker run --name nacos-standalone -e MODE=standalone -p 8848:8848 nacos/nacos-server:latest 可运行一个单机版nacos\n\n浏览器上访问 ip:8848/nacos 进入登陆界面，用户名和密码都是nacos；登陆成功就能看到控制台UI界面了。在安装包的./conf目录下有一个application.properties文件，这是nacos的配置文件，相关配置后期会说。\n\n## 作为配置中心\n\n### 示例\n\n这里为方便讲解，我们现在Windows环境下运行一个单机版nacos，启动后登陆；创建一个springboot应用，导入依赖\n\n```xml\n <dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-alibaba-nacos-config</artifactId>\n    <version>0.9.0.RELEASE</version>\n </dependency>\n```\n\n然后删除application.properties 新建一个bootstrap.properties。这里可能还有同学不知道application和bootstrap的区别；在这里科普一下：在 Spring Boot 中有两种上下文，一种是 bootstrap, 另外一种是 application, bootstrap 是应用程序的父上下文，也就是说 bootstrap 加载优先于 applicaton。bootstrap 主要用于从额外的资源来加载配置信息，还可以在本地外部配置文件中解密属性。这两个上下文共用一个环境，它是任何Spring应用程序的外部属性的来源。bootstrap 里面的属性会优先加载，它们默认也不能被本地相同配置覆盖。bootstrap比application要先加载，bootstrap只在cloud项目中使用。\n\n添加配置：\n\n```properties\n#服务名\nspring.application.name=nacos-config-example\n# 配置中心url\nspring.cloud.nacos.config.server-addr=127.0.0.1:8848\n# 配置中心的配置语法\nspring.cloud.nacos.config.file-extension=properties\n```\n\n现在在nacos配置中心新建配置：\n\ndataId:nacos-config-example.properties\n\n![1556523308515](C:\\Users\\isock\\AppData\\Roaming\\Typora\\typora-user-images\\1556523308515.png)\n\n启动项目，发现项目端口号是8082，我们的配置成功了。\n\n### 说明\n\n注意 图中几个选项 TEXT\\JSON\\ XML \\YAML\\ HTML\\Propertiest这些并不是指定nacos以何种语法去解析配置文件，仅仅是提供语法提示，代码高亮辅助样式；第一次使用的人很容易被误导。我们要指定配置文件语法要在bootstrap做如下配置：\n\n```properties\nspring.cloud.nacos.config.file-extension=properties\nspring.cloud.nacos.config.file-extension=yaml\n```\n\n配置中心配置依靠dataId将配置信息和客户端绑定，我们来看看dataId组成规则：\n\n```java\n${prefix}-${spring.profile.active}.${file-extension}\n```\n\n- `prefix` 默认为 `spring.application.name` 的值，也可以通过配置项 `spring.cloud.nacos.config.prefix`来配置。\n\n- `spring.profile.active` 即为当前环境对应的 profile， **注意：当 spring.profile.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 ${prefix}.${file-extension}**\n- `file-exetension` 为配置内容的数据格式，可以通过配置项 `spring.cloud.nacos.config.file-extension` 来配置。目前只支持 `properties` 和 `yaml` 类型。\n\n也就是说我们这个配置中心的dataId和我们平时用springboot命名配置文件只有一个prefix的区别\n\n现在我们来修改一下配置文件，bootstrap加一项：\n\n```properties\nspring.cloud.nacos.config.prefix=config-test\nspring.profiles.active=dev\n```\n\n配置中心弄两个配置方便比较，一个dataId是`config-test-dev.properties`，一个dataId是`config-test-prod.properties`配置端口号分别为8081和8082测试。启动项目后发现项目端口号为8081，然后修改配置重启：\n\n```properties\nspring.profiles.active=prod\n```\n\n此时端口变成了8082。用法和springboot的配置文件区别不大。\n\n### 命名空间和分组\n\n命名空间和分组相当于一个配置文件的\"年级和班次\"，在同一个group下，配置文件名不能重复，所以当需要创建文件名称相同的两个配置文件时，将两个配置文件创建在不同的group下即可。而namespace范围比group大，目的是一样的。\n\n定义命名空间方式如图\n\n![1556525537769](C:\\Users\\isock\\AppData\\Roaming\\Typora\\typora-user-images\\1556525537769.png)\n\n在bootstrap中对应配置\n\n```properties\nspring.cloud.nacos.config.namespace=命名空间ID\n```\n\n分组则在配置中心新建配置的时候可指定，在bootstrap中对应配置\n\n```properties\nspring.cloud.nacos.config.group=group\n```\n\n### 配置自动更新\n\n通过 Spring Cloud 原生注解 `@RefreshScope` 实现配置自动更新，示例：\n\n```java\n@Service\n@RefreshScope\npublic class ConfigController {\n\n    @Value(\"${config.test}\")\n    private String test;\n\tpublic void testStr(){\n        System.out.print(test)\n    }\n    \n}\n```\n\n当你在配置中心更新`config.test`的 客户端的test的值也会刷新，并且你还能在客户端看到值变更的相关日志。\n\n### 小结\n\n别的不说，这比spring cloud config好用太多了有木有，和apollo比起来配置太容易了有木有；这么好用的东西，出正式版了，等坑都排完了妥妥的神器有木有。我选nacos，你呢。\n\n## 作为注册中心\n\n### 介绍\n\n服务治理是微服务架构中最为核心和基础的模块。它主要用来实现各个微服务实例的自动化注册与发现。随着服务的越来越多，越来越杂，服务之间的调用会越来越复杂，越来越难以管理。而当某个服务发生了变化，或者由于压力性能问题，多部署了几台服务，怎么让服务的消费者知晓变化，就显得很重要了。不然就会存在调用的服务其实已经下线了，但调用者不知道等异常情况。这个时候有个服务组件去统一治理就相当重要了。注册中心便是做这个事情的，我们的服务上下线和发现服务都要依赖于注册中心。\n\nnacos注册中心有哪些特性呢？首先nacos从cap的角度来说，它能针对不同模式采用cp还是ap原则。然后它对服务发现的支持种类也有很多，比如：gRpc、Dubbo RpcService、Spring Cloud RESTful Service。并且ncos本身提供了很直观的注册中心管理界面。方便我们查看管理服务，其api也很丰富，我们完全可以在做二次开发去写一个我们自己满意的管理页面。Nacos 提供对服务的实时的健康检查，阻止向不健康的主机或服务实例发送请求。Nacos 支持传输层 (PING 或 TCP)和应用层 (如 HTTP、MySQL、用户自定义）的健康检查。\n\n### 示例\n\n新建一个springboot项目，添加如下依赖\n\n```xml\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n            <version>0.9.0.RELEASE</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter</artifactId>\n            <version>2.1.1.RELEASE</version>\n        </dependency>\n```\n\n在启动类上加上`@EnableDiscoveryClient`注解\n\n```java\n@SpringBootApplication\n@EnableDiscoveryClient\npublic class MytestApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(MytestApplication.class, args);\n    }\n\n}\n```\n\napplication添加配置\n\n```properties\n\nserver.port=8081\nspring.application.name=service-mytest\nspring.cloud.nacos.discovery.server-addr=127.0.0.1:8848\n```\n\n\n\n启动服务后，我们能看到nacos管理页面注册上了一个服务。点击查看详情：\n\n![1557666285270](C:\\Users\\isock\\AppData\\Roaming\\Typora\\typora-user-images\\1557666285270.png)\n\n列表上有一列是临时实例，临时实例通常使用AP一致性，因此如果发生网络分区，注册临时实例仍然有效。持久化实例使用CP一致性，这保证了数据的一致性。而持久化配置则是配置集群和数据库，本文不做介绍。后期搭建集群的时候我们在做测试。权重则是指调用服务时路由到该实例的优先系数，数字越大优先级越高，为0则不会使用该实例。\n\n# 总结\n\n我们能用nacos作为配置中心或者注册中心，其本身提供管理界面也很方便。nacos的使用企业也很多，下面放出一张github上nacos的使用企业截图：![1557667876620](C:\\Users\\isock\\AppData\\Roaming\\Typora\\typora-user-images\\1557667876620.png)\t\t\n\n官方文档还有提到nacos支持动态DNS，也就是说支持DNS的负载均衡，但本人没找到很好的资料，后续再做研究。关于nacos集群和持久化配置后续更新，感谢阅读。\n\n","slug":"nacos","published":1,"updated":"2019-05-12T13:43:26.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxta002qvovm23yaa6tg","content":"<h3 id=\"编辑中\"><a href=\"#编辑中\" class=\"headerlink\" title=\"编辑中\"></a>编辑中</h3><h1 id=\"nacos简介\"><a href=\"#nacos简介\" class=\"headerlink\" title=\"nacos简介\"></a>nacos简介</h1><p>​    在nacos-0.3的时候我就开始关注，期间还写过一篇作为springcloud配置中心的使用记录的博客。在前不久，nacos终于出了正式版，赶个时髦出篇博客吹一波，<a href=\"https://nacos.io/zh-cn/index.html\" target=\"_blank\" rel=\"noopener\">nacos官方文档</a></p>\n<a id=\"more\"></a>\n<h2 id=\"nacos特性\"><a href=\"#nacos特性\" class=\"headerlink\" title=\"nacos特性\"></a>nacos特性</h2><h3 id=\"服务发现和服务健康监测\"><a href=\"#服务发现和服务健康监测\" class=\"headerlink\" title=\"服务发现和服务健康监测\"></a>服务发现和服务健康监测</h3><p>支持基于 DNS 和基于 RPC 的服务发现（<strong>可替代eureka</strong>）。Nacos 提供对服务的实时的健康检查，阻止向不健康的主机或服务实例发送请求。Nacos 支持传输层 (PING 或 TCP)和应用层 (如 HTTP、MySQL、用户自定义）的健康检查。 对于复杂的云环境和网络拓扑环境中（如 VPC、边缘网络等）服务的健康检查，Nacos 提供了 agent 上报模式和服务端主动检测2种健康检查模式。Nacos 还提供了统一的健康检查仪表盘，帮助您根据健康状态管理服务的可用性及流量。</p>\n<h3 id=\"动态配置服务\"><a href=\"#动态配置服务\" class=\"headerlink\" title=\"动态配置服务\"></a>动态配置服务</h3><p>动态配置服务可以让您以中心化、外部化和动态化的方式管理所有环境的应用配置和服务配置（<strong>可以作为配置中心</strong>）。动态配置消除了配置变更时重新部署应用和服务的需要，让配置管理变得更加高效和敏捷。配置中心化管理让实现无状态服务变得更简单，让服务按需弹性扩展变得更容易。Nacos 提供了一个简洁易用的UI (<a href=\"http://console.nacos.io/nacos/index.html\" target=\"_blank\" rel=\"noopener\">控制台样例 Demo</a>) 帮助您管理所有的服务和应用的配置。Nacos 还提供包括配置版本跟踪、金丝雀发布、一键回滚配置以及客户端配置更新状态跟踪在内的一系列开箱即用的配置管理特性，帮助您更安全地在生产环境中管理配置变更和降低配置变更带来的风险。</p>\n<h3 id=\"动态-DNS-服务\"><a href=\"#动态-DNS-服务\" class=\"headerlink\" title=\"动态 DNS 服务\"></a>动态 DNS 服务</h3><p>动态 DNS 服务支持权重路由，让您更容易地实现中间层负载均衡、更灵活的路由策略、流量控制以及数据中心内网的简单DNS解析服务（<strong>可做负载均衡</strong>）。动态DNS服务还能让您更容易地实现以 DNS 协议为基础的服务发现，以帮助您消除耦合到厂商私有服务发现 API 上的风险。</p>\n<h3 id=\"服务及其元数据管理\"><a href=\"#服务及其元数据管理\" class=\"headerlink\" title=\"服务及其元数据管理\"></a>服务及其元数据管理</h3><p>Nacos 能让您从微服务平台建设的视角管理数据中心的所有服务及元数据，包括管理服务的描述、生命周期、服务的静态依赖分析、服务的健康状态、服务的流量管理、路由及安全策略、服务的 SLA 以及最首要的 metrics 统计数据（<strong>不知道啥意思，以后研究</strong>）。</p>\n<h2 id=\"nacos的相关概念\"><a href=\"#nacos的相关概念\" class=\"headerlink\" title=\"nacos的相关概念\"></a>nacos的相关概念</h2><ul>\n<li>地域 （Region）：物理的数据中心，资源创建成功后不能更换。</li>\n<li>可用区（Available Zone）：同一地域内，电力和网络互相独立的物理区域。同一可用区内，实例的网络延迟较低。</li>\n<li>接入点（Endpoint）：地域的某个服务的入口域名。</li>\n<li>命名空间（Namespace）：用于进行租户粒度的配置隔离。不同的命名空间下，可以存在相同的 Group 或 Data ID 的配置。Namespace 的常用场景之一是不同环境的配置的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等。</li>\n<li>元信息(Metadata)：Nacos数据（如配置和服务）描述信息，如服务版本、权重、容灾策略、负载均衡策略、鉴权配置、各种自定义标签 (label)，从作用范围来看，分为服务级别的元信息、集群的元信息及实例的元信息。</li>\n<li>实例（Instance）：提供一个或多个服务的具有可访问网络地址（IP:Port）的进程。</li>\n<li>权重（Weight）：实例级别的配置。权重为浮点数。权重越大，分配给该实例的流量越大。</li>\n<li>健康检测（Health Check）：以指定方式检查服务下挂载的实例 (Instance) 的健康度，从而确认该实例 (Instance) 是否能提供服务。根据检查结果，实例 (Instance) 会被判断为健康或不健康。对服务发起解析请求时，不健康的实例 (Instance) 不会返回给客户端。</li>\n<li>健康保护阈值（Protect Threshold）：为了防止因过多实例 (Instance) 不健康导致流量全部流向健康实例 (Instance) ，继而造成流量压力把健康 健康实例 (Instance) 压垮并形成雪崩效应，应将健康保护阈值定义为一个 0 到 1 之间的浮点数。当域名健康实例 (Instance) 占总服务实例 (Instance) 的比例小于该值时，无论实例 (Instance) 是否健康，都会将这个实例 (Instance) 返回给客户端。这样做虽然损失了一部分流量，但是保证了集群的剩余健康实例 (Instance) 能正常工作。</li>\n<li>服务分组（Service Group）：不同的服务可以归类到同一分组。</li>\n<li>虚拟集群（Virtual Cluster）：同一个服务下的所有服务实例组成一个默认集群, 集群可以被进一步按需求划分，划分的单位可以是虚拟集群。</li>\n</ul>\n<h1 id=\"nacos-使用\"><a href=\"#nacos-使用\" class=\"headerlink\" title=\"nacos 使用\"></a>nacos 使用</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>可在github上下载安装包安装，或者采用docker安装；</p>\n<p>windows上运行：<a href=\"https://github.com/alibaba/nacos\" target=\"_blank\" rel=\"noopener\">nacos github地址</a> 在github查看该项目的releases并下载最新版，解压后进入bin目录 运行<code>startup.cmd</code>。</p>\n<p>docker上运行：docker run –name nacos-standalone -e MODE=standalone -p 8848:8848 nacos/nacos-server:latest 可运行一个单机版nacos</p>\n<p>浏览器上访问 ip:8848/nacos 进入登陆界面，用户名和密码都是nacos；登陆成功就能看到控制台UI界面了。在安装包的./conf目录下有一个application.properties文件，这是nacos的配置文件，相关配置后期会说。</p>\n<h2 id=\"作为配置中心\"><a href=\"#作为配置中心\" class=\"headerlink\" title=\"作为配置中心\"></a>作为配置中心</h2><h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>这里为方便讲解，我们现在Windows环境下运行一个单机版nacos，启动后登陆；创建一个springboot应用，导入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-alibaba-nacos-config<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.9.0.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后删除application.properties 新建一个bootstrap.properties。这里可能还有同学不知道application和bootstrap的区别；在这里科普一下：在 Spring Boot 中有两种上下文，一种是 bootstrap, 另外一种是 application, bootstrap 是应用程序的父上下文，也就是说 bootstrap 加载优先于 applicaton。bootstrap 主要用于从额外的资源来加载配置信息，还可以在本地外部配置文件中解密属性。这两个上下文共用一个环境，它是任何Spring应用程序的外部属性的来源。bootstrap 里面的属性会优先加载，它们默认也不能被本地相同配置覆盖。bootstrap比application要先加载，bootstrap只在cloud项目中使用。</p>\n<p>添加配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#服务名</span><br><span class=\"line\">spring.application.name=nacos-config-example</span><br><span class=\"line\"># 配置中心url</span><br><span class=\"line\">spring.cloud.nacos.config.server-addr=127.0.0.1:8848</span><br><span class=\"line\"># 配置中心的配置语法</span><br><span class=\"line\">spring.cloud.nacos.config.file-extension=properties</span><br></pre></td></tr></table></figure>\n<p>现在在nacos配置中心新建配置：</p>\n<p>dataId:nacos-config-example.properties</p>\n<p><img src=\"C:\\Users\\isock\\AppData\\Roaming\\Typora\\typora-user-images\\1556523308515.png\" alt=\"1556523308515\"></p>\n<p>启动项目，发现项目端口号是8082，我们的配置成功了。</p>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>注意 图中几个选项 TEXT\\JSON\\ XML \\YAML\\ HTML\\Propertiest这些并不是指定nacos以何种语法去解析配置文件，仅仅是提供语法提示，代码高亮辅助样式；第一次使用的人很容易被误导。我们要指定配置文件语法要在bootstrap做如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.cloud.nacos.config.file-extension=properties</span><br><span class=\"line\">spring.cloud.nacos.config.file-extension=yaml</span><br></pre></td></tr></table></figure>\n<p>配置中心配置依靠dataId将配置信息和客户端绑定，我们来看看dataId组成规则：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;prefix&#125;-$&#123;spring.profile.active&#125;.$&#123;file-extension&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>prefix</code> 默认为 <code>spring.application.name</code> 的值，也可以通过配置项 <code>spring.cloud.nacos.config.prefix</code>来配置。</p>\n</li>\n<li><p><code>spring.profile.active</code> 即为当前环境对应的 profile， <strong>注意：当 spring.profile.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 ${prefix}.${file-extension}</strong></p>\n</li>\n<li><code>file-exetension</code> 为配置内容的数据格式，可以通过配置项 <code>spring.cloud.nacos.config.file-extension</code> 来配置。目前只支持 <code>properties</code> 和 <code>yaml</code> 类型。</li>\n</ul>\n<p>也就是说我们这个配置中心的dataId和我们平时用springboot命名配置文件只有一个prefix的区别</p>\n<p>现在我们来修改一下配置文件，bootstrap加一项：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.cloud.nacos.config.prefix=config-test</span><br><span class=\"line\">spring.profiles.active=dev</span><br></pre></td></tr></table></figure>\n<p>配置中心弄两个配置方便比较，一个dataId是<code>config-test-dev.properties</code>，一个dataId是<code>config-test-prod.properties</code>配置端口号分别为8081和8082测试。启动项目后发现项目端口号为8081，然后修改配置重启：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.profiles.active=prod</span><br></pre></td></tr></table></figure>\n<p>此时端口变成了8082。用法和springboot的配置文件区别不大。</p>\n<h3 id=\"命名空间和分组\"><a href=\"#命名空间和分组\" class=\"headerlink\" title=\"命名空间和分组\"></a>命名空间和分组</h3><p>命名空间和分组相当于一个配置文件的”年级和班次”，在同一个group下，配置文件名不能重复，所以当需要创建文件名称相同的两个配置文件时，将两个配置文件创建在不同的group下即可。而namespace范围比group大，目的是一样的。</p>\n<p>定义命名空间方式如图</p>\n<p><img src=\"C:\\Users\\isock\\AppData\\Roaming\\Typora\\typora-user-images\\1556525537769.png\" alt=\"1556525537769\"></p>\n<p>在bootstrap中对应配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.cloud.nacos.config.namespace=命名空间ID</span><br></pre></td></tr></table></figure>\n<p>分组则在配置中心新建配置的时候可指定，在bootstrap中对应配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.cloud.nacos.config.group=group</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置自动更新\"><a href=\"#配置自动更新\" class=\"headerlink\" title=\"配置自动更新\"></a>配置自动更新</h3><p>通过 Spring Cloud 原生注解 <code>@RefreshScope</code> 实现配置自动更新，示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@RefreshScope</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConfigController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;config.test&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String test;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testStr</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.print(test)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当你在配置中心更新<code>config.test</code>的 客户端的test的值也会刷新，并且你还能在客户端看到值变更的相关日志。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>别的不说，这比spring cloud config好用太多了有木有，和apollo比起来配置太容易了有木有；这么好用的东西，出正式版了，等坑都排完了妥妥的神器有木有。我选nacos，你呢。</p>\n<h2 id=\"作为注册中心\"><a href=\"#作为注册中心\" class=\"headerlink\" title=\"作为注册中心\"></a>作为注册中心</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>服务治理是微服务架构中最为核心和基础的模块。它主要用来实现各个微服务实例的自动化注册与发现。随着服务的越来越多，越来越杂，服务之间的调用会越来越复杂，越来越难以管理。而当某个服务发生了变化，或者由于压力性能问题，多部署了几台服务，怎么让服务的消费者知晓变化，就显得很重要了。不然就会存在调用的服务其实已经下线了，但调用者不知道等异常情况。这个时候有个服务组件去统一治理就相当重要了。注册中心便是做这个事情的，我们的服务上下线和发现服务都要依赖于注册中心。</p>\n<p>nacos注册中心有哪些特性呢？首先nacos从cap的角度来说，它能针对不同模式采用cp还是ap原则。然后它对服务发现的支持种类也有很多，比如：gRpc、Dubbo RpcService、Spring Cloud RESTful Service。并且ncos本身提供了很直观的注册中心管理界面。方便我们查看管理服务，其api也很丰富，我们完全可以在做二次开发去写一个我们自己满意的管理页面。Nacos 提供对服务的实时的健康检查，阻止向不健康的主机或服务实例发送请求。Nacos 支持传输层 (PING 或 TCP)和应用层 (如 HTTP、MySQL、用户自定义）的健康检查。</p>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>新建一个springboot项目，添加如下依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.9.0.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在启动类上加上<code>@EnableDiscoveryClient</code>注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MytestApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(MytestApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>application添加配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">server.port=8081</span><br><span class=\"line\">spring.application.name=service-mytest</span><br><span class=\"line\">spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848</span><br></pre></td></tr></table></figure>\n<p>启动服务后，我们能看到nacos管理页面注册上了一个服务。点击查看详情：</p>\n<p><img src=\"C:\\Users\\isock\\AppData\\Roaming\\Typora\\typora-user-images\\1557666285270.png\" alt=\"1557666285270\"></p>\n<p>列表上有一列是临时实例，临时实例通常使用AP一致性，因此如果发生网络分区，注册临时实例仍然有效。持久化实例使用CP一致性，这保证了数据的一致性。而持久化配置则是配置集群和数据库，本文不做介绍。后期搭建集群的时候我们在做测试。权重则是指调用服务时路由到该实例的优先系数，数字越大优先级越高，为0则不会使用该实例。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>我们能用nacos作为配置中心或者注册中心，其本身提供管理界面也很方便。nacos的使用企业也很多，下面放出一张github上nacos的使用企业截图：<img src=\"C:\\Users\\isock\\AppData\\Roaming\\Typora\\typora-user-images\\1557667876620.png\" alt=\"1557667876620\">        </p>\n<p>官方文档还有提到nacos支持动态DNS，也就是说支持DNS的负载均衡，但本人没找到很好的资料，后续再做研究。关于nacos集群和持久化配置后续更新，感谢阅读。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"编辑中\"><a href=\"#编辑中\" class=\"headerlink\" title=\"编辑中\"></a>编辑中</h3><h1 id=\"nacos简介\"><a href=\"#nacos简介\" class=\"headerlink\" title=\"nacos简介\"></a>nacos简介</h1><p>​    在nacos-0.3的时候我就开始关注，期间还写过一篇作为springcloud配置中心的使用记录的博客。在前不久，nacos终于出了正式版，赶个时髦出篇博客吹一波，<a href=\"https://nacos.io/zh-cn/index.html\" target=\"_blank\" rel=\"noopener\">nacos官方文档</a></p>","more":"<h2 id=\"nacos特性\"><a href=\"#nacos特性\" class=\"headerlink\" title=\"nacos特性\"></a>nacos特性</h2><h3 id=\"服务发现和服务健康监测\"><a href=\"#服务发现和服务健康监测\" class=\"headerlink\" title=\"服务发现和服务健康监测\"></a>服务发现和服务健康监测</h3><p>支持基于 DNS 和基于 RPC 的服务发现（<strong>可替代eureka</strong>）。Nacos 提供对服务的实时的健康检查，阻止向不健康的主机或服务实例发送请求。Nacos 支持传输层 (PING 或 TCP)和应用层 (如 HTTP、MySQL、用户自定义）的健康检查。 对于复杂的云环境和网络拓扑环境中（如 VPC、边缘网络等）服务的健康检查，Nacos 提供了 agent 上报模式和服务端主动检测2种健康检查模式。Nacos 还提供了统一的健康检查仪表盘，帮助您根据健康状态管理服务的可用性及流量。</p>\n<h3 id=\"动态配置服务\"><a href=\"#动态配置服务\" class=\"headerlink\" title=\"动态配置服务\"></a>动态配置服务</h3><p>动态配置服务可以让您以中心化、外部化和动态化的方式管理所有环境的应用配置和服务配置（<strong>可以作为配置中心</strong>）。动态配置消除了配置变更时重新部署应用和服务的需要，让配置管理变得更加高效和敏捷。配置中心化管理让实现无状态服务变得更简单，让服务按需弹性扩展变得更容易。Nacos 提供了一个简洁易用的UI (<a href=\"http://console.nacos.io/nacos/index.html\" target=\"_blank\" rel=\"noopener\">控制台样例 Demo</a>) 帮助您管理所有的服务和应用的配置。Nacos 还提供包括配置版本跟踪、金丝雀发布、一键回滚配置以及客户端配置更新状态跟踪在内的一系列开箱即用的配置管理特性，帮助您更安全地在生产环境中管理配置变更和降低配置变更带来的风险。</p>\n<h3 id=\"动态-DNS-服务\"><a href=\"#动态-DNS-服务\" class=\"headerlink\" title=\"动态 DNS 服务\"></a>动态 DNS 服务</h3><p>动态 DNS 服务支持权重路由，让您更容易地实现中间层负载均衡、更灵活的路由策略、流量控制以及数据中心内网的简单DNS解析服务（<strong>可做负载均衡</strong>）。动态DNS服务还能让您更容易地实现以 DNS 协议为基础的服务发现，以帮助您消除耦合到厂商私有服务发现 API 上的风险。</p>\n<h3 id=\"服务及其元数据管理\"><a href=\"#服务及其元数据管理\" class=\"headerlink\" title=\"服务及其元数据管理\"></a>服务及其元数据管理</h3><p>Nacos 能让您从微服务平台建设的视角管理数据中心的所有服务及元数据，包括管理服务的描述、生命周期、服务的静态依赖分析、服务的健康状态、服务的流量管理、路由及安全策略、服务的 SLA 以及最首要的 metrics 统计数据（<strong>不知道啥意思，以后研究</strong>）。</p>\n<h2 id=\"nacos的相关概念\"><a href=\"#nacos的相关概念\" class=\"headerlink\" title=\"nacos的相关概念\"></a>nacos的相关概念</h2><ul>\n<li>地域 （Region）：物理的数据中心，资源创建成功后不能更换。</li>\n<li>可用区（Available Zone）：同一地域内，电力和网络互相独立的物理区域。同一可用区内，实例的网络延迟较低。</li>\n<li>接入点（Endpoint）：地域的某个服务的入口域名。</li>\n<li>命名空间（Namespace）：用于进行租户粒度的配置隔离。不同的命名空间下，可以存在相同的 Group 或 Data ID 的配置。Namespace 的常用场景之一是不同环境的配置的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等。</li>\n<li>元信息(Metadata)：Nacos数据（如配置和服务）描述信息，如服务版本、权重、容灾策略、负载均衡策略、鉴权配置、各种自定义标签 (label)，从作用范围来看，分为服务级别的元信息、集群的元信息及实例的元信息。</li>\n<li>实例（Instance）：提供一个或多个服务的具有可访问网络地址（IP:Port）的进程。</li>\n<li>权重（Weight）：实例级别的配置。权重为浮点数。权重越大，分配给该实例的流量越大。</li>\n<li>健康检测（Health Check）：以指定方式检查服务下挂载的实例 (Instance) 的健康度，从而确认该实例 (Instance) 是否能提供服务。根据检查结果，实例 (Instance) 会被判断为健康或不健康。对服务发起解析请求时，不健康的实例 (Instance) 不会返回给客户端。</li>\n<li>健康保护阈值（Protect Threshold）：为了防止因过多实例 (Instance) 不健康导致流量全部流向健康实例 (Instance) ，继而造成流量压力把健康 健康实例 (Instance) 压垮并形成雪崩效应，应将健康保护阈值定义为一个 0 到 1 之间的浮点数。当域名健康实例 (Instance) 占总服务实例 (Instance) 的比例小于该值时，无论实例 (Instance) 是否健康，都会将这个实例 (Instance) 返回给客户端。这样做虽然损失了一部分流量，但是保证了集群的剩余健康实例 (Instance) 能正常工作。</li>\n<li>服务分组（Service Group）：不同的服务可以归类到同一分组。</li>\n<li>虚拟集群（Virtual Cluster）：同一个服务下的所有服务实例组成一个默认集群, 集群可以被进一步按需求划分，划分的单位可以是虚拟集群。</li>\n</ul>\n<h1 id=\"nacos-使用\"><a href=\"#nacos-使用\" class=\"headerlink\" title=\"nacos 使用\"></a>nacos 使用</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>可在github上下载安装包安装，或者采用docker安装；</p>\n<p>windows上运行：<a href=\"https://github.com/alibaba/nacos\" target=\"_blank\" rel=\"noopener\">nacos github地址</a> 在github查看该项目的releases并下载最新版，解压后进入bin目录 运行<code>startup.cmd</code>。</p>\n<p>docker上运行：docker run –name nacos-standalone -e MODE=standalone -p 8848:8848 nacos/nacos-server:latest 可运行一个单机版nacos</p>\n<p>浏览器上访问 ip:8848/nacos 进入登陆界面，用户名和密码都是nacos；登陆成功就能看到控制台UI界面了。在安装包的./conf目录下有一个application.properties文件，这是nacos的配置文件，相关配置后期会说。</p>\n<h2 id=\"作为配置中心\"><a href=\"#作为配置中心\" class=\"headerlink\" title=\"作为配置中心\"></a>作为配置中心</h2><h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>这里为方便讲解，我们现在Windows环境下运行一个单机版nacos，启动后登陆；创建一个springboot应用，导入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-alibaba-nacos-config<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.9.0.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后删除application.properties 新建一个bootstrap.properties。这里可能还有同学不知道application和bootstrap的区别；在这里科普一下：在 Spring Boot 中有两种上下文，一种是 bootstrap, 另外一种是 application, bootstrap 是应用程序的父上下文，也就是说 bootstrap 加载优先于 applicaton。bootstrap 主要用于从额外的资源来加载配置信息，还可以在本地外部配置文件中解密属性。这两个上下文共用一个环境，它是任何Spring应用程序的外部属性的来源。bootstrap 里面的属性会优先加载，它们默认也不能被本地相同配置覆盖。bootstrap比application要先加载，bootstrap只在cloud项目中使用。</p>\n<p>添加配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#服务名</span><br><span class=\"line\">spring.application.name=nacos-config-example</span><br><span class=\"line\"># 配置中心url</span><br><span class=\"line\">spring.cloud.nacos.config.server-addr=127.0.0.1:8848</span><br><span class=\"line\"># 配置中心的配置语法</span><br><span class=\"line\">spring.cloud.nacos.config.file-extension=properties</span><br></pre></td></tr></table></figure>\n<p>现在在nacos配置中心新建配置：</p>\n<p>dataId:nacos-config-example.properties</p>\n<p><img src=\"C:\\Users\\isock\\AppData\\Roaming\\Typora\\typora-user-images\\1556523308515.png\" alt=\"1556523308515\"></p>\n<p>启动项目，发现项目端口号是8082，我们的配置成功了。</p>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>注意 图中几个选项 TEXT\\JSON\\ XML \\YAML\\ HTML\\Propertiest这些并不是指定nacos以何种语法去解析配置文件，仅仅是提供语法提示，代码高亮辅助样式；第一次使用的人很容易被误导。我们要指定配置文件语法要在bootstrap做如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.cloud.nacos.config.file-extension=properties</span><br><span class=\"line\">spring.cloud.nacos.config.file-extension=yaml</span><br></pre></td></tr></table></figure>\n<p>配置中心配置依靠dataId将配置信息和客户端绑定，我们来看看dataId组成规则：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;prefix&#125;-$&#123;spring.profile.active&#125;.$&#123;file-extension&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>prefix</code> 默认为 <code>spring.application.name</code> 的值，也可以通过配置项 <code>spring.cloud.nacos.config.prefix</code>来配置。</p>\n</li>\n<li><p><code>spring.profile.active</code> 即为当前环境对应的 profile， <strong>注意：当 spring.profile.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 ${prefix}.${file-extension}</strong></p>\n</li>\n<li><code>file-exetension</code> 为配置内容的数据格式，可以通过配置项 <code>spring.cloud.nacos.config.file-extension</code> 来配置。目前只支持 <code>properties</code> 和 <code>yaml</code> 类型。</li>\n</ul>\n<p>也就是说我们这个配置中心的dataId和我们平时用springboot命名配置文件只有一个prefix的区别</p>\n<p>现在我们来修改一下配置文件，bootstrap加一项：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.cloud.nacos.config.prefix=config-test</span><br><span class=\"line\">spring.profiles.active=dev</span><br></pre></td></tr></table></figure>\n<p>配置中心弄两个配置方便比较，一个dataId是<code>config-test-dev.properties</code>，一个dataId是<code>config-test-prod.properties</code>配置端口号分别为8081和8082测试。启动项目后发现项目端口号为8081，然后修改配置重启：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.profiles.active=prod</span><br></pre></td></tr></table></figure>\n<p>此时端口变成了8082。用法和springboot的配置文件区别不大。</p>\n<h3 id=\"命名空间和分组\"><a href=\"#命名空间和分组\" class=\"headerlink\" title=\"命名空间和分组\"></a>命名空间和分组</h3><p>命名空间和分组相当于一个配置文件的”年级和班次”，在同一个group下，配置文件名不能重复，所以当需要创建文件名称相同的两个配置文件时，将两个配置文件创建在不同的group下即可。而namespace范围比group大，目的是一样的。</p>\n<p>定义命名空间方式如图</p>\n<p><img src=\"C:\\Users\\isock\\AppData\\Roaming\\Typora\\typora-user-images\\1556525537769.png\" alt=\"1556525537769\"></p>\n<p>在bootstrap中对应配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.cloud.nacos.config.namespace=命名空间ID</span><br></pre></td></tr></table></figure>\n<p>分组则在配置中心新建配置的时候可指定，在bootstrap中对应配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.cloud.nacos.config.group=group</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置自动更新\"><a href=\"#配置自动更新\" class=\"headerlink\" title=\"配置自动更新\"></a>配置自动更新</h3><p>通过 Spring Cloud 原生注解 <code>@RefreshScope</code> 实现配置自动更新，示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@RefreshScope</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConfigController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;config.test&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String test;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testStr</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.print(test)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当你在配置中心更新<code>config.test</code>的 客户端的test的值也会刷新，并且你还能在客户端看到值变更的相关日志。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>别的不说，这比spring cloud config好用太多了有木有，和apollo比起来配置太容易了有木有；这么好用的东西，出正式版了，等坑都排完了妥妥的神器有木有。我选nacos，你呢。</p>\n<h2 id=\"作为注册中心\"><a href=\"#作为注册中心\" class=\"headerlink\" title=\"作为注册中心\"></a>作为注册中心</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>服务治理是微服务架构中最为核心和基础的模块。它主要用来实现各个微服务实例的自动化注册与发现。随着服务的越来越多，越来越杂，服务之间的调用会越来越复杂，越来越难以管理。而当某个服务发生了变化，或者由于压力性能问题，多部署了几台服务，怎么让服务的消费者知晓变化，就显得很重要了。不然就会存在调用的服务其实已经下线了，但调用者不知道等异常情况。这个时候有个服务组件去统一治理就相当重要了。注册中心便是做这个事情的，我们的服务上下线和发现服务都要依赖于注册中心。</p>\n<p>nacos注册中心有哪些特性呢？首先nacos从cap的角度来说，它能针对不同模式采用cp还是ap原则。然后它对服务发现的支持种类也有很多，比如：gRpc、Dubbo RpcService、Spring Cloud RESTful Service。并且ncos本身提供了很直观的注册中心管理界面。方便我们查看管理服务，其api也很丰富，我们完全可以在做二次开发去写一个我们自己满意的管理页面。Nacos 提供对服务的实时的健康检查，阻止向不健康的主机或服务实例发送请求。Nacos 支持传输层 (PING 或 TCP)和应用层 (如 HTTP、MySQL、用户自定义）的健康检查。</p>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>新建一个springboot项目，添加如下依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.9.0.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在启动类上加上<code>@EnableDiscoveryClient</code>注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MytestApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(MytestApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>application添加配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">server.port=8081</span><br><span class=\"line\">spring.application.name=service-mytest</span><br><span class=\"line\">spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848</span><br></pre></td></tr></table></figure>\n<p>启动服务后，我们能看到nacos管理页面注册上了一个服务。点击查看详情：</p>\n<p><img src=\"C:\\Users\\isock\\AppData\\Roaming\\Typora\\typora-user-images\\1557666285270.png\" alt=\"1557666285270\"></p>\n<p>列表上有一列是临时实例，临时实例通常使用AP一致性，因此如果发生网络分区，注册临时实例仍然有效。持久化实例使用CP一致性，这保证了数据的一致性。而持久化配置则是配置集群和数据库，本文不做介绍。后期搭建集群的时候我们在做测试。权重则是指调用服务时路由到该实例的优先系数，数字越大优先级越高，为0则不会使用该实例。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>我们能用nacos作为配置中心或者注册中心，其本身提供管理界面也很方便。nacos的使用企业也很多，下面放出一张github上nacos的使用企业截图：<img src=\"C:\\Users\\isock\\AppData\\Roaming\\Typora\\typora-user-images\\1557667876620.png\" alt=\"1557667876620\">        </p>\n<p>官方文档还有提到nacos支持动态DNS，也就是说支持DNS的负载均衡，但本人没找到很好的资料，后续再做研究。关于nacos集群和持久化配置后续更新，感谢阅读。</p>"},{"title":" netty学习笔记第一篇","date":"2019-04-01T10:02:04.000Z","_content":"\n作者：muggle\n\nnetty框架代码很猛（读源码有益身心健康），学习起来也比较难；在阅读这篇文章我假设你有了一定nio基础，tcp网络协议基础，否则不建议阅读。\n\n关于netty的学习视频我推荐B站张龙的教学视频，讲的很不错。学netty之前先学会用，然后在去看他的原理这样学起来会轻松不少。\n\n<!--more-->\n\n### http demo\n\n用netty实现一个http服务端\n\n编写main函数\n\n```java\npublic class TestNetty {\n    public static void main(String[] args) throws InterruptedException {\n//        事件循环组 接收连接，将连接发送给work\n        NioEventLoopGroup bossGroup = new NioEventLoopGroup();\n//        work 干活\n        NioEventLoopGroup workerGroup = new NioEventLoopGroup();\n//      简化服务端启动\n        ServerBootstrap serverBootstrap=new ServerBootstrap();\n//                     打开通道                                               子处理器 服务端初始化器\n  serverBootstrap.group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).childHandler(new TestServerInitlizer());、\n      // 绑定接口\n        final ChannelFuture sync = serverBootstrap.bind(8081).sync();\n        sync.channel().closeFuture().sync();\n        bossGroup.shutdownGracefully();\n        workerGroup.shutdownGracefully();\n    }\n}\n\n```\n\n编写初始化器\n\n```java\n// 初始化器 channel注册好之后 自动创建 执行代码\npublic class TestServerInitlizer extends ChannelInitializer<SocketChannel> {\n    @Override\n    protected void initChannel(SocketChannel socketChannel) throws Exception {\n        final ChannelPipeline pipeline = socketChannel.pipeline();\n//        对web响应编解码\n        pipeline.addLast(\"httpserverCodec\",new HttpServerCodec());\n//        起名加入管道  自己的处理器\n        pipeline.addLast(\"testHttpResponse\",new TestHttpServerHandler());\n    }\n}\n```\n\n编写数据处理器\n\n```java\npublic class TestHttpServerHandler extends SimpleChannelInboundHandler<HttpObject> {\n//    构造一个Http响应\n    @Override\n    protected void channelRead0(ChannelHandlerContext channelHandlerContext, HttpObject httpObject) throws Exception {\n        System.out.println(\"请求读取处理4\");\n        ByteBuf buffer=Unpooled.copiedBuffer(\"<!DOCTYPE html>\\n\" +\n                \"<html lang=\\\"en\\\">\\n\" +\n                \"<head>\\n\" +\n                \"    <meta charset=\\\"UTF-8\\\">\\n\" +\n                \"    <title>Title</title>\\n\" +\n                \"</head>\\n\" +\n                \"<body>\\n\" +\n                \"<h1>这是一个Netty构造的http响应</h1>\\n\" +\n                \"</body>\\n\" +\n                \"</html>\", CharsetUtil.UTF_8);\n        FullHttpResponse response=new DefaultFullHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.OK,buffer);\n        response.headers().set(HttpHeaderNames.CONTENT_TYPE,\"text/html\");\n        response.headers().set(HttpHeaderNames.CONTENT_LENGTH,buffer.readableBytes());\n        channelHandlerContext.writeAndFlush(response);\n       channelHandlerContext.close();\n    }\n\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        System.out.println(\"通道处于活动状态 3\");\n        super.channelActive(ctx);\n    }\n\n    @Override\n    public void channelRegistered(ChannelHandlerContext ctx) throws Exception {\n        System.out.println(\"通道注册 2\");\n        super.channelRegistered(ctx);\n    }\n\n    @Override\n    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n        System.out.println(\"处理器添加 1\");\n        super.handlerAdded(ctx);\n    }\n    @Override\n    public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n        System.out.println(\"通道数据进入5\");\n        super.channelInactive(ctx);\n    }\n\n    @Override\n    public void channelUnregistered(ChannelHandlerContext ctx) throws Exception {\n        System.out.println(\"通道取消注册6\");\n        super.channelUnregistered(ctx);\n    }\n}\n```\n\n说明：\n\n我们来看一下构造一个http服务端，都需要干些啥。\n\n在main函数中，我们创建了两个线程组`NioEventLoopGroup`，boss线程组负责接收请求，work线程组负责处理请求。`ServerBootstrap`服务端配置辅助器进行服务端配置，绑定端口号。\n\n初始化器`ChannelInitializer<SocketChannel>`对管道设置各种处理器，数据处理器`SimpleChannelInboundHandler<HttpObject>` 的`channelRead0`方法处理数据，调用`channelHandlerContext.writeAndFlush` 将数据写入通道，其他重写的方法看代码便能知道是干嘛的\n\n### socket demo\n\nsocket连接步骤大同小异\n\n编写server的main函数\n\n```java\npublic static void main(String[] args) {\n        EventLoopGroup boss=new NioEventLoopGroup();\n        NioEventLoopGroup worker = new NioEventLoopGroup();\n        try {\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            serverBootstrap.group(boss,worker).channel(NioServerSocketChannel.class).childHandler(new MyServerInitializer());\n            ChannelFuture sync = serverBootstrap.bind(8081).sync();\n            sync.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            boss.shutdownGracefully();\n            worker.shutdownGracefully();\n        }\n    }\n```\n\n编写初始化器\n\n```java\npublic class MyServerInitializer extends ChannelInitializer<SocketChannel> {\n    @Override\n    protected void initChannel(SocketChannel socketChannel) throws Exception {\n        ChannelPipeline pipeline = socketChannel.pipeline();\n//        jia 一堆处理器 策略模式\n        pipeline.addLast(new LengthFieldBasedFrameDecoder(Integer.MAX_VALUE,0,4,0,4));\n        pipeline.addLast(new LengthFieldPrepender(4));\n        pipeline.addLast(new StringDecoder(CharsetUtil.UTF_8));\n        pipeline.addLast(new StringEncoder(CharsetUtil.UTF_8));\n        pipeline.addLast(new MyserverHandler());\n    }\n}\n```\n\n编写数据处理器\n\n```jav\n\npublic class MyserverHandler extends SimpleChannelInboundHandler<String> {\n    private static ChannelGroup group=new DefaultChannelGroup(GlobalEventExecutor.INSTANCE);\n//    处理方法\n    protected void channelRead0(ChannelHandlerContext ctx, String s) throws Exception {\n        Channel channel = ctx.channel();\n        group.writeAndFlush(ctx.channel().remoteAddress()+\">>>>\"+s);\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n\n        ctx.close();\n    }\n\n    @Override\n    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n        Channel channel = ctx.channel();\n        group.writeAndFlush(channel.remoteAddress()+\"连接地址》》》》》》》\");\n        group.add(channel);\n    }\n\n    @Override\n    public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {\n        Channel channel = ctx.channel();\n        group.writeAndFlush(channel.remoteAddress()+\"断开连接》》》》》》》\");\n    }\n}\n```\n\n编写client 的main\n\n```java\n public static void main(String[] args) {\n        EventLoopGroup boss = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(boss).channel(NioSocketChannel.class).handler(new MyClientInitializer());\n            ChannelFuture sync = bootstrap.connect(\"127.0.0.1\",8081).sync();\n            Channel channel = sync.channel();\n            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));\n            while (true){\n                channel.writeAndFlush(bufferedReader.readLine());\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            boss.shutdownGracefully();\n        }\n    }\n```\n\n其他和服务端一样，所以略；\n\n服务端启动类`serverBootstrap.bind(8081).sync()` 而客户端启动类配置是` ChannelFuture sync = bootstrap.connect(\"127.0.0.1\",8081).sync();`区别就在这里\n\n### websocket demo\n\n","source":"_posts/netty学习笔记.md","raw":"---\ntitle: ' netty学习笔记第一篇'\ndate: 2019-04-01 18:02:04\ntags: netty\n---\n\n作者：muggle\n\nnetty框架代码很猛（读源码有益身心健康），学习起来也比较难；在阅读这篇文章我假设你有了一定nio基础，tcp网络协议基础，否则不建议阅读。\n\n关于netty的学习视频我推荐B站张龙的教学视频，讲的很不错。学netty之前先学会用，然后在去看他的原理这样学起来会轻松不少。\n\n<!--more-->\n\n### http demo\n\n用netty实现一个http服务端\n\n编写main函数\n\n```java\npublic class TestNetty {\n    public static void main(String[] args) throws InterruptedException {\n//        事件循环组 接收连接，将连接发送给work\n        NioEventLoopGroup bossGroup = new NioEventLoopGroup();\n//        work 干活\n        NioEventLoopGroup workerGroup = new NioEventLoopGroup();\n//      简化服务端启动\n        ServerBootstrap serverBootstrap=new ServerBootstrap();\n//                     打开通道                                               子处理器 服务端初始化器\n  serverBootstrap.group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).childHandler(new TestServerInitlizer());、\n      // 绑定接口\n        final ChannelFuture sync = serverBootstrap.bind(8081).sync();\n        sync.channel().closeFuture().sync();\n        bossGroup.shutdownGracefully();\n        workerGroup.shutdownGracefully();\n    }\n}\n\n```\n\n编写初始化器\n\n```java\n// 初始化器 channel注册好之后 自动创建 执行代码\npublic class TestServerInitlizer extends ChannelInitializer<SocketChannel> {\n    @Override\n    protected void initChannel(SocketChannel socketChannel) throws Exception {\n        final ChannelPipeline pipeline = socketChannel.pipeline();\n//        对web响应编解码\n        pipeline.addLast(\"httpserverCodec\",new HttpServerCodec());\n//        起名加入管道  自己的处理器\n        pipeline.addLast(\"testHttpResponse\",new TestHttpServerHandler());\n    }\n}\n```\n\n编写数据处理器\n\n```java\npublic class TestHttpServerHandler extends SimpleChannelInboundHandler<HttpObject> {\n//    构造一个Http响应\n    @Override\n    protected void channelRead0(ChannelHandlerContext channelHandlerContext, HttpObject httpObject) throws Exception {\n        System.out.println(\"请求读取处理4\");\n        ByteBuf buffer=Unpooled.copiedBuffer(\"<!DOCTYPE html>\\n\" +\n                \"<html lang=\\\"en\\\">\\n\" +\n                \"<head>\\n\" +\n                \"    <meta charset=\\\"UTF-8\\\">\\n\" +\n                \"    <title>Title</title>\\n\" +\n                \"</head>\\n\" +\n                \"<body>\\n\" +\n                \"<h1>这是一个Netty构造的http响应</h1>\\n\" +\n                \"</body>\\n\" +\n                \"</html>\", CharsetUtil.UTF_8);\n        FullHttpResponse response=new DefaultFullHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.OK,buffer);\n        response.headers().set(HttpHeaderNames.CONTENT_TYPE,\"text/html\");\n        response.headers().set(HttpHeaderNames.CONTENT_LENGTH,buffer.readableBytes());\n        channelHandlerContext.writeAndFlush(response);\n       channelHandlerContext.close();\n    }\n\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        System.out.println(\"通道处于活动状态 3\");\n        super.channelActive(ctx);\n    }\n\n    @Override\n    public void channelRegistered(ChannelHandlerContext ctx) throws Exception {\n        System.out.println(\"通道注册 2\");\n        super.channelRegistered(ctx);\n    }\n\n    @Override\n    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n        System.out.println(\"处理器添加 1\");\n        super.handlerAdded(ctx);\n    }\n    @Override\n    public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n        System.out.println(\"通道数据进入5\");\n        super.channelInactive(ctx);\n    }\n\n    @Override\n    public void channelUnregistered(ChannelHandlerContext ctx) throws Exception {\n        System.out.println(\"通道取消注册6\");\n        super.channelUnregistered(ctx);\n    }\n}\n```\n\n说明：\n\n我们来看一下构造一个http服务端，都需要干些啥。\n\n在main函数中，我们创建了两个线程组`NioEventLoopGroup`，boss线程组负责接收请求，work线程组负责处理请求。`ServerBootstrap`服务端配置辅助器进行服务端配置，绑定端口号。\n\n初始化器`ChannelInitializer<SocketChannel>`对管道设置各种处理器，数据处理器`SimpleChannelInboundHandler<HttpObject>` 的`channelRead0`方法处理数据，调用`channelHandlerContext.writeAndFlush` 将数据写入通道，其他重写的方法看代码便能知道是干嘛的\n\n### socket demo\n\nsocket连接步骤大同小异\n\n编写server的main函数\n\n```java\npublic static void main(String[] args) {\n        EventLoopGroup boss=new NioEventLoopGroup();\n        NioEventLoopGroup worker = new NioEventLoopGroup();\n        try {\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            serverBootstrap.group(boss,worker).channel(NioServerSocketChannel.class).childHandler(new MyServerInitializer());\n            ChannelFuture sync = serverBootstrap.bind(8081).sync();\n            sync.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            boss.shutdownGracefully();\n            worker.shutdownGracefully();\n        }\n    }\n```\n\n编写初始化器\n\n```java\npublic class MyServerInitializer extends ChannelInitializer<SocketChannel> {\n    @Override\n    protected void initChannel(SocketChannel socketChannel) throws Exception {\n        ChannelPipeline pipeline = socketChannel.pipeline();\n//        jia 一堆处理器 策略模式\n        pipeline.addLast(new LengthFieldBasedFrameDecoder(Integer.MAX_VALUE,0,4,0,4));\n        pipeline.addLast(new LengthFieldPrepender(4));\n        pipeline.addLast(new StringDecoder(CharsetUtil.UTF_8));\n        pipeline.addLast(new StringEncoder(CharsetUtil.UTF_8));\n        pipeline.addLast(new MyserverHandler());\n    }\n}\n```\n\n编写数据处理器\n\n```jav\n\npublic class MyserverHandler extends SimpleChannelInboundHandler<String> {\n    private static ChannelGroup group=new DefaultChannelGroup(GlobalEventExecutor.INSTANCE);\n//    处理方法\n    protected void channelRead0(ChannelHandlerContext ctx, String s) throws Exception {\n        Channel channel = ctx.channel();\n        group.writeAndFlush(ctx.channel().remoteAddress()+\">>>>\"+s);\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n\n        ctx.close();\n    }\n\n    @Override\n    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n        Channel channel = ctx.channel();\n        group.writeAndFlush(channel.remoteAddress()+\"连接地址》》》》》》》\");\n        group.add(channel);\n    }\n\n    @Override\n    public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {\n        Channel channel = ctx.channel();\n        group.writeAndFlush(channel.remoteAddress()+\"断开连接》》》》》》》\");\n    }\n}\n```\n\n编写client 的main\n\n```java\n public static void main(String[] args) {\n        EventLoopGroup boss = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(boss).channel(NioSocketChannel.class).handler(new MyClientInitializer());\n            ChannelFuture sync = bootstrap.connect(\"127.0.0.1\",8081).sync();\n            Channel channel = sync.channel();\n            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));\n            while (true){\n                channel.writeAndFlush(bufferedReader.readLine());\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            boss.shutdownGracefully();\n        }\n    }\n```\n\n其他和服务端一样，所以略；\n\n服务端启动类`serverBootstrap.bind(8081).sync()` 而客户端启动类配置是` ChannelFuture sync = bootstrap.connect(\"127.0.0.1\",8081).sync();`区别就在这里\n\n### websocket demo\n\n","slug":"netty学习笔记","published":1,"updated":"2019-04-30T08:12:04.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxtb002svovmcq0ndzfl","content":"<p>作者：muggle</p>\n<p>netty框架代码很猛（读源码有益身心健康），学习起来也比较难；在阅读这篇文章我假设你有了一定nio基础，tcp网络协议基础，否则不建议阅读。</p>\n<p>关于netty的学习视频我推荐B站张龙的教学视频，讲的很不错。学netty之前先学会用，然后在去看他的原理这样学起来会轻松不少。</p>\n<a id=\"more\"></a>\n<h3 id=\"http-demo\"><a href=\"#http-demo\" class=\"headerlink\" title=\"http demo\"></a>http demo</h3><p>用netty实现一个http服务端</p>\n<p>编写main函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestNetty</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        事件循环组 接收连接，将连接发送给work</span></span><br><span class=\"line\">        NioEventLoopGroup bossGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"><span class=\"comment\">//        work 干活</span></span><br><span class=\"line\">        NioEventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"><span class=\"comment\">//      简化服务端启动</span></span><br><span class=\"line\">        ServerBootstrap serverBootstrap=<span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\"><span class=\"comment\">//                     打开通道                                               子处理器 服务端初始化器</span></span><br><span class=\"line\">  serverBootstrap.group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).childHandler(<span class=\"keyword\">new</span> TestServerInitlizer());、</span><br><span class=\"line\">      <span class=\"comment\">// 绑定接口</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> ChannelFuture sync = serverBootstrap.bind(<span class=\"number\">8081</span>).sync();</span><br><span class=\"line\">        sync.channel().closeFuture().sync();</span><br><span class=\"line\">        bossGroup.shutdownGracefully();</span><br><span class=\"line\">        workerGroup.shutdownGracefully();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编写初始化器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化器 channel注册好之后 自动创建 执行代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServerInitlizer</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInitializer</span>&lt;<span class=\"title\">SocketChannel</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel socketChannel)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ChannelPipeline pipeline = socketChannel.pipeline();</span><br><span class=\"line\"><span class=\"comment\">//        对web响应编解码</span></span><br><span class=\"line\">        pipeline.addLast(<span class=\"string\">\"httpserverCodec\"</span>,<span class=\"keyword\">new</span> HttpServerCodec());</span><br><span class=\"line\"><span class=\"comment\">//        起名加入管道  自己的处理器</span></span><br><span class=\"line\">        pipeline.addLast(<span class=\"string\">\"testHttpResponse\"</span>,<span class=\"keyword\">new</span> TestHttpServerHandler());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编写数据处理器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestHttpServerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">HttpObject</span>&gt; </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//    构造一个Http响应</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext channelHandlerContext, HttpObject httpObject)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"请求读取处理4\"</span>);</span><br><span class=\"line\">        ByteBuf buffer=Unpooled.copiedBuffer(<span class=\"string\">\"&lt;!DOCTYPE html&gt;\\n\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"&lt;html lang=\\\"en\\\"&gt;\\n\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"&lt;head&gt;\\n\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"    &lt;meta charset=\\\"UTF-8\\\"&gt;\\n\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"    &lt;title&gt;Title&lt;/title&gt;\\n\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"&lt;/head&gt;\\n\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"&lt;body&gt;\\n\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"&lt;h1&gt;这是一个Netty构造的http响应&lt;/h1&gt;\\n\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"&lt;/body&gt;\\n\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"&lt;/html&gt;\"</span>, CharsetUtil.UTF_8);</span><br><span class=\"line\">        FullHttpResponse response=<span class=\"keyword\">new</span> DefaultFullHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.OK,buffer);</span><br><span class=\"line\">        response.headers().set(HttpHeaderNames.CONTENT_TYPE,<span class=\"string\">\"text/html\"</span>);</span><br><span class=\"line\">        response.headers().set(HttpHeaderNames.CONTENT_LENGTH,buffer.readableBytes());</span><br><span class=\"line\">        channelHandlerContext.writeAndFlush(response);</span><br><span class=\"line\">       channelHandlerContext.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelActive</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"通道处于活动状态 3\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.channelActive(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRegistered</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"通道注册 2\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.channelRegistered(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handlerAdded</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"处理器添加 1\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.handlerAdded(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelInactive</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"通道数据进入5\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.channelInactive(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelUnregistered</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"通道取消注册6\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.channelUnregistered(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<p>我们来看一下构造一个http服务端，都需要干些啥。</p>\n<p>在main函数中，我们创建了两个线程组<code>NioEventLoopGroup</code>，boss线程组负责接收请求，work线程组负责处理请求。<code>ServerBootstrap</code>服务端配置辅助器进行服务端配置，绑定端口号。</p>\n<p>初始化器<code>ChannelInitializer&lt;SocketChannel&gt;</code>对管道设置各种处理器，数据处理器<code>SimpleChannelInboundHandler&lt;HttpObject&gt;</code> 的<code>channelRead0</code>方法处理数据，调用<code>channelHandlerContext.writeAndFlush</code> 将数据写入通道，其他重写的方法看代码便能知道是干嘛的</p>\n<h3 id=\"socket-demo\"><a href=\"#socket-demo\" class=\"headerlink\" title=\"socket demo\"></a>socket demo</h3><p>socket连接步骤大同小异</p>\n<p>编写server的main函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EventLoopGroup boss=<span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\">        NioEventLoopGroup worker = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ServerBootstrap serverBootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\">            serverBootstrap.group(boss,worker).channel(NioServerSocketChannel.class).childHandler(<span class=\"keyword\">new</span> MyServerInitializer());</span><br><span class=\"line\">            ChannelFuture sync = serverBootstrap.bind(<span class=\"number\">8081</span>).sync();</span><br><span class=\"line\">            sync.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            boss.shutdownGracefully();</span><br><span class=\"line\">            worker.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>编写初始化器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServerInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInitializer</span>&lt;<span class=\"title\">SocketChannel</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel socketChannel)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ChannelPipeline pipeline = socketChannel.pipeline();</span><br><span class=\"line\"><span class=\"comment\">//        jia 一堆处理器 策略模式</span></span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> LengthFieldBasedFrameDecoder(Integer.MAX_VALUE,<span class=\"number\">0</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>,<span class=\"number\">4</span>));</span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> LengthFieldPrepender(<span class=\"number\">4</span>));</span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> StringDecoder(CharsetUtil.UTF_8));</span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> StringEncoder(CharsetUtil.UTF_8));</span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> MyserverHandler());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编写数据处理器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class MyserverHandler extends SimpleChannelInboundHandler&lt;String&gt; &#123;</span><br><span class=\"line\">    private static ChannelGroup group=new DefaultChannelGroup(GlobalEventExecutor.INSTANCE);</span><br><span class=\"line\">//    处理方法</span><br><span class=\"line\">    protected void channelRead0(ChannelHandlerContext ctx, String s) throws Exception &#123;</span><br><span class=\"line\">        Channel channel = ctx.channel();</span><br><span class=\"line\">        group.writeAndFlush(ctx.channel().remoteAddress()+&quot;&gt;&gt;&gt;&gt;&quot;+s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123;</span><br><span class=\"line\">        cause.printStackTrace();</span><br><span class=\"line\"></span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void handlerAdded(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class=\"line\">        Channel channel = ctx.channel();</span><br><span class=\"line\">        group.writeAndFlush(channel.remoteAddress()+&quot;连接地址》》》》》》》&quot;);</span><br><span class=\"line\">        group.add(channel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void handlerRemoved(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class=\"line\">        Channel channel = ctx.channel();</span><br><span class=\"line\">        group.writeAndFlush(channel.remoteAddress()+&quot;断开连接》》》》》》》&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编写client 的main</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">       EventLoopGroup boss = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           Bootstrap bootstrap = <span class=\"keyword\">new</span> Bootstrap();</span><br><span class=\"line\">           bootstrap.group(boss).channel(NioSocketChannel.class).handler(<span class=\"keyword\">new</span> MyClientInitializer());</span><br><span class=\"line\">           ChannelFuture sync = bootstrap.connect(<span class=\"string\">\"127.0.0.1\"</span>,<span class=\"number\">8081</span>).sync();</span><br><span class=\"line\">           Channel channel = sync.channel();</span><br><span class=\"line\">           BufferedReader bufferedReader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in));</span><br><span class=\"line\">           <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">               channel.writeAndFlush(bufferedReader.readLine());</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">           boss.shutdownGracefully();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>其他和服务端一样，所以略；</p>\n<p>服务端启动类<code>serverBootstrap.bind(8081).sync()</code> 而客户端启动类配置是<code>ChannelFuture sync = bootstrap.connect(&quot;127.0.0.1&quot;,8081).sync();</code>区别就在这里</p>\n<h3 id=\"websocket-demo\"><a href=\"#websocket-demo\" class=\"headerlink\" title=\"websocket demo\"></a>websocket demo</h3>","site":{"data":{}},"excerpt":"<p>作者：muggle</p>\n<p>netty框架代码很猛（读源码有益身心健康），学习起来也比较难；在阅读这篇文章我假设你有了一定nio基础，tcp网络协议基础，否则不建议阅读。</p>\n<p>关于netty的学习视频我推荐B站张龙的教学视频，讲的很不错。学netty之前先学会用，然后在去看他的原理这样学起来会轻松不少。</p>","more":"<h3 id=\"http-demo\"><a href=\"#http-demo\" class=\"headerlink\" title=\"http demo\"></a>http demo</h3><p>用netty实现一个http服务端</p>\n<p>编写main函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestNetty</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        事件循环组 接收连接，将连接发送给work</span></span><br><span class=\"line\">        NioEventLoopGroup bossGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"><span class=\"comment\">//        work 干活</span></span><br><span class=\"line\">        NioEventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"><span class=\"comment\">//      简化服务端启动</span></span><br><span class=\"line\">        ServerBootstrap serverBootstrap=<span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\"><span class=\"comment\">//                     打开通道                                               子处理器 服务端初始化器</span></span><br><span class=\"line\">  serverBootstrap.group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).childHandler(<span class=\"keyword\">new</span> TestServerInitlizer());、</span><br><span class=\"line\">      <span class=\"comment\">// 绑定接口</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> ChannelFuture sync = serverBootstrap.bind(<span class=\"number\">8081</span>).sync();</span><br><span class=\"line\">        sync.channel().closeFuture().sync();</span><br><span class=\"line\">        bossGroup.shutdownGracefully();</span><br><span class=\"line\">        workerGroup.shutdownGracefully();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编写初始化器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化器 channel注册好之后 自动创建 执行代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServerInitlizer</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInitializer</span>&lt;<span class=\"title\">SocketChannel</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel socketChannel)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ChannelPipeline pipeline = socketChannel.pipeline();</span><br><span class=\"line\"><span class=\"comment\">//        对web响应编解码</span></span><br><span class=\"line\">        pipeline.addLast(<span class=\"string\">\"httpserverCodec\"</span>,<span class=\"keyword\">new</span> HttpServerCodec());</span><br><span class=\"line\"><span class=\"comment\">//        起名加入管道  自己的处理器</span></span><br><span class=\"line\">        pipeline.addLast(<span class=\"string\">\"testHttpResponse\"</span>,<span class=\"keyword\">new</span> TestHttpServerHandler());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编写数据处理器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestHttpServerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">HttpObject</span>&gt; </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//    构造一个Http响应</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext channelHandlerContext, HttpObject httpObject)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"请求读取处理4\"</span>);</span><br><span class=\"line\">        ByteBuf buffer=Unpooled.copiedBuffer(<span class=\"string\">\"&lt;!DOCTYPE html&gt;\\n\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"&lt;html lang=\\\"en\\\"&gt;\\n\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"&lt;head&gt;\\n\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"    &lt;meta charset=\\\"UTF-8\\\"&gt;\\n\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"    &lt;title&gt;Title&lt;/title&gt;\\n\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"&lt;/head&gt;\\n\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"&lt;body&gt;\\n\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"&lt;h1&gt;这是一个Netty构造的http响应&lt;/h1&gt;\\n\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"&lt;/body&gt;\\n\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"&lt;/html&gt;\"</span>, CharsetUtil.UTF_8);</span><br><span class=\"line\">        FullHttpResponse response=<span class=\"keyword\">new</span> DefaultFullHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.OK,buffer);</span><br><span class=\"line\">        response.headers().set(HttpHeaderNames.CONTENT_TYPE,<span class=\"string\">\"text/html\"</span>);</span><br><span class=\"line\">        response.headers().set(HttpHeaderNames.CONTENT_LENGTH,buffer.readableBytes());</span><br><span class=\"line\">        channelHandlerContext.writeAndFlush(response);</span><br><span class=\"line\">       channelHandlerContext.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelActive</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"通道处于活动状态 3\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.channelActive(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRegistered</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"通道注册 2\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.channelRegistered(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handlerAdded</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"处理器添加 1\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.handlerAdded(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelInactive</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"通道数据进入5\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.channelInactive(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelUnregistered</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"通道取消注册6\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.channelUnregistered(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<p>我们来看一下构造一个http服务端，都需要干些啥。</p>\n<p>在main函数中，我们创建了两个线程组<code>NioEventLoopGroup</code>，boss线程组负责接收请求，work线程组负责处理请求。<code>ServerBootstrap</code>服务端配置辅助器进行服务端配置，绑定端口号。</p>\n<p>初始化器<code>ChannelInitializer&lt;SocketChannel&gt;</code>对管道设置各种处理器，数据处理器<code>SimpleChannelInboundHandler&lt;HttpObject&gt;</code> 的<code>channelRead0</code>方法处理数据，调用<code>channelHandlerContext.writeAndFlush</code> 将数据写入通道，其他重写的方法看代码便能知道是干嘛的</p>\n<h3 id=\"socket-demo\"><a href=\"#socket-demo\" class=\"headerlink\" title=\"socket demo\"></a>socket demo</h3><p>socket连接步骤大同小异</p>\n<p>编写server的main函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EventLoopGroup boss=<span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\">        NioEventLoopGroup worker = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ServerBootstrap serverBootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\">            serverBootstrap.group(boss,worker).channel(NioServerSocketChannel.class).childHandler(<span class=\"keyword\">new</span> MyServerInitializer());</span><br><span class=\"line\">            ChannelFuture sync = serverBootstrap.bind(<span class=\"number\">8081</span>).sync();</span><br><span class=\"line\">            sync.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            boss.shutdownGracefully();</span><br><span class=\"line\">            worker.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>编写初始化器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServerInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInitializer</span>&lt;<span class=\"title\">SocketChannel</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel socketChannel)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ChannelPipeline pipeline = socketChannel.pipeline();</span><br><span class=\"line\"><span class=\"comment\">//        jia 一堆处理器 策略模式</span></span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> LengthFieldBasedFrameDecoder(Integer.MAX_VALUE,<span class=\"number\">0</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>,<span class=\"number\">4</span>));</span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> LengthFieldPrepender(<span class=\"number\">4</span>));</span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> StringDecoder(CharsetUtil.UTF_8));</span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> StringEncoder(CharsetUtil.UTF_8));</span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> MyserverHandler());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编写数据处理器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class MyserverHandler extends SimpleChannelInboundHandler&lt;String&gt; &#123;</span><br><span class=\"line\">    private static ChannelGroup group=new DefaultChannelGroup(GlobalEventExecutor.INSTANCE);</span><br><span class=\"line\">//    处理方法</span><br><span class=\"line\">    protected void channelRead0(ChannelHandlerContext ctx, String s) throws Exception &#123;</span><br><span class=\"line\">        Channel channel = ctx.channel();</span><br><span class=\"line\">        group.writeAndFlush(ctx.channel().remoteAddress()+&quot;&gt;&gt;&gt;&gt;&quot;+s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123;</span><br><span class=\"line\">        cause.printStackTrace();</span><br><span class=\"line\"></span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void handlerAdded(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class=\"line\">        Channel channel = ctx.channel();</span><br><span class=\"line\">        group.writeAndFlush(channel.remoteAddress()+&quot;连接地址》》》》》》》&quot;);</span><br><span class=\"line\">        group.add(channel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void handlerRemoved(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class=\"line\">        Channel channel = ctx.channel();</span><br><span class=\"line\">        group.writeAndFlush(channel.remoteAddress()+&quot;断开连接》》》》》》》&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编写client 的main</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">       EventLoopGroup boss = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           Bootstrap bootstrap = <span class=\"keyword\">new</span> Bootstrap();</span><br><span class=\"line\">           bootstrap.group(boss).channel(NioSocketChannel.class).handler(<span class=\"keyword\">new</span> MyClientInitializer());</span><br><span class=\"line\">           ChannelFuture sync = bootstrap.connect(<span class=\"string\">\"127.0.0.1\"</span>,<span class=\"number\">8081</span>).sync();</span><br><span class=\"line\">           Channel channel = sync.channel();</span><br><span class=\"line\">           BufferedReader bufferedReader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in));</span><br><span class=\"line\">           <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">               channel.writeAndFlush(bufferedReader.readLine());</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">           boss.shutdownGracefully();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>其他和服务端一样，所以略；</p>\n<p>服务端启动类<code>serverBootstrap.bind(8081).sync()</code> 而客户端启动类配置是<code>ChannelFuture sync = bootstrap.connect(&quot;127.0.0.1&quot;,8081).sync();</code>区别就在这里</p>\n<h3 id=\"websocket-demo\"><a href=\"#websocket-demo\" class=\"headerlink\" title=\"websocket demo\"></a>websocket demo</h3>"},{"title":"多线程编程进阶篇","date":"2019-04-23T01:24:43.000Z","_content":"\n作者：muggle\n\n ## 锁优化\n\n### 减小锁持有时间\n\n减小锁的持有时间可有效的减少锁的竞争。如果线程持有锁的时间越长，那么锁的竞争程度就会越激烈。因此，应尽可能减少线程对某个锁的占有时间，进而减少线程间互斥的可能。\n\n减少锁持有时间的方法有：\n\n- 进行条件判断，只对必要的情况进行加锁，而不是整个方法加锁；\n- 减少加锁代码的行数，只对必要的步骤加锁。\n\n<!--more-->\n\n### 减小锁粒度\n\n减小锁的范围，减少锁住的代码行数可减少锁范围，减小共享资源的范围也可减小锁的范围。减小锁共享资源的范围的方式比较常见的有分段锁，比如`ConcurrentHashMap`，它将数据分为了多段，当需要put元素的时候，并不是对整个hashmap进行加锁，而是先通过hashcode来知道他要放在那一个分段中，然后对这个分段进行加锁，所以当多线程put的时候，只要不是放在一个分段中，就实现了真正的并行的插入。\n\n### 锁分离 \n\n锁分离最常见的操作就是读写分离了，读写分离的操作参考**ReadWriteLock**章节，而对读写分离进一步的延伸就是锁分离了。为了提高线程的并行量，我们可以针对不同的功能（情形）采用不同的锁，而不是统统用同一把锁。比如说有一个同步方法未进行锁分离之前，它只有一把锁，任何线程来了，只有拿到锁才有资格运行；进行锁分离之后就不是这种情形了——来一个线程，先判断一下它要干嘛，然后发一个对应的锁给它，这样就能一定程度上提高线程的并行数。\n\n### 锁粗化\n\n一般为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，也就是说锁住的代码尽量少。但是如果如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化 。比如有三个步骤：a、b、c，a同步，b不同步，c同步；那么一个线程来时候会上锁释放锁然后又上锁释放锁。这样反而可能会降低线程的执行效率，这个时候我们可能将锁粗化可能会更好——执行a的时候上锁，执行完c再释放锁\n\n## 锁扩展\n\n### 分布式锁\n\njdk提供的锁在单体项目中不会有什么问题，但是在集群项目中就会有问题了。在分布式模型下，数据只有一份（或有限制），此时需要利用锁的技术控制某一时刻修改数据的进程数。jdk锁显然无法满足我们的需求，于是就有了分布式锁。\n\n分布式锁的实现有三种方式：\n\n- 基于数据库实现分布式锁\n- 基于缓存（redis，memcached，tair）实现分布式锁 \n- 基于Zookeeper实现分布式锁\n\n基于redis的分布式锁比较使用普遍，在这里介绍其原理和使用。redis实现锁的机制是setnx指令，setnx是原子操作命令，锁存在不能设置值，返回0；锁不存在，则设置锁，返回1，根据返回值来判断上锁是否成功。看到这里你可能想为啥不先get有没有值，再set上锁；首先我们要知道，redis是单线程的，同一时刻只有可能有一个线程操作内存，然后setnx 是一个操作步骤(具有原子性)，而get再set是两个步骤（不具有原子性）。如果使用第二种可能会发生这种情况：客户端 a get发现没有锁，这个时候被切换到客户端b，b get也发现没锁，然后b set，这个时候又切换到a客户端 a set；这种情况下，锁完全没起作用。所以，redis分布式锁，原子性是关键。\n\n对于web应用中redis客户端用的比较多的是lettuce，jedis，redisson。springboot的redis的start包底层是lettuce，但对redis分布式锁支持得最好的是redisson（如果用redisson你就享受不到redis自动化配置的好处了）；不过springboot的redisTemplete支持手写lua脚本，我们可以通过手写lua脚本来实现redis锁\n\n代码示例：\n\n```java\npublic boolean lockByLua(String key, String value, Long expiredTime){\n        String strExprie = String.valueOf(expiredTime);\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"if redis.call(\\\"setnx\\\",KEYS[1],ARGV[1])==1 \");\n        sb.append(\"then \");\n        sb.append(\"    redis.call(\\\"pexpire\\\",KEYS[1],KEYS[2]) \");\n        sb.append(\"    return 1 \");\n        sb.append(\"else \");\n        sb.append(\"    return 0 \");\n        sb.append(\"end \");\n        String script = sb.toString();\n        RedisCallback<Boolean> callback = (connection) -> {\n            return connection.eval(script.getBytes(), ReturnType.BOOLEAN, 2, key.getBytes(Charset.forName(\"UTF-8\")),strExprie.getBytes(Charset.forName(\"UTF-8\")), value.getBytes(Charset.forName(\"UTF-8\")));\n        };\n        Boolean execute = stringRedisTemplate.execute(callback);\n        return execute;\n    }\n```\n\n关于lua脚本的语法我就不做介绍了。\n\n在github上也有开源的redis锁项目，比如[spring-boot-klock-starter](https://github.com/kekingcn/spring-boot-klock-starter) 感兴趣的小伙伴可以去试用一下。\n\n### 数据库锁     \n\n对于存在多线程问题的项目，比如商品货物的进销存，订单系统单据流转这种，我们可以通过代码上锁来控制并发，也可以使用数据库锁来控制并发，数据库锁从机制上来说分数据库锁分乐观锁和悲观锁。\n\n悲观锁：\n\n悲观锁分为共享锁（S锁）和排他锁（X锁），mysql数据库读操作分为三种——快照读，当前读；快照读就是普通的读操作，如：\n\n```sql\nselect *from table\n```\n\n当前读就是对数据库上悲观锁了；其中\n\n```sql\nselect ... lock in share mode\n```\n\n属于共享锁，多个事务对于同一数据可以共享，但只能读不能修改。而下面三种sql\n\n```sql\nselect ...for update\nupdate ... set...\ninsert into ...\n```\n\n属于排他锁，排他锁就是不能与其他所并存，如一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取排他锁的事务是可以对数据就行读取和修改，排他锁是阻塞锁。\n\n乐观锁：\n\n就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，如果有则更新失败。一种实现方式为在数据库表中加一个版本号字段version，任何update语句where 后面都要跟上version=？，并且每次update版本号都加1。如果a线程要修改某条数据，它需要先select快照读获得版本号，然后update，同时版本号加一。这样就保证了在a线程修改某条数据的时候，确保其他线程没有修改过这条数据，一旦其他线程修改过，就会导致a线程版本号对不上而更新失败（这其实是一个简化版的mvcc）。\n\n乐观锁适用于允许更新失败的业务场景，悲观锁适用于确保更新操作被执行的场景。\n\n## 并发编程相关\n\n- 善用java 8 Stream\n- 对于生产者消费者模式，条件判断是使用while而不是if\n- 懒汉单例采用双重检查和锁保证线程安全\n- 善用Future模式\n- 合理使用ThreadLocal\n\njava8引入lambda表达式使在java中使用函数式编程很方便。而java8中的stream对数据的处理能使线程执行速度得以优化。Future模式是一种对异步线程的回调机制；现在cpu都是多核的，我们在处理一些较为费时的任务时可使用异步，在后台开启多个线程同时处理，等到异步线程处理完再通过Future回调拿到处理的结果。\n\nThreadLocal的实例代表了一个线程局部的变量，每条线程都只能看到自己的值，并不会意识到其它的线程中也存在该变量(这里原理就不说了，网上资料很多)，总之就是我们如果想在多线程的类里面使用线程安全的变量就用ThreadLocal。但是请一定要注意**用完记得remove**，不然会发生内存泄漏。\n\n## 总结\n\n随着后端发展，现在单体项目越来越少，基本上都是集群和分布式，这样也使得jdk的锁慢慢变得无用武之地。但是万变不离其宗，虽然锁的实现方式变了，但其机制是没变的；无论是分布式锁还是jdk锁，其目的和处理方式都是一个机制，只是处理对象不一样而已。\n\n我们在平时编写程序时对多线程最应该注意的就是线程优化和锁问题。我们脑中要对锁机制有一套体系，而对线程的优化经验在于平时的积累和留心。\n\n","source":"_posts/thread-3.md","raw":"---\ntitle: 多线程编程进阶篇\ndate: 2019-04-23 09:24:43\ntags: thread\n---\n\n作者：muggle\n\n ## 锁优化\n\n### 减小锁持有时间\n\n减小锁的持有时间可有效的减少锁的竞争。如果线程持有锁的时间越长，那么锁的竞争程度就会越激烈。因此，应尽可能减少线程对某个锁的占有时间，进而减少线程间互斥的可能。\n\n减少锁持有时间的方法有：\n\n- 进行条件判断，只对必要的情况进行加锁，而不是整个方法加锁；\n- 减少加锁代码的行数，只对必要的步骤加锁。\n\n<!--more-->\n\n### 减小锁粒度\n\n减小锁的范围，减少锁住的代码行数可减少锁范围，减小共享资源的范围也可减小锁的范围。减小锁共享资源的范围的方式比较常见的有分段锁，比如`ConcurrentHashMap`，它将数据分为了多段，当需要put元素的时候，并不是对整个hashmap进行加锁，而是先通过hashcode来知道他要放在那一个分段中，然后对这个分段进行加锁，所以当多线程put的时候，只要不是放在一个分段中，就实现了真正的并行的插入。\n\n### 锁分离 \n\n锁分离最常见的操作就是读写分离了，读写分离的操作参考**ReadWriteLock**章节，而对读写分离进一步的延伸就是锁分离了。为了提高线程的并行量，我们可以针对不同的功能（情形）采用不同的锁，而不是统统用同一把锁。比如说有一个同步方法未进行锁分离之前，它只有一把锁，任何线程来了，只有拿到锁才有资格运行；进行锁分离之后就不是这种情形了——来一个线程，先判断一下它要干嘛，然后发一个对应的锁给它，这样就能一定程度上提高线程的并行数。\n\n### 锁粗化\n\n一般为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，也就是说锁住的代码尽量少。但是如果如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化 。比如有三个步骤：a、b、c，a同步，b不同步，c同步；那么一个线程来时候会上锁释放锁然后又上锁释放锁。这样反而可能会降低线程的执行效率，这个时候我们可能将锁粗化可能会更好——执行a的时候上锁，执行完c再释放锁\n\n## 锁扩展\n\n### 分布式锁\n\njdk提供的锁在单体项目中不会有什么问题，但是在集群项目中就会有问题了。在分布式模型下，数据只有一份（或有限制），此时需要利用锁的技术控制某一时刻修改数据的进程数。jdk锁显然无法满足我们的需求，于是就有了分布式锁。\n\n分布式锁的实现有三种方式：\n\n- 基于数据库实现分布式锁\n- 基于缓存（redis，memcached，tair）实现分布式锁 \n- 基于Zookeeper实现分布式锁\n\n基于redis的分布式锁比较使用普遍，在这里介绍其原理和使用。redis实现锁的机制是setnx指令，setnx是原子操作命令，锁存在不能设置值，返回0；锁不存在，则设置锁，返回1，根据返回值来判断上锁是否成功。看到这里你可能想为啥不先get有没有值，再set上锁；首先我们要知道，redis是单线程的，同一时刻只有可能有一个线程操作内存，然后setnx 是一个操作步骤(具有原子性)，而get再set是两个步骤（不具有原子性）。如果使用第二种可能会发生这种情况：客户端 a get发现没有锁，这个时候被切换到客户端b，b get也发现没锁，然后b set，这个时候又切换到a客户端 a set；这种情况下，锁完全没起作用。所以，redis分布式锁，原子性是关键。\n\n对于web应用中redis客户端用的比较多的是lettuce，jedis，redisson。springboot的redis的start包底层是lettuce，但对redis分布式锁支持得最好的是redisson（如果用redisson你就享受不到redis自动化配置的好处了）；不过springboot的redisTemplete支持手写lua脚本，我们可以通过手写lua脚本来实现redis锁\n\n代码示例：\n\n```java\npublic boolean lockByLua(String key, String value, Long expiredTime){\n        String strExprie = String.valueOf(expiredTime);\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"if redis.call(\\\"setnx\\\",KEYS[1],ARGV[1])==1 \");\n        sb.append(\"then \");\n        sb.append(\"    redis.call(\\\"pexpire\\\",KEYS[1],KEYS[2]) \");\n        sb.append(\"    return 1 \");\n        sb.append(\"else \");\n        sb.append(\"    return 0 \");\n        sb.append(\"end \");\n        String script = sb.toString();\n        RedisCallback<Boolean> callback = (connection) -> {\n            return connection.eval(script.getBytes(), ReturnType.BOOLEAN, 2, key.getBytes(Charset.forName(\"UTF-8\")),strExprie.getBytes(Charset.forName(\"UTF-8\")), value.getBytes(Charset.forName(\"UTF-8\")));\n        };\n        Boolean execute = stringRedisTemplate.execute(callback);\n        return execute;\n    }\n```\n\n关于lua脚本的语法我就不做介绍了。\n\n在github上也有开源的redis锁项目，比如[spring-boot-klock-starter](https://github.com/kekingcn/spring-boot-klock-starter) 感兴趣的小伙伴可以去试用一下。\n\n### 数据库锁     \n\n对于存在多线程问题的项目，比如商品货物的进销存，订单系统单据流转这种，我们可以通过代码上锁来控制并发，也可以使用数据库锁来控制并发，数据库锁从机制上来说分数据库锁分乐观锁和悲观锁。\n\n悲观锁：\n\n悲观锁分为共享锁（S锁）和排他锁（X锁），mysql数据库读操作分为三种——快照读，当前读；快照读就是普通的读操作，如：\n\n```sql\nselect *from table\n```\n\n当前读就是对数据库上悲观锁了；其中\n\n```sql\nselect ... lock in share mode\n```\n\n属于共享锁，多个事务对于同一数据可以共享，但只能读不能修改。而下面三种sql\n\n```sql\nselect ...for update\nupdate ... set...\ninsert into ...\n```\n\n属于排他锁，排他锁就是不能与其他所并存，如一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取排他锁的事务是可以对数据就行读取和修改，排他锁是阻塞锁。\n\n乐观锁：\n\n就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，如果有则更新失败。一种实现方式为在数据库表中加一个版本号字段version，任何update语句where 后面都要跟上version=？，并且每次update版本号都加1。如果a线程要修改某条数据，它需要先select快照读获得版本号，然后update，同时版本号加一。这样就保证了在a线程修改某条数据的时候，确保其他线程没有修改过这条数据，一旦其他线程修改过，就会导致a线程版本号对不上而更新失败（这其实是一个简化版的mvcc）。\n\n乐观锁适用于允许更新失败的业务场景，悲观锁适用于确保更新操作被执行的场景。\n\n## 并发编程相关\n\n- 善用java 8 Stream\n- 对于生产者消费者模式，条件判断是使用while而不是if\n- 懒汉单例采用双重检查和锁保证线程安全\n- 善用Future模式\n- 合理使用ThreadLocal\n\njava8引入lambda表达式使在java中使用函数式编程很方便。而java8中的stream对数据的处理能使线程执行速度得以优化。Future模式是一种对异步线程的回调机制；现在cpu都是多核的，我们在处理一些较为费时的任务时可使用异步，在后台开启多个线程同时处理，等到异步线程处理完再通过Future回调拿到处理的结果。\n\nThreadLocal的实例代表了一个线程局部的变量，每条线程都只能看到自己的值，并不会意识到其它的线程中也存在该变量(这里原理就不说了，网上资料很多)，总之就是我们如果想在多线程的类里面使用线程安全的变量就用ThreadLocal。但是请一定要注意**用完记得remove**，不然会发生内存泄漏。\n\n## 总结\n\n随着后端发展，现在单体项目越来越少，基本上都是集群和分布式，这样也使得jdk的锁慢慢变得无用武之地。但是万变不离其宗，虽然锁的实现方式变了，但其机制是没变的；无论是分布式锁还是jdk锁，其目的和处理方式都是一个机制，只是处理对象不一样而已。\n\n我们在平时编写程序时对多线程最应该注意的就是线程优化和锁问题。我们脑中要对锁机制有一套体系，而对线程的优化经验在于平时的积累和留心。\n\n","slug":"thread-3","published":1,"updated":"2019-05-13T02:00:10.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxtc002uvovmte041c79","content":"<p>作者：muggle</p>\n<h2 id=\"锁优化\"><a href=\"#锁优化\" class=\"headerlink\" title=\"锁优化\"></a>锁优化</h2><h3 id=\"减小锁持有时间\"><a href=\"#减小锁持有时间\" class=\"headerlink\" title=\"减小锁持有时间\"></a>减小锁持有时间</h3><p>减小锁的持有时间可有效的减少锁的竞争。如果线程持有锁的时间越长，那么锁的竞争程度就会越激烈。因此，应尽可能减少线程对某个锁的占有时间，进而减少线程间互斥的可能。</p>\n<p>减少锁持有时间的方法有：</p>\n<ul>\n<li>进行条件判断，只对必要的情况进行加锁，而不是整个方法加锁；</li>\n<li>减少加锁代码的行数，只对必要的步骤加锁。</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"减小锁粒度\"><a href=\"#减小锁粒度\" class=\"headerlink\" title=\"减小锁粒度\"></a>减小锁粒度</h3><p>减小锁的范围，减少锁住的代码行数可减少锁范围，减小共享资源的范围也可减小锁的范围。减小锁共享资源的范围的方式比较常见的有分段锁，比如<code>ConcurrentHashMap</code>，它将数据分为了多段，当需要put元素的时候，并不是对整个hashmap进行加锁，而是先通过hashcode来知道他要放在那一个分段中，然后对这个分段进行加锁，所以当多线程put的时候，只要不是放在一个分段中，就实现了真正的并行的插入。</p>\n<h3 id=\"锁分离\"><a href=\"#锁分离\" class=\"headerlink\" title=\"锁分离\"></a>锁分离</h3><p>锁分离最常见的操作就是读写分离了，读写分离的操作参考<strong>ReadWriteLock</strong>章节，而对读写分离进一步的延伸就是锁分离了。为了提高线程的并行量，我们可以针对不同的功能（情形）采用不同的锁，而不是统统用同一把锁。比如说有一个同步方法未进行锁分离之前，它只有一把锁，任何线程来了，只有拿到锁才有资格运行；进行锁分离之后就不是这种情形了——来一个线程，先判断一下它要干嘛，然后发一个对应的锁给它，这样就能一定程度上提高线程的并行数。</p>\n<h3 id=\"锁粗化\"><a href=\"#锁粗化\" class=\"headerlink\" title=\"锁粗化\"></a>锁粗化</h3><p>一般为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，也就是说锁住的代码尽量少。但是如果如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化 。比如有三个步骤：a、b、c，a同步，b不同步，c同步；那么一个线程来时候会上锁释放锁然后又上锁释放锁。这样反而可能会降低线程的执行效率，这个时候我们可能将锁粗化可能会更好——执行a的时候上锁，执行完c再释放锁</p>\n<h2 id=\"锁扩展\"><a href=\"#锁扩展\" class=\"headerlink\" title=\"锁扩展\"></a>锁扩展</h2><h3 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h3><p>jdk提供的锁在单体项目中不会有什么问题，但是在集群项目中就会有问题了。在分布式模型下，数据只有一份（或有限制），此时需要利用锁的技术控制某一时刻修改数据的进程数。jdk锁显然无法满足我们的需求，于是就有了分布式锁。</p>\n<p>分布式锁的实现有三种方式：</p>\n<ul>\n<li>基于数据库实现分布式锁</li>\n<li>基于缓存（redis，memcached，tair）实现分布式锁 </li>\n<li>基于Zookeeper实现分布式锁</li>\n</ul>\n<p>基于redis的分布式锁比较使用普遍，在这里介绍其原理和使用。redis实现锁的机制是setnx指令，setnx是原子操作命令，锁存在不能设置值，返回0；锁不存在，则设置锁，返回1，根据返回值来判断上锁是否成功。看到这里你可能想为啥不先get有没有值，再set上锁；首先我们要知道，redis是单线程的，同一时刻只有可能有一个线程操作内存，然后setnx 是一个操作步骤(具有原子性)，而get再set是两个步骤（不具有原子性）。如果使用第二种可能会发生这种情况：客户端 a get发现没有锁，这个时候被切换到客户端b，b get也发现没锁，然后b set，这个时候又切换到a客户端 a set；这种情况下，锁完全没起作用。所以，redis分布式锁，原子性是关键。</p>\n<p>对于web应用中redis客户端用的比较多的是lettuce，jedis，redisson。springboot的redis的start包底层是lettuce，但对redis分布式锁支持得最好的是redisson（如果用redisson你就享受不到redis自动化配置的好处了）；不过springboot的redisTemplete支持手写lua脚本，我们可以通过手写lua脚本来实现redis锁</p>\n<p>代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">lockByLua</span><span class=\"params\">(String key, String value, Long expiredTime)</span></span>&#123;</span><br><span class=\"line\">        String strExprie = String.valueOf(expiredTime);</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"if redis.call(\\\"setnx\\\",KEYS[1],ARGV[1])==1 \"</span>);</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"then \"</span>);</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"    redis.call(\\\"pexpire\\\",KEYS[1],KEYS[2]) \"</span>);</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"    return 1 \"</span>);</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"else \"</span>);</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"    return 0 \"</span>);</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"end \"</span>);</span><br><span class=\"line\">        String script = sb.toString();</span><br><span class=\"line\">        RedisCallback&lt;Boolean&gt; callback = (connection) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> connection.eval(script.getBytes(), ReturnType.BOOLEAN, <span class=\"number\">2</span>, key.getBytes(Charset.forName(<span class=\"string\">\"UTF-8\"</span>)),strExprie.getBytes(Charset.forName(<span class=\"string\">\"UTF-8\"</span>)), value.getBytes(Charset.forName(<span class=\"string\">\"UTF-8\"</span>)));</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        Boolean execute = stringRedisTemplate.execute(callback);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> execute;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>关于lua脚本的语法我就不做介绍了。</p>\n<p>在github上也有开源的redis锁项目，比如<a href=\"https://github.com/kekingcn/spring-boot-klock-starter\" target=\"_blank\" rel=\"noopener\">spring-boot-klock-starter</a> 感兴趣的小伙伴可以去试用一下。</p>\n<h3 id=\"数据库锁\"><a href=\"#数据库锁\" class=\"headerlink\" title=\"数据库锁\"></a>数据库锁</h3><p>对于存在多线程问题的项目，比如商品货物的进销存，订单系统单据流转这种，我们可以通过代码上锁来控制并发，也可以使用数据库锁来控制并发，数据库锁从机制上来说分数据库锁分乐观锁和悲观锁。</p>\n<p>悲观锁：</p>\n<p>悲观锁分为共享锁（S锁）和排他锁（X锁），mysql数据库读操作分为三种——快照读，当前读；快照读就是普通的读操作，如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> *<span class=\"keyword\">from</span> <span class=\"keyword\">table</span></span><br></pre></td></tr></table></figure>\n<p>当前读就是对数据库上悲观锁了；其中</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> ... <span class=\"keyword\">lock</span> <span class=\"keyword\">in</span> <span class=\"keyword\">share</span> <span class=\"keyword\">mode</span></span><br></pre></td></tr></table></figure>\n<p>属于共享锁，多个事务对于同一数据可以共享，但只能读不能修改。而下面三种sql</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> ...for <span class=\"keyword\">update</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> ... set...</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> ...</span><br></pre></td></tr></table></figure>\n<p>属于排他锁，排他锁就是不能与其他所并存，如一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取排他锁的事务是可以对数据就行读取和修改，排他锁是阻塞锁。</p>\n<p>乐观锁：</p>\n<p>就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，如果有则更新失败。一种实现方式为在数据库表中加一个版本号字段version，任何update语句where 后面都要跟上version=？，并且每次update版本号都加1。如果a线程要修改某条数据，它需要先select快照读获得版本号，然后update，同时版本号加一。这样就保证了在a线程修改某条数据的时候，确保其他线程没有修改过这条数据，一旦其他线程修改过，就会导致a线程版本号对不上而更新失败（这其实是一个简化版的mvcc）。</p>\n<p>乐观锁适用于允许更新失败的业务场景，悲观锁适用于确保更新操作被执行的场景。</p>\n<h2 id=\"并发编程相关\"><a href=\"#并发编程相关\" class=\"headerlink\" title=\"并发编程相关\"></a>并发编程相关</h2><ul>\n<li>善用java 8 Stream</li>\n<li>对于生产者消费者模式，条件判断是使用while而不是if</li>\n<li>懒汉单例采用双重检查和锁保证线程安全</li>\n<li>善用Future模式</li>\n<li>合理使用ThreadLocal</li>\n</ul>\n<p>java8引入lambda表达式使在java中使用函数式编程很方便。而java8中的stream对数据的处理能使线程执行速度得以优化。Future模式是一种对异步线程的回调机制；现在cpu都是多核的，我们在处理一些较为费时的任务时可使用异步，在后台开启多个线程同时处理，等到异步线程处理完再通过Future回调拿到处理的结果。</p>\n<p>ThreadLocal的实例代表了一个线程局部的变量，每条线程都只能看到自己的值，并不会意识到其它的线程中也存在该变量(这里原理就不说了，网上资料很多)，总之就是我们如果想在多线程的类里面使用线程安全的变量就用ThreadLocal。但是请一定要注意<strong>用完记得remove</strong>，不然会发生内存泄漏。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>随着后端发展，现在单体项目越来越少，基本上都是集群和分布式，这样也使得jdk的锁慢慢变得无用武之地。但是万变不离其宗，虽然锁的实现方式变了，但其机制是没变的；无论是分布式锁还是jdk锁，其目的和处理方式都是一个机制，只是处理对象不一样而已。</p>\n<p>我们在平时编写程序时对多线程最应该注意的就是线程优化和锁问题。我们脑中要对锁机制有一套体系，而对线程的优化经验在于平时的积累和留心。</p>\n","site":{"data":{}},"excerpt":"<p>作者：muggle</p>\n<h2 id=\"锁优化\"><a href=\"#锁优化\" class=\"headerlink\" title=\"锁优化\"></a>锁优化</h2><h3 id=\"减小锁持有时间\"><a href=\"#减小锁持有时间\" class=\"headerlink\" title=\"减小锁持有时间\"></a>减小锁持有时间</h3><p>减小锁的持有时间可有效的减少锁的竞争。如果线程持有锁的时间越长，那么锁的竞争程度就会越激烈。因此，应尽可能减少线程对某个锁的占有时间，进而减少线程间互斥的可能。</p>\n<p>减少锁持有时间的方法有：</p>\n<ul>\n<li>进行条件判断，只对必要的情况进行加锁，而不是整个方法加锁；</li>\n<li>减少加锁代码的行数，只对必要的步骤加锁。</li>\n</ul>","more":"<h3 id=\"减小锁粒度\"><a href=\"#减小锁粒度\" class=\"headerlink\" title=\"减小锁粒度\"></a>减小锁粒度</h3><p>减小锁的范围，减少锁住的代码行数可减少锁范围，减小共享资源的范围也可减小锁的范围。减小锁共享资源的范围的方式比较常见的有分段锁，比如<code>ConcurrentHashMap</code>，它将数据分为了多段，当需要put元素的时候，并不是对整个hashmap进行加锁，而是先通过hashcode来知道他要放在那一个分段中，然后对这个分段进行加锁，所以当多线程put的时候，只要不是放在一个分段中，就实现了真正的并行的插入。</p>\n<h3 id=\"锁分离\"><a href=\"#锁分离\" class=\"headerlink\" title=\"锁分离\"></a>锁分离</h3><p>锁分离最常见的操作就是读写分离了，读写分离的操作参考<strong>ReadWriteLock</strong>章节，而对读写分离进一步的延伸就是锁分离了。为了提高线程的并行量，我们可以针对不同的功能（情形）采用不同的锁，而不是统统用同一把锁。比如说有一个同步方法未进行锁分离之前，它只有一把锁，任何线程来了，只有拿到锁才有资格运行；进行锁分离之后就不是这种情形了——来一个线程，先判断一下它要干嘛，然后发一个对应的锁给它，这样就能一定程度上提高线程的并行数。</p>\n<h3 id=\"锁粗化\"><a href=\"#锁粗化\" class=\"headerlink\" title=\"锁粗化\"></a>锁粗化</h3><p>一般为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，也就是说锁住的代码尽量少。但是如果如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化 。比如有三个步骤：a、b、c，a同步，b不同步，c同步；那么一个线程来时候会上锁释放锁然后又上锁释放锁。这样反而可能会降低线程的执行效率，这个时候我们可能将锁粗化可能会更好——执行a的时候上锁，执行完c再释放锁</p>\n<h2 id=\"锁扩展\"><a href=\"#锁扩展\" class=\"headerlink\" title=\"锁扩展\"></a>锁扩展</h2><h3 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h3><p>jdk提供的锁在单体项目中不会有什么问题，但是在集群项目中就会有问题了。在分布式模型下，数据只有一份（或有限制），此时需要利用锁的技术控制某一时刻修改数据的进程数。jdk锁显然无法满足我们的需求，于是就有了分布式锁。</p>\n<p>分布式锁的实现有三种方式：</p>\n<ul>\n<li>基于数据库实现分布式锁</li>\n<li>基于缓存（redis，memcached，tair）实现分布式锁 </li>\n<li>基于Zookeeper实现分布式锁</li>\n</ul>\n<p>基于redis的分布式锁比较使用普遍，在这里介绍其原理和使用。redis实现锁的机制是setnx指令，setnx是原子操作命令，锁存在不能设置值，返回0；锁不存在，则设置锁，返回1，根据返回值来判断上锁是否成功。看到这里你可能想为啥不先get有没有值，再set上锁；首先我们要知道，redis是单线程的，同一时刻只有可能有一个线程操作内存，然后setnx 是一个操作步骤(具有原子性)，而get再set是两个步骤（不具有原子性）。如果使用第二种可能会发生这种情况：客户端 a get发现没有锁，这个时候被切换到客户端b，b get也发现没锁，然后b set，这个时候又切换到a客户端 a set；这种情况下，锁完全没起作用。所以，redis分布式锁，原子性是关键。</p>\n<p>对于web应用中redis客户端用的比较多的是lettuce，jedis，redisson。springboot的redis的start包底层是lettuce，但对redis分布式锁支持得最好的是redisson（如果用redisson你就享受不到redis自动化配置的好处了）；不过springboot的redisTemplete支持手写lua脚本，我们可以通过手写lua脚本来实现redis锁</p>\n<p>代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">lockByLua</span><span class=\"params\">(String key, String value, Long expiredTime)</span></span>&#123;</span><br><span class=\"line\">        String strExprie = String.valueOf(expiredTime);</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"if redis.call(\\\"setnx\\\",KEYS[1],ARGV[1])==1 \"</span>);</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"then \"</span>);</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"    redis.call(\\\"pexpire\\\",KEYS[1],KEYS[2]) \"</span>);</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"    return 1 \"</span>);</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"else \"</span>);</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"    return 0 \"</span>);</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"end \"</span>);</span><br><span class=\"line\">        String script = sb.toString();</span><br><span class=\"line\">        RedisCallback&lt;Boolean&gt; callback = (connection) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> connection.eval(script.getBytes(), ReturnType.BOOLEAN, <span class=\"number\">2</span>, key.getBytes(Charset.forName(<span class=\"string\">\"UTF-8\"</span>)),strExprie.getBytes(Charset.forName(<span class=\"string\">\"UTF-8\"</span>)), value.getBytes(Charset.forName(<span class=\"string\">\"UTF-8\"</span>)));</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        Boolean execute = stringRedisTemplate.execute(callback);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> execute;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>关于lua脚本的语法我就不做介绍了。</p>\n<p>在github上也有开源的redis锁项目，比如<a href=\"https://github.com/kekingcn/spring-boot-klock-starter\" target=\"_blank\" rel=\"noopener\">spring-boot-klock-starter</a> 感兴趣的小伙伴可以去试用一下。</p>\n<h3 id=\"数据库锁\"><a href=\"#数据库锁\" class=\"headerlink\" title=\"数据库锁\"></a>数据库锁</h3><p>对于存在多线程问题的项目，比如商品货物的进销存，订单系统单据流转这种，我们可以通过代码上锁来控制并发，也可以使用数据库锁来控制并发，数据库锁从机制上来说分数据库锁分乐观锁和悲观锁。</p>\n<p>悲观锁：</p>\n<p>悲观锁分为共享锁（S锁）和排他锁（X锁），mysql数据库读操作分为三种——快照读，当前读；快照读就是普通的读操作，如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> *<span class=\"keyword\">from</span> <span class=\"keyword\">table</span></span><br></pre></td></tr></table></figure>\n<p>当前读就是对数据库上悲观锁了；其中</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> ... <span class=\"keyword\">lock</span> <span class=\"keyword\">in</span> <span class=\"keyword\">share</span> <span class=\"keyword\">mode</span></span><br></pre></td></tr></table></figure>\n<p>属于共享锁，多个事务对于同一数据可以共享，但只能读不能修改。而下面三种sql</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> ...for <span class=\"keyword\">update</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> ... set...</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> ...</span><br></pre></td></tr></table></figure>\n<p>属于排他锁，排他锁就是不能与其他所并存，如一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取排他锁的事务是可以对数据就行读取和修改，排他锁是阻塞锁。</p>\n<p>乐观锁：</p>\n<p>就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，如果有则更新失败。一种实现方式为在数据库表中加一个版本号字段version，任何update语句where 后面都要跟上version=？，并且每次update版本号都加1。如果a线程要修改某条数据，它需要先select快照读获得版本号，然后update，同时版本号加一。这样就保证了在a线程修改某条数据的时候，确保其他线程没有修改过这条数据，一旦其他线程修改过，就会导致a线程版本号对不上而更新失败（这其实是一个简化版的mvcc）。</p>\n<p>乐观锁适用于允许更新失败的业务场景，悲观锁适用于确保更新操作被执行的场景。</p>\n<h2 id=\"并发编程相关\"><a href=\"#并发编程相关\" class=\"headerlink\" title=\"并发编程相关\"></a>并发编程相关</h2><ul>\n<li>善用java 8 Stream</li>\n<li>对于生产者消费者模式，条件判断是使用while而不是if</li>\n<li>懒汉单例采用双重检查和锁保证线程安全</li>\n<li>善用Future模式</li>\n<li>合理使用ThreadLocal</li>\n</ul>\n<p>java8引入lambda表达式使在java中使用函数式编程很方便。而java8中的stream对数据的处理能使线程执行速度得以优化。Future模式是一种对异步线程的回调机制；现在cpu都是多核的，我们在处理一些较为费时的任务时可使用异步，在后台开启多个线程同时处理，等到异步线程处理完再通过Future回调拿到处理的结果。</p>\n<p>ThreadLocal的实例代表了一个线程局部的变量，每条线程都只能看到自己的值，并不会意识到其它的线程中也存在该变量(这里原理就不说了，网上资料很多)，总之就是我们如果想在多线程的类里面使用线程安全的变量就用ThreadLocal。但是请一定要注意<strong>用完记得remove</strong>，不然会发生内存泄漏。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>随着后端发展，现在单体项目越来越少，基本上都是集群和分布式，这样也使得jdk的锁慢慢变得无用武之地。但是万变不离其宗，虽然锁的实现方式变了，但其机制是没变的；无论是分布式锁还是jdk锁，其目的和处理方式都是一个机制，只是处理对象不一样而已。</p>\n<p>我们在平时编写程序时对多线程最应该注意的就是线程优化和锁问题。我们脑中要对锁机制有一套体系，而对线程的优化经验在于平时的积累和留心。</p>"},{"title":"多线程编程基础第二篇","date":"2019-04-23T01:22:05.000Z","_content":"\n作者：muggle\n\n## 扩展\n\ncas(比较替换)：无锁策略的一种实现方式，过程为获取到变量旧值（每个线程都有一份变量值的副本），和变量目前的新值做比较，如果一样证明变量没被其他线程修改过，这个线程就可以更新这个变量，否则不能更新；通俗的说就是通过不加锁的方式来修改共享资源并同时保证安全性。\n\n使用cas的话对于属性变量不能再用传统的int ,long等；要使用原子类代替原先的数据类型操作，比如AtomicBoolean，AtomicInteger，AtomicInteger等。\n\n## java线程锁的分类与实现\n\n以下分类是从多个同角度来划分，而不是以某一标准来划分，请注意\n\n- 阻塞锁：当一个线程获得锁，其他线程就会被阻塞挂起，直到抢占到锁才继续执行，这样会导致CPU切换上下文，切换上下文对CPU而言是很耗费时间的\n- 非阻塞锁：当一个线程获得锁，其他线程直接跳过锁资源相关的代码继续执行，就是非阻塞锁\n- 自旋锁：当一个线程获得锁，其他线程则在不停进行空循环，直到抢到锁，这样做的好处是避免了上下文切换\n- 可重入锁：也叫做递归锁，当一个线程外层函数获得锁之后 ，内层递归函数仍然可以该锁的相关代码，不受影响。\n- 互斥锁：互斥锁保证了某一时刻只能有一个线程占有该资源。\n- 读写锁：将代码功能分为读和写，读不互斥，写互斥；\n- 公平锁/非公平锁：公平锁就是在等待队列里排最前面的的先获得锁，非公平锁就是谁抢到谁用；\n- 重量级锁/轻量级锁/偏向锁：使用操作系统“Mutex Lock”功能来实现锁机制的叫重量级锁，因为这种锁成本高；轻量级锁是对重量级锁的优化，提高性能；偏向锁是对轻量级锁的优化，在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径。\n\n<!--more-->\n\n###  synchronized\n\n属于阻塞锁，互斥锁，非公平锁，可重入锁，在JDK1.6以前属于重量级锁，后来做了优化；\n\n用法：\n- 指定加锁对象；\n- 用于静态代码块/方法\n- 用于动态代码块/方法\n\n示例\n\n```\n\t\tpublic static synchronized void test1(){\n            System.out.println(\"test\");\n        }\n\n        public  synchronized void test2(){\n            System.out.println(\"test\");\n        }\n                 \n        public void test3(){\n            synchronized (this){\n                System.out.println(\"test\");\n            }\n        }\n```\n\n当锁加在静态代码块/方法上时，锁作用于整个类，凡是属于这个类的对象的相关都会被上锁，当用于动态代码块/方法/对象时锁作用于对象；除此之外，synchronized可以保证线程的可见性和有序性。\n\n### Lock\n\nlock 是一个接口，其下有多个实现类；\n\n方法说明：\n\n- lock()方法是平常使用得最多的一个方法，就是用来获取锁。如果锁已被其他线程获取，则进行等待。\n- tryLock()方法是有返回值的，它表示用来尝试获取锁，如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false，这个方法还可以设置一个获取锁的等待时长，如果时间内获取不到直接返回。\n- 两个线程同时通过lock.lockInterruptibly()想获取某个锁时，假若此时线程A获取到了锁，而线程B只有在等待，那么对线程B调用threadB.interrupt()方法能够中断线程B的等待过程\n- unLock()方法是用来释放锁\n- newCondition()：生成一个和线程绑定的Condition实例，利用该实例我们可以让线程在合适的时候等待，在特定的时候继续执行；相当于得到这个线程的wait和notify方法；\n\n### ReentrantLock\n\nReentrantLock重入锁，是实现Lock接口的一个类，它对公平锁和非公平锁都支持；在构造方法中传入一个boolean值，true时为公平锁，false时为非公平锁\n\n### Semaphore(信号量)\n\n信号量是对锁的扩展，锁每次只允许一个线程访问一个资源，而信号量却可以指定多个线程访问某个资源；信号量的构造函数为\n\n```java\npublic Semaphore(int permits) {\n        sync = new NonfairSync(permits);\n    }\npublic Semaphore(int permits, boolean fair) {\n        sync = fair ? new FairSync(permits) : new NonfairSync(permits);\n    }\n```\n\n第一个方法指定了可使用的线程数，第二个方法的布尔值表示是否为公平锁；\n\nacquire()方法尝试获得一个许可，如果获取不到则等待；tryAcquire()方法尝试获取一个许可，成功返回true，失败返回false，不会阻塞，tryAcquire(int i) 指定等待时间；release()方法释放一个许可。\n\n### ReadWriteLock\n\n读写分离锁， 读写分离锁可以有效的减少锁竞争，读锁是共享锁，可以被多个线程同时获取，写锁是互斥只能被一个线程占有，ReadWriteLock是一个接口，其中readLock()获得读锁，writeLock()获得写锁 其实现类ReentrantReadWriteLock是一个可重入得的读写锁，它支持锁的降级(在获得写锁的情况下可以再持有读锁)，不支持锁的升级（在获得读锁的情况下不能再获得写锁）；读锁和写锁也是互斥的，也就是一个资源要么被上了一个写锁，要么被上了多个读锁，不会发生这个资即被上写锁又被上读锁的情况。\n\n## 并发下集合类\n\n并发集合类主要有：\n\n- ConcurrentHashMap：支持多线程的分段哈希表，它通过将整个哈希表分成多段的方式减小锁粒度\n- ConcurrentSkipListMap：ConcurrentSkipListMap的底层是通过跳表来实现的。跳表是一个链表，但是通过使用“跳跃式”查找的方式使得插入、读取数据时复杂度变成了O（logn）;\n- ConCurrentSkipListSet：参考ConcurrentSkipListMap；\n- CopyOnWriteArrayList：是ArrayList 的一个线程安全的变形，其中所有可变操作（添加、设置，等等）都是通过对基础数组进行一次新的复制来实现的; \n- CopyOnWriteArraySet：参考CopyOnWriteArrayList; \n-  ConcurrentLinkedQueue：cas实现的非阻塞并发队列;\n\n## 线程池\n\n### 介绍\n\n多线程的设计优点是能很大限度的发挥多核处理器的计算能力，但是，若不控制好线程资源反而会拖累cpu，降低系统性能，这就涉及到了线程的回收复用等一系列问题；而且本身线程的创建和销毁也很耗费资源，因此找到一个合适的方法来提高线程的复用就很必要了。\n\n线程池就是解决这类问题的一个很好的方法：线程池中本身有很多个线程，当需要使用线程的时候拿一个线程出来，当用完则还回去，而不是每次都创建和销毁。在JDK中提供了一套Executor线程池框架，帮助开发人员有效的进行线程控制。\n\n### Executor使用\n\n获得线程池的方法：\n\n- newFixedThreadPool(int nThreads) ：创建固定数目线程的线程池；\n- newCachedThreadPool：创建一个可缓存的线程池，调用execute将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线 程并添加到池中；\n- newSingleThreadExecutor：创建一个单线程化的Executor；\n- newScheduledThreadPool：创建一个支持定时及周期性的任务执行的线程池。\n\n以上方法都是返回一个ExecutorService对象，executorService.execute()传入一个Runnable对象，可执行一个线程任务\n\n下面看示例代码\n\n```java\npublic class Test implements Runnable{\n\tint i=0;\n\tpublic Test(int i){\n\t\tthis.i=i;\n\t}\n\tpublic void run() {\n\t\tSystem.out.println(Thread.currentThread().getName()+\"=====\"+i);\n\t}\n    public static void main(String[] args) throws InterruptedException {\n\t\tExecutorService cachedThreadPool = Executors.newCachedThreadPool();\n\t\tfor(int i=0;i<10;i++){\n\t\t\tcachedThreadPool.execute(new Test(i));\n\t\t\tThread.sleep(1000);\n\t\t}\n\t}\n}\n\n```\n\n线程池是一个庞大而复杂的体系，本系列文章定位是基础，不对其做更深入的研究，感兴趣的小伙伴可以自行查资料进行学习。\n\n### ScheduledExecutorService\n\nnewScheduledThreadPool(int corePoolSize)会返回一个ScheduledExecutorService对象，可以根据时间对线程进行调度；其下有三个执行线程任务的方法：schedule()，scheduleAtFixedRate()，scheduleWithFixedDelay()；该线程池可解决定时任务的问题。\n\n示例：\n\n```java\nclass Test implements Runnable {\n    \n    private String testStr;\n    \n    Test(String testStr) {\n        this.testStr = testStr;\n    }\n\n    @Override\n    public void run() {\n        System.out.println(testStr + \" >>>> print\");\n    }\n    \n    public static void main(String[] args) {\n        ScheduledExecutorService service = Executors.newScheduledThreadPool(10);\n        long wait = 1;\n        long period = 1;\n        service.scheduleAtFixedRate(new MyScheduledExecutor(\"job1\"), wait, period, TimeUnit.SECONDS);\n        service.scheduleWithFixedDelay(new MyScheduledExecutor(\"job2\"), wait, period, TimeUnit.SECONDS);\n        scheduledExecutorService.schedule(new MyScheduledExecutor(\"job3\"), wait, TimeUnit.SECONDS);//延时waits 执行\n    }\n}\n```\n\njob1的执行方式是任务发起后间隔`wait`秒开始执行，每隔`period`秒(注意：不包括上一个线程的执行时间)执行一次；\n\njob2的执行方式是任务发起后间隔`wait`秒开始执行，等线程结束后隔`period`秒开始执行下一个线程；\n\njob3只执行一次，延迟`wait`秒执行；\n\nScheduledExecutorService还可以配合Callable使用来回调获得线程执行结果，还可以取消队列中的执行任务等操作，这属于比较复杂的用法，我们这里掌握基本的即可，到实际遇到相应的问题时我们在现学现用，节省学习成本。","source":"_posts/thread-2.md","raw":"---\ntitle: 多线程编程基础第二篇\ndate: 2019-04-23 09:22:05\ntags: thread\n---\n\n作者：muggle\n\n## 扩展\n\ncas(比较替换)：无锁策略的一种实现方式，过程为获取到变量旧值（每个线程都有一份变量值的副本），和变量目前的新值做比较，如果一样证明变量没被其他线程修改过，这个线程就可以更新这个变量，否则不能更新；通俗的说就是通过不加锁的方式来修改共享资源并同时保证安全性。\n\n使用cas的话对于属性变量不能再用传统的int ,long等；要使用原子类代替原先的数据类型操作，比如AtomicBoolean，AtomicInteger，AtomicInteger等。\n\n## java线程锁的分类与实现\n\n以下分类是从多个同角度来划分，而不是以某一标准来划分，请注意\n\n- 阻塞锁：当一个线程获得锁，其他线程就会被阻塞挂起，直到抢占到锁才继续执行，这样会导致CPU切换上下文，切换上下文对CPU而言是很耗费时间的\n- 非阻塞锁：当一个线程获得锁，其他线程直接跳过锁资源相关的代码继续执行，就是非阻塞锁\n- 自旋锁：当一个线程获得锁，其他线程则在不停进行空循环，直到抢到锁，这样做的好处是避免了上下文切换\n- 可重入锁：也叫做递归锁，当一个线程外层函数获得锁之后 ，内层递归函数仍然可以该锁的相关代码，不受影响。\n- 互斥锁：互斥锁保证了某一时刻只能有一个线程占有该资源。\n- 读写锁：将代码功能分为读和写，读不互斥，写互斥；\n- 公平锁/非公平锁：公平锁就是在等待队列里排最前面的的先获得锁，非公平锁就是谁抢到谁用；\n- 重量级锁/轻量级锁/偏向锁：使用操作系统“Mutex Lock”功能来实现锁机制的叫重量级锁，因为这种锁成本高；轻量级锁是对重量级锁的优化，提高性能；偏向锁是对轻量级锁的优化，在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径。\n\n<!--more-->\n\n###  synchronized\n\n属于阻塞锁，互斥锁，非公平锁，可重入锁，在JDK1.6以前属于重量级锁，后来做了优化；\n\n用法：\n- 指定加锁对象；\n- 用于静态代码块/方法\n- 用于动态代码块/方法\n\n示例\n\n```\n\t\tpublic static synchronized void test1(){\n            System.out.println(\"test\");\n        }\n\n        public  synchronized void test2(){\n            System.out.println(\"test\");\n        }\n                 \n        public void test3(){\n            synchronized (this){\n                System.out.println(\"test\");\n            }\n        }\n```\n\n当锁加在静态代码块/方法上时，锁作用于整个类，凡是属于这个类的对象的相关都会被上锁，当用于动态代码块/方法/对象时锁作用于对象；除此之外，synchronized可以保证线程的可见性和有序性。\n\n### Lock\n\nlock 是一个接口，其下有多个实现类；\n\n方法说明：\n\n- lock()方法是平常使用得最多的一个方法，就是用来获取锁。如果锁已被其他线程获取，则进行等待。\n- tryLock()方法是有返回值的，它表示用来尝试获取锁，如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false，这个方法还可以设置一个获取锁的等待时长，如果时间内获取不到直接返回。\n- 两个线程同时通过lock.lockInterruptibly()想获取某个锁时，假若此时线程A获取到了锁，而线程B只有在等待，那么对线程B调用threadB.interrupt()方法能够中断线程B的等待过程\n- unLock()方法是用来释放锁\n- newCondition()：生成一个和线程绑定的Condition实例，利用该实例我们可以让线程在合适的时候等待，在特定的时候继续执行；相当于得到这个线程的wait和notify方法；\n\n### ReentrantLock\n\nReentrantLock重入锁，是实现Lock接口的一个类，它对公平锁和非公平锁都支持；在构造方法中传入一个boolean值，true时为公平锁，false时为非公平锁\n\n### Semaphore(信号量)\n\n信号量是对锁的扩展，锁每次只允许一个线程访问一个资源，而信号量却可以指定多个线程访问某个资源；信号量的构造函数为\n\n```java\npublic Semaphore(int permits) {\n        sync = new NonfairSync(permits);\n    }\npublic Semaphore(int permits, boolean fair) {\n        sync = fair ? new FairSync(permits) : new NonfairSync(permits);\n    }\n```\n\n第一个方法指定了可使用的线程数，第二个方法的布尔值表示是否为公平锁；\n\nacquire()方法尝试获得一个许可，如果获取不到则等待；tryAcquire()方法尝试获取一个许可，成功返回true，失败返回false，不会阻塞，tryAcquire(int i) 指定等待时间；release()方法释放一个许可。\n\n### ReadWriteLock\n\n读写分离锁， 读写分离锁可以有效的减少锁竞争，读锁是共享锁，可以被多个线程同时获取，写锁是互斥只能被一个线程占有，ReadWriteLock是一个接口，其中readLock()获得读锁，writeLock()获得写锁 其实现类ReentrantReadWriteLock是一个可重入得的读写锁，它支持锁的降级(在获得写锁的情况下可以再持有读锁)，不支持锁的升级（在获得读锁的情况下不能再获得写锁）；读锁和写锁也是互斥的，也就是一个资源要么被上了一个写锁，要么被上了多个读锁，不会发生这个资即被上写锁又被上读锁的情况。\n\n## 并发下集合类\n\n并发集合类主要有：\n\n- ConcurrentHashMap：支持多线程的分段哈希表，它通过将整个哈希表分成多段的方式减小锁粒度\n- ConcurrentSkipListMap：ConcurrentSkipListMap的底层是通过跳表来实现的。跳表是一个链表，但是通过使用“跳跃式”查找的方式使得插入、读取数据时复杂度变成了O（logn）;\n- ConCurrentSkipListSet：参考ConcurrentSkipListMap；\n- CopyOnWriteArrayList：是ArrayList 的一个线程安全的变形，其中所有可变操作（添加、设置，等等）都是通过对基础数组进行一次新的复制来实现的; \n- CopyOnWriteArraySet：参考CopyOnWriteArrayList; \n-  ConcurrentLinkedQueue：cas实现的非阻塞并发队列;\n\n## 线程池\n\n### 介绍\n\n多线程的设计优点是能很大限度的发挥多核处理器的计算能力，但是，若不控制好线程资源反而会拖累cpu，降低系统性能，这就涉及到了线程的回收复用等一系列问题；而且本身线程的创建和销毁也很耗费资源，因此找到一个合适的方法来提高线程的复用就很必要了。\n\n线程池就是解决这类问题的一个很好的方法：线程池中本身有很多个线程，当需要使用线程的时候拿一个线程出来，当用完则还回去，而不是每次都创建和销毁。在JDK中提供了一套Executor线程池框架，帮助开发人员有效的进行线程控制。\n\n### Executor使用\n\n获得线程池的方法：\n\n- newFixedThreadPool(int nThreads) ：创建固定数目线程的线程池；\n- newCachedThreadPool：创建一个可缓存的线程池，调用execute将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线 程并添加到池中；\n- newSingleThreadExecutor：创建一个单线程化的Executor；\n- newScheduledThreadPool：创建一个支持定时及周期性的任务执行的线程池。\n\n以上方法都是返回一个ExecutorService对象，executorService.execute()传入一个Runnable对象，可执行一个线程任务\n\n下面看示例代码\n\n```java\npublic class Test implements Runnable{\n\tint i=0;\n\tpublic Test(int i){\n\t\tthis.i=i;\n\t}\n\tpublic void run() {\n\t\tSystem.out.println(Thread.currentThread().getName()+\"=====\"+i);\n\t}\n    public static void main(String[] args) throws InterruptedException {\n\t\tExecutorService cachedThreadPool = Executors.newCachedThreadPool();\n\t\tfor(int i=0;i<10;i++){\n\t\t\tcachedThreadPool.execute(new Test(i));\n\t\t\tThread.sleep(1000);\n\t\t}\n\t}\n}\n\n```\n\n线程池是一个庞大而复杂的体系，本系列文章定位是基础，不对其做更深入的研究，感兴趣的小伙伴可以自行查资料进行学习。\n\n### ScheduledExecutorService\n\nnewScheduledThreadPool(int corePoolSize)会返回一个ScheduledExecutorService对象，可以根据时间对线程进行调度；其下有三个执行线程任务的方法：schedule()，scheduleAtFixedRate()，scheduleWithFixedDelay()；该线程池可解决定时任务的问题。\n\n示例：\n\n```java\nclass Test implements Runnable {\n    \n    private String testStr;\n    \n    Test(String testStr) {\n        this.testStr = testStr;\n    }\n\n    @Override\n    public void run() {\n        System.out.println(testStr + \" >>>> print\");\n    }\n    \n    public static void main(String[] args) {\n        ScheduledExecutorService service = Executors.newScheduledThreadPool(10);\n        long wait = 1;\n        long period = 1;\n        service.scheduleAtFixedRate(new MyScheduledExecutor(\"job1\"), wait, period, TimeUnit.SECONDS);\n        service.scheduleWithFixedDelay(new MyScheduledExecutor(\"job2\"), wait, period, TimeUnit.SECONDS);\n        scheduledExecutorService.schedule(new MyScheduledExecutor(\"job3\"), wait, TimeUnit.SECONDS);//延时waits 执行\n    }\n}\n```\n\njob1的执行方式是任务发起后间隔`wait`秒开始执行，每隔`period`秒(注意：不包括上一个线程的执行时间)执行一次；\n\njob2的执行方式是任务发起后间隔`wait`秒开始执行，等线程结束后隔`period`秒开始执行下一个线程；\n\njob3只执行一次，延迟`wait`秒执行；\n\nScheduledExecutorService还可以配合Callable使用来回调获得线程执行结果，还可以取消队列中的执行任务等操作，这属于比较复杂的用法，我们这里掌握基本的即可，到实际遇到相应的问题时我们在现学现用，节省学习成本。","slug":"thread-2","published":1,"updated":"2019-05-13T02:01:51.773Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxtd002wvovmm453ebsw","content":"<p>作者：muggle</p>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><p>cas(比较替换)：无锁策略的一种实现方式，过程为获取到变量旧值（每个线程都有一份变量值的副本），和变量目前的新值做比较，如果一样证明变量没被其他线程修改过，这个线程就可以更新这个变量，否则不能更新；通俗的说就是通过不加锁的方式来修改共享资源并同时保证安全性。</p>\n<p>使用cas的话对于属性变量不能再用传统的int ,long等；要使用原子类代替原先的数据类型操作，比如AtomicBoolean，AtomicInteger，AtomicInteger等。</p>\n<h2 id=\"java线程锁的分类与实现\"><a href=\"#java线程锁的分类与实现\" class=\"headerlink\" title=\"java线程锁的分类与实现\"></a>java线程锁的分类与实现</h2><p>以下分类是从多个同角度来划分，而不是以某一标准来划分，请注意</p>\n<ul>\n<li>阻塞锁：当一个线程获得锁，其他线程就会被阻塞挂起，直到抢占到锁才继续执行，这样会导致CPU切换上下文，切换上下文对CPU而言是很耗费时间的</li>\n<li>非阻塞锁：当一个线程获得锁，其他线程直接跳过锁资源相关的代码继续执行，就是非阻塞锁</li>\n<li>自旋锁：当一个线程获得锁，其他线程则在不停进行空循环，直到抢到锁，这样做的好处是避免了上下文切换</li>\n<li>可重入锁：也叫做递归锁，当一个线程外层函数获得锁之后 ，内层递归函数仍然可以该锁的相关代码，不受影响。</li>\n<li>互斥锁：互斥锁保证了某一时刻只能有一个线程占有该资源。</li>\n<li>读写锁：将代码功能分为读和写，读不互斥，写互斥；</li>\n<li>公平锁/非公平锁：公平锁就是在等待队列里排最前面的的先获得锁，非公平锁就是谁抢到谁用；</li>\n<li>重量级锁/轻量级锁/偏向锁：使用操作系统“Mutex Lock”功能来实现锁机制的叫重量级锁，因为这种锁成本高；轻量级锁是对重量级锁的优化，提高性能；偏向锁是对轻量级锁的优化，在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径。</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"synchronized\"><a href=\"#synchronized\" class=\"headerlink\" title=\"synchronized\"></a>synchronized</h3><p>属于阻塞锁，互斥锁，非公平锁，可重入锁，在JDK1.6以前属于重量级锁，后来做了优化；</p>\n<p>用法：</p>\n<ul>\n<li>指定加锁对象；</li>\n<li>用于静态代码块/方法</li>\n<li>用于动态代码块/方法</li>\n</ul>\n<p>示例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static synchronized void test1()&#123;</span><br><span class=\"line\">          System.out.println(&quot;test&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      public  synchronized void test2()&#123;</span><br><span class=\"line\">          System.out.println(&quot;test&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">               </span><br><span class=\"line\">      public void test3()&#123;</span><br><span class=\"line\">          synchronized (this)&#123;</span><br><span class=\"line\">              System.out.println(&quot;test&quot;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<p>当锁加在静态代码块/方法上时，锁作用于整个类，凡是属于这个类的对象的相关都会被上锁，当用于动态代码块/方法/对象时锁作用于对象；除此之外，synchronized可以保证线程的可见性和有序性。</p>\n<h3 id=\"Lock\"><a href=\"#Lock\" class=\"headerlink\" title=\"Lock\"></a>Lock</h3><p>lock 是一个接口，其下有多个实现类；</p>\n<p>方法说明：</p>\n<ul>\n<li>lock()方法是平常使用得最多的一个方法，就是用来获取锁。如果锁已被其他线程获取，则进行等待。</li>\n<li>tryLock()方法是有返回值的，它表示用来尝试获取锁，如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false，这个方法还可以设置一个获取锁的等待时长，如果时间内获取不到直接返回。</li>\n<li>两个线程同时通过lock.lockInterruptibly()想获取某个锁时，假若此时线程A获取到了锁，而线程B只有在等待，那么对线程B调用threadB.interrupt()方法能够中断线程B的等待过程</li>\n<li>unLock()方法是用来释放锁</li>\n<li>newCondition()：生成一个和线程绑定的Condition实例，利用该实例我们可以让线程在合适的时候等待，在特定的时候继续执行；相当于得到这个线程的wait和notify方法；</li>\n</ul>\n<h3 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h3><p>ReentrantLock重入锁，是实现Lock接口的一个类，它对公平锁和非公平锁都支持；在构造方法中传入一个boolean值，true时为公平锁，false时为非公平锁</p>\n<h3 id=\"Semaphore-信号量\"><a href=\"#Semaphore-信号量\" class=\"headerlink\" title=\"Semaphore(信号量)\"></a>Semaphore(信号量)</h3><p>信号量是对锁的扩展，锁每次只允许一个线程访问一个资源，而信号量却可以指定多个线程访问某个资源；信号量的构造函数为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Semaphore</span><span class=\"params\">(<span class=\"keyword\">int</span> permits)</span> </span>&#123;</span><br><span class=\"line\">        sync = <span class=\"keyword\">new</span> NonfairSync(permits);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Semaphore</span><span class=\"params\">(<span class=\"keyword\">int</span> permits, <span class=\"keyword\">boolean</span> fair)</span> </span>&#123;</span><br><span class=\"line\">        sync = fair ? <span class=\"keyword\">new</span> FairSync(permits) : <span class=\"keyword\">new</span> NonfairSync(permits);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>第一个方法指定了可使用的线程数，第二个方法的布尔值表示是否为公平锁；</p>\n<p>acquire()方法尝试获得一个许可，如果获取不到则等待；tryAcquire()方法尝试获取一个许可，成功返回true，失败返回false，不会阻塞，tryAcquire(int i) 指定等待时间；release()方法释放一个许可。</p>\n<h3 id=\"ReadWriteLock\"><a href=\"#ReadWriteLock\" class=\"headerlink\" title=\"ReadWriteLock\"></a>ReadWriteLock</h3><p>读写分离锁， 读写分离锁可以有效的减少锁竞争，读锁是共享锁，可以被多个线程同时获取，写锁是互斥只能被一个线程占有，ReadWriteLock是一个接口，其中readLock()获得读锁，writeLock()获得写锁 其实现类ReentrantReadWriteLock是一个可重入得的读写锁，它支持锁的降级(在获得写锁的情况下可以再持有读锁)，不支持锁的升级（在获得读锁的情况下不能再获得写锁）；读锁和写锁也是互斥的，也就是一个资源要么被上了一个写锁，要么被上了多个读锁，不会发生这个资即被上写锁又被上读锁的情况。</p>\n<h2 id=\"并发下集合类\"><a href=\"#并发下集合类\" class=\"headerlink\" title=\"并发下集合类\"></a>并发下集合类</h2><p>并发集合类主要有：</p>\n<ul>\n<li>ConcurrentHashMap：支持多线程的分段哈希表，它通过将整个哈希表分成多段的方式减小锁粒度</li>\n<li>ConcurrentSkipListMap：ConcurrentSkipListMap的底层是通过跳表来实现的。跳表是一个链表，但是通过使用“跳跃式”查找的方式使得插入、读取数据时复杂度变成了O（logn）;</li>\n<li>ConCurrentSkipListSet：参考ConcurrentSkipListMap；</li>\n<li>CopyOnWriteArrayList：是ArrayList 的一个线程安全的变形，其中所有可变操作（添加、设置，等等）都是通过对基础数组进行一次新的复制来实现的; </li>\n<li>CopyOnWriteArraySet：参考CopyOnWriteArrayList; </li>\n<li>ConcurrentLinkedQueue：cas实现的非阻塞并发队列;</li>\n</ul>\n<h2 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>多线程的设计优点是能很大限度的发挥多核处理器的计算能力，但是，若不控制好线程资源反而会拖累cpu，降低系统性能，这就涉及到了线程的回收复用等一系列问题；而且本身线程的创建和销毁也很耗费资源，因此找到一个合适的方法来提高线程的复用就很必要了。</p>\n<p>线程池就是解决这类问题的一个很好的方法：线程池中本身有很多个线程，当需要使用线程的时候拿一个线程出来，当用完则还回去，而不是每次都创建和销毁。在JDK中提供了一套Executor线程池框架，帮助开发人员有效的进行线程控制。</p>\n<h3 id=\"Executor使用\"><a href=\"#Executor使用\" class=\"headerlink\" title=\"Executor使用\"></a>Executor使用</h3><p>获得线程池的方法：</p>\n<ul>\n<li>newFixedThreadPool(int nThreads) ：创建固定数目线程的线程池；</li>\n<li>newCachedThreadPool：创建一个可缓存的线程池，调用execute将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线 程并添加到池中；</li>\n<li>newSingleThreadExecutor：创建一个单线程化的Executor；</li>\n<li>newScheduledThreadPool：创建一个支持定时及周期性的任务执行的线程池。</li>\n</ul>\n<p>以上方法都是返回一个ExecutorService对象，executorService.execute()传入一个Runnable对象，可执行一个线程任务</p>\n<p>下面看示例代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Test</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.i=i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"=====\"</span>+i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">\t\tExecutorService cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">\t\t\tcachedThreadPool.execute(<span class=\"keyword\">new</span> Test(i));</span><br><span class=\"line\">\t\t\tThread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>线程池是一个庞大而复杂的体系，本系列文章定位是基础，不对其做更深入的研究，感兴趣的小伙伴可以自行查资料进行学习。</p>\n<h3 id=\"ScheduledExecutorService\"><a href=\"#ScheduledExecutorService\" class=\"headerlink\" title=\"ScheduledExecutorService\"></a>ScheduledExecutorService</h3><p>newScheduledThreadPool(int corePoolSize)会返回一个ScheduledExecutorService对象，可以根据时间对线程进行调度；其下有三个执行线程任务的方法：schedule()，scheduleAtFixedRate()，scheduleWithFixedDelay()；该线程池可解决定时任务的问题。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String testStr;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Test(String testStr) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.testStr = testStr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(testStr + <span class=\"string\">\" &gt;&gt;&gt;&gt; print\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ScheduledExecutorService service = Executors.newScheduledThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"keyword\">long</span> wait = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> period = <span class=\"number\">1</span>;</span><br><span class=\"line\">        service.scheduleAtFixedRate(<span class=\"keyword\">new</span> MyScheduledExecutor(<span class=\"string\">\"job1\"</span>), wait, period, TimeUnit.SECONDS);</span><br><span class=\"line\">        service.scheduleWithFixedDelay(<span class=\"keyword\">new</span> MyScheduledExecutor(<span class=\"string\">\"job2\"</span>), wait, period, TimeUnit.SECONDS);</span><br><span class=\"line\">        scheduledExecutorService.schedule(<span class=\"keyword\">new</span> MyScheduledExecutor(<span class=\"string\">\"job3\"</span>), wait, TimeUnit.SECONDS);<span class=\"comment\">//延时waits 执行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>job1的执行方式是任务发起后间隔<code>wait</code>秒开始执行，每隔<code>period</code>秒(注意：不包括上一个线程的执行时间)执行一次；</p>\n<p>job2的执行方式是任务发起后间隔<code>wait</code>秒开始执行，等线程结束后隔<code>period</code>秒开始执行下一个线程；</p>\n<p>job3只执行一次，延迟<code>wait</code>秒执行；</p>\n<p>ScheduledExecutorService还可以配合Callable使用来回调获得线程执行结果，还可以取消队列中的执行任务等操作，这属于比较复杂的用法，我们这里掌握基本的即可，到实际遇到相应的问题时我们在现学现用，节省学习成本。</p>\n","site":{"data":{}},"excerpt":"<p>作者：muggle</p>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><p>cas(比较替换)：无锁策略的一种实现方式，过程为获取到变量旧值（每个线程都有一份变量值的副本），和变量目前的新值做比较，如果一样证明变量没被其他线程修改过，这个线程就可以更新这个变量，否则不能更新；通俗的说就是通过不加锁的方式来修改共享资源并同时保证安全性。</p>\n<p>使用cas的话对于属性变量不能再用传统的int ,long等；要使用原子类代替原先的数据类型操作，比如AtomicBoolean，AtomicInteger，AtomicInteger等。</p>\n<h2 id=\"java线程锁的分类与实现\"><a href=\"#java线程锁的分类与实现\" class=\"headerlink\" title=\"java线程锁的分类与实现\"></a>java线程锁的分类与实现</h2><p>以下分类是从多个同角度来划分，而不是以某一标准来划分，请注意</p>\n<ul>\n<li>阻塞锁：当一个线程获得锁，其他线程就会被阻塞挂起，直到抢占到锁才继续执行，这样会导致CPU切换上下文，切换上下文对CPU而言是很耗费时间的</li>\n<li>非阻塞锁：当一个线程获得锁，其他线程直接跳过锁资源相关的代码继续执行，就是非阻塞锁</li>\n<li>自旋锁：当一个线程获得锁，其他线程则在不停进行空循环，直到抢到锁，这样做的好处是避免了上下文切换</li>\n<li>可重入锁：也叫做递归锁，当一个线程外层函数获得锁之后 ，内层递归函数仍然可以该锁的相关代码，不受影响。</li>\n<li>互斥锁：互斥锁保证了某一时刻只能有一个线程占有该资源。</li>\n<li>读写锁：将代码功能分为读和写，读不互斥，写互斥；</li>\n<li>公平锁/非公平锁：公平锁就是在等待队列里排最前面的的先获得锁，非公平锁就是谁抢到谁用；</li>\n<li>重量级锁/轻量级锁/偏向锁：使用操作系统“Mutex Lock”功能来实现锁机制的叫重量级锁，因为这种锁成本高；轻量级锁是对重量级锁的优化，提高性能；偏向锁是对轻量级锁的优化，在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径。</li>\n</ul>","more":"<h3 id=\"synchronized\"><a href=\"#synchronized\" class=\"headerlink\" title=\"synchronized\"></a>synchronized</h3><p>属于阻塞锁，互斥锁，非公平锁，可重入锁，在JDK1.6以前属于重量级锁，后来做了优化；</p>\n<p>用法：</p>\n<ul>\n<li>指定加锁对象；</li>\n<li>用于静态代码块/方法</li>\n<li>用于动态代码块/方法</li>\n</ul>\n<p>示例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static synchronized void test1()&#123;</span><br><span class=\"line\">          System.out.println(&quot;test&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      public  synchronized void test2()&#123;</span><br><span class=\"line\">          System.out.println(&quot;test&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">               </span><br><span class=\"line\">      public void test3()&#123;</span><br><span class=\"line\">          synchronized (this)&#123;</span><br><span class=\"line\">              System.out.println(&quot;test&quot;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<p>当锁加在静态代码块/方法上时，锁作用于整个类，凡是属于这个类的对象的相关都会被上锁，当用于动态代码块/方法/对象时锁作用于对象；除此之外，synchronized可以保证线程的可见性和有序性。</p>\n<h3 id=\"Lock\"><a href=\"#Lock\" class=\"headerlink\" title=\"Lock\"></a>Lock</h3><p>lock 是一个接口，其下有多个实现类；</p>\n<p>方法说明：</p>\n<ul>\n<li>lock()方法是平常使用得最多的一个方法，就是用来获取锁。如果锁已被其他线程获取，则进行等待。</li>\n<li>tryLock()方法是有返回值的，它表示用来尝试获取锁，如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false，这个方法还可以设置一个获取锁的等待时长，如果时间内获取不到直接返回。</li>\n<li>两个线程同时通过lock.lockInterruptibly()想获取某个锁时，假若此时线程A获取到了锁，而线程B只有在等待，那么对线程B调用threadB.interrupt()方法能够中断线程B的等待过程</li>\n<li>unLock()方法是用来释放锁</li>\n<li>newCondition()：生成一个和线程绑定的Condition实例，利用该实例我们可以让线程在合适的时候等待，在特定的时候继续执行；相当于得到这个线程的wait和notify方法；</li>\n</ul>\n<h3 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h3><p>ReentrantLock重入锁，是实现Lock接口的一个类，它对公平锁和非公平锁都支持；在构造方法中传入一个boolean值，true时为公平锁，false时为非公平锁</p>\n<h3 id=\"Semaphore-信号量\"><a href=\"#Semaphore-信号量\" class=\"headerlink\" title=\"Semaphore(信号量)\"></a>Semaphore(信号量)</h3><p>信号量是对锁的扩展，锁每次只允许一个线程访问一个资源，而信号量却可以指定多个线程访问某个资源；信号量的构造函数为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Semaphore</span><span class=\"params\">(<span class=\"keyword\">int</span> permits)</span> </span>&#123;</span><br><span class=\"line\">        sync = <span class=\"keyword\">new</span> NonfairSync(permits);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Semaphore</span><span class=\"params\">(<span class=\"keyword\">int</span> permits, <span class=\"keyword\">boolean</span> fair)</span> </span>&#123;</span><br><span class=\"line\">        sync = fair ? <span class=\"keyword\">new</span> FairSync(permits) : <span class=\"keyword\">new</span> NonfairSync(permits);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>第一个方法指定了可使用的线程数，第二个方法的布尔值表示是否为公平锁；</p>\n<p>acquire()方法尝试获得一个许可，如果获取不到则等待；tryAcquire()方法尝试获取一个许可，成功返回true，失败返回false，不会阻塞，tryAcquire(int i) 指定等待时间；release()方法释放一个许可。</p>\n<h3 id=\"ReadWriteLock\"><a href=\"#ReadWriteLock\" class=\"headerlink\" title=\"ReadWriteLock\"></a>ReadWriteLock</h3><p>读写分离锁， 读写分离锁可以有效的减少锁竞争，读锁是共享锁，可以被多个线程同时获取，写锁是互斥只能被一个线程占有，ReadWriteLock是一个接口，其中readLock()获得读锁，writeLock()获得写锁 其实现类ReentrantReadWriteLock是一个可重入得的读写锁，它支持锁的降级(在获得写锁的情况下可以再持有读锁)，不支持锁的升级（在获得读锁的情况下不能再获得写锁）；读锁和写锁也是互斥的，也就是一个资源要么被上了一个写锁，要么被上了多个读锁，不会发生这个资即被上写锁又被上读锁的情况。</p>\n<h2 id=\"并发下集合类\"><a href=\"#并发下集合类\" class=\"headerlink\" title=\"并发下集合类\"></a>并发下集合类</h2><p>并发集合类主要有：</p>\n<ul>\n<li>ConcurrentHashMap：支持多线程的分段哈希表，它通过将整个哈希表分成多段的方式减小锁粒度</li>\n<li>ConcurrentSkipListMap：ConcurrentSkipListMap的底层是通过跳表来实现的。跳表是一个链表，但是通过使用“跳跃式”查找的方式使得插入、读取数据时复杂度变成了O（logn）;</li>\n<li>ConCurrentSkipListSet：参考ConcurrentSkipListMap；</li>\n<li>CopyOnWriteArrayList：是ArrayList 的一个线程安全的变形，其中所有可变操作（添加、设置，等等）都是通过对基础数组进行一次新的复制来实现的; </li>\n<li>CopyOnWriteArraySet：参考CopyOnWriteArrayList; </li>\n<li>ConcurrentLinkedQueue：cas实现的非阻塞并发队列;</li>\n</ul>\n<h2 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>多线程的设计优点是能很大限度的发挥多核处理器的计算能力，但是，若不控制好线程资源反而会拖累cpu，降低系统性能，这就涉及到了线程的回收复用等一系列问题；而且本身线程的创建和销毁也很耗费资源，因此找到一个合适的方法来提高线程的复用就很必要了。</p>\n<p>线程池就是解决这类问题的一个很好的方法：线程池中本身有很多个线程，当需要使用线程的时候拿一个线程出来，当用完则还回去，而不是每次都创建和销毁。在JDK中提供了一套Executor线程池框架，帮助开发人员有效的进行线程控制。</p>\n<h3 id=\"Executor使用\"><a href=\"#Executor使用\" class=\"headerlink\" title=\"Executor使用\"></a>Executor使用</h3><p>获得线程池的方法：</p>\n<ul>\n<li>newFixedThreadPool(int nThreads) ：创建固定数目线程的线程池；</li>\n<li>newCachedThreadPool：创建一个可缓存的线程池，调用execute将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线 程并添加到池中；</li>\n<li>newSingleThreadExecutor：创建一个单线程化的Executor；</li>\n<li>newScheduledThreadPool：创建一个支持定时及周期性的任务执行的线程池。</li>\n</ul>\n<p>以上方法都是返回一个ExecutorService对象，executorService.execute()传入一个Runnable对象，可执行一个线程任务</p>\n<p>下面看示例代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Test</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.i=i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"=====\"</span>+i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">\t\tExecutorService cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">\t\t\tcachedThreadPool.execute(<span class=\"keyword\">new</span> Test(i));</span><br><span class=\"line\">\t\t\tThread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>线程池是一个庞大而复杂的体系，本系列文章定位是基础，不对其做更深入的研究，感兴趣的小伙伴可以自行查资料进行学习。</p>\n<h3 id=\"ScheduledExecutorService\"><a href=\"#ScheduledExecutorService\" class=\"headerlink\" title=\"ScheduledExecutorService\"></a>ScheduledExecutorService</h3><p>newScheduledThreadPool(int corePoolSize)会返回一个ScheduledExecutorService对象，可以根据时间对线程进行调度；其下有三个执行线程任务的方法：schedule()，scheduleAtFixedRate()，scheduleWithFixedDelay()；该线程池可解决定时任务的问题。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String testStr;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Test(String testStr) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.testStr = testStr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(testStr + <span class=\"string\">\" &gt;&gt;&gt;&gt; print\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ScheduledExecutorService service = Executors.newScheduledThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"keyword\">long</span> wait = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> period = <span class=\"number\">1</span>;</span><br><span class=\"line\">        service.scheduleAtFixedRate(<span class=\"keyword\">new</span> MyScheduledExecutor(<span class=\"string\">\"job1\"</span>), wait, period, TimeUnit.SECONDS);</span><br><span class=\"line\">        service.scheduleWithFixedDelay(<span class=\"keyword\">new</span> MyScheduledExecutor(<span class=\"string\">\"job2\"</span>), wait, period, TimeUnit.SECONDS);</span><br><span class=\"line\">        scheduledExecutorService.schedule(<span class=\"keyword\">new</span> MyScheduledExecutor(<span class=\"string\">\"job3\"</span>), wait, TimeUnit.SECONDS);<span class=\"comment\">//延时waits 执行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>job1的执行方式是任务发起后间隔<code>wait</code>秒开始执行，每隔<code>period</code>秒(注意：不包括上一个线程的执行时间)执行一次；</p>\n<p>job2的执行方式是任务发起后间隔<code>wait</code>秒开始执行，等线程结束后隔<code>period</code>秒开始执行下一个线程；</p>\n<p>job3只执行一次，延迟<code>wait</code>秒执行；</p>\n<p>ScheduledExecutorService还可以配合Callable使用来回调获得线程执行结果，还可以取消队列中的执行任务等操作，这属于比较复杂的用法，我们这里掌握基本的即可，到实际遇到相应的问题时我们在现学现用，节省学习成本。</p>"},{"title":"redis笔记","date":"2019-05-06T01:53:26.000Z","_content":"\n## redis基础知识\n\n客户端与服务端的通讯协议是建立在TCP协议之上构建的；\n\nredis序列化协议 resp\n\n- 状态回复（status reply）的第一个字节是 `\"+\"`\n- 错误回复（error reply）的第一个字节是 `\"-\"`\n- 整数回复（integer reply）的第一个字节是 `\":\"`\n- 批量回复（bulk reply）的第一个字节是 `\"$\"`\n- 多条批量回复（multi bulk reply）的第一个字节是 `\"*\"`\n\n<!--more-->\n\n举例：\n\n```shell\nSET mykey myvalue\n*3\\r\\n$3\\r\\nSET\\r\\n$5\\r\\mykey\\r\\n$7\\r\\myvalue\\r\\n\n```\n\n指令表：\n\n[redis命令表](<http://redisdoc.com/>)\n\n- 字符串\n  - [SET](http://redisdoc.com/string/set.html)\n  - [SETNX](http://redisdoc.com/string/setnx.html)\n  - [SETEX](http://redisdoc.com/string/setex.html)\n  - [PSETEX](http://redisdoc.com/string/psetex.html)\n  - [GET](http://redisdoc.com/string/get.html)\n  - [GETSET](http://redisdoc.com/string/getset.html)\n  - [STRLEN](http://redisdoc.com/string/strlen.html)\n  - [APPEND](http://redisdoc.com/string/append.html)\n  - [SETRANGE](http://redisdoc.com/string/setrange.html)\n  - [GETRANGE](http://redisdoc.com/string/getrange.html)\n  - [INCR](http://redisdoc.com/string/incr.html)\n  - [INCRBY](http://redisdoc.com/string/incrby.html)\n  - [INCRBYFLOAT](http://redisdoc.com/string/incrbyfloat.html)\n  - [DECR](http://redisdoc.com/string/decr.html)\n  - [DECRBY](http://redisdoc.com/string/decrby.html)\n  - [MSET](http://redisdoc.com/string/mset.html)\n  - [MSETNX](http://redisdoc.com/string/msetnx.html)\n  - [MGET](http://redisdoc.com/string/mget.html)\n- 哈希表\n  - [HSET](http://redisdoc.com/hash/hset.html)\n  - [HSETNX](http://redisdoc.com/hash/hsetnx.html)\n  - [HGET](http://redisdoc.com/hash/hget.html)\n  - [HEXISTS](http://redisdoc.com/hash/hexists.html)\n  - [HDEL](http://redisdoc.com/hash/hdel.html)\n  - [HLEN](http://redisdoc.com/hash/hlen.html)\n  - [HSTRLEN](http://redisdoc.com/hash/hstrlen.html)\n  - [HINCRBY](http://redisdoc.com/hash/hincrby.html)\n  - [HINCRBYFLOAT](http://redisdoc.com/hash/hincrbyfloat.html)\n  - [HMSET](http://redisdoc.com/hash/hmset.html)\n  - [HMGET](http://redisdoc.com/hash/hmget.html)\n  - [HKEYS](http://redisdoc.com/hash/hkeys.html)\n  - [HVALS](http://redisdoc.com/hash/hvals.html)\n  - [HGETALL](http://redisdoc.com/hash/hgetall.html)\n  - [HSCAN](http://redisdoc.com/hash/hscan.html)\n- 列表\n  - [LPUSH](http://redisdoc.com/list/lpush.html)\n  - [LPUSHX](http://redisdoc.com/list/lpushx.html)\n  - [RPUSH](http://redisdoc.com/list/rpush.html)\n  - [RPUSHX](http://redisdoc.com/list/rpushx.html)\n  - [LPOP](http://redisdoc.com/list/lpop.html)\n  - [RPOP](http://redisdoc.com/list/rpop.html)\n  - [RPOPLPUSH](http://redisdoc.com/list/rpoplpush.html)\n  - [LREM](http://redisdoc.com/list/lrem.html)\n  - [LLEN](http://redisdoc.com/list/llen.html)\n  - [LINDEX](http://redisdoc.com/list/lindex.html)\n  - [LINSERT](http://redisdoc.com/list/linsert.html)\n  - [LSET](http://redisdoc.com/list/lset.html)\n  - [LRANGE](http://redisdoc.com/list/lrange.html)\n  - [LTRIM](http://redisdoc.com/list/ltrim.html)\n  - [BLPOP](http://redisdoc.com/list/blpop.html)\n  - [BRPOP](http://redisdoc.com/list/brpop.html)\n  - [BRPOPLPUSH](http://redisdoc.com/list/brpoplpush.html)\n- 集合\n  - [SADD](http://redisdoc.com/set/sadd.html)\n  - [SISMEMBER](http://redisdoc.com/set/sismember.html)\n  - [SPOP](http://redisdoc.com/set/spop.html)\n  - [SRANDMEMBER](http://redisdoc.com/set/srandmember.html)\n  - [SREM](http://redisdoc.com/set/srem.html)\n  - [SMOVE](http://redisdoc.com/set/smove.html)\n  - [SCARD](http://redisdoc.com/set/scard.html)\n  - [SMEMBERS](http://redisdoc.com/set/smembers.html)\n  - [SSCAN](http://redisdoc.com/set/sscan.html)\n  - [SINTER](http://redisdoc.com/set/sinter.html)\n  - [SINTERSTORE](http://redisdoc.com/set/sinterstore.html)\n  - [SUNION](http://redisdoc.com/set/sunion.html)\n  - [SUNIONSTORE](http://redisdoc.com/set/sunionstore.html)\n  - [SDIFF](http://redisdoc.com/set/sdiff.html)\n  - [SDIFFSTORE](http://redisdoc.com/set/sdiffstore.html)\n- 有序集合\n  - [ZADD](http://redisdoc.com/sorted_set/zadd.html)\n  - [ZSCORE](http://redisdoc.com/sorted_set/zscore.html)\n  - [ZINCRBY](http://redisdoc.com/sorted_set/zincrby.html)\n  - [ZCARD](http://redisdoc.com/sorted_set/zcard.html)\n  - [ZCOUNT](http://redisdoc.com/sorted_set/zcount.html)\n  - [ZRANGE](http://redisdoc.com/sorted_set/zrange.html)\n  - [ZREVRANGE](http://redisdoc.com/sorted_set/zrevrange.html)\n  - [ZRANGEBYSCORE](http://redisdoc.com/sorted_set/zrangebyscore.html)\n  - [ZREVRANGEBYSCORE](http://redisdoc.com/sorted_set/zrevrangebyscore.html)\n  - [ZRANK](http://redisdoc.com/sorted_set/zrank.html)\n  - [ZREVRANK](http://redisdoc.com/sorted_set/zrevrank.html)\n  - [ZREM](http://redisdoc.com/sorted_set/zrem.html)\n  - [ZREMRANGEBYRANK](http://redisdoc.com/sorted_set/zremrangebyrank.html)\n  - [ZREMRANGEBYSCORE](http://redisdoc.com/sorted_set/zremrangebyscore.html)\n  - [ZRANGEBYLEX](http://redisdoc.com/sorted_set/zrangebylex.html)\n  - [ZLEXCOUNT](http://redisdoc.com/sorted_set/zlexcount.html)\n  - [ZREMRANGEBYLEX](http://redisdoc.com/sorted_set/zremrangebylex.html)\n  - [ZSCAN](http://redisdoc.com/sorted_set/zscan.html)\n  - [ZUNIONSTORE](http://redisdoc.com/sorted_set/zunionstore.html)\n  - [ZINTERSTORE](http://redisdoc.com/sorted_set/zinterstore.html)\n- HyperLogLog\n  - [PFADD](http://redisdoc.com/hyperloglog/pfadd.html)\n  - [PFCOUNT](http://redisdoc.com/hyperloglog/pfcount.html)\n  - [PFMERGE](http://redisdoc.com/hyperloglog/pfmerge.html)\n- 地理位置\n  - [GEOADD](http://redisdoc.com/geo/geoadd.html)\n  - [GEOPOS](http://redisdoc.com/geo/geopos.html)\n  - [GEODIST](http://redisdoc.com/geo/geodist.html)\n  - [GEORADIUS](http://redisdoc.com/geo/georadius.html)\n  - [GEORADIUSBYMEMBER](http://redisdoc.com/geo/georadiusbymember.html)\n  - [GEOHASH](http://redisdoc.com/geo/geohash.html)\n- 位图\n  - [SETBIT](http://redisdoc.com/bitmap/setbit.html)\n  - [GETBIT](http://redisdoc.com/bitmap/getbit.html)\n  - [BITCOUNT](http://redisdoc.com/bitmap/bitcount.html)\n  - [BITPOS](http://redisdoc.com/bitmap/bitpos.html)\n  - [BITOP](http://redisdoc.com/bitmap/bitop.html)\n  - [BITFIELD](http://redisdoc.com/bitmap/bitfield.html)\n- 数据库\n  - [EXISTS](http://redisdoc.com/database/exists.html)\n  - [TYPE](http://redisdoc.com/database/type.html)\n  - [RENAME](http://redisdoc.com/database/rename.html)\n  - [RENAMENX](http://redisdoc.com/database/renamenx.html)\n  - [MOVE](http://redisdoc.com/database/move.html)\n  - [DEL](http://redisdoc.com/database/del.html)\n  - [RANDOMKEY](http://redisdoc.com/database/randomkey.html)\n  - [DBSIZE](http://redisdoc.com/database/dbsize.html)\n  - [KEYS](http://redisdoc.com/database/keys.html)\n  - [SCAN](http://redisdoc.com/database/scan.html)\n  - [SORT](http://redisdoc.com/database/sort.html)\n  - [FLUSHDB](http://redisdoc.com/database/flushdb.html)\n  - [FLUSHALL](http://redisdoc.com/database/flushall.html)\n  - [SELECT](http://redisdoc.com/database/select.html)\n  - [SWAPDB](http://redisdoc.com/database/swapdb.html)\n- 自动过期\n  - [EXPIRE](http://redisdoc.com/expire/expire.html)\n  - [EXPIREAT](http://redisdoc.com/expire/expireat.html)\n  - [TTL](http://redisdoc.com/expire/ttl.html)\n  - [PERSIST](http://redisdoc.com/expire/persist.html)\n  - [PEXPIRE](http://redisdoc.com/expire/pexpire.html)\n  - [PEXPIREAT](http://redisdoc.com/expire/pexpireat.html)\n  - [PTTL](http://redisdoc.com/expire/pttl.html)\n- 事务\n  - [MULTI](http://redisdoc.com/transaction/multi.html)\n  - [EXEC](http://redisdoc.com/transaction/exec.html)\n  - [DISCARD](http://redisdoc.com/transaction/discard.html)\n  - [WATCH](http://redisdoc.com/transaction/watch.html)\n  - [UNWATCH](http://redisdoc.com/transaction/unwatch.html)\n- Lua 脚本\n  - [EVAL](http://redisdoc.com/script/eval.html)\n  - [EVALSHA](http://redisdoc.com/script/evalsha.html)\n  - [SCRIPT_LOAD](http://redisdoc.com/script/script_load.html)\n  - [SCRIPT_EXISTS](http://redisdoc.com/script/script_exists.html)\n  - [SCRIPT_FLUSH](http://redisdoc.com/script/script_flush.html)\n  - [SCRIPT_KILL](http://redisdoc.com/script/script_kill.html)\n- 持久化\n  - [SAVE](http://redisdoc.com/persistence/save.html)\n  - [BGSAVE](http://redisdoc.com/persistence/bgsave.html)\n  - [BGREWRITEAOF](http://redisdoc.com/persistence/bgrewriteaof.html)\n  - [LASTSAVE](http://redisdoc.com/persistence/lastsave.html)\n- 发布与订阅\n  - [PUBLISH](http://redisdoc.com/pubsub/publish.html)\n  - [SUBSCRIBE](http://redisdoc.com/pubsub/subscribe.html)\n  - [PSUBSCRIBE](http://redisdoc.com/pubsub/psubscribe.html)\n  - [UNSUBSCRIBE](http://redisdoc.com/pubsub/unsubscribe.html)\n  - [PUNSUBSCRIBE](http://redisdoc.com/pubsub/punsubscribe.html)\n  - [PUBSUB](http://redisdoc.com/pubsub/pubsub.html)\n- 复制\n  - [SLAVEOF](http://redisdoc.com/replication/slaveof.html)\n  - [ROLE](http://redisdoc.com/replication/role.html)\n- 客户端与服务器\n  - [AUTH](http://redisdoc.com/client_and_server/auth.html)\n  - [QUIT](http://redisdoc.com/client_and_server/quit.html)\n  - [INFO](http://redisdoc.com/client_and_server/info.html)\n  - [SHUTDOWN](http://redisdoc.com/client_and_server/shutdown.html)\n  - [TIME](http://redisdoc.com/client_and_server/time.html)\n  - [CLIENT_GETNAME](http://redisdoc.com/client_and_server/client_getname.html)\n  - [CLIENT_KILL](http://redisdoc.com/client_and_server/client_kill.html)\n  - [CLIENT_LIST](http://redisdoc.com/client_and_server/client_list.html)\n  - [CLIENT_SETNAME](http://redisdoc.com/client_and_server/client_setname.html)\n- 配置选项\n  - [CONFIG_SET](http://redisdoc.com/configure/config_set.html)\n  - [CONFIG_GET](http://redisdoc.com/configure/config_get.html)\n  - [CONFIG_RESETSTAT](http://redisdoc.com/configure/config_resetstat.html)\n  - [CONFIG_REWRITE](http://redisdoc.com/configure/config_rewrite.html)\n- 调试\n  - [PING](http://redisdoc.com/debug/ping.html)\n  - [ECHO](http://redisdoc.com/debug/echo.html)\n  - [OBJECT](http://redisdoc.com/debug/object.html)\n  - [SLOWLOG](http://redisdoc.com/debug/slowlog.html)\n  - [MONITOR](http://redisdoc.com/debug/monitor.html)\n  - [DEBUG_OBJECT](http://redisdoc.com/debug/debug_object.html)\n  - [DEBUG_SEGFAULT](http://redisdoc.com/debug/debug_segfault.html)\n- 内部命令\n  - [MIGRATE](http://redisdoc.com/internal/migrate.html)\n  - [DUMP](http://redisdoc.com/internal/dump.html)\n  - [RESTORE](http://redisdoc.com/internal/restore.html)\n  - [SYNC](http://redisdoc.com/internal/sync.html)\n  - [PSYNC](http://redisdoc.com/internal/psync.html)\n- 功能文档\n  - [Redis 集群规范](http://redisdoc.com/topic/cluster-spec.html)\n  - [持久化（persistence）](http://redisdoc.com/topic/persistence.html)\n  - [发布与订阅（pub/sub）](http://redisdoc.com/topic/pubsub.html)\n  - [Sentinel](http://redisdoc.com/topic/sentinel.html)\n  - [集群教程](http://redisdoc.com/topic/cluster-tutorial.html)\n  - [键空间通知（keyspace notification）](http://redisdoc.com/topic/notification.html)\n  - [通信协议（protocol）](http://redisdoc.com/topic/protocol.html)\n  - [复制（Replication）](http://redisdoc.com/topic/replication.html)\n  - [事务（transaction）](http://redisdoc.com/topic/transaction.html)\n\nredis key集中过期问题，集中过期导致redis压力过大而卡顿\n\n采用一定范围内的随机过期时间\n\nRedis也提供了一些简单的计算功能，比如排序、聚合等，对于这些操作，单线程模型实际会严重影响整体吞吐量，CPU计算过程中，整个IO调度都是被阻塞住的。\n\n**redis分布式锁参考 本博客[多线程进阶篇](<https://muggle.javaboy.org/2019/04/23/thread-3/>)**\n\n## springboot 分布式session\n\n```java\n@Configuration  \n@EnableRedisHttpSession  \npublic class RedisSessionConfig {  \n}  \n```\n\n```xml\n<dependency>  \n        <groupId>org.springframework.boot</groupId>  \n        <artifactId>spring-boot-starter-redis</artifactId>  \n</dependency>  \n<dependency>  \n        <groupId>org.springframework.session</groupId>  \n        <artifactId>spring-session-data-redis</artifactId>  \n</dependency>\n```\n\n```properties\nspring.redis.host=localhost  \nspring.redis.port=6379  \n```\n\n**注意：springboot2.1有包冲突，本配置只适用于2.1以下**\n\n## mybatis的二级缓存\n\n二级缓存是mapper级别的缓存，多个SqlSession去操作同一个Mapper的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。\n\nUserMapper有一个二级缓存区域（按namespace分），其它mapper也有自己的二级缓存区域（按namespace分）。每一个namespace的mapper都有一个二级缓存区域，两个mapper的namespace如果相同，这两个mapper执行sql查询到数据将存在相同的二级缓存区域中。sql节点可配置userCache flushcache\n\n打开二级缓存总开关（springboot默认开启），在mapper中使用`<cache/>`打开二级缓存 在分布式系统中不能直接使用二级缓存\n\n`<cache />`的属性：\n\n- eviction：代表的是缓存收回策略，有一下策略：\n  1. LRU，  最近最少使用的，移除最长时间不用的对象。\n  2. FIFO，先进先出，按对象进入缓存的顺序来移除他们\n  3. SOFT， 软引用，移除基于垃圾回收器状态和软引用规则的对象。\n  4. WEAK，若引用，更积极的移除基于垃圾收集器状态和若引用规则的对象\n- flushInterval：刷新间隔时间，单位为毫秒，默认是当sql执行的时候才回去刷新。\n- size：引用数目，一个正整数，代表缓存最多可以存储多少对象，不宜设置过大，过大会造成内存溢出。\n- readOnly：只读，意味着缓存数据只能读取，不能修改，这样设置的好处是我们可以快速读取缓存，去诶但是我们没有办法修改缓存。默认值为false，不允许我们修改。\n\n\n\n## 分布式缓存\n\n分布式缓存策略\n\nmybatis整合ehcache实现分布式缓存、jetcache、spring cache\n\njetcache整合笔记：\n\n```xml\n        <dependency>\n            <groupId>com.alicp.jetcache</groupId>\n            <artifactId>jetcache-starter-redis</artifactId>\n            <version>2.4.4</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n```\n\n```java\n@SpringBootApplication\n@EnableMethodCache(basePackages = \"com.muggle.jetcahetest\")\n@EnableCreateCacheAnnotation\npublic class JetcaheTestApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(JetcaheTestApplication.class, args);\n    }\n\n}\n```\n\n```java\npublic interface Server {\n\n    @Cached(cacheType = CacheType.REMOTE)\n    int test (String message);\n}\n```\n\n```java\n@Service\npublic class ServerImpl implements Server {\n    @Override\n    public int test(String message) {\n        System.out.println(\">>>\");\n        return 666;\n    }\n}\n```\n\n更多文档参考[jetCache github 地址][]\n\n分布式缓存的应用\n\n合并批量更新，提高io\n\n缓存的粒度问题，缓存数据是全量还是部分\n\n### cache cloud 使用\n\n### 分布式缓存原理分析\n\n- 传统分布式算法：HASH算法或者取模算法\n- Consistent hashing一致性算法原理\n- Hash倾斜性\n- 虚拟节点\n- Consistent hashing命中率\n\nConsistent hashing 是一致性hash算法\n\n博客：[一致性哈希](<https://blog.csdn.net/qq_35956041/article/details/81026972>)\n\n哈希倾斜：缓存任务分配不均，采用虚拟节点避免\n\n缓存穿透：缓存未起作用\n\n缓存雪崩：缓存雪崩可能是因为数据未加载到缓存中，或者缓存同一时间大面积的失效，从而导致所有请求都去查数据库，导致数据库CPU和内存负载过高，甚至宕机。\n\n缓存的算法\n\nFIFO算法：First in First out，先进先出。原则：一个数据最先进入缓存中，则应该最早淘汰掉。也就是说，当缓存满的时候，应当把最先进入缓存的数据给淘汰掉。\nLFU算法：Least Frequently Used，最不经常使用算法。\nLRU算法：Least Recently Used，近期最少使用算法。\n\nLRU和LFU的区别。LFU算法是根据在一段时间里数据项被使用的次数选择出最少使用的数据项，即根据使用次数的差异来决定。而LRU是根据使用时间的差异来决定的\n\n## redis运维（抄录自 https://mp.weixin.qq.com/s/TvIxovAi6XfR7RGigtHRtQ）\n\n### 快照持久化\n\nredis中的快照持久化默认是开启的，redis.conf中相关配置主要有如下几项：\n\n```properties\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\ndbfilename dump.rdb\ndir ./\n```\n\n前面三个save相关的选项表示备份的频率，分别表示`900秒内至少一个键被更改则进行快照，300秒内至少10个键被更改则进行快照，60秒内至少10000个键被更改则进行快照，`stop-writes-on-bgsave-error表示在快照创建出错后，是否继续执行写命令，rdbcompression则表示是否对快照文件进行压缩，dbfilename表示生成的快照文件的名字，dir则表示生成的快照文件的位置，在redis中，快照持久化默认就是开启的。\n\n1.在redis运行过程中，我们可以向redis发送一条save命令来创建一个快照，save是一个阻塞命令，redis在接收到save命令之后，开始执行备份操作之后，在备份操作执行完毕之前，将不再处理其他请求，其他请求将被挂起，因此这个命令我们用的不多。save命令执行如下：\n\n```\n127.0.0.1:6379> SAVE\nOK\n```\n\n2.在redis运行过程中，我们也可以发送一条bgsave命令来创建一个快照，不同于save命令，bgsave命令会fork一个子进程，然后这个子进程负责执行将快照写入硬盘，而父进程则继续处理客户端发来的请求，这样就不会导致客户端命令阻塞了。如下：\n\n```\n127.0.0.1:6379> BGSAVE\nBackground saving started\n```\n\n3.如果我们在redis.conf中配置了如下选项：\n\n```\nsave 900 1\nsave 300 10\nsave 60 10000\n```\n\n那么当条件满足时，比如900秒内有一个key被操作了，那么redis就会自动触发bgsava命令进行备份。我们可以根据实际需求在redis.conf中配置多个这种触发规则。\n\n4.还有一种情况也会触发save命令，那就是我们执行shutdown命令时，当我们用shutdown命令关闭redis时，此时也会执行一个save命令进行备份操作，并在备份操作完成后将服务器关闭。\n\n5.还有一种特殊情况也会触发bgsave命令，就是在主从备份的时候。当从机连接上主机后，会发送一条sync命令来开始一次复制操作，此时主机会开始一次bgsave操作，并在bgsave操作结束后向从机发送快照数据实现数据同步。\n\n### aof持久化\n\n与快照持久化不同，AOF持久化是将被执行的命令写到aof文件末尾，在恢复时只需要从头到尾执行一遍写命令即可恢复数据，AOF在redis中默认也是没有开启的，需要我们手动开启，开启方式如下：\n\n打开redis.conf配置文件，修改appendonly属性值为yes，如下：\n\n```\nappendonly yes\n```\n\n另外几个和AOF相关的属性如下：\n\n```\nappendfilename \"appendonly.aof\"\n# appendfsync always\nappendfsync everysec\n# appendfsync no\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\n```\n\n这几个属性的含义分别如下：\n\n1.appendfilename表示生成的AOF备份文件的文件名。\n2.appendfsync表示备份的时机，always表示每执行一个命令就备份一次，everysec表示每秒备份一次，no表示将备份时机交给操作系统。\n3.no-appendfsync-on-rewrite表示在对aof文件进行压缩时，是否执行同步操作。\n4.最后两行配置表示AOF文件的压缩时机，这个我们一会再细说。\n\n同时为了避免快照备份的影响，我们将快照备份关闭，关闭方式如下：\n\n```\nsave \"\"\n# save 900 1\n# save 300 10\n# save 60 10000\n```\n\n此时，当我们在redis中进行数据操作时，就会自动生成AOF的配置文件appendonly.aof\n\nAOF备份的几个关键点\n\n1.通过上面的介绍，小伙伴们了解到appendfsync的取值一共有三种，我们在项目中首选everysec，always选项会严重降低redis性能。\n2.使用everysec，最坏的情况下我们可能丢失1秒的数据。\n\nAOF文件的重写与压缩\n\nAOF备份有很多明显的优势，当然也有劣势，那就是文件大小。随着系统的运行，AOF的文件会越来越大，甚至把整个电脑的硬盘填满，AOF文件的重写与压缩机制可以在一定程度上缓解这个问题。\n当AOF的备份文件过大时，我们可以向redis发送一条bgrewriteaof命令进行文件重写，如下：\n\n```\n127.0.0.1:6379> BGREWRITEAOF\nBackground append only file rewriting started\n(0.71s)\n```\n\nbgrewriteaof的执行原理和我们上文说的bgsave的原理一致，这里我就不再赘述，因此bgsave执行过程中存在的问题在这里也一样存在。\n\nbgrewriteaof也可以自动执行，自动执行时间则依赖于auto-aof-rewrite-percentage和auto-aof-rewrite-min-size配置，auto-aof-rewrite-percentage 100表示当目前aof文件大小超过上一次重写时的aof文件大小的百分之多少时会再次进行重写，如果之前没有重写，则以启动时的aof文件大小为依据，同时还要求AOF文件的大小至少要大于64M(auto-aof-rewrite-min-size 64mb)。\n\n### redis主从复制\n\n6379是主机，即master，6380和6381是从机，即slave，那么如何配置这种实例关系呢，很简单，分别在6380和6381上执行如下命令：\n\n```\n127.0.0.1:6381> SLAVEOF 127.0.0.1 6379\nOK\n```\n\n这一步也可以通过在两个从机的redis.conf中添加如下配置来解决：\n\n```\nslaveof 127.0.0.1 6379\n```\n\n主从复制注意点\n\n1.如果主机已经运行了一段时间了，并且了已经存储了一些数据了，此时从机连上来，那么从机会将主机上所有的数据进行备份，而不是从连接的那个时间点开始备份。\n2.配置了主从复制之后，主机上可读可写，但是从机只能读取不能写入（可以通过修改redis.conf中 slave-read-only 的值让从机也可以执行写操作）。\n3.在整个主从结构运行过程中，如果主机不幸挂掉，重启之后，他依然是主机，主从复制操作也能够继续进行。\n\n复制原理\n\n每一个master都有一个replication ID，这是一个较大的伪随机字符串，标记了一个给定的数据集。每个master也持有一个偏移量，master将自己产生的复制流发送给slave时，发送多少个字节的数据，自身的偏移量就会增加多少，目的是当有新的操作修改自己的数据集时，它可以以此更新slave的状态。复制偏移量即使在没有一个slave连接到master时，也会自增，所以基本上每一对给定的Replication ID, offset都会标识一个master数据集的确切版本。当slave连接到master时，它们使用PSYNC命令来发送它们记录的旧的master replication ID和它们至今为止处理的偏移量。通过这种方式，master能够仅发送slave所需的增量部分。但是如果master的缓冲区中没有足够的命令积压缓冲记录，或者如果slave引用了不再知道的历史记录（replication ID），则会转而进行一个全量重同步：在这种情况下，slave会得到一个完整的数据集副本，从头开始(参考redis官网)。\n\n简单来说，就是以下几个步骤：\n\n```\n    1.slave启动成功连接到master后会发送一个sync命令。  \n    2.Master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令。  \n    3.在后台进程执行完毕之后，master将传送整个数据文件到slave,以完成一次完全同步。  \n    4.全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。  \n    5.增量复制：Master继续将新的所有收集到的修改命令依次传给slave,完成同步。  \n    6.但是只要是重新连接master,一次完全同步（全量复制)将被自动执行。  \n```\n\n我们搭建的主从复制模式是下面这样的：\n\n![img](https://mmbiz.qpic.cn/mmbiz_png/GvtDGKK4uYnKsYW7dwk0aaRIrKcESa9ibiaq4WfV2TDDvyGMsfjVVZ3K8oKEYT6m7YfJQekNiayQ4PfknStVl21QQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)  \n\n实际上，一主二仆的主从复制，我们可以搭建成下面这种结构：\n\n![img](https://mmbiz.qpic.cn/mmbiz_png/GvtDGKK4uYnKsYW7dwk0aaRIrKcESa9ibbMvoJzK9ycEft3gcMssde1knu6OlGzgBWlRFRNyZYFuIc3pBUIce7g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)  \n\n哨兵模式，其实并不复杂，我们还是在我们前面的基础上来搭建哨兵模式。假设现在我的master是6379，两个从机分别是6380和6381，两个从机都是从6379上复制数据。先按照上文的步骤，我们配置好一主二仆，然后在redis目录下打开sentinel.conf文件，做如下配置：\n\n```\nsentinel monitor mymaster 127.0.0.1 6379 1\n```\n\n其中mymaster是给要监控的主机取的名字，随意取，后面是主机地址，最后面的2表示有多少个sentinel认为主机挂掉了，就进行切换（我这里只有一个，因此设置为1）。好了，配置完成后，输入如下命令启动哨兵：\n\n```java\nredis-sentinel sentinel.conf\n```\n\n6379挂掉之后，redis内部重新举行了选举，6380重新上位。此时，如果6379重启，也不再是扛把子了，只能屈身做一个slave了。\n\n### 集群搭建\n\nRedis集群架构如下图：\n\n![img](https://mmbiz.qpic.cn/mmbiz_png/GvtDGKK4uYmokRcFGBAhCcEXKrK04yXHyTcYLtNXvWCZjjS5Vl9wWsg323VBBmboGhJ6Ovfia4Pqc2oLadKcqvg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)  \n\nRedis集群运行原理如下：\n\n1.所有的Redis节点彼此互联(PING-PONG机制),内部使用二进制协议优化传输速度和带宽\n2.节点的fail是通过集群中超过半数的节点检测失效时才生效\n3.客户端与Redis节点直连,不需要中间proxy层，客户端不需要连接集群所有节点，连接集群中任何一个可用节点即可\n4.Redis-cluster把所有的物理节点映射到[0-16383]slot上,cluster (簇)负责维护`node<->slot<->value`。Redis集群中内置了16384个哈希槽，当需要在Redis集群中放置一个key-value时，Redis先对key使用crc16算法算出一个结果，然后把结果对 16384 求余数，这样每个key都会对应一个编号在 0-16383 之间的哈希槽，Redis 会根据节点数量大致均等的将哈希槽映射到不同的节点\n\n\n\n","source":"_posts/redis-1.md","raw":"---\ntitle: redis笔记\ndate: 2019-05-06 09:53:26\ntags: developing\n---\n\n## redis基础知识\n\n客户端与服务端的通讯协议是建立在TCP协议之上构建的；\n\nredis序列化协议 resp\n\n- 状态回复（status reply）的第一个字节是 `\"+\"`\n- 错误回复（error reply）的第一个字节是 `\"-\"`\n- 整数回复（integer reply）的第一个字节是 `\":\"`\n- 批量回复（bulk reply）的第一个字节是 `\"$\"`\n- 多条批量回复（multi bulk reply）的第一个字节是 `\"*\"`\n\n<!--more-->\n\n举例：\n\n```shell\nSET mykey myvalue\n*3\\r\\n$3\\r\\nSET\\r\\n$5\\r\\mykey\\r\\n$7\\r\\myvalue\\r\\n\n```\n\n指令表：\n\n[redis命令表](<http://redisdoc.com/>)\n\n- 字符串\n  - [SET](http://redisdoc.com/string/set.html)\n  - [SETNX](http://redisdoc.com/string/setnx.html)\n  - [SETEX](http://redisdoc.com/string/setex.html)\n  - [PSETEX](http://redisdoc.com/string/psetex.html)\n  - [GET](http://redisdoc.com/string/get.html)\n  - [GETSET](http://redisdoc.com/string/getset.html)\n  - [STRLEN](http://redisdoc.com/string/strlen.html)\n  - [APPEND](http://redisdoc.com/string/append.html)\n  - [SETRANGE](http://redisdoc.com/string/setrange.html)\n  - [GETRANGE](http://redisdoc.com/string/getrange.html)\n  - [INCR](http://redisdoc.com/string/incr.html)\n  - [INCRBY](http://redisdoc.com/string/incrby.html)\n  - [INCRBYFLOAT](http://redisdoc.com/string/incrbyfloat.html)\n  - [DECR](http://redisdoc.com/string/decr.html)\n  - [DECRBY](http://redisdoc.com/string/decrby.html)\n  - [MSET](http://redisdoc.com/string/mset.html)\n  - [MSETNX](http://redisdoc.com/string/msetnx.html)\n  - [MGET](http://redisdoc.com/string/mget.html)\n- 哈希表\n  - [HSET](http://redisdoc.com/hash/hset.html)\n  - [HSETNX](http://redisdoc.com/hash/hsetnx.html)\n  - [HGET](http://redisdoc.com/hash/hget.html)\n  - [HEXISTS](http://redisdoc.com/hash/hexists.html)\n  - [HDEL](http://redisdoc.com/hash/hdel.html)\n  - [HLEN](http://redisdoc.com/hash/hlen.html)\n  - [HSTRLEN](http://redisdoc.com/hash/hstrlen.html)\n  - [HINCRBY](http://redisdoc.com/hash/hincrby.html)\n  - [HINCRBYFLOAT](http://redisdoc.com/hash/hincrbyfloat.html)\n  - [HMSET](http://redisdoc.com/hash/hmset.html)\n  - [HMGET](http://redisdoc.com/hash/hmget.html)\n  - [HKEYS](http://redisdoc.com/hash/hkeys.html)\n  - [HVALS](http://redisdoc.com/hash/hvals.html)\n  - [HGETALL](http://redisdoc.com/hash/hgetall.html)\n  - [HSCAN](http://redisdoc.com/hash/hscan.html)\n- 列表\n  - [LPUSH](http://redisdoc.com/list/lpush.html)\n  - [LPUSHX](http://redisdoc.com/list/lpushx.html)\n  - [RPUSH](http://redisdoc.com/list/rpush.html)\n  - [RPUSHX](http://redisdoc.com/list/rpushx.html)\n  - [LPOP](http://redisdoc.com/list/lpop.html)\n  - [RPOP](http://redisdoc.com/list/rpop.html)\n  - [RPOPLPUSH](http://redisdoc.com/list/rpoplpush.html)\n  - [LREM](http://redisdoc.com/list/lrem.html)\n  - [LLEN](http://redisdoc.com/list/llen.html)\n  - [LINDEX](http://redisdoc.com/list/lindex.html)\n  - [LINSERT](http://redisdoc.com/list/linsert.html)\n  - [LSET](http://redisdoc.com/list/lset.html)\n  - [LRANGE](http://redisdoc.com/list/lrange.html)\n  - [LTRIM](http://redisdoc.com/list/ltrim.html)\n  - [BLPOP](http://redisdoc.com/list/blpop.html)\n  - [BRPOP](http://redisdoc.com/list/brpop.html)\n  - [BRPOPLPUSH](http://redisdoc.com/list/brpoplpush.html)\n- 集合\n  - [SADD](http://redisdoc.com/set/sadd.html)\n  - [SISMEMBER](http://redisdoc.com/set/sismember.html)\n  - [SPOP](http://redisdoc.com/set/spop.html)\n  - [SRANDMEMBER](http://redisdoc.com/set/srandmember.html)\n  - [SREM](http://redisdoc.com/set/srem.html)\n  - [SMOVE](http://redisdoc.com/set/smove.html)\n  - [SCARD](http://redisdoc.com/set/scard.html)\n  - [SMEMBERS](http://redisdoc.com/set/smembers.html)\n  - [SSCAN](http://redisdoc.com/set/sscan.html)\n  - [SINTER](http://redisdoc.com/set/sinter.html)\n  - [SINTERSTORE](http://redisdoc.com/set/sinterstore.html)\n  - [SUNION](http://redisdoc.com/set/sunion.html)\n  - [SUNIONSTORE](http://redisdoc.com/set/sunionstore.html)\n  - [SDIFF](http://redisdoc.com/set/sdiff.html)\n  - [SDIFFSTORE](http://redisdoc.com/set/sdiffstore.html)\n- 有序集合\n  - [ZADD](http://redisdoc.com/sorted_set/zadd.html)\n  - [ZSCORE](http://redisdoc.com/sorted_set/zscore.html)\n  - [ZINCRBY](http://redisdoc.com/sorted_set/zincrby.html)\n  - [ZCARD](http://redisdoc.com/sorted_set/zcard.html)\n  - [ZCOUNT](http://redisdoc.com/sorted_set/zcount.html)\n  - [ZRANGE](http://redisdoc.com/sorted_set/zrange.html)\n  - [ZREVRANGE](http://redisdoc.com/sorted_set/zrevrange.html)\n  - [ZRANGEBYSCORE](http://redisdoc.com/sorted_set/zrangebyscore.html)\n  - [ZREVRANGEBYSCORE](http://redisdoc.com/sorted_set/zrevrangebyscore.html)\n  - [ZRANK](http://redisdoc.com/sorted_set/zrank.html)\n  - [ZREVRANK](http://redisdoc.com/sorted_set/zrevrank.html)\n  - [ZREM](http://redisdoc.com/sorted_set/zrem.html)\n  - [ZREMRANGEBYRANK](http://redisdoc.com/sorted_set/zremrangebyrank.html)\n  - [ZREMRANGEBYSCORE](http://redisdoc.com/sorted_set/zremrangebyscore.html)\n  - [ZRANGEBYLEX](http://redisdoc.com/sorted_set/zrangebylex.html)\n  - [ZLEXCOUNT](http://redisdoc.com/sorted_set/zlexcount.html)\n  - [ZREMRANGEBYLEX](http://redisdoc.com/sorted_set/zremrangebylex.html)\n  - [ZSCAN](http://redisdoc.com/sorted_set/zscan.html)\n  - [ZUNIONSTORE](http://redisdoc.com/sorted_set/zunionstore.html)\n  - [ZINTERSTORE](http://redisdoc.com/sorted_set/zinterstore.html)\n- HyperLogLog\n  - [PFADD](http://redisdoc.com/hyperloglog/pfadd.html)\n  - [PFCOUNT](http://redisdoc.com/hyperloglog/pfcount.html)\n  - [PFMERGE](http://redisdoc.com/hyperloglog/pfmerge.html)\n- 地理位置\n  - [GEOADD](http://redisdoc.com/geo/geoadd.html)\n  - [GEOPOS](http://redisdoc.com/geo/geopos.html)\n  - [GEODIST](http://redisdoc.com/geo/geodist.html)\n  - [GEORADIUS](http://redisdoc.com/geo/georadius.html)\n  - [GEORADIUSBYMEMBER](http://redisdoc.com/geo/georadiusbymember.html)\n  - [GEOHASH](http://redisdoc.com/geo/geohash.html)\n- 位图\n  - [SETBIT](http://redisdoc.com/bitmap/setbit.html)\n  - [GETBIT](http://redisdoc.com/bitmap/getbit.html)\n  - [BITCOUNT](http://redisdoc.com/bitmap/bitcount.html)\n  - [BITPOS](http://redisdoc.com/bitmap/bitpos.html)\n  - [BITOP](http://redisdoc.com/bitmap/bitop.html)\n  - [BITFIELD](http://redisdoc.com/bitmap/bitfield.html)\n- 数据库\n  - [EXISTS](http://redisdoc.com/database/exists.html)\n  - [TYPE](http://redisdoc.com/database/type.html)\n  - [RENAME](http://redisdoc.com/database/rename.html)\n  - [RENAMENX](http://redisdoc.com/database/renamenx.html)\n  - [MOVE](http://redisdoc.com/database/move.html)\n  - [DEL](http://redisdoc.com/database/del.html)\n  - [RANDOMKEY](http://redisdoc.com/database/randomkey.html)\n  - [DBSIZE](http://redisdoc.com/database/dbsize.html)\n  - [KEYS](http://redisdoc.com/database/keys.html)\n  - [SCAN](http://redisdoc.com/database/scan.html)\n  - [SORT](http://redisdoc.com/database/sort.html)\n  - [FLUSHDB](http://redisdoc.com/database/flushdb.html)\n  - [FLUSHALL](http://redisdoc.com/database/flushall.html)\n  - [SELECT](http://redisdoc.com/database/select.html)\n  - [SWAPDB](http://redisdoc.com/database/swapdb.html)\n- 自动过期\n  - [EXPIRE](http://redisdoc.com/expire/expire.html)\n  - [EXPIREAT](http://redisdoc.com/expire/expireat.html)\n  - [TTL](http://redisdoc.com/expire/ttl.html)\n  - [PERSIST](http://redisdoc.com/expire/persist.html)\n  - [PEXPIRE](http://redisdoc.com/expire/pexpire.html)\n  - [PEXPIREAT](http://redisdoc.com/expire/pexpireat.html)\n  - [PTTL](http://redisdoc.com/expire/pttl.html)\n- 事务\n  - [MULTI](http://redisdoc.com/transaction/multi.html)\n  - [EXEC](http://redisdoc.com/transaction/exec.html)\n  - [DISCARD](http://redisdoc.com/transaction/discard.html)\n  - [WATCH](http://redisdoc.com/transaction/watch.html)\n  - [UNWATCH](http://redisdoc.com/transaction/unwatch.html)\n- Lua 脚本\n  - [EVAL](http://redisdoc.com/script/eval.html)\n  - [EVALSHA](http://redisdoc.com/script/evalsha.html)\n  - [SCRIPT_LOAD](http://redisdoc.com/script/script_load.html)\n  - [SCRIPT_EXISTS](http://redisdoc.com/script/script_exists.html)\n  - [SCRIPT_FLUSH](http://redisdoc.com/script/script_flush.html)\n  - [SCRIPT_KILL](http://redisdoc.com/script/script_kill.html)\n- 持久化\n  - [SAVE](http://redisdoc.com/persistence/save.html)\n  - [BGSAVE](http://redisdoc.com/persistence/bgsave.html)\n  - [BGREWRITEAOF](http://redisdoc.com/persistence/bgrewriteaof.html)\n  - [LASTSAVE](http://redisdoc.com/persistence/lastsave.html)\n- 发布与订阅\n  - [PUBLISH](http://redisdoc.com/pubsub/publish.html)\n  - [SUBSCRIBE](http://redisdoc.com/pubsub/subscribe.html)\n  - [PSUBSCRIBE](http://redisdoc.com/pubsub/psubscribe.html)\n  - [UNSUBSCRIBE](http://redisdoc.com/pubsub/unsubscribe.html)\n  - [PUNSUBSCRIBE](http://redisdoc.com/pubsub/punsubscribe.html)\n  - [PUBSUB](http://redisdoc.com/pubsub/pubsub.html)\n- 复制\n  - [SLAVEOF](http://redisdoc.com/replication/slaveof.html)\n  - [ROLE](http://redisdoc.com/replication/role.html)\n- 客户端与服务器\n  - [AUTH](http://redisdoc.com/client_and_server/auth.html)\n  - [QUIT](http://redisdoc.com/client_and_server/quit.html)\n  - [INFO](http://redisdoc.com/client_and_server/info.html)\n  - [SHUTDOWN](http://redisdoc.com/client_and_server/shutdown.html)\n  - [TIME](http://redisdoc.com/client_and_server/time.html)\n  - [CLIENT_GETNAME](http://redisdoc.com/client_and_server/client_getname.html)\n  - [CLIENT_KILL](http://redisdoc.com/client_and_server/client_kill.html)\n  - [CLIENT_LIST](http://redisdoc.com/client_and_server/client_list.html)\n  - [CLIENT_SETNAME](http://redisdoc.com/client_and_server/client_setname.html)\n- 配置选项\n  - [CONFIG_SET](http://redisdoc.com/configure/config_set.html)\n  - [CONFIG_GET](http://redisdoc.com/configure/config_get.html)\n  - [CONFIG_RESETSTAT](http://redisdoc.com/configure/config_resetstat.html)\n  - [CONFIG_REWRITE](http://redisdoc.com/configure/config_rewrite.html)\n- 调试\n  - [PING](http://redisdoc.com/debug/ping.html)\n  - [ECHO](http://redisdoc.com/debug/echo.html)\n  - [OBJECT](http://redisdoc.com/debug/object.html)\n  - [SLOWLOG](http://redisdoc.com/debug/slowlog.html)\n  - [MONITOR](http://redisdoc.com/debug/monitor.html)\n  - [DEBUG_OBJECT](http://redisdoc.com/debug/debug_object.html)\n  - [DEBUG_SEGFAULT](http://redisdoc.com/debug/debug_segfault.html)\n- 内部命令\n  - [MIGRATE](http://redisdoc.com/internal/migrate.html)\n  - [DUMP](http://redisdoc.com/internal/dump.html)\n  - [RESTORE](http://redisdoc.com/internal/restore.html)\n  - [SYNC](http://redisdoc.com/internal/sync.html)\n  - [PSYNC](http://redisdoc.com/internal/psync.html)\n- 功能文档\n  - [Redis 集群规范](http://redisdoc.com/topic/cluster-spec.html)\n  - [持久化（persistence）](http://redisdoc.com/topic/persistence.html)\n  - [发布与订阅（pub/sub）](http://redisdoc.com/topic/pubsub.html)\n  - [Sentinel](http://redisdoc.com/topic/sentinel.html)\n  - [集群教程](http://redisdoc.com/topic/cluster-tutorial.html)\n  - [键空间通知（keyspace notification）](http://redisdoc.com/topic/notification.html)\n  - [通信协议（protocol）](http://redisdoc.com/topic/protocol.html)\n  - [复制（Replication）](http://redisdoc.com/topic/replication.html)\n  - [事务（transaction）](http://redisdoc.com/topic/transaction.html)\n\nredis key集中过期问题，集中过期导致redis压力过大而卡顿\n\n采用一定范围内的随机过期时间\n\nRedis也提供了一些简单的计算功能，比如排序、聚合等，对于这些操作，单线程模型实际会严重影响整体吞吐量，CPU计算过程中，整个IO调度都是被阻塞住的。\n\n**redis分布式锁参考 本博客[多线程进阶篇](<https://muggle.javaboy.org/2019/04/23/thread-3/>)**\n\n## springboot 分布式session\n\n```java\n@Configuration  \n@EnableRedisHttpSession  \npublic class RedisSessionConfig {  \n}  \n```\n\n```xml\n<dependency>  \n        <groupId>org.springframework.boot</groupId>  \n        <artifactId>spring-boot-starter-redis</artifactId>  \n</dependency>  \n<dependency>  \n        <groupId>org.springframework.session</groupId>  \n        <artifactId>spring-session-data-redis</artifactId>  \n</dependency>\n```\n\n```properties\nspring.redis.host=localhost  \nspring.redis.port=6379  \n```\n\n**注意：springboot2.1有包冲突，本配置只适用于2.1以下**\n\n## mybatis的二级缓存\n\n二级缓存是mapper级别的缓存，多个SqlSession去操作同一个Mapper的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。\n\nUserMapper有一个二级缓存区域（按namespace分），其它mapper也有自己的二级缓存区域（按namespace分）。每一个namespace的mapper都有一个二级缓存区域，两个mapper的namespace如果相同，这两个mapper执行sql查询到数据将存在相同的二级缓存区域中。sql节点可配置userCache flushcache\n\n打开二级缓存总开关（springboot默认开启），在mapper中使用`<cache/>`打开二级缓存 在分布式系统中不能直接使用二级缓存\n\n`<cache />`的属性：\n\n- eviction：代表的是缓存收回策略，有一下策略：\n  1. LRU，  最近最少使用的，移除最长时间不用的对象。\n  2. FIFO，先进先出，按对象进入缓存的顺序来移除他们\n  3. SOFT， 软引用，移除基于垃圾回收器状态和软引用规则的对象。\n  4. WEAK，若引用，更积极的移除基于垃圾收集器状态和若引用规则的对象\n- flushInterval：刷新间隔时间，单位为毫秒，默认是当sql执行的时候才回去刷新。\n- size：引用数目，一个正整数，代表缓存最多可以存储多少对象，不宜设置过大，过大会造成内存溢出。\n- readOnly：只读，意味着缓存数据只能读取，不能修改，这样设置的好处是我们可以快速读取缓存，去诶但是我们没有办法修改缓存。默认值为false，不允许我们修改。\n\n\n\n## 分布式缓存\n\n分布式缓存策略\n\nmybatis整合ehcache实现分布式缓存、jetcache、spring cache\n\njetcache整合笔记：\n\n```xml\n        <dependency>\n            <groupId>com.alicp.jetcache</groupId>\n            <artifactId>jetcache-starter-redis</artifactId>\n            <version>2.4.4</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n```\n\n```java\n@SpringBootApplication\n@EnableMethodCache(basePackages = \"com.muggle.jetcahetest\")\n@EnableCreateCacheAnnotation\npublic class JetcaheTestApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(JetcaheTestApplication.class, args);\n    }\n\n}\n```\n\n```java\npublic interface Server {\n\n    @Cached(cacheType = CacheType.REMOTE)\n    int test (String message);\n}\n```\n\n```java\n@Service\npublic class ServerImpl implements Server {\n    @Override\n    public int test(String message) {\n        System.out.println(\">>>\");\n        return 666;\n    }\n}\n```\n\n更多文档参考[jetCache github 地址][]\n\n分布式缓存的应用\n\n合并批量更新，提高io\n\n缓存的粒度问题，缓存数据是全量还是部分\n\n### cache cloud 使用\n\n### 分布式缓存原理分析\n\n- 传统分布式算法：HASH算法或者取模算法\n- Consistent hashing一致性算法原理\n- Hash倾斜性\n- 虚拟节点\n- Consistent hashing命中率\n\nConsistent hashing 是一致性hash算法\n\n博客：[一致性哈希](<https://blog.csdn.net/qq_35956041/article/details/81026972>)\n\n哈希倾斜：缓存任务分配不均，采用虚拟节点避免\n\n缓存穿透：缓存未起作用\n\n缓存雪崩：缓存雪崩可能是因为数据未加载到缓存中，或者缓存同一时间大面积的失效，从而导致所有请求都去查数据库，导致数据库CPU和内存负载过高，甚至宕机。\n\n缓存的算法\n\nFIFO算法：First in First out，先进先出。原则：一个数据最先进入缓存中，则应该最早淘汰掉。也就是说，当缓存满的时候，应当把最先进入缓存的数据给淘汰掉。\nLFU算法：Least Frequently Used，最不经常使用算法。\nLRU算法：Least Recently Used，近期最少使用算法。\n\nLRU和LFU的区别。LFU算法是根据在一段时间里数据项被使用的次数选择出最少使用的数据项，即根据使用次数的差异来决定。而LRU是根据使用时间的差异来决定的\n\n## redis运维（抄录自 https://mp.weixin.qq.com/s/TvIxovAi6XfR7RGigtHRtQ）\n\n### 快照持久化\n\nredis中的快照持久化默认是开启的，redis.conf中相关配置主要有如下几项：\n\n```properties\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\ndbfilename dump.rdb\ndir ./\n```\n\n前面三个save相关的选项表示备份的频率，分别表示`900秒内至少一个键被更改则进行快照，300秒内至少10个键被更改则进行快照，60秒内至少10000个键被更改则进行快照，`stop-writes-on-bgsave-error表示在快照创建出错后，是否继续执行写命令，rdbcompression则表示是否对快照文件进行压缩，dbfilename表示生成的快照文件的名字，dir则表示生成的快照文件的位置，在redis中，快照持久化默认就是开启的。\n\n1.在redis运行过程中，我们可以向redis发送一条save命令来创建一个快照，save是一个阻塞命令，redis在接收到save命令之后，开始执行备份操作之后，在备份操作执行完毕之前，将不再处理其他请求，其他请求将被挂起，因此这个命令我们用的不多。save命令执行如下：\n\n```\n127.0.0.1:6379> SAVE\nOK\n```\n\n2.在redis运行过程中，我们也可以发送一条bgsave命令来创建一个快照，不同于save命令，bgsave命令会fork一个子进程，然后这个子进程负责执行将快照写入硬盘，而父进程则继续处理客户端发来的请求，这样就不会导致客户端命令阻塞了。如下：\n\n```\n127.0.0.1:6379> BGSAVE\nBackground saving started\n```\n\n3.如果我们在redis.conf中配置了如下选项：\n\n```\nsave 900 1\nsave 300 10\nsave 60 10000\n```\n\n那么当条件满足时，比如900秒内有一个key被操作了，那么redis就会自动触发bgsava命令进行备份。我们可以根据实际需求在redis.conf中配置多个这种触发规则。\n\n4.还有一种情况也会触发save命令，那就是我们执行shutdown命令时，当我们用shutdown命令关闭redis时，此时也会执行一个save命令进行备份操作，并在备份操作完成后将服务器关闭。\n\n5.还有一种特殊情况也会触发bgsave命令，就是在主从备份的时候。当从机连接上主机后，会发送一条sync命令来开始一次复制操作，此时主机会开始一次bgsave操作，并在bgsave操作结束后向从机发送快照数据实现数据同步。\n\n### aof持久化\n\n与快照持久化不同，AOF持久化是将被执行的命令写到aof文件末尾，在恢复时只需要从头到尾执行一遍写命令即可恢复数据，AOF在redis中默认也是没有开启的，需要我们手动开启，开启方式如下：\n\n打开redis.conf配置文件，修改appendonly属性值为yes，如下：\n\n```\nappendonly yes\n```\n\n另外几个和AOF相关的属性如下：\n\n```\nappendfilename \"appendonly.aof\"\n# appendfsync always\nappendfsync everysec\n# appendfsync no\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\n```\n\n这几个属性的含义分别如下：\n\n1.appendfilename表示生成的AOF备份文件的文件名。\n2.appendfsync表示备份的时机，always表示每执行一个命令就备份一次，everysec表示每秒备份一次，no表示将备份时机交给操作系统。\n3.no-appendfsync-on-rewrite表示在对aof文件进行压缩时，是否执行同步操作。\n4.最后两行配置表示AOF文件的压缩时机，这个我们一会再细说。\n\n同时为了避免快照备份的影响，我们将快照备份关闭，关闭方式如下：\n\n```\nsave \"\"\n# save 900 1\n# save 300 10\n# save 60 10000\n```\n\n此时，当我们在redis中进行数据操作时，就会自动生成AOF的配置文件appendonly.aof\n\nAOF备份的几个关键点\n\n1.通过上面的介绍，小伙伴们了解到appendfsync的取值一共有三种，我们在项目中首选everysec，always选项会严重降低redis性能。\n2.使用everysec，最坏的情况下我们可能丢失1秒的数据。\n\nAOF文件的重写与压缩\n\nAOF备份有很多明显的优势，当然也有劣势，那就是文件大小。随着系统的运行，AOF的文件会越来越大，甚至把整个电脑的硬盘填满，AOF文件的重写与压缩机制可以在一定程度上缓解这个问题。\n当AOF的备份文件过大时，我们可以向redis发送一条bgrewriteaof命令进行文件重写，如下：\n\n```\n127.0.0.1:6379> BGREWRITEAOF\nBackground append only file rewriting started\n(0.71s)\n```\n\nbgrewriteaof的执行原理和我们上文说的bgsave的原理一致，这里我就不再赘述，因此bgsave执行过程中存在的问题在这里也一样存在。\n\nbgrewriteaof也可以自动执行，自动执行时间则依赖于auto-aof-rewrite-percentage和auto-aof-rewrite-min-size配置，auto-aof-rewrite-percentage 100表示当目前aof文件大小超过上一次重写时的aof文件大小的百分之多少时会再次进行重写，如果之前没有重写，则以启动时的aof文件大小为依据，同时还要求AOF文件的大小至少要大于64M(auto-aof-rewrite-min-size 64mb)。\n\n### redis主从复制\n\n6379是主机，即master，6380和6381是从机，即slave，那么如何配置这种实例关系呢，很简单，分别在6380和6381上执行如下命令：\n\n```\n127.0.0.1:6381> SLAVEOF 127.0.0.1 6379\nOK\n```\n\n这一步也可以通过在两个从机的redis.conf中添加如下配置来解决：\n\n```\nslaveof 127.0.0.1 6379\n```\n\n主从复制注意点\n\n1.如果主机已经运行了一段时间了，并且了已经存储了一些数据了，此时从机连上来，那么从机会将主机上所有的数据进行备份，而不是从连接的那个时间点开始备份。\n2.配置了主从复制之后，主机上可读可写，但是从机只能读取不能写入（可以通过修改redis.conf中 slave-read-only 的值让从机也可以执行写操作）。\n3.在整个主从结构运行过程中，如果主机不幸挂掉，重启之后，他依然是主机，主从复制操作也能够继续进行。\n\n复制原理\n\n每一个master都有一个replication ID，这是一个较大的伪随机字符串，标记了一个给定的数据集。每个master也持有一个偏移量，master将自己产生的复制流发送给slave时，发送多少个字节的数据，自身的偏移量就会增加多少，目的是当有新的操作修改自己的数据集时，它可以以此更新slave的状态。复制偏移量即使在没有一个slave连接到master时，也会自增，所以基本上每一对给定的Replication ID, offset都会标识一个master数据集的确切版本。当slave连接到master时，它们使用PSYNC命令来发送它们记录的旧的master replication ID和它们至今为止处理的偏移量。通过这种方式，master能够仅发送slave所需的增量部分。但是如果master的缓冲区中没有足够的命令积压缓冲记录，或者如果slave引用了不再知道的历史记录（replication ID），则会转而进行一个全量重同步：在这种情况下，slave会得到一个完整的数据集副本，从头开始(参考redis官网)。\n\n简单来说，就是以下几个步骤：\n\n```\n    1.slave启动成功连接到master后会发送一个sync命令。  \n    2.Master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令。  \n    3.在后台进程执行完毕之后，master将传送整个数据文件到slave,以完成一次完全同步。  \n    4.全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。  \n    5.增量复制：Master继续将新的所有收集到的修改命令依次传给slave,完成同步。  \n    6.但是只要是重新连接master,一次完全同步（全量复制)将被自动执行。  \n```\n\n我们搭建的主从复制模式是下面这样的：\n\n![img](https://mmbiz.qpic.cn/mmbiz_png/GvtDGKK4uYnKsYW7dwk0aaRIrKcESa9ibiaq4WfV2TDDvyGMsfjVVZ3K8oKEYT6m7YfJQekNiayQ4PfknStVl21QQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)  \n\n实际上，一主二仆的主从复制，我们可以搭建成下面这种结构：\n\n![img](https://mmbiz.qpic.cn/mmbiz_png/GvtDGKK4uYnKsYW7dwk0aaRIrKcESa9ibbMvoJzK9ycEft3gcMssde1knu6OlGzgBWlRFRNyZYFuIc3pBUIce7g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)  \n\n哨兵模式，其实并不复杂，我们还是在我们前面的基础上来搭建哨兵模式。假设现在我的master是6379，两个从机分别是6380和6381，两个从机都是从6379上复制数据。先按照上文的步骤，我们配置好一主二仆，然后在redis目录下打开sentinel.conf文件，做如下配置：\n\n```\nsentinel monitor mymaster 127.0.0.1 6379 1\n```\n\n其中mymaster是给要监控的主机取的名字，随意取，后面是主机地址，最后面的2表示有多少个sentinel认为主机挂掉了，就进行切换（我这里只有一个，因此设置为1）。好了，配置完成后，输入如下命令启动哨兵：\n\n```java\nredis-sentinel sentinel.conf\n```\n\n6379挂掉之后，redis内部重新举行了选举，6380重新上位。此时，如果6379重启，也不再是扛把子了，只能屈身做一个slave了。\n\n### 集群搭建\n\nRedis集群架构如下图：\n\n![img](https://mmbiz.qpic.cn/mmbiz_png/GvtDGKK4uYmokRcFGBAhCcEXKrK04yXHyTcYLtNXvWCZjjS5Vl9wWsg323VBBmboGhJ6Ovfia4Pqc2oLadKcqvg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)  \n\nRedis集群运行原理如下：\n\n1.所有的Redis节点彼此互联(PING-PONG机制),内部使用二进制协议优化传输速度和带宽\n2.节点的fail是通过集群中超过半数的节点检测失效时才生效\n3.客户端与Redis节点直连,不需要中间proxy层，客户端不需要连接集群所有节点，连接集群中任何一个可用节点即可\n4.Redis-cluster把所有的物理节点映射到[0-16383]slot上,cluster (簇)负责维护`node<->slot<->value`。Redis集群中内置了16384个哈希槽，当需要在Redis集群中放置一个key-value时，Redis先对key使用crc16算法算出一个结果，然后把结果对 16384 求余数，这样每个key都会对应一个编号在 0-16383 之间的哈希槽，Redis 会根据节点数量大致均等的将哈希槽映射到不同的节点\n\n\n\n","slug":"redis-1","published":1,"updated":"2019-05-17T07:31:55.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxtq0030vovmean0k5wn","content":"<h2 id=\"redis基础知识\"><a href=\"#redis基础知识\" class=\"headerlink\" title=\"redis基础知识\"></a>redis基础知识</h2><p>客户端与服务端的通讯协议是建立在TCP协议之上构建的；</p>\n<p>redis序列化协议 resp</p>\n<ul>\n<li>状态回复（status reply）的第一个字节是 <code>&quot;+&quot;</code></li>\n<li>错误回复（error reply）的第一个字节是 <code>&quot;-&quot;</code></li>\n<li>整数回复（integer reply）的第一个字节是 <code>&quot;:&quot;</code></li>\n<li>批量回复（bulk reply）的第一个字节是 <code>&quot;$&quot;</code></li>\n<li>多条批量回复（multi bulk reply）的第一个字节是 <code>&quot;*&quot;</code></li>\n</ul>\n<a id=\"more\"></a>\n<p>举例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET mykey myvalue</span><br><span class=\"line\">*3\\r\\n$3\\r\\nSET\\r\\n$5\\r\\mykey\\r\\n$7\\r\\myvalue\\r\\n</span><br></pre></td></tr></table></figure>\n<p>指令表：</p>\n<p><a href=\"http://redisdoc.com/\" target=\"_blank\" rel=\"noopener\">redis命令表</a></p>\n<ul>\n<li>字符串<ul>\n<li><a href=\"http://redisdoc.com/string/set.html\" target=\"_blank\" rel=\"noopener\">SET</a></li>\n<li><a href=\"http://redisdoc.com/string/setnx.html\" target=\"_blank\" rel=\"noopener\">SETNX</a></li>\n<li><a href=\"http://redisdoc.com/string/setex.html\" target=\"_blank\" rel=\"noopener\">SETEX</a></li>\n<li><a href=\"http://redisdoc.com/string/psetex.html\" target=\"_blank\" rel=\"noopener\">PSETEX</a></li>\n<li><a href=\"http://redisdoc.com/string/get.html\" target=\"_blank\" rel=\"noopener\">GET</a></li>\n<li><a href=\"http://redisdoc.com/string/getset.html\" target=\"_blank\" rel=\"noopener\">GETSET</a></li>\n<li><a href=\"http://redisdoc.com/string/strlen.html\" target=\"_blank\" rel=\"noopener\">STRLEN</a></li>\n<li><a href=\"http://redisdoc.com/string/append.html\" target=\"_blank\" rel=\"noopener\">APPEND</a></li>\n<li><a href=\"http://redisdoc.com/string/setrange.html\" target=\"_blank\" rel=\"noopener\">SETRANGE</a></li>\n<li><a href=\"http://redisdoc.com/string/getrange.html\" target=\"_blank\" rel=\"noopener\">GETRANGE</a></li>\n<li><a href=\"http://redisdoc.com/string/incr.html\" target=\"_blank\" rel=\"noopener\">INCR</a></li>\n<li><a href=\"http://redisdoc.com/string/incrby.html\" target=\"_blank\" rel=\"noopener\">INCRBY</a></li>\n<li><a href=\"http://redisdoc.com/string/incrbyfloat.html\" target=\"_blank\" rel=\"noopener\">INCRBYFLOAT</a></li>\n<li><a href=\"http://redisdoc.com/string/decr.html\" target=\"_blank\" rel=\"noopener\">DECR</a></li>\n<li><a href=\"http://redisdoc.com/string/decrby.html\" target=\"_blank\" rel=\"noopener\">DECRBY</a></li>\n<li><a href=\"http://redisdoc.com/string/mset.html\" target=\"_blank\" rel=\"noopener\">MSET</a></li>\n<li><a href=\"http://redisdoc.com/string/msetnx.html\" target=\"_blank\" rel=\"noopener\">MSETNX</a></li>\n<li><a href=\"http://redisdoc.com/string/mget.html\" target=\"_blank\" rel=\"noopener\">MGET</a></li>\n</ul>\n</li>\n<li>哈希表<ul>\n<li><a href=\"http://redisdoc.com/hash/hset.html\" target=\"_blank\" rel=\"noopener\">HSET</a></li>\n<li><a href=\"http://redisdoc.com/hash/hsetnx.html\" target=\"_blank\" rel=\"noopener\">HSETNX</a></li>\n<li><a href=\"http://redisdoc.com/hash/hget.html\" target=\"_blank\" rel=\"noopener\">HGET</a></li>\n<li><a href=\"http://redisdoc.com/hash/hexists.html\" target=\"_blank\" rel=\"noopener\">HEXISTS</a></li>\n<li><a href=\"http://redisdoc.com/hash/hdel.html\" target=\"_blank\" rel=\"noopener\">HDEL</a></li>\n<li><a href=\"http://redisdoc.com/hash/hlen.html\" target=\"_blank\" rel=\"noopener\">HLEN</a></li>\n<li><a href=\"http://redisdoc.com/hash/hstrlen.html\" target=\"_blank\" rel=\"noopener\">HSTRLEN</a></li>\n<li><a href=\"http://redisdoc.com/hash/hincrby.html\" target=\"_blank\" rel=\"noopener\">HINCRBY</a></li>\n<li><a href=\"http://redisdoc.com/hash/hincrbyfloat.html\" target=\"_blank\" rel=\"noopener\">HINCRBYFLOAT</a></li>\n<li><a href=\"http://redisdoc.com/hash/hmset.html\" target=\"_blank\" rel=\"noopener\">HMSET</a></li>\n<li><a href=\"http://redisdoc.com/hash/hmget.html\" target=\"_blank\" rel=\"noopener\">HMGET</a></li>\n<li><a href=\"http://redisdoc.com/hash/hkeys.html\" target=\"_blank\" rel=\"noopener\">HKEYS</a></li>\n<li><a href=\"http://redisdoc.com/hash/hvals.html\" target=\"_blank\" rel=\"noopener\">HVALS</a></li>\n<li><a href=\"http://redisdoc.com/hash/hgetall.html\" target=\"_blank\" rel=\"noopener\">HGETALL</a></li>\n<li><a href=\"http://redisdoc.com/hash/hscan.html\" target=\"_blank\" rel=\"noopener\">HSCAN</a></li>\n</ul>\n</li>\n<li>列表<ul>\n<li><a href=\"http://redisdoc.com/list/lpush.html\" target=\"_blank\" rel=\"noopener\">LPUSH</a></li>\n<li><a href=\"http://redisdoc.com/list/lpushx.html\" target=\"_blank\" rel=\"noopener\">LPUSHX</a></li>\n<li><a href=\"http://redisdoc.com/list/rpush.html\" target=\"_blank\" rel=\"noopener\">RPUSH</a></li>\n<li><a href=\"http://redisdoc.com/list/rpushx.html\" target=\"_blank\" rel=\"noopener\">RPUSHX</a></li>\n<li><a href=\"http://redisdoc.com/list/lpop.html\" target=\"_blank\" rel=\"noopener\">LPOP</a></li>\n<li><a href=\"http://redisdoc.com/list/rpop.html\" target=\"_blank\" rel=\"noopener\">RPOP</a></li>\n<li><a href=\"http://redisdoc.com/list/rpoplpush.html\" target=\"_blank\" rel=\"noopener\">RPOPLPUSH</a></li>\n<li><a href=\"http://redisdoc.com/list/lrem.html\" target=\"_blank\" rel=\"noopener\">LREM</a></li>\n<li><a href=\"http://redisdoc.com/list/llen.html\" target=\"_blank\" rel=\"noopener\">LLEN</a></li>\n<li><a href=\"http://redisdoc.com/list/lindex.html\" target=\"_blank\" rel=\"noopener\">LINDEX</a></li>\n<li><a href=\"http://redisdoc.com/list/linsert.html\" target=\"_blank\" rel=\"noopener\">LINSERT</a></li>\n<li><a href=\"http://redisdoc.com/list/lset.html\" target=\"_blank\" rel=\"noopener\">LSET</a></li>\n<li><a href=\"http://redisdoc.com/list/lrange.html\" target=\"_blank\" rel=\"noopener\">LRANGE</a></li>\n<li><a href=\"http://redisdoc.com/list/ltrim.html\" target=\"_blank\" rel=\"noopener\">LTRIM</a></li>\n<li><a href=\"http://redisdoc.com/list/blpop.html\" target=\"_blank\" rel=\"noopener\">BLPOP</a></li>\n<li><a href=\"http://redisdoc.com/list/brpop.html\" target=\"_blank\" rel=\"noopener\">BRPOP</a></li>\n<li><a href=\"http://redisdoc.com/list/brpoplpush.html\" target=\"_blank\" rel=\"noopener\">BRPOPLPUSH</a></li>\n</ul>\n</li>\n<li>集合<ul>\n<li><a href=\"http://redisdoc.com/set/sadd.html\" target=\"_blank\" rel=\"noopener\">SADD</a></li>\n<li><a href=\"http://redisdoc.com/set/sismember.html\" target=\"_blank\" rel=\"noopener\">SISMEMBER</a></li>\n<li><a href=\"http://redisdoc.com/set/spop.html\" target=\"_blank\" rel=\"noopener\">SPOP</a></li>\n<li><a href=\"http://redisdoc.com/set/srandmember.html\" target=\"_blank\" rel=\"noopener\">SRANDMEMBER</a></li>\n<li><a href=\"http://redisdoc.com/set/srem.html\" target=\"_blank\" rel=\"noopener\">SREM</a></li>\n<li><a href=\"http://redisdoc.com/set/smove.html\" target=\"_blank\" rel=\"noopener\">SMOVE</a></li>\n<li><a href=\"http://redisdoc.com/set/scard.html\" target=\"_blank\" rel=\"noopener\">SCARD</a></li>\n<li><a href=\"http://redisdoc.com/set/smembers.html\" target=\"_blank\" rel=\"noopener\">SMEMBERS</a></li>\n<li><a href=\"http://redisdoc.com/set/sscan.html\" target=\"_blank\" rel=\"noopener\">SSCAN</a></li>\n<li><a href=\"http://redisdoc.com/set/sinter.html\" target=\"_blank\" rel=\"noopener\">SINTER</a></li>\n<li><a href=\"http://redisdoc.com/set/sinterstore.html\" target=\"_blank\" rel=\"noopener\">SINTERSTORE</a></li>\n<li><a href=\"http://redisdoc.com/set/sunion.html\" target=\"_blank\" rel=\"noopener\">SUNION</a></li>\n<li><a href=\"http://redisdoc.com/set/sunionstore.html\" target=\"_blank\" rel=\"noopener\">SUNIONSTORE</a></li>\n<li><a href=\"http://redisdoc.com/set/sdiff.html\" target=\"_blank\" rel=\"noopener\">SDIFF</a></li>\n<li><a href=\"http://redisdoc.com/set/sdiffstore.html\" target=\"_blank\" rel=\"noopener\">SDIFFSTORE</a></li>\n</ul>\n</li>\n<li>有序集合<ul>\n<li><a href=\"http://redisdoc.com/sorted_set/zadd.html\" target=\"_blank\" rel=\"noopener\">ZADD</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zscore.html\" target=\"_blank\" rel=\"noopener\">ZSCORE</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zincrby.html\" target=\"_blank\" rel=\"noopener\">ZINCRBY</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zcard.html\" target=\"_blank\" rel=\"noopener\">ZCARD</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zcount.html\" target=\"_blank\" rel=\"noopener\">ZCOUNT</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zrange.html\" target=\"_blank\" rel=\"noopener\">ZRANGE</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zrevrange.html\" target=\"_blank\" rel=\"noopener\">ZREVRANGE</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zrangebyscore.html\" target=\"_blank\" rel=\"noopener\">ZRANGEBYSCORE</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zrevrangebyscore.html\" target=\"_blank\" rel=\"noopener\">ZREVRANGEBYSCORE</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zrank.html\" target=\"_blank\" rel=\"noopener\">ZRANK</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zrevrank.html\" target=\"_blank\" rel=\"noopener\">ZREVRANK</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zrem.html\" target=\"_blank\" rel=\"noopener\">ZREM</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zremrangebyrank.html\" target=\"_blank\" rel=\"noopener\">ZREMRANGEBYRANK</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zremrangebyscore.html\" target=\"_blank\" rel=\"noopener\">ZREMRANGEBYSCORE</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zrangebylex.html\" target=\"_blank\" rel=\"noopener\">ZRANGEBYLEX</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zlexcount.html\" target=\"_blank\" rel=\"noopener\">ZLEXCOUNT</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zremrangebylex.html\" target=\"_blank\" rel=\"noopener\">ZREMRANGEBYLEX</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zscan.html\" target=\"_blank\" rel=\"noopener\">ZSCAN</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zunionstore.html\" target=\"_blank\" rel=\"noopener\">ZUNIONSTORE</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zinterstore.html\" target=\"_blank\" rel=\"noopener\">ZINTERSTORE</a></li>\n</ul>\n</li>\n<li>HyperLogLog<ul>\n<li><a href=\"http://redisdoc.com/hyperloglog/pfadd.html\" target=\"_blank\" rel=\"noopener\">PFADD</a></li>\n<li><a href=\"http://redisdoc.com/hyperloglog/pfcount.html\" target=\"_blank\" rel=\"noopener\">PFCOUNT</a></li>\n<li><a href=\"http://redisdoc.com/hyperloglog/pfmerge.html\" target=\"_blank\" rel=\"noopener\">PFMERGE</a></li>\n</ul>\n</li>\n<li>地理位置<ul>\n<li><a href=\"http://redisdoc.com/geo/geoadd.html\" target=\"_blank\" rel=\"noopener\">GEOADD</a></li>\n<li><a href=\"http://redisdoc.com/geo/geopos.html\" target=\"_blank\" rel=\"noopener\">GEOPOS</a></li>\n<li><a href=\"http://redisdoc.com/geo/geodist.html\" target=\"_blank\" rel=\"noopener\">GEODIST</a></li>\n<li><a href=\"http://redisdoc.com/geo/georadius.html\" target=\"_blank\" rel=\"noopener\">GEORADIUS</a></li>\n<li><a href=\"http://redisdoc.com/geo/georadiusbymember.html\" target=\"_blank\" rel=\"noopener\">GEORADIUSBYMEMBER</a></li>\n<li><a href=\"http://redisdoc.com/geo/geohash.html\" target=\"_blank\" rel=\"noopener\">GEOHASH</a></li>\n</ul>\n</li>\n<li>位图<ul>\n<li><a href=\"http://redisdoc.com/bitmap/setbit.html\" target=\"_blank\" rel=\"noopener\">SETBIT</a></li>\n<li><a href=\"http://redisdoc.com/bitmap/getbit.html\" target=\"_blank\" rel=\"noopener\">GETBIT</a></li>\n<li><a href=\"http://redisdoc.com/bitmap/bitcount.html\" target=\"_blank\" rel=\"noopener\">BITCOUNT</a></li>\n<li><a href=\"http://redisdoc.com/bitmap/bitpos.html\" target=\"_blank\" rel=\"noopener\">BITPOS</a></li>\n<li><a href=\"http://redisdoc.com/bitmap/bitop.html\" target=\"_blank\" rel=\"noopener\">BITOP</a></li>\n<li><a href=\"http://redisdoc.com/bitmap/bitfield.html\" target=\"_blank\" rel=\"noopener\">BITFIELD</a></li>\n</ul>\n</li>\n<li>数据库<ul>\n<li><a href=\"http://redisdoc.com/database/exists.html\" target=\"_blank\" rel=\"noopener\">EXISTS</a></li>\n<li><a href=\"http://redisdoc.com/database/type.html\" target=\"_blank\" rel=\"noopener\">TYPE</a></li>\n<li><a href=\"http://redisdoc.com/database/rename.html\" target=\"_blank\" rel=\"noopener\">RENAME</a></li>\n<li><a href=\"http://redisdoc.com/database/renamenx.html\" target=\"_blank\" rel=\"noopener\">RENAMENX</a></li>\n<li><a href=\"http://redisdoc.com/database/move.html\" target=\"_blank\" rel=\"noopener\">MOVE</a></li>\n<li><a href=\"http://redisdoc.com/database/del.html\" target=\"_blank\" rel=\"noopener\">DEL</a></li>\n<li><a href=\"http://redisdoc.com/database/randomkey.html\" target=\"_blank\" rel=\"noopener\">RANDOMKEY</a></li>\n<li><a href=\"http://redisdoc.com/database/dbsize.html\" target=\"_blank\" rel=\"noopener\">DBSIZE</a></li>\n<li><a href=\"http://redisdoc.com/database/keys.html\" target=\"_blank\" rel=\"noopener\">KEYS</a></li>\n<li><a href=\"http://redisdoc.com/database/scan.html\" target=\"_blank\" rel=\"noopener\">SCAN</a></li>\n<li><a href=\"http://redisdoc.com/database/sort.html\" target=\"_blank\" rel=\"noopener\">SORT</a></li>\n<li><a href=\"http://redisdoc.com/database/flushdb.html\" target=\"_blank\" rel=\"noopener\">FLUSHDB</a></li>\n<li><a href=\"http://redisdoc.com/database/flushall.html\" target=\"_blank\" rel=\"noopener\">FLUSHALL</a></li>\n<li><a href=\"http://redisdoc.com/database/select.html\" target=\"_blank\" rel=\"noopener\">SELECT</a></li>\n<li><a href=\"http://redisdoc.com/database/swapdb.html\" target=\"_blank\" rel=\"noopener\">SWAPDB</a></li>\n</ul>\n</li>\n<li>自动过期<ul>\n<li><a href=\"http://redisdoc.com/expire/expire.html\" target=\"_blank\" rel=\"noopener\">EXPIRE</a></li>\n<li><a href=\"http://redisdoc.com/expire/expireat.html\" target=\"_blank\" rel=\"noopener\">EXPIREAT</a></li>\n<li><a href=\"http://redisdoc.com/expire/ttl.html\" target=\"_blank\" rel=\"noopener\">TTL</a></li>\n<li><a href=\"http://redisdoc.com/expire/persist.html\" target=\"_blank\" rel=\"noopener\">PERSIST</a></li>\n<li><a href=\"http://redisdoc.com/expire/pexpire.html\" target=\"_blank\" rel=\"noopener\">PEXPIRE</a></li>\n<li><a href=\"http://redisdoc.com/expire/pexpireat.html\" target=\"_blank\" rel=\"noopener\">PEXPIREAT</a></li>\n<li><a href=\"http://redisdoc.com/expire/pttl.html\" target=\"_blank\" rel=\"noopener\">PTTL</a></li>\n</ul>\n</li>\n<li>事务<ul>\n<li><a href=\"http://redisdoc.com/transaction/multi.html\" target=\"_blank\" rel=\"noopener\">MULTI</a></li>\n<li><a href=\"http://redisdoc.com/transaction/exec.html\" target=\"_blank\" rel=\"noopener\">EXEC</a></li>\n<li><a href=\"http://redisdoc.com/transaction/discard.html\" target=\"_blank\" rel=\"noopener\">DISCARD</a></li>\n<li><a href=\"http://redisdoc.com/transaction/watch.html\" target=\"_blank\" rel=\"noopener\">WATCH</a></li>\n<li><a href=\"http://redisdoc.com/transaction/unwatch.html\" target=\"_blank\" rel=\"noopener\">UNWATCH</a></li>\n</ul>\n</li>\n<li>Lua 脚本<ul>\n<li><a href=\"http://redisdoc.com/script/eval.html\" target=\"_blank\" rel=\"noopener\">EVAL</a></li>\n<li><a href=\"http://redisdoc.com/script/evalsha.html\" target=\"_blank\" rel=\"noopener\">EVALSHA</a></li>\n<li><a href=\"http://redisdoc.com/script/script_load.html\" target=\"_blank\" rel=\"noopener\">SCRIPT_LOAD</a></li>\n<li><a href=\"http://redisdoc.com/script/script_exists.html\" target=\"_blank\" rel=\"noopener\">SCRIPT_EXISTS</a></li>\n<li><a href=\"http://redisdoc.com/script/script_flush.html\" target=\"_blank\" rel=\"noopener\">SCRIPT_FLUSH</a></li>\n<li><a href=\"http://redisdoc.com/script/script_kill.html\" target=\"_blank\" rel=\"noopener\">SCRIPT_KILL</a></li>\n</ul>\n</li>\n<li>持久化<ul>\n<li><a href=\"http://redisdoc.com/persistence/save.html\" target=\"_blank\" rel=\"noopener\">SAVE</a></li>\n<li><a href=\"http://redisdoc.com/persistence/bgsave.html\" target=\"_blank\" rel=\"noopener\">BGSAVE</a></li>\n<li><a href=\"http://redisdoc.com/persistence/bgrewriteaof.html\" target=\"_blank\" rel=\"noopener\">BGREWRITEAOF</a></li>\n<li><a href=\"http://redisdoc.com/persistence/lastsave.html\" target=\"_blank\" rel=\"noopener\">LASTSAVE</a></li>\n</ul>\n</li>\n<li>发布与订阅<ul>\n<li><a href=\"http://redisdoc.com/pubsub/publish.html\" target=\"_blank\" rel=\"noopener\">PUBLISH</a></li>\n<li><a href=\"http://redisdoc.com/pubsub/subscribe.html\" target=\"_blank\" rel=\"noopener\">SUBSCRIBE</a></li>\n<li><a href=\"http://redisdoc.com/pubsub/psubscribe.html\" target=\"_blank\" rel=\"noopener\">PSUBSCRIBE</a></li>\n<li><a href=\"http://redisdoc.com/pubsub/unsubscribe.html\" target=\"_blank\" rel=\"noopener\">UNSUBSCRIBE</a></li>\n<li><a href=\"http://redisdoc.com/pubsub/punsubscribe.html\" target=\"_blank\" rel=\"noopener\">PUNSUBSCRIBE</a></li>\n<li><a href=\"http://redisdoc.com/pubsub/pubsub.html\" target=\"_blank\" rel=\"noopener\">PUBSUB</a></li>\n</ul>\n</li>\n<li>复制<ul>\n<li><a href=\"http://redisdoc.com/replication/slaveof.html\" target=\"_blank\" rel=\"noopener\">SLAVEOF</a></li>\n<li><a href=\"http://redisdoc.com/replication/role.html\" target=\"_blank\" rel=\"noopener\">ROLE</a></li>\n</ul>\n</li>\n<li>客户端与服务器<ul>\n<li><a href=\"http://redisdoc.com/client_and_server/auth.html\" target=\"_blank\" rel=\"noopener\">AUTH</a></li>\n<li><a href=\"http://redisdoc.com/client_and_server/quit.html\" target=\"_blank\" rel=\"noopener\">QUIT</a></li>\n<li><a href=\"http://redisdoc.com/client_and_server/info.html\" target=\"_blank\" rel=\"noopener\">INFO</a></li>\n<li><a href=\"http://redisdoc.com/client_and_server/shutdown.html\" target=\"_blank\" rel=\"noopener\">SHUTDOWN</a></li>\n<li><a href=\"http://redisdoc.com/client_and_server/time.html\" target=\"_blank\" rel=\"noopener\">TIME</a></li>\n<li><a href=\"http://redisdoc.com/client_and_server/client_getname.html\" target=\"_blank\" rel=\"noopener\">CLIENT_GETNAME</a></li>\n<li><a href=\"http://redisdoc.com/client_and_server/client_kill.html\" target=\"_blank\" rel=\"noopener\">CLIENT_KILL</a></li>\n<li><a href=\"http://redisdoc.com/client_and_server/client_list.html\" target=\"_blank\" rel=\"noopener\">CLIENT_LIST</a></li>\n<li><a href=\"http://redisdoc.com/client_and_server/client_setname.html\" target=\"_blank\" rel=\"noopener\">CLIENT_SETNAME</a></li>\n</ul>\n</li>\n<li>配置选项<ul>\n<li><a href=\"http://redisdoc.com/configure/config_set.html\" target=\"_blank\" rel=\"noopener\">CONFIG_SET</a></li>\n<li><a href=\"http://redisdoc.com/configure/config_get.html\" target=\"_blank\" rel=\"noopener\">CONFIG_GET</a></li>\n<li><a href=\"http://redisdoc.com/configure/config_resetstat.html\" target=\"_blank\" rel=\"noopener\">CONFIG_RESETSTAT</a></li>\n<li><a href=\"http://redisdoc.com/configure/config_rewrite.html\" target=\"_blank\" rel=\"noopener\">CONFIG_REWRITE</a></li>\n</ul>\n</li>\n<li>调试<ul>\n<li><a href=\"http://redisdoc.com/debug/ping.html\" target=\"_blank\" rel=\"noopener\">PING</a></li>\n<li><a href=\"http://redisdoc.com/debug/echo.html\" target=\"_blank\" rel=\"noopener\">ECHO</a></li>\n<li><a href=\"http://redisdoc.com/debug/object.html\" target=\"_blank\" rel=\"noopener\">OBJECT</a></li>\n<li><a href=\"http://redisdoc.com/debug/slowlog.html\" target=\"_blank\" rel=\"noopener\">SLOWLOG</a></li>\n<li><a href=\"http://redisdoc.com/debug/monitor.html\" target=\"_blank\" rel=\"noopener\">MONITOR</a></li>\n<li><a href=\"http://redisdoc.com/debug/debug_object.html\" target=\"_blank\" rel=\"noopener\">DEBUG_OBJECT</a></li>\n<li><a href=\"http://redisdoc.com/debug/debug_segfault.html\" target=\"_blank\" rel=\"noopener\">DEBUG_SEGFAULT</a></li>\n</ul>\n</li>\n<li>内部命令<ul>\n<li><a href=\"http://redisdoc.com/internal/migrate.html\" target=\"_blank\" rel=\"noopener\">MIGRATE</a></li>\n<li><a href=\"http://redisdoc.com/internal/dump.html\" target=\"_blank\" rel=\"noopener\">DUMP</a></li>\n<li><a href=\"http://redisdoc.com/internal/restore.html\" target=\"_blank\" rel=\"noopener\">RESTORE</a></li>\n<li><a href=\"http://redisdoc.com/internal/sync.html\" target=\"_blank\" rel=\"noopener\">SYNC</a></li>\n<li><a href=\"http://redisdoc.com/internal/psync.html\" target=\"_blank\" rel=\"noopener\">PSYNC</a></li>\n</ul>\n</li>\n<li>功能文档<ul>\n<li><a href=\"http://redisdoc.com/topic/cluster-spec.html\" target=\"_blank\" rel=\"noopener\">Redis 集群规范</a></li>\n<li><a href=\"http://redisdoc.com/topic/persistence.html\" target=\"_blank\" rel=\"noopener\">持久化（persistence）</a></li>\n<li><a href=\"http://redisdoc.com/topic/pubsub.html\" target=\"_blank\" rel=\"noopener\">发布与订阅（pub/sub）</a></li>\n<li><a href=\"http://redisdoc.com/topic/sentinel.html\" target=\"_blank\" rel=\"noopener\">Sentinel</a></li>\n<li><a href=\"http://redisdoc.com/topic/cluster-tutorial.html\" target=\"_blank\" rel=\"noopener\">集群教程</a></li>\n<li><a href=\"http://redisdoc.com/topic/notification.html\" target=\"_blank\" rel=\"noopener\">键空间通知（keyspace notification）</a></li>\n<li><a href=\"http://redisdoc.com/topic/protocol.html\" target=\"_blank\" rel=\"noopener\">通信协议（protocol）</a></li>\n<li><a href=\"http://redisdoc.com/topic/replication.html\" target=\"_blank\" rel=\"noopener\">复制（Replication）</a></li>\n<li><a href=\"http://redisdoc.com/topic/transaction.html\" target=\"_blank\" rel=\"noopener\">事务（transaction）</a></li>\n</ul>\n</li>\n</ul>\n<p>redis key集中过期问题，集中过期导致redis压力过大而卡顿</p>\n<p>采用一定范围内的随机过期时间</p>\n<p>Redis也提供了一些简单的计算功能，比如排序、聚合等，对于这些操作，单线程模型实际会严重影响整体吞吐量，CPU计算过程中，整个IO调度都是被阻塞住的。</p>\n<p><strong>redis分布式锁参考 本博客<a href=\"https://muggle.javaboy.org/2019/04/23/thread-3/\" target=\"_blank\" rel=\"noopener\">多线程进阶篇</a></strong></p>\n<h2 id=\"springboot-分布式session\"><a href=\"#springboot-分布式session\" class=\"headerlink\" title=\"springboot 分布式session\"></a>springboot 分布式session</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span>  </span><br><span class=\"line\"><span class=\"meta\">@EnableRedisHttpSession</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisSessionConfig</span> </span>&#123;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.session<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-session-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.redis.host=localhost  </span><br><span class=\"line\">spring.redis.port=6379</span><br></pre></td></tr></table></figure>\n<p><strong>注意：springboot2.1有包冲突，本配置只适用于2.1以下</strong></p>\n<h2 id=\"mybatis的二级缓存\"><a href=\"#mybatis的二级缓存\" class=\"headerlink\" title=\"mybatis的二级缓存\"></a>mybatis的二级缓存</h2><p>二级缓存是mapper级别的缓存，多个SqlSession去操作同一个Mapper的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。</p>\n<p>UserMapper有一个二级缓存区域（按namespace分），其它mapper也有自己的二级缓存区域（按namespace分）。每一个namespace的mapper都有一个二级缓存区域，两个mapper的namespace如果相同，这两个mapper执行sql查询到数据将存在相同的二级缓存区域中。sql节点可配置userCache flushcache</p>\n<p>打开二级缓存总开关（springboot默认开启），在mapper中使用<code>&lt;cache/&gt;</code>打开二级缓存 在分布式系统中不能直接使用二级缓存</p>\n<p><code>&lt;cache /&gt;</code>的属性：</p>\n<ul>\n<li>eviction：代表的是缓存收回策略，有一下策略：<ol>\n<li>LRU，  最近最少使用的，移除最长时间不用的对象。</li>\n<li>FIFO，先进先出，按对象进入缓存的顺序来移除他们</li>\n<li>SOFT， 软引用，移除基于垃圾回收器状态和软引用规则的对象。</li>\n<li>WEAK，若引用，更积极的移除基于垃圾收集器状态和若引用规则的对象</li>\n</ol>\n</li>\n<li>flushInterval：刷新间隔时间，单位为毫秒，默认是当sql执行的时候才回去刷新。</li>\n<li>size：引用数目，一个正整数，代表缓存最多可以存储多少对象，不宜设置过大，过大会造成内存溢出。</li>\n<li>readOnly：只读，意味着缓存数据只能读取，不能修改，这样设置的好处是我们可以快速读取缓存，去诶但是我们没有办法修改缓存。默认值为false，不允许我们修改。</li>\n</ul>\n<h2 id=\"分布式缓存\"><a href=\"#分布式缓存\" class=\"headerlink\" title=\"分布式缓存\"></a>分布式缓存</h2><p>分布式缓存策略</p>\n<p>mybatis整合ehcache实现分布式缓存、jetcache、spring cache</p>\n<p>jetcache整合笔记：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alicp.jetcache<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jetcache-starter-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableMethodCache</span>(basePackages = <span class=\"string\">\"com.muggle.jetcahetest\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@EnableCreateCacheAnnotation</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JetcaheTestApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(JetcaheTestApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Cached</span>(cacheType = CacheType.REMOTE)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">test</span> <span class=\"params\">(String message)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServerImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">test</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&gt;&gt;&gt;\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">666</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更多文档参考[jetCache github 地址][]</p>\n<p>分布式缓存的应用</p>\n<p>合并批量更新，提高io</p>\n<p>缓存的粒度问题，缓存数据是全量还是部分</p>\n<h3 id=\"cache-cloud-使用\"><a href=\"#cache-cloud-使用\" class=\"headerlink\" title=\"cache cloud 使用\"></a>cache cloud 使用</h3><h3 id=\"分布式缓存原理分析\"><a href=\"#分布式缓存原理分析\" class=\"headerlink\" title=\"分布式缓存原理分析\"></a>分布式缓存原理分析</h3><ul>\n<li>传统分布式算法：HASH算法或者取模算法</li>\n<li>Consistent hashing一致性算法原理</li>\n<li>Hash倾斜性</li>\n<li>虚拟节点</li>\n<li>Consistent hashing命中率</li>\n</ul>\n<p>Consistent hashing 是一致性hash算法</p>\n<p>博客：<a href=\"https://blog.csdn.net/qq_35956041/article/details/81026972\" target=\"_blank\" rel=\"noopener\">一致性哈希</a></p>\n<p>哈希倾斜：缓存任务分配不均，采用虚拟节点避免</p>\n<p>缓存穿透：缓存未起作用</p>\n<p>缓存雪崩：缓存雪崩可能是因为数据未加载到缓存中，或者缓存同一时间大面积的失效，从而导致所有请求都去查数据库，导致数据库CPU和内存负载过高，甚至宕机。</p>\n<p>缓存的算法</p>\n<p>FIFO算法：First in First out，先进先出。原则：一个数据最先进入缓存中，则应该最早淘汰掉。也就是说，当缓存满的时候，应当把最先进入缓存的数据给淘汰掉。<br>LFU算法：Least Frequently Used，最不经常使用算法。<br>LRU算法：Least Recently Used，近期最少使用算法。</p>\n<p>LRU和LFU的区别。LFU算法是根据在一段时间里数据项被使用的次数选择出最少使用的数据项，即根据使用次数的差异来决定。而LRU是根据使用时间的差异来决定的</p>\n<h2 id=\"redis运维（抄录自-https-mp-weixin-qq-com-s-TvIxovAi6XfR7RGigtHRtQ）\"><a href=\"#redis运维（抄录自-https-mp-weixin-qq-com-s-TvIxovAi6XfR7RGigtHRtQ）\" class=\"headerlink\" title=\"redis运维（抄录自 https://mp.weixin.qq.com/s/TvIxovAi6XfR7RGigtHRtQ）\"></a>redis运维（抄录自 <a href=\"https://mp.weixin.qq.com/s/TvIxovAi6XfR7RGigtHRtQ）\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/TvIxovAi6XfR7RGigtHRtQ）</a></h2><h3 id=\"快照持久化\"><a href=\"#快照持久化\" class=\"headerlink\" title=\"快照持久化\"></a>快照持久化</h3><p>redis中的快照持久化默认是开启的，redis.conf中相关配置主要有如下几项：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">save 900 1</span><br><span class=\"line\">save 300 10</span><br><span class=\"line\">save 60 10000</span><br><span class=\"line\">stop-writes-on-bgsave-error yes</span><br><span class=\"line\">rdbcompression yes</span><br><span class=\"line\">dbfilename dump.rdb</span><br><span class=\"line\">dir ./</span><br></pre></td></tr></table></figure>\n<p>前面三个save相关的选项表示备份的频率，分别表示<code>900秒内至少一个键被更改则进行快照，300秒内至少10个键被更改则进行快照，60秒内至少10000个键被更改则进行快照，</code>stop-writes-on-bgsave-error表示在快照创建出错后，是否继续执行写命令，rdbcompression则表示是否对快照文件进行压缩，dbfilename表示生成的快照文件的名字，dir则表示生成的快照文件的位置，在redis中，快照持久化默认就是开启的。</p>\n<p>1.在redis运行过程中，我们可以向redis发送一条save命令来创建一个快照，save是一个阻塞命令，redis在接收到save命令之后，开始执行备份操作之后，在备份操作执行完毕之前，将不再处理其他请求，其他请求将被挂起，因此这个命令我们用的不多。save命令执行如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SAVE</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n<p>2.在redis运行过程中，我们也可以发送一条bgsave命令来创建一个快照，不同于save命令，bgsave命令会fork一个子进程，然后这个子进程负责执行将快照写入硬盘，而父进程则继续处理客户端发来的请求，这样就不会导致客户端命令阻塞了。如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; BGSAVE</span><br><span class=\"line\">Background saving started</span><br></pre></td></tr></table></figure>\n<p>3.如果我们在redis.conf中配置了如下选项：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">save 900 1</span><br><span class=\"line\">save 300 10</span><br><span class=\"line\">save 60 10000</span><br></pre></td></tr></table></figure>\n<p>那么当条件满足时，比如900秒内有一个key被操作了，那么redis就会自动触发bgsava命令进行备份。我们可以根据实际需求在redis.conf中配置多个这种触发规则。</p>\n<p>4.还有一种情况也会触发save命令，那就是我们执行shutdown命令时，当我们用shutdown命令关闭redis时，此时也会执行一个save命令进行备份操作，并在备份操作完成后将服务器关闭。</p>\n<p>5.还有一种特殊情况也会触发bgsave命令，就是在主从备份的时候。当从机连接上主机后，会发送一条sync命令来开始一次复制操作，此时主机会开始一次bgsave操作，并在bgsave操作结束后向从机发送快照数据实现数据同步。</p>\n<h3 id=\"aof持久化\"><a href=\"#aof持久化\" class=\"headerlink\" title=\"aof持久化\"></a>aof持久化</h3><p>与快照持久化不同，AOF持久化是将被执行的命令写到aof文件末尾，在恢复时只需要从头到尾执行一遍写命令即可恢复数据，AOF在redis中默认也是没有开启的，需要我们手动开启，开启方式如下：</p>\n<p>打开redis.conf配置文件，修改appendonly属性值为yes，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appendonly yes</span><br></pre></td></tr></table></figure>\n<p>另外几个和AOF相关的属性如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appendfilename &quot;appendonly.aof&quot;</span><br><span class=\"line\"># appendfsync always</span><br><span class=\"line\">appendfsync everysec</span><br><span class=\"line\"># appendfsync no</span><br><span class=\"line\">no-appendfsync-on-rewrite no</span><br><span class=\"line\">auto-aof-rewrite-percentage 100</span><br><span class=\"line\">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure>\n<p>这几个属性的含义分别如下：</p>\n<p>1.appendfilename表示生成的AOF备份文件的文件名。<br>2.appendfsync表示备份的时机，always表示每执行一个命令就备份一次，everysec表示每秒备份一次，no表示将备份时机交给操作系统。<br>3.no-appendfsync-on-rewrite表示在对aof文件进行压缩时，是否执行同步操作。<br>4.最后两行配置表示AOF文件的压缩时机，这个我们一会再细说。</p>\n<p>同时为了避免快照备份的影响，我们将快照备份关闭，关闭方式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">save &quot;&quot;</span><br><span class=\"line\"># save 900 1</span><br><span class=\"line\"># save 300 10</span><br><span class=\"line\"># save 60 10000</span><br></pre></td></tr></table></figure>\n<p>此时，当我们在redis中进行数据操作时，就会自动生成AOF的配置文件appendonly.aof</p>\n<p>AOF备份的几个关键点</p>\n<p>1.通过上面的介绍，小伙伴们了解到appendfsync的取值一共有三种，我们在项目中首选everysec，always选项会严重降低redis性能。<br>2.使用everysec，最坏的情况下我们可能丢失1秒的数据。</p>\n<p>AOF文件的重写与压缩</p>\n<p>AOF备份有很多明显的优势，当然也有劣势，那就是文件大小。随着系统的运行，AOF的文件会越来越大，甚至把整个电脑的硬盘填满，AOF文件的重写与压缩机制可以在一定程度上缓解这个问题。<br>当AOF的备份文件过大时，我们可以向redis发送一条bgrewriteaof命令进行文件重写，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; BGREWRITEAOF</span><br><span class=\"line\">Background append only file rewriting started</span><br><span class=\"line\">(0.71s)</span><br></pre></td></tr></table></figure>\n<p>bgrewriteaof的执行原理和我们上文说的bgsave的原理一致，这里我就不再赘述，因此bgsave执行过程中存在的问题在这里也一样存在。</p>\n<p>bgrewriteaof也可以自动执行，自动执行时间则依赖于auto-aof-rewrite-percentage和auto-aof-rewrite-min-size配置，auto-aof-rewrite-percentage 100表示当目前aof文件大小超过上一次重写时的aof文件大小的百分之多少时会再次进行重写，如果之前没有重写，则以启动时的aof文件大小为依据，同时还要求AOF文件的大小至少要大于64M(auto-aof-rewrite-min-size 64mb)。</p>\n<h3 id=\"redis主从复制\"><a href=\"#redis主从复制\" class=\"headerlink\" title=\"redis主从复制\"></a>redis主从复制</h3><p>6379是主机，即master，6380和6381是从机，即slave，那么如何配置这种实例关系呢，很简单，分别在6380和6381上执行如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6381&gt; SLAVEOF 127.0.0.1 6379</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n<p>这一步也可以通过在两个从机的redis.conf中添加如下配置来解决：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slaveof 127.0.0.1 6379</span><br></pre></td></tr></table></figure>\n<p>主从复制注意点</p>\n<p>1.如果主机已经运行了一段时间了，并且了已经存储了一些数据了，此时从机连上来，那么从机会将主机上所有的数据进行备份，而不是从连接的那个时间点开始备份。<br>2.配置了主从复制之后，主机上可读可写，但是从机只能读取不能写入（可以通过修改redis.conf中 slave-read-only 的值让从机也可以执行写操作）。<br>3.在整个主从结构运行过程中，如果主机不幸挂掉，重启之后，他依然是主机，主从复制操作也能够继续进行。</p>\n<p>复制原理</p>\n<p>每一个master都有一个replication ID，这是一个较大的伪随机字符串，标记了一个给定的数据集。每个master也持有一个偏移量，master将自己产生的复制流发送给slave时，发送多少个字节的数据，自身的偏移量就会增加多少，目的是当有新的操作修改自己的数据集时，它可以以此更新slave的状态。复制偏移量即使在没有一个slave连接到master时，也会自增，所以基本上每一对给定的Replication ID, offset都会标识一个master数据集的确切版本。当slave连接到master时，它们使用PSYNC命令来发送它们记录的旧的master replication ID和它们至今为止处理的偏移量。通过这种方式，master能够仅发送slave所需的增量部分。但是如果master的缓冲区中没有足够的命令积压缓冲记录，或者如果slave引用了不再知道的历史记录（replication ID），则会转而进行一个全量重同步：在这种情况下，slave会得到一个完整的数据集副本，从头开始(参考redis官网)。</p>\n<p>简单来说，就是以下几个步骤：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.slave启动成功连接到master后会发送一个sync命令。  </span><br><span class=\"line\">2.Master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令。  </span><br><span class=\"line\">3.在后台进程执行完毕之后，master将传送整个数据文件到slave,以完成一次完全同步。  </span><br><span class=\"line\">4.全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。  </span><br><span class=\"line\">5.增量复制：Master继续将新的所有收集到的修改命令依次传给slave,完成同步。  </span><br><span class=\"line\">6.但是只要是重新连接master,一次完全同步（全量复制)将被自动执行。</span><br></pre></td></tr></table></figure>\n<p>我们搭建的主从复制模式是下面这样的：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/GvtDGKK4uYnKsYW7dwk0aaRIrKcESa9ibiaq4WfV2TDDvyGMsfjVVZ3K8oKEYT6m7YfJQekNiayQ4PfknStVl21QQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"img\">  </p>\n<p>实际上，一主二仆的主从复制，我们可以搭建成下面这种结构：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/GvtDGKK4uYnKsYW7dwk0aaRIrKcESa9ibbMvoJzK9ycEft3gcMssde1knu6OlGzgBWlRFRNyZYFuIc3pBUIce7g/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"img\">  </p>\n<p>哨兵模式，其实并不复杂，我们还是在我们前面的基础上来搭建哨兵模式。假设现在我的master是6379，两个从机分别是6380和6381，两个从机都是从6379上复制数据。先按照上文的步骤，我们配置好一主二仆，然后在redis目录下打开sentinel.conf文件，做如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sentinel monitor mymaster 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure>\n<p>其中mymaster是给要监控的主机取的名字，随意取，后面是主机地址，最后面的2表示有多少个sentinel认为主机挂掉了，就进行切换（我这里只有一个，因此设置为1）。好了，配置完成后，输入如下命令启动哨兵：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-sentinel sentinel.conf</span><br></pre></td></tr></table></figure>\n<p>6379挂掉之后，redis内部重新举行了选举，6380重新上位。此时，如果6379重启，也不再是扛把子了，只能屈身做一个slave了。</p>\n<h3 id=\"集群搭建\"><a href=\"#集群搭建\" class=\"headerlink\" title=\"集群搭建\"></a>集群搭建</h3><p>Redis集群架构如下图：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/GvtDGKK4uYmokRcFGBAhCcEXKrK04yXHyTcYLtNXvWCZjjS5Vl9wWsg323VBBmboGhJ6Ovfia4Pqc2oLadKcqvg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"img\">  </p>\n<p>Redis集群运行原理如下：</p>\n<p>1.所有的Redis节点彼此互联(PING-PONG机制),内部使用二进制协议优化传输速度和带宽<br>2.节点的fail是通过集群中超过半数的节点检测失效时才生效<br>3.客户端与Redis节点直连,不需要中间proxy层，客户端不需要连接集群所有节点，连接集群中任何一个可用节点即可<br>4.Redis-cluster把所有的物理节点映射到[0-16383]slot上,cluster (簇)负责维护<code>node&lt;-&gt;slot&lt;-&gt;value</code>。Redis集群中内置了16384个哈希槽，当需要在Redis集群中放置一个key-value时，Redis先对key使用crc16算法算出一个结果，然后把结果对 16384 求余数，这样每个key都会对应一个编号在 0-16383 之间的哈希槽，Redis 会根据节点数量大致均等的将哈希槽映射到不同的节点</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"redis基础知识\"><a href=\"#redis基础知识\" class=\"headerlink\" title=\"redis基础知识\"></a>redis基础知识</h2><p>客户端与服务端的通讯协议是建立在TCP协议之上构建的；</p>\n<p>redis序列化协议 resp</p>\n<ul>\n<li>状态回复（status reply）的第一个字节是 <code>&quot;+&quot;</code></li>\n<li>错误回复（error reply）的第一个字节是 <code>&quot;-&quot;</code></li>\n<li>整数回复（integer reply）的第一个字节是 <code>&quot;:&quot;</code></li>\n<li>批量回复（bulk reply）的第一个字节是 <code>&quot;$&quot;</code></li>\n<li>多条批量回复（multi bulk reply）的第一个字节是 <code>&quot;*&quot;</code></li>\n</ul>","more":"<p>举例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET mykey myvalue</span><br><span class=\"line\">*3\\r\\n$3\\r\\nSET\\r\\n$5\\r\\mykey\\r\\n$7\\r\\myvalue\\r\\n</span><br></pre></td></tr></table></figure>\n<p>指令表：</p>\n<p><a href=\"http://redisdoc.com/\" target=\"_blank\" rel=\"noopener\">redis命令表</a></p>\n<ul>\n<li>字符串<ul>\n<li><a href=\"http://redisdoc.com/string/set.html\" target=\"_blank\" rel=\"noopener\">SET</a></li>\n<li><a href=\"http://redisdoc.com/string/setnx.html\" target=\"_blank\" rel=\"noopener\">SETNX</a></li>\n<li><a href=\"http://redisdoc.com/string/setex.html\" target=\"_blank\" rel=\"noopener\">SETEX</a></li>\n<li><a href=\"http://redisdoc.com/string/psetex.html\" target=\"_blank\" rel=\"noopener\">PSETEX</a></li>\n<li><a href=\"http://redisdoc.com/string/get.html\" target=\"_blank\" rel=\"noopener\">GET</a></li>\n<li><a href=\"http://redisdoc.com/string/getset.html\" target=\"_blank\" rel=\"noopener\">GETSET</a></li>\n<li><a href=\"http://redisdoc.com/string/strlen.html\" target=\"_blank\" rel=\"noopener\">STRLEN</a></li>\n<li><a href=\"http://redisdoc.com/string/append.html\" target=\"_blank\" rel=\"noopener\">APPEND</a></li>\n<li><a href=\"http://redisdoc.com/string/setrange.html\" target=\"_blank\" rel=\"noopener\">SETRANGE</a></li>\n<li><a href=\"http://redisdoc.com/string/getrange.html\" target=\"_blank\" rel=\"noopener\">GETRANGE</a></li>\n<li><a href=\"http://redisdoc.com/string/incr.html\" target=\"_blank\" rel=\"noopener\">INCR</a></li>\n<li><a href=\"http://redisdoc.com/string/incrby.html\" target=\"_blank\" rel=\"noopener\">INCRBY</a></li>\n<li><a href=\"http://redisdoc.com/string/incrbyfloat.html\" target=\"_blank\" rel=\"noopener\">INCRBYFLOAT</a></li>\n<li><a href=\"http://redisdoc.com/string/decr.html\" target=\"_blank\" rel=\"noopener\">DECR</a></li>\n<li><a href=\"http://redisdoc.com/string/decrby.html\" target=\"_blank\" rel=\"noopener\">DECRBY</a></li>\n<li><a href=\"http://redisdoc.com/string/mset.html\" target=\"_blank\" rel=\"noopener\">MSET</a></li>\n<li><a href=\"http://redisdoc.com/string/msetnx.html\" target=\"_blank\" rel=\"noopener\">MSETNX</a></li>\n<li><a href=\"http://redisdoc.com/string/mget.html\" target=\"_blank\" rel=\"noopener\">MGET</a></li>\n</ul>\n</li>\n<li>哈希表<ul>\n<li><a href=\"http://redisdoc.com/hash/hset.html\" target=\"_blank\" rel=\"noopener\">HSET</a></li>\n<li><a href=\"http://redisdoc.com/hash/hsetnx.html\" target=\"_blank\" rel=\"noopener\">HSETNX</a></li>\n<li><a href=\"http://redisdoc.com/hash/hget.html\" target=\"_blank\" rel=\"noopener\">HGET</a></li>\n<li><a href=\"http://redisdoc.com/hash/hexists.html\" target=\"_blank\" rel=\"noopener\">HEXISTS</a></li>\n<li><a href=\"http://redisdoc.com/hash/hdel.html\" target=\"_blank\" rel=\"noopener\">HDEL</a></li>\n<li><a href=\"http://redisdoc.com/hash/hlen.html\" target=\"_blank\" rel=\"noopener\">HLEN</a></li>\n<li><a href=\"http://redisdoc.com/hash/hstrlen.html\" target=\"_blank\" rel=\"noopener\">HSTRLEN</a></li>\n<li><a href=\"http://redisdoc.com/hash/hincrby.html\" target=\"_blank\" rel=\"noopener\">HINCRBY</a></li>\n<li><a href=\"http://redisdoc.com/hash/hincrbyfloat.html\" target=\"_blank\" rel=\"noopener\">HINCRBYFLOAT</a></li>\n<li><a href=\"http://redisdoc.com/hash/hmset.html\" target=\"_blank\" rel=\"noopener\">HMSET</a></li>\n<li><a href=\"http://redisdoc.com/hash/hmget.html\" target=\"_blank\" rel=\"noopener\">HMGET</a></li>\n<li><a href=\"http://redisdoc.com/hash/hkeys.html\" target=\"_blank\" rel=\"noopener\">HKEYS</a></li>\n<li><a href=\"http://redisdoc.com/hash/hvals.html\" target=\"_blank\" rel=\"noopener\">HVALS</a></li>\n<li><a href=\"http://redisdoc.com/hash/hgetall.html\" target=\"_blank\" rel=\"noopener\">HGETALL</a></li>\n<li><a href=\"http://redisdoc.com/hash/hscan.html\" target=\"_blank\" rel=\"noopener\">HSCAN</a></li>\n</ul>\n</li>\n<li>列表<ul>\n<li><a href=\"http://redisdoc.com/list/lpush.html\" target=\"_blank\" rel=\"noopener\">LPUSH</a></li>\n<li><a href=\"http://redisdoc.com/list/lpushx.html\" target=\"_blank\" rel=\"noopener\">LPUSHX</a></li>\n<li><a href=\"http://redisdoc.com/list/rpush.html\" target=\"_blank\" rel=\"noopener\">RPUSH</a></li>\n<li><a href=\"http://redisdoc.com/list/rpushx.html\" target=\"_blank\" rel=\"noopener\">RPUSHX</a></li>\n<li><a href=\"http://redisdoc.com/list/lpop.html\" target=\"_blank\" rel=\"noopener\">LPOP</a></li>\n<li><a href=\"http://redisdoc.com/list/rpop.html\" target=\"_blank\" rel=\"noopener\">RPOP</a></li>\n<li><a href=\"http://redisdoc.com/list/rpoplpush.html\" target=\"_blank\" rel=\"noopener\">RPOPLPUSH</a></li>\n<li><a href=\"http://redisdoc.com/list/lrem.html\" target=\"_blank\" rel=\"noopener\">LREM</a></li>\n<li><a href=\"http://redisdoc.com/list/llen.html\" target=\"_blank\" rel=\"noopener\">LLEN</a></li>\n<li><a href=\"http://redisdoc.com/list/lindex.html\" target=\"_blank\" rel=\"noopener\">LINDEX</a></li>\n<li><a href=\"http://redisdoc.com/list/linsert.html\" target=\"_blank\" rel=\"noopener\">LINSERT</a></li>\n<li><a href=\"http://redisdoc.com/list/lset.html\" target=\"_blank\" rel=\"noopener\">LSET</a></li>\n<li><a href=\"http://redisdoc.com/list/lrange.html\" target=\"_blank\" rel=\"noopener\">LRANGE</a></li>\n<li><a href=\"http://redisdoc.com/list/ltrim.html\" target=\"_blank\" rel=\"noopener\">LTRIM</a></li>\n<li><a href=\"http://redisdoc.com/list/blpop.html\" target=\"_blank\" rel=\"noopener\">BLPOP</a></li>\n<li><a href=\"http://redisdoc.com/list/brpop.html\" target=\"_blank\" rel=\"noopener\">BRPOP</a></li>\n<li><a href=\"http://redisdoc.com/list/brpoplpush.html\" target=\"_blank\" rel=\"noopener\">BRPOPLPUSH</a></li>\n</ul>\n</li>\n<li>集合<ul>\n<li><a href=\"http://redisdoc.com/set/sadd.html\" target=\"_blank\" rel=\"noopener\">SADD</a></li>\n<li><a href=\"http://redisdoc.com/set/sismember.html\" target=\"_blank\" rel=\"noopener\">SISMEMBER</a></li>\n<li><a href=\"http://redisdoc.com/set/spop.html\" target=\"_blank\" rel=\"noopener\">SPOP</a></li>\n<li><a href=\"http://redisdoc.com/set/srandmember.html\" target=\"_blank\" rel=\"noopener\">SRANDMEMBER</a></li>\n<li><a href=\"http://redisdoc.com/set/srem.html\" target=\"_blank\" rel=\"noopener\">SREM</a></li>\n<li><a href=\"http://redisdoc.com/set/smove.html\" target=\"_blank\" rel=\"noopener\">SMOVE</a></li>\n<li><a href=\"http://redisdoc.com/set/scard.html\" target=\"_blank\" rel=\"noopener\">SCARD</a></li>\n<li><a href=\"http://redisdoc.com/set/smembers.html\" target=\"_blank\" rel=\"noopener\">SMEMBERS</a></li>\n<li><a href=\"http://redisdoc.com/set/sscan.html\" target=\"_blank\" rel=\"noopener\">SSCAN</a></li>\n<li><a href=\"http://redisdoc.com/set/sinter.html\" target=\"_blank\" rel=\"noopener\">SINTER</a></li>\n<li><a href=\"http://redisdoc.com/set/sinterstore.html\" target=\"_blank\" rel=\"noopener\">SINTERSTORE</a></li>\n<li><a href=\"http://redisdoc.com/set/sunion.html\" target=\"_blank\" rel=\"noopener\">SUNION</a></li>\n<li><a href=\"http://redisdoc.com/set/sunionstore.html\" target=\"_blank\" rel=\"noopener\">SUNIONSTORE</a></li>\n<li><a href=\"http://redisdoc.com/set/sdiff.html\" target=\"_blank\" rel=\"noopener\">SDIFF</a></li>\n<li><a href=\"http://redisdoc.com/set/sdiffstore.html\" target=\"_blank\" rel=\"noopener\">SDIFFSTORE</a></li>\n</ul>\n</li>\n<li>有序集合<ul>\n<li><a href=\"http://redisdoc.com/sorted_set/zadd.html\" target=\"_blank\" rel=\"noopener\">ZADD</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zscore.html\" target=\"_blank\" rel=\"noopener\">ZSCORE</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zincrby.html\" target=\"_blank\" rel=\"noopener\">ZINCRBY</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zcard.html\" target=\"_blank\" rel=\"noopener\">ZCARD</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zcount.html\" target=\"_blank\" rel=\"noopener\">ZCOUNT</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zrange.html\" target=\"_blank\" rel=\"noopener\">ZRANGE</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zrevrange.html\" target=\"_blank\" rel=\"noopener\">ZREVRANGE</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zrangebyscore.html\" target=\"_blank\" rel=\"noopener\">ZRANGEBYSCORE</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zrevrangebyscore.html\" target=\"_blank\" rel=\"noopener\">ZREVRANGEBYSCORE</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zrank.html\" target=\"_blank\" rel=\"noopener\">ZRANK</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zrevrank.html\" target=\"_blank\" rel=\"noopener\">ZREVRANK</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zrem.html\" target=\"_blank\" rel=\"noopener\">ZREM</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zremrangebyrank.html\" target=\"_blank\" rel=\"noopener\">ZREMRANGEBYRANK</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zremrangebyscore.html\" target=\"_blank\" rel=\"noopener\">ZREMRANGEBYSCORE</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zrangebylex.html\" target=\"_blank\" rel=\"noopener\">ZRANGEBYLEX</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zlexcount.html\" target=\"_blank\" rel=\"noopener\">ZLEXCOUNT</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zremrangebylex.html\" target=\"_blank\" rel=\"noopener\">ZREMRANGEBYLEX</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zscan.html\" target=\"_blank\" rel=\"noopener\">ZSCAN</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zunionstore.html\" target=\"_blank\" rel=\"noopener\">ZUNIONSTORE</a></li>\n<li><a href=\"http://redisdoc.com/sorted_set/zinterstore.html\" target=\"_blank\" rel=\"noopener\">ZINTERSTORE</a></li>\n</ul>\n</li>\n<li>HyperLogLog<ul>\n<li><a href=\"http://redisdoc.com/hyperloglog/pfadd.html\" target=\"_blank\" rel=\"noopener\">PFADD</a></li>\n<li><a href=\"http://redisdoc.com/hyperloglog/pfcount.html\" target=\"_blank\" rel=\"noopener\">PFCOUNT</a></li>\n<li><a href=\"http://redisdoc.com/hyperloglog/pfmerge.html\" target=\"_blank\" rel=\"noopener\">PFMERGE</a></li>\n</ul>\n</li>\n<li>地理位置<ul>\n<li><a href=\"http://redisdoc.com/geo/geoadd.html\" target=\"_blank\" rel=\"noopener\">GEOADD</a></li>\n<li><a href=\"http://redisdoc.com/geo/geopos.html\" target=\"_blank\" rel=\"noopener\">GEOPOS</a></li>\n<li><a href=\"http://redisdoc.com/geo/geodist.html\" target=\"_blank\" rel=\"noopener\">GEODIST</a></li>\n<li><a href=\"http://redisdoc.com/geo/georadius.html\" target=\"_blank\" rel=\"noopener\">GEORADIUS</a></li>\n<li><a href=\"http://redisdoc.com/geo/georadiusbymember.html\" target=\"_blank\" rel=\"noopener\">GEORADIUSBYMEMBER</a></li>\n<li><a href=\"http://redisdoc.com/geo/geohash.html\" target=\"_blank\" rel=\"noopener\">GEOHASH</a></li>\n</ul>\n</li>\n<li>位图<ul>\n<li><a href=\"http://redisdoc.com/bitmap/setbit.html\" target=\"_blank\" rel=\"noopener\">SETBIT</a></li>\n<li><a href=\"http://redisdoc.com/bitmap/getbit.html\" target=\"_blank\" rel=\"noopener\">GETBIT</a></li>\n<li><a href=\"http://redisdoc.com/bitmap/bitcount.html\" target=\"_blank\" rel=\"noopener\">BITCOUNT</a></li>\n<li><a href=\"http://redisdoc.com/bitmap/bitpos.html\" target=\"_blank\" rel=\"noopener\">BITPOS</a></li>\n<li><a href=\"http://redisdoc.com/bitmap/bitop.html\" target=\"_blank\" rel=\"noopener\">BITOP</a></li>\n<li><a href=\"http://redisdoc.com/bitmap/bitfield.html\" target=\"_blank\" rel=\"noopener\">BITFIELD</a></li>\n</ul>\n</li>\n<li>数据库<ul>\n<li><a href=\"http://redisdoc.com/database/exists.html\" target=\"_blank\" rel=\"noopener\">EXISTS</a></li>\n<li><a href=\"http://redisdoc.com/database/type.html\" target=\"_blank\" rel=\"noopener\">TYPE</a></li>\n<li><a href=\"http://redisdoc.com/database/rename.html\" target=\"_blank\" rel=\"noopener\">RENAME</a></li>\n<li><a href=\"http://redisdoc.com/database/renamenx.html\" target=\"_blank\" rel=\"noopener\">RENAMENX</a></li>\n<li><a href=\"http://redisdoc.com/database/move.html\" target=\"_blank\" rel=\"noopener\">MOVE</a></li>\n<li><a href=\"http://redisdoc.com/database/del.html\" target=\"_blank\" rel=\"noopener\">DEL</a></li>\n<li><a href=\"http://redisdoc.com/database/randomkey.html\" target=\"_blank\" rel=\"noopener\">RANDOMKEY</a></li>\n<li><a href=\"http://redisdoc.com/database/dbsize.html\" target=\"_blank\" rel=\"noopener\">DBSIZE</a></li>\n<li><a href=\"http://redisdoc.com/database/keys.html\" target=\"_blank\" rel=\"noopener\">KEYS</a></li>\n<li><a href=\"http://redisdoc.com/database/scan.html\" target=\"_blank\" rel=\"noopener\">SCAN</a></li>\n<li><a href=\"http://redisdoc.com/database/sort.html\" target=\"_blank\" rel=\"noopener\">SORT</a></li>\n<li><a href=\"http://redisdoc.com/database/flushdb.html\" target=\"_blank\" rel=\"noopener\">FLUSHDB</a></li>\n<li><a href=\"http://redisdoc.com/database/flushall.html\" target=\"_blank\" rel=\"noopener\">FLUSHALL</a></li>\n<li><a href=\"http://redisdoc.com/database/select.html\" target=\"_blank\" rel=\"noopener\">SELECT</a></li>\n<li><a href=\"http://redisdoc.com/database/swapdb.html\" target=\"_blank\" rel=\"noopener\">SWAPDB</a></li>\n</ul>\n</li>\n<li>自动过期<ul>\n<li><a href=\"http://redisdoc.com/expire/expire.html\" target=\"_blank\" rel=\"noopener\">EXPIRE</a></li>\n<li><a href=\"http://redisdoc.com/expire/expireat.html\" target=\"_blank\" rel=\"noopener\">EXPIREAT</a></li>\n<li><a href=\"http://redisdoc.com/expire/ttl.html\" target=\"_blank\" rel=\"noopener\">TTL</a></li>\n<li><a href=\"http://redisdoc.com/expire/persist.html\" target=\"_blank\" rel=\"noopener\">PERSIST</a></li>\n<li><a href=\"http://redisdoc.com/expire/pexpire.html\" target=\"_blank\" rel=\"noopener\">PEXPIRE</a></li>\n<li><a href=\"http://redisdoc.com/expire/pexpireat.html\" target=\"_blank\" rel=\"noopener\">PEXPIREAT</a></li>\n<li><a href=\"http://redisdoc.com/expire/pttl.html\" target=\"_blank\" rel=\"noopener\">PTTL</a></li>\n</ul>\n</li>\n<li>事务<ul>\n<li><a href=\"http://redisdoc.com/transaction/multi.html\" target=\"_blank\" rel=\"noopener\">MULTI</a></li>\n<li><a href=\"http://redisdoc.com/transaction/exec.html\" target=\"_blank\" rel=\"noopener\">EXEC</a></li>\n<li><a href=\"http://redisdoc.com/transaction/discard.html\" target=\"_blank\" rel=\"noopener\">DISCARD</a></li>\n<li><a href=\"http://redisdoc.com/transaction/watch.html\" target=\"_blank\" rel=\"noopener\">WATCH</a></li>\n<li><a href=\"http://redisdoc.com/transaction/unwatch.html\" target=\"_blank\" rel=\"noopener\">UNWATCH</a></li>\n</ul>\n</li>\n<li>Lua 脚本<ul>\n<li><a href=\"http://redisdoc.com/script/eval.html\" target=\"_blank\" rel=\"noopener\">EVAL</a></li>\n<li><a href=\"http://redisdoc.com/script/evalsha.html\" target=\"_blank\" rel=\"noopener\">EVALSHA</a></li>\n<li><a href=\"http://redisdoc.com/script/script_load.html\" target=\"_blank\" rel=\"noopener\">SCRIPT_LOAD</a></li>\n<li><a href=\"http://redisdoc.com/script/script_exists.html\" target=\"_blank\" rel=\"noopener\">SCRIPT_EXISTS</a></li>\n<li><a href=\"http://redisdoc.com/script/script_flush.html\" target=\"_blank\" rel=\"noopener\">SCRIPT_FLUSH</a></li>\n<li><a href=\"http://redisdoc.com/script/script_kill.html\" target=\"_blank\" rel=\"noopener\">SCRIPT_KILL</a></li>\n</ul>\n</li>\n<li>持久化<ul>\n<li><a href=\"http://redisdoc.com/persistence/save.html\" target=\"_blank\" rel=\"noopener\">SAVE</a></li>\n<li><a href=\"http://redisdoc.com/persistence/bgsave.html\" target=\"_blank\" rel=\"noopener\">BGSAVE</a></li>\n<li><a href=\"http://redisdoc.com/persistence/bgrewriteaof.html\" target=\"_blank\" rel=\"noopener\">BGREWRITEAOF</a></li>\n<li><a href=\"http://redisdoc.com/persistence/lastsave.html\" target=\"_blank\" rel=\"noopener\">LASTSAVE</a></li>\n</ul>\n</li>\n<li>发布与订阅<ul>\n<li><a href=\"http://redisdoc.com/pubsub/publish.html\" target=\"_blank\" rel=\"noopener\">PUBLISH</a></li>\n<li><a href=\"http://redisdoc.com/pubsub/subscribe.html\" target=\"_blank\" rel=\"noopener\">SUBSCRIBE</a></li>\n<li><a href=\"http://redisdoc.com/pubsub/psubscribe.html\" target=\"_blank\" rel=\"noopener\">PSUBSCRIBE</a></li>\n<li><a href=\"http://redisdoc.com/pubsub/unsubscribe.html\" target=\"_blank\" rel=\"noopener\">UNSUBSCRIBE</a></li>\n<li><a href=\"http://redisdoc.com/pubsub/punsubscribe.html\" target=\"_blank\" rel=\"noopener\">PUNSUBSCRIBE</a></li>\n<li><a href=\"http://redisdoc.com/pubsub/pubsub.html\" target=\"_blank\" rel=\"noopener\">PUBSUB</a></li>\n</ul>\n</li>\n<li>复制<ul>\n<li><a href=\"http://redisdoc.com/replication/slaveof.html\" target=\"_blank\" rel=\"noopener\">SLAVEOF</a></li>\n<li><a href=\"http://redisdoc.com/replication/role.html\" target=\"_blank\" rel=\"noopener\">ROLE</a></li>\n</ul>\n</li>\n<li>客户端与服务器<ul>\n<li><a href=\"http://redisdoc.com/client_and_server/auth.html\" target=\"_blank\" rel=\"noopener\">AUTH</a></li>\n<li><a href=\"http://redisdoc.com/client_and_server/quit.html\" target=\"_blank\" rel=\"noopener\">QUIT</a></li>\n<li><a href=\"http://redisdoc.com/client_and_server/info.html\" target=\"_blank\" rel=\"noopener\">INFO</a></li>\n<li><a href=\"http://redisdoc.com/client_and_server/shutdown.html\" target=\"_blank\" rel=\"noopener\">SHUTDOWN</a></li>\n<li><a href=\"http://redisdoc.com/client_and_server/time.html\" target=\"_blank\" rel=\"noopener\">TIME</a></li>\n<li><a href=\"http://redisdoc.com/client_and_server/client_getname.html\" target=\"_blank\" rel=\"noopener\">CLIENT_GETNAME</a></li>\n<li><a href=\"http://redisdoc.com/client_and_server/client_kill.html\" target=\"_blank\" rel=\"noopener\">CLIENT_KILL</a></li>\n<li><a href=\"http://redisdoc.com/client_and_server/client_list.html\" target=\"_blank\" rel=\"noopener\">CLIENT_LIST</a></li>\n<li><a href=\"http://redisdoc.com/client_and_server/client_setname.html\" target=\"_blank\" rel=\"noopener\">CLIENT_SETNAME</a></li>\n</ul>\n</li>\n<li>配置选项<ul>\n<li><a href=\"http://redisdoc.com/configure/config_set.html\" target=\"_blank\" rel=\"noopener\">CONFIG_SET</a></li>\n<li><a href=\"http://redisdoc.com/configure/config_get.html\" target=\"_blank\" rel=\"noopener\">CONFIG_GET</a></li>\n<li><a href=\"http://redisdoc.com/configure/config_resetstat.html\" target=\"_blank\" rel=\"noopener\">CONFIG_RESETSTAT</a></li>\n<li><a href=\"http://redisdoc.com/configure/config_rewrite.html\" target=\"_blank\" rel=\"noopener\">CONFIG_REWRITE</a></li>\n</ul>\n</li>\n<li>调试<ul>\n<li><a href=\"http://redisdoc.com/debug/ping.html\" target=\"_blank\" rel=\"noopener\">PING</a></li>\n<li><a href=\"http://redisdoc.com/debug/echo.html\" target=\"_blank\" rel=\"noopener\">ECHO</a></li>\n<li><a href=\"http://redisdoc.com/debug/object.html\" target=\"_blank\" rel=\"noopener\">OBJECT</a></li>\n<li><a href=\"http://redisdoc.com/debug/slowlog.html\" target=\"_blank\" rel=\"noopener\">SLOWLOG</a></li>\n<li><a href=\"http://redisdoc.com/debug/monitor.html\" target=\"_blank\" rel=\"noopener\">MONITOR</a></li>\n<li><a href=\"http://redisdoc.com/debug/debug_object.html\" target=\"_blank\" rel=\"noopener\">DEBUG_OBJECT</a></li>\n<li><a href=\"http://redisdoc.com/debug/debug_segfault.html\" target=\"_blank\" rel=\"noopener\">DEBUG_SEGFAULT</a></li>\n</ul>\n</li>\n<li>内部命令<ul>\n<li><a href=\"http://redisdoc.com/internal/migrate.html\" target=\"_blank\" rel=\"noopener\">MIGRATE</a></li>\n<li><a href=\"http://redisdoc.com/internal/dump.html\" target=\"_blank\" rel=\"noopener\">DUMP</a></li>\n<li><a href=\"http://redisdoc.com/internal/restore.html\" target=\"_blank\" rel=\"noopener\">RESTORE</a></li>\n<li><a href=\"http://redisdoc.com/internal/sync.html\" target=\"_blank\" rel=\"noopener\">SYNC</a></li>\n<li><a href=\"http://redisdoc.com/internal/psync.html\" target=\"_blank\" rel=\"noopener\">PSYNC</a></li>\n</ul>\n</li>\n<li>功能文档<ul>\n<li><a href=\"http://redisdoc.com/topic/cluster-spec.html\" target=\"_blank\" rel=\"noopener\">Redis 集群规范</a></li>\n<li><a href=\"http://redisdoc.com/topic/persistence.html\" target=\"_blank\" rel=\"noopener\">持久化（persistence）</a></li>\n<li><a href=\"http://redisdoc.com/topic/pubsub.html\" target=\"_blank\" rel=\"noopener\">发布与订阅（pub/sub）</a></li>\n<li><a href=\"http://redisdoc.com/topic/sentinel.html\" target=\"_blank\" rel=\"noopener\">Sentinel</a></li>\n<li><a href=\"http://redisdoc.com/topic/cluster-tutorial.html\" target=\"_blank\" rel=\"noopener\">集群教程</a></li>\n<li><a href=\"http://redisdoc.com/topic/notification.html\" target=\"_blank\" rel=\"noopener\">键空间通知（keyspace notification）</a></li>\n<li><a href=\"http://redisdoc.com/topic/protocol.html\" target=\"_blank\" rel=\"noopener\">通信协议（protocol）</a></li>\n<li><a href=\"http://redisdoc.com/topic/replication.html\" target=\"_blank\" rel=\"noopener\">复制（Replication）</a></li>\n<li><a href=\"http://redisdoc.com/topic/transaction.html\" target=\"_blank\" rel=\"noopener\">事务（transaction）</a></li>\n</ul>\n</li>\n</ul>\n<p>redis key集中过期问题，集中过期导致redis压力过大而卡顿</p>\n<p>采用一定范围内的随机过期时间</p>\n<p>Redis也提供了一些简单的计算功能，比如排序、聚合等，对于这些操作，单线程模型实际会严重影响整体吞吐量，CPU计算过程中，整个IO调度都是被阻塞住的。</p>\n<p><strong>redis分布式锁参考 本博客<a href=\"https://muggle.javaboy.org/2019/04/23/thread-3/\" target=\"_blank\" rel=\"noopener\">多线程进阶篇</a></strong></p>\n<h2 id=\"springboot-分布式session\"><a href=\"#springboot-分布式session\" class=\"headerlink\" title=\"springboot 分布式session\"></a>springboot 分布式session</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span>  </span><br><span class=\"line\"><span class=\"meta\">@EnableRedisHttpSession</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisSessionConfig</span> </span>&#123;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.session<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-session-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.redis.host=localhost  </span><br><span class=\"line\">spring.redis.port=6379</span><br></pre></td></tr></table></figure>\n<p><strong>注意：springboot2.1有包冲突，本配置只适用于2.1以下</strong></p>\n<h2 id=\"mybatis的二级缓存\"><a href=\"#mybatis的二级缓存\" class=\"headerlink\" title=\"mybatis的二级缓存\"></a>mybatis的二级缓存</h2><p>二级缓存是mapper级别的缓存，多个SqlSession去操作同一个Mapper的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。</p>\n<p>UserMapper有一个二级缓存区域（按namespace分），其它mapper也有自己的二级缓存区域（按namespace分）。每一个namespace的mapper都有一个二级缓存区域，两个mapper的namespace如果相同，这两个mapper执行sql查询到数据将存在相同的二级缓存区域中。sql节点可配置userCache flushcache</p>\n<p>打开二级缓存总开关（springboot默认开启），在mapper中使用<code>&lt;cache/&gt;</code>打开二级缓存 在分布式系统中不能直接使用二级缓存</p>\n<p><code>&lt;cache /&gt;</code>的属性：</p>\n<ul>\n<li>eviction：代表的是缓存收回策略，有一下策略：<ol>\n<li>LRU，  最近最少使用的，移除最长时间不用的对象。</li>\n<li>FIFO，先进先出，按对象进入缓存的顺序来移除他们</li>\n<li>SOFT， 软引用，移除基于垃圾回收器状态和软引用规则的对象。</li>\n<li>WEAK，若引用，更积极的移除基于垃圾收集器状态和若引用规则的对象</li>\n</ol>\n</li>\n<li>flushInterval：刷新间隔时间，单位为毫秒，默认是当sql执行的时候才回去刷新。</li>\n<li>size：引用数目，一个正整数，代表缓存最多可以存储多少对象，不宜设置过大，过大会造成内存溢出。</li>\n<li>readOnly：只读，意味着缓存数据只能读取，不能修改，这样设置的好处是我们可以快速读取缓存，去诶但是我们没有办法修改缓存。默认值为false，不允许我们修改。</li>\n</ul>\n<h2 id=\"分布式缓存\"><a href=\"#分布式缓存\" class=\"headerlink\" title=\"分布式缓存\"></a>分布式缓存</h2><p>分布式缓存策略</p>\n<p>mybatis整合ehcache实现分布式缓存、jetcache、spring cache</p>\n<p>jetcache整合笔记：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alicp.jetcache<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jetcache-starter-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableMethodCache</span>(basePackages = <span class=\"string\">\"com.muggle.jetcahetest\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@EnableCreateCacheAnnotation</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JetcaheTestApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(JetcaheTestApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Cached</span>(cacheType = CacheType.REMOTE)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">test</span> <span class=\"params\">(String message)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServerImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">test</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&gt;&gt;&gt;\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">666</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更多文档参考[jetCache github 地址][]</p>\n<p>分布式缓存的应用</p>\n<p>合并批量更新，提高io</p>\n<p>缓存的粒度问题，缓存数据是全量还是部分</p>\n<h3 id=\"cache-cloud-使用\"><a href=\"#cache-cloud-使用\" class=\"headerlink\" title=\"cache cloud 使用\"></a>cache cloud 使用</h3><h3 id=\"分布式缓存原理分析\"><a href=\"#分布式缓存原理分析\" class=\"headerlink\" title=\"分布式缓存原理分析\"></a>分布式缓存原理分析</h3><ul>\n<li>传统分布式算法：HASH算法或者取模算法</li>\n<li>Consistent hashing一致性算法原理</li>\n<li>Hash倾斜性</li>\n<li>虚拟节点</li>\n<li>Consistent hashing命中率</li>\n</ul>\n<p>Consistent hashing 是一致性hash算法</p>\n<p>博客：<a href=\"https://blog.csdn.net/qq_35956041/article/details/81026972\" target=\"_blank\" rel=\"noopener\">一致性哈希</a></p>\n<p>哈希倾斜：缓存任务分配不均，采用虚拟节点避免</p>\n<p>缓存穿透：缓存未起作用</p>\n<p>缓存雪崩：缓存雪崩可能是因为数据未加载到缓存中，或者缓存同一时间大面积的失效，从而导致所有请求都去查数据库，导致数据库CPU和内存负载过高，甚至宕机。</p>\n<p>缓存的算法</p>\n<p>FIFO算法：First in First out，先进先出。原则：一个数据最先进入缓存中，则应该最早淘汰掉。也就是说，当缓存满的时候，应当把最先进入缓存的数据给淘汰掉。<br>LFU算法：Least Frequently Used，最不经常使用算法。<br>LRU算法：Least Recently Used，近期最少使用算法。</p>\n<p>LRU和LFU的区别。LFU算法是根据在一段时间里数据项被使用的次数选择出最少使用的数据项，即根据使用次数的差异来决定。而LRU是根据使用时间的差异来决定的</p>\n<h2 id=\"redis运维（抄录自-https-mp-weixin-qq-com-s-TvIxovAi6XfR7RGigtHRtQ）\"><a href=\"#redis运维（抄录自-https-mp-weixin-qq-com-s-TvIxovAi6XfR7RGigtHRtQ）\" class=\"headerlink\" title=\"redis运维（抄录自 https://mp.weixin.qq.com/s/TvIxovAi6XfR7RGigtHRtQ）\"></a>redis运维（抄录自 <a href=\"https://mp.weixin.qq.com/s/TvIxovAi6XfR7RGigtHRtQ）\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/TvIxovAi6XfR7RGigtHRtQ）</a></h2><h3 id=\"快照持久化\"><a href=\"#快照持久化\" class=\"headerlink\" title=\"快照持久化\"></a>快照持久化</h3><p>redis中的快照持久化默认是开启的，redis.conf中相关配置主要有如下几项：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">save 900 1</span><br><span class=\"line\">save 300 10</span><br><span class=\"line\">save 60 10000</span><br><span class=\"line\">stop-writes-on-bgsave-error yes</span><br><span class=\"line\">rdbcompression yes</span><br><span class=\"line\">dbfilename dump.rdb</span><br><span class=\"line\">dir ./</span><br></pre></td></tr></table></figure>\n<p>前面三个save相关的选项表示备份的频率，分别表示<code>900秒内至少一个键被更改则进行快照，300秒内至少10个键被更改则进行快照，60秒内至少10000个键被更改则进行快照，</code>stop-writes-on-bgsave-error表示在快照创建出错后，是否继续执行写命令，rdbcompression则表示是否对快照文件进行压缩，dbfilename表示生成的快照文件的名字，dir则表示生成的快照文件的位置，在redis中，快照持久化默认就是开启的。</p>\n<p>1.在redis运行过程中，我们可以向redis发送一条save命令来创建一个快照，save是一个阻塞命令，redis在接收到save命令之后，开始执行备份操作之后，在备份操作执行完毕之前，将不再处理其他请求，其他请求将被挂起，因此这个命令我们用的不多。save命令执行如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SAVE</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n<p>2.在redis运行过程中，我们也可以发送一条bgsave命令来创建一个快照，不同于save命令，bgsave命令会fork一个子进程，然后这个子进程负责执行将快照写入硬盘，而父进程则继续处理客户端发来的请求，这样就不会导致客户端命令阻塞了。如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; BGSAVE</span><br><span class=\"line\">Background saving started</span><br></pre></td></tr></table></figure>\n<p>3.如果我们在redis.conf中配置了如下选项：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">save 900 1</span><br><span class=\"line\">save 300 10</span><br><span class=\"line\">save 60 10000</span><br></pre></td></tr></table></figure>\n<p>那么当条件满足时，比如900秒内有一个key被操作了，那么redis就会自动触发bgsava命令进行备份。我们可以根据实际需求在redis.conf中配置多个这种触发规则。</p>\n<p>4.还有一种情况也会触发save命令，那就是我们执行shutdown命令时，当我们用shutdown命令关闭redis时，此时也会执行一个save命令进行备份操作，并在备份操作完成后将服务器关闭。</p>\n<p>5.还有一种特殊情况也会触发bgsave命令，就是在主从备份的时候。当从机连接上主机后，会发送一条sync命令来开始一次复制操作，此时主机会开始一次bgsave操作，并在bgsave操作结束后向从机发送快照数据实现数据同步。</p>\n<h3 id=\"aof持久化\"><a href=\"#aof持久化\" class=\"headerlink\" title=\"aof持久化\"></a>aof持久化</h3><p>与快照持久化不同，AOF持久化是将被执行的命令写到aof文件末尾，在恢复时只需要从头到尾执行一遍写命令即可恢复数据，AOF在redis中默认也是没有开启的，需要我们手动开启，开启方式如下：</p>\n<p>打开redis.conf配置文件，修改appendonly属性值为yes，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appendonly yes</span><br></pre></td></tr></table></figure>\n<p>另外几个和AOF相关的属性如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appendfilename &quot;appendonly.aof&quot;</span><br><span class=\"line\"># appendfsync always</span><br><span class=\"line\">appendfsync everysec</span><br><span class=\"line\"># appendfsync no</span><br><span class=\"line\">no-appendfsync-on-rewrite no</span><br><span class=\"line\">auto-aof-rewrite-percentage 100</span><br><span class=\"line\">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure>\n<p>这几个属性的含义分别如下：</p>\n<p>1.appendfilename表示生成的AOF备份文件的文件名。<br>2.appendfsync表示备份的时机，always表示每执行一个命令就备份一次，everysec表示每秒备份一次，no表示将备份时机交给操作系统。<br>3.no-appendfsync-on-rewrite表示在对aof文件进行压缩时，是否执行同步操作。<br>4.最后两行配置表示AOF文件的压缩时机，这个我们一会再细说。</p>\n<p>同时为了避免快照备份的影响，我们将快照备份关闭，关闭方式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">save &quot;&quot;</span><br><span class=\"line\"># save 900 1</span><br><span class=\"line\"># save 300 10</span><br><span class=\"line\"># save 60 10000</span><br></pre></td></tr></table></figure>\n<p>此时，当我们在redis中进行数据操作时，就会自动生成AOF的配置文件appendonly.aof</p>\n<p>AOF备份的几个关键点</p>\n<p>1.通过上面的介绍，小伙伴们了解到appendfsync的取值一共有三种，我们在项目中首选everysec，always选项会严重降低redis性能。<br>2.使用everysec，最坏的情况下我们可能丢失1秒的数据。</p>\n<p>AOF文件的重写与压缩</p>\n<p>AOF备份有很多明显的优势，当然也有劣势，那就是文件大小。随着系统的运行，AOF的文件会越来越大，甚至把整个电脑的硬盘填满，AOF文件的重写与压缩机制可以在一定程度上缓解这个问题。<br>当AOF的备份文件过大时，我们可以向redis发送一条bgrewriteaof命令进行文件重写，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; BGREWRITEAOF</span><br><span class=\"line\">Background append only file rewriting started</span><br><span class=\"line\">(0.71s)</span><br></pre></td></tr></table></figure>\n<p>bgrewriteaof的执行原理和我们上文说的bgsave的原理一致，这里我就不再赘述，因此bgsave执行过程中存在的问题在这里也一样存在。</p>\n<p>bgrewriteaof也可以自动执行，自动执行时间则依赖于auto-aof-rewrite-percentage和auto-aof-rewrite-min-size配置，auto-aof-rewrite-percentage 100表示当目前aof文件大小超过上一次重写时的aof文件大小的百分之多少时会再次进行重写，如果之前没有重写，则以启动时的aof文件大小为依据，同时还要求AOF文件的大小至少要大于64M(auto-aof-rewrite-min-size 64mb)。</p>\n<h3 id=\"redis主从复制\"><a href=\"#redis主从复制\" class=\"headerlink\" title=\"redis主从复制\"></a>redis主从复制</h3><p>6379是主机，即master，6380和6381是从机，即slave，那么如何配置这种实例关系呢，很简单，分别在6380和6381上执行如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6381&gt; SLAVEOF 127.0.0.1 6379</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n<p>这一步也可以通过在两个从机的redis.conf中添加如下配置来解决：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slaveof 127.0.0.1 6379</span><br></pre></td></tr></table></figure>\n<p>主从复制注意点</p>\n<p>1.如果主机已经运行了一段时间了，并且了已经存储了一些数据了，此时从机连上来，那么从机会将主机上所有的数据进行备份，而不是从连接的那个时间点开始备份。<br>2.配置了主从复制之后，主机上可读可写，但是从机只能读取不能写入（可以通过修改redis.conf中 slave-read-only 的值让从机也可以执行写操作）。<br>3.在整个主从结构运行过程中，如果主机不幸挂掉，重启之后，他依然是主机，主从复制操作也能够继续进行。</p>\n<p>复制原理</p>\n<p>每一个master都有一个replication ID，这是一个较大的伪随机字符串，标记了一个给定的数据集。每个master也持有一个偏移量，master将自己产生的复制流发送给slave时，发送多少个字节的数据，自身的偏移量就会增加多少，目的是当有新的操作修改自己的数据集时，它可以以此更新slave的状态。复制偏移量即使在没有一个slave连接到master时，也会自增，所以基本上每一对给定的Replication ID, offset都会标识一个master数据集的确切版本。当slave连接到master时，它们使用PSYNC命令来发送它们记录的旧的master replication ID和它们至今为止处理的偏移量。通过这种方式，master能够仅发送slave所需的增量部分。但是如果master的缓冲区中没有足够的命令积压缓冲记录，或者如果slave引用了不再知道的历史记录（replication ID），则会转而进行一个全量重同步：在这种情况下，slave会得到一个完整的数据集副本，从头开始(参考redis官网)。</p>\n<p>简单来说，就是以下几个步骤：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.slave启动成功连接到master后会发送一个sync命令。  </span><br><span class=\"line\">2.Master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令。  </span><br><span class=\"line\">3.在后台进程执行完毕之后，master将传送整个数据文件到slave,以完成一次完全同步。  </span><br><span class=\"line\">4.全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。  </span><br><span class=\"line\">5.增量复制：Master继续将新的所有收集到的修改命令依次传给slave,完成同步。  </span><br><span class=\"line\">6.但是只要是重新连接master,一次完全同步（全量复制)将被自动执行。</span><br></pre></td></tr></table></figure>\n<p>我们搭建的主从复制模式是下面这样的：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/GvtDGKK4uYnKsYW7dwk0aaRIrKcESa9ibiaq4WfV2TDDvyGMsfjVVZ3K8oKEYT6m7YfJQekNiayQ4PfknStVl21QQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"img\">  </p>\n<p>实际上，一主二仆的主从复制，我们可以搭建成下面这种结构：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/GvtDGKK4uYnKsYW7dwk0aaRIrKcESa9ibbMvoJzK9ycEft3gcMssde1knu6OlGzgBWlRFRNyZYFuIc3pBUIce7g/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"img\">  </p>\n<p>哨兵模式，其实并不复杂，我们还是在我们前面的基础上来搭建哨兵模式。假设现在我的master是6379，两个从机分别是6380和6381，两个从机都是从6379上复制数据。先按照上文的步骤，我们配置好一主二仆，然后在redis目录下打开sentinel.conf文件，做如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sentinel monitor mymaster 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure>\n<p>其中mymaster是给要监控的主机取的名字，随意取，后面是主机地址，最后面的2表示有多少个sentinel认为主机挂掉了，就进行切换（我这里只有一个，因此设置为1）。好了，配置完成后，输入如下命令启动哨兵：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-sentinel sentinel.conf</span><br></pre></td></tr></table></figure>\n<p>6379挂掉之后，redis内部重新举行了选举，6380重新上位。此时，如果6379重启，也不再是扛把子了，只能屈身做一个slave了。</p>\n<h3 id=\"集群搭建\"><a href=\"#集群搭建\" class=\"headerlink\" title=\"集群搭建\"></a>集群搭建</h3><p>Redis集群架构如下图：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/GvtDGKK4uYmokRcFGBAhCcEXKrK04yXHyTcYLtNXvWCZjjS5Vl9wWsg323VBBmboGhJ6Ovfia4Pqc2oLadKcqvg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"img\">  </p>\n<p>Redis集群运行原理如下：</p>\n<p>1.所有的Redis节点彼此互联(PING-PONG机制),内部使用二进制协议优化传输速度和带宽<br>2.节点的fail是通过集群中超过半数的节点检测失效时才生效<br>3.客户端与Redis节点直连,不需要中间proxy层，客户端不需要连接集群所有节点，连接集群中任何一个可用节点即可<br>4.Redis-cluster把所有的物理节点映射到[0-16383]slot上,cluster (簇)负责维护<code>node&lt;-&gt;slot&lt;-&gt;value</code>。Redis集群中内置了16384个哈希槽，当需要在Redis集群中放置一个key-value时，Redis先对key使用crc16算法算出一个结果，然后把结果对 16384 求余数，这样每个key都会对应一个编号在 0-16383 之间的哈希槽，Redis 会根据节点数量大致均等的将哈希槽映射到不同的节点</p>"},{"title":" springSecurity深度解析","date":"2019-04-11T13:27:31.000Z","_content":"作者：muggle\n\n#### 从一个基础的springsecurity开始，进行代码跟踪分析其原理\n\nspringsecurity是一个典型的责任链模式；我们先新建一个springboot项目，进行最基本的springsecurity配置，然后debug;我这里使用的开发工具是idea.建议大家也使用idea来进行日常开发。好了话不多说，开始：\n\n第一步\n\n新建springboot项目 maven依赖：\n```xml\n<dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.security</groupId>\n            <artifactId>spring-security-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n```\n\n启动项目，控制台上会输出这样一段字符串：\n```java\n2019-04-11 09:47:40.388  INFO 16716 --- [           main] .s.s.UserDetailsServiceAutoConfiguration :\n\nUsing generated security password: a6d55bc6-49fb-4241-a5ae-527e5e644731\n\n```\n\n<!--more-->\n现在我们访问 http://localhost:8080 会自动跳转到 http://localhost:8080/login，并弹出一个登陆页面，用户名输user,密码输上面的字符串： a6d55bc6-49fb-4241-a5ae-527e5e644731，每次字符串都是随机的，要留意你的控制台打印的字符串，登陆成功了，现在我们开始debug,看看一次登陆和一次登陆后访问一次不登陆访问这三种情况security都做了哪些事情。\n\n先写一个接口：\n```java\n\n@RestController\npublic class TestController {\n    @GetMapping(\"test\")\n    public String test(){\n        return \"hi 你好啊\";\n    }\n}\n```\nspringsecurity 执行过程是走一条过滤器链，所以我们要先明白，有哪些过滤器，并在过滤器上打上断点追踪，下面贴出各个过滤器名称及作用：\n\n>1、WebAsyncManagerIntegrationFilter\n将Security上下文与Spring Web中用于处理异步请求映射的 WebAsyncManager 进行集成。\n2、SecurityContextPersistenceFilter\n在每次请求处理之前将该请求相关的安全上下文信息加载到SecurityContextHolder中，然后在该次请求处理完成之后，将SecurityContextHolder中关于这次请求的信息存储到一个“仓储”中，然后将SecurityContextHolder中的信息清除\n例如在Session中维护一个用户的安全信息就是这个过滤器处理的。\n3、HeaderWriterFilter\n用于将头信息加入响应中\n4、CsrfFilter\n用于处理跨站请求伪造\n5、LogoutFilter\n用于处理退出登录\n6、UsernamePasswordAuthenticationFilter\n用于处理基于表单的登录请求，从表单中获取用户名和密码。默认情况下处理来自“/login”的请求。\n从表单中获取用户名和密码时，默认使用的表单name值为“username”和“password”，这两个值可以通过设置这个过滤器的usernameParameter 和 passwordParameter 两个参数的值进行修改。\n7、DefaultLoginPageGeneratingFilter\n如果没有配置登录页面，那系统初始化时就会配置这个过滤器，并且用于在需要进行登录时生成一个登录表单页面。\n8、BasicAuthenticationFilter\n处理请求头信息，DigestAuthenticationFilter\n9、RequestCacheAwareFilter\n用来处理请求的缓存\n10、SecurityContextHolderAwareRequestFilter\n11、AnonymousAuthenticationFilter\n12、SessionManagementFilter\n13、ExceptionTranslationFilter\n处理 AccessDeniedException 和 AuthenticationException 异常\n14、FilterSecurityInterceptor\nAbstractInterceptUrlConfigurer.createFilterSecurityInterceptor\n15、RememberMeAuthenticationFilter的作用是, 当用户没有登录而直接访问资源时, 从cookie里找出用户的信息, 如果Spring Security能够识别出用户提供的remember me cookie, 用户将不必填写用户名和密码, 而是直接登录进入系统.\n\n先不管那么多，ctr+alt+shift+t（或者按两下shift） 输入类名找到类，打断点，开始debug\n\n#### springsecurity 的默认登陆url是/login:我们访问一下来捋一捋：\n其代码顺序是：\n`WebAsyncManagerIntegrationFilter`  -> `SecurityContextPersistenceFilter` -> `HeaderWriterFilter` -> `CsrfFilter` -> `LogoutFilter` -> `DefaultLoginPageGeneratingFilter`\n\n然后浏览器会返回一个登陆页面：\n![image.png](https://upload-images.jianshu.io/upload_images/13612520-d6e336c80cbf30c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 说明：\n这其实是发起了一个请求登陆页面的请求，请求首先进入`WebAsyncManagerIntegrationFilter` 这个过滤器做了什么我们不必去关系，它下一个过滤器`SecurityContextPersistenceFilter` 通过request的attribute来上了一次请求锁，并且对SecurityContextHolder进行了管理；而SecurityContextHolder是对用户信息进行管理的一套系统，分为三大类\n\n1. SecurityContextHolder 对用户信息增删改查的操作\n 2. SecurityContext 将用户名，权限等封装成该对象\n 3. SecurityContextHolderStrategy 用于存储 SecurityContext\n\n默认的SecurityContextHolderStrategy 实现类是ThreadLocalSecurityContextHolderStrategy 它使用了ThreadLocal来存储了用户信息。\n下一个过滤器`HeaderWriterFilter`请求和响应封装了一下，用于`CsrfFilter`鉴别csrf攻击 `LogoutFilter`判断是不是登出操作，如果是则不执行下面的过滤器，而执行登出的相关操作，DefaultLoginPageGeneratingFilter生成登录页\n\n我们先输入正确的代码登陆一次\n\n通过跟踪代码发现其执行顺序是：\n`WebAsyncManagerIntegrationFilter` -> `SecurityContextPersistenceFilter` -> `HeaderWriterFilter`->`CsrfFilter`-> `LogoutFilter`->`UsernamePasswordAuthenticationFilter`->`WebAsyncManagerIntegrationFilter`->`SecurityContextPersistenceFilter`->`HeaderWriterFilter`->`CsrfFilter`->`LogoutFilter`->`DefaultLoginPageGeneratingFilter`->`BasicAuthenticationFilter`->`RequestCacheAwareFilter`->`SecurityContextHolderAwareRequestFilter`->`AnonymousAuthenticationFilter`->`SessionManagementFilter`->`ExceptionTranslationFilter`->`FilterSecurityInterceptor`->`SecurityContextPersistenceFilter`->`LogoutFilter`->`DefaultLoginPageGeneratingFilter`->`RequestCacheAwareFilter`->`SecurityContextHolderAwareRequestFilter`->`AnonymousAuthenticationFilter`->`SessionManagementFilter`->`ExceptionTranslationFilter`->`FilterSecurityInterceptor`\n\n这一次之所以过滤器链跑这么长是因为，这里可以认为发起了三次请求，第一次请求是登陆，登陆成功后转发到 url 为“/”的接口，而我没有这个接口，发生了重定向到“/error” 而“/error”页面是springboot请求失败的错误页面返回机制。\n`WebAsyncManagerIntegrationFilter` -> `SecurityContextPersistenceFilter` -> `HeaderWriterFilter`->`CsrfFilter`-> `LogoutFilter`->`UsernamePasswordAuthenticationFilter` 这一过程登陆请求。\n\n`WebAsyncManagerIntegrationFilter`->`SecurityContextPersistenceFilter`->`HeaderWriterFilter`->`CsrfFilter`->`LogoutFilter`->`DefaultLoginPageGeneratingFilter`->`BasicAuthenticationFilter`->`RequestCacheAwareFilter`->`SecurityContextHolderAwareRequestFilter`->`AnonymousAuthenticationFilter`->`SessionManagementFilter`->`ExceptionTranslationFilter`->`FilterSecurityInterceptor`\n这是转发到“/”的过程\n\n`SecurityContextPersistenceFilter`->`LogoutFilter`->`DefaultLoginPageGeneratingFilter`->`RequestCacheAwareFilter`->`SecurityContextHolderAwareRequestFilter`->`AnonymousAuthenticationFilter`->`SessionManagementFilter`->`ExceptionTranslationFilter`->`FilterSecurityInterceptor`\n这是重定向到error的过程\n\n接下来访问一下我们的/test接口\n看看执行顺序：\n`WebAsyncManagerIntegrationFilter`->`SecurityContextPersistenceFilter`->`HeaderWriterFilter`->`CsrfFilter`->`LogoutFilter`->`DefaultLoginPageGeneratingFilter`->`BasicAuthenticationFilter`->`RequestCacheAwareFilter`->`SecurityContextHolderAwareRequestFilter`->`AnonymousAuthenticationFilter`->`SessionManagementFilter`->`ExceptionTranslationFilter`->`FilterSecurityInterceptor`\n#### 说明：\nBasicAuthenticationFilter就是看你请求头里面有没有basic开头的东西，有的话做一些处理，对我们来说没啥用，不必去关心，RequestCacheAwareFilter对请求和响应做了额外处理 SecurityContextHolderAwareRequestFilter 也是对请求做了一些额外处理，我们同样不去关心它。AnonymousAuthenticationFilter过滤器是当securitycontext为null时填充一个匿名权限，这里被执行的原因因为security未配置完全，后面进一步配置了之后再回来详解。ExceptionTranslationFilter是对鉴权或者登陆异常的处理过滤器，FilterSecurityInterceptor可以看做是过滤器链的出口：\n```java\n public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        FilterInvocation fi = new FilterInvocation(request, response, chain);\n        this.invoke(fi);\n    }\n```\n这个fi就是请求的url值。\n\n现在我们完善一下security配置，让它复杂一点\n实现 GrantedAuthority：\n```java\n@Data\npublic class MyGrantedAuthority implements GrantedAuthority {\n    private String authority;\n}\n```\n实现UserDetails\n```java\n@Data\n@Accessors(chain = true)\npublic class MyUserDetail implements UserDetails {\n\n    private List<MyGrantedAuthority> authorities;\n\n    private String password;\n\n    private String username;\n\n    private boolean accountNonExpired;\n\n    private boolean accountNonLocked;\n\n    private boolean credentialsNonExpired;\n\n    private boolean enabled;\n\n}\n\n```\n\n实现UserDetailsService\n```java\n@Service\npublic class MyUserDetailService implements UserDetailsService {\n    @Override\n    public UserDetails loadUserByUsername(String s) throws UsernameNotFoundException {\n        List<MyGrantedAuthority> authorities = new ArrayList<>();\n        MyGrantedAuthority myGrantedAuthority = new MyGrantedAuthority();\n        myGrantedAuthority.setAuthority(\"ROLE_test\");\n        BCryptPasswordEncoder bCryptPasswordEncoder = new BCryptPasswordEncoder();\n        String test = bCryptPasswordEncoder.encode(\"test\");\n        authorities.add(myGrantedAuthority);\n        return new MyUserDetail().setAuthorities(authorities).setAccountNonExpired(true)\n                .setAccountNonLocked(true).setCredentialsNonExpired(true).setEnabled(true)\n                .setPassword(test).setUsername(\"test\");\n    }\n}\n```\n\n重写security适配器WebSecurityConfigurerAdapter：\n```java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Autowired\n    MyUserDetailService userDetailService;\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.userDetailsService(userDetailService).passwordEncoder(new BCryptPasswordEncoder());\n    }\n    @Override\n    public void configure(WebSecurity web) throws Exception {\n\n        web.ignoring().antMatchers(\"/resources/**/*.html\", \"/resources/**/*.js\",\n                \"/resources/**/*.css\", \"/resources/**/*.txt\",\n                \"/resources/**/*.png\", \"/**/*.bmp\", \"/**/*.gif\", \"/**/*.png\", \"/**/*.jpg\", \"/**/*.ico\");\n//        super.configure(web);\n    }\n\n   @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       http.formLogin().loginPage(\"/login_page\").passwordParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/sign_in\").permitAll()\n               .and().authorizeRequests().antMatchers(\"/test\").hasRole(\"test\").anyRequest().authenticated().and().csrf().disable();\n    }\n\n}\n```\n这里比开始又要复杂一点了，我先对相关操作进行说明一下：\n先从SecurityConfig说起\n\n重写了三个config方法\n1.第一个config涉及到的问题比较深——security的认证鉴权系统；\n先说认证的过程，当过滤器跑到usernamepasswordFilter的时候就开始做认证了\n#### security认证原理\n认证的工作是交给AuthenticationManager去做，AuthenticationManager下有多个认证器 AuthenticationProvider\n只要其中一个AuthenticationProvider通过认证就算登陆成功，而且在认证器中抛出异常，无法终止认证流程只是算该认证器未通过。\n第一个config就算配置了一个AuthenticationManagerBuilder 这个类会生成一个 AuthenticationManager和DaoAuthenticationProvider认证器，认证调用userdetailservice 的loadUserByUsername方法来和你传入的username passworde做比较，password 是通过BCryptPasswordEncoder来做编码后比较的，这样做是为了提高安全性。\n\n2.第二个config是对静态资源的放行；\n\n3.第三个config 配置了登录页请求路径，登陆认证路径，用户名密码属性，和一个test权限，注意一点：我在config配的是hasRole(\"test\")，我设置的权限是  myGrantedAuthority.setAuthority(\"ROLE_test\");为什么这样弄后面会说。\n接下来完善一下，边边角角，写个登陆的HTML,一个登陆页面请求接口:\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<form method=\"post\" action=\"/sign_in\">\n    用户名：<input type=\"text\" name=\"username\" value=\"test\"><br>\n    密码：<input type=\"text\" name=\"password\" value=\"test\"><br>\n    <input type=\"text\" name=\"verification\"><br>\n    <input type=\"submit\" name=\"test\">\n</form>\n</body>\n</html>\n```\n\n```java\n@Controller\npublic class LoginController {\n    @GetMapping(\"/login_page\")\n    public String loginPage(){\n        return \"loginPage.html\";\n    }\n}\n\n```\n启动项目，访问localhost:8080/test\n跳转到了/login_page\n![image.png](https://upload-images.jianshu.io/upload_images/13612520-40e8574ede6fdade.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点登陆，debug看看有什么不同 新增的断点DaoAuthenticationProvider和MyUserDetailService\n前面执行顺序还是一样，到SecurityContextHolderAwareRequestFilter的时候我们注意一下\n```java\npublic class SecurityContextHolderAwareRequestFilter extends GenericFilterBean {\n    private String rolePrefix = \"ROLE_\";\n\n```\n我们权限设置的前缀就是从这来的 到后面讲投票器的时候再细说。\n到UsernamePasswordAuthenticationFilter这个过滤器后 下一步到了DaoAuthenticationProvider验证器，验证器执行的是其父类AbstractUserDetailsAuthenticationProvider的authenticate（）方法同时我们看到MyUserDetailService的loadUserByUsername被调用，最后，认证结束转发到访问前路径/test 重新走过滤器。流程和一开始的简单配置一样，走到FilterSecurityInterceptor的时候进入WebExpressionVoter了投票器；\n#### security的投票器：\n当过滤器链走到尽头（FilterSecurityInterceptor）下一步就是鉴权了，鉴权功能会交给AccessDecisionManager去处理，而AccessDecisionManager下又有多个投票器，其中WebExpressionVoter是security的一个默认投票器，我们来分析一下这个类：\n其有个这样的方法\n```java\n public int vote(Authentication authentication, FilterInvocation fi, Collection<ConfigAttribute> attributes)\n```\n返回int类型，1表示赞成，0表示弃权，-1表示反对。当所有投票器的vote执行结束，如果最终结果小于0表示不通过，\n方法的参数说明：\n1. FilterInvocation  可获得请求的相关信息，比如请求方式（get post）url 等\n2.authentication 是从securitycontext中拿出来的用户信息\n3.Collection<ConfigAttribute> 是可以访问该路径的权限集合。也就是前面SecurityContextHolderAwareRequestFilter 查找出来的权限，对于在WebSecurityConfigurerAdapter config方法中的hasRole(\"test\")权限规则并不是直接取权限 test,而是加了前缀rolePrefix（“ROLE_”），这个前缀也是可配置的配置方式：[https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/reference/htmlsingle/#appendix-faq-role-prefix](https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/reference/htmlsingle/#appendix-faq-role-prefix)\n\n\n一些基本的知识点交代的差不多了，现在，我进行下一步\n#### security魔改\n需求：我希望后端能做验证码校验，没通过校验的直接登录失败；\n实现方式：security给我们提供了在各个过滤器上追加过滤器的方法，我们在UsernamePasswordAuthenticationFilter追加一个过滤器\n```java\n\npublic class MyUsernamePasswordAuthenticationFilte extends UsernamePasswordAuthenticationFilter {\n    private RedisService redisService;\n    private boolean postOnly = true;\n\n    public MyUsernamePasswordAuthenticationFilte(RedisService redisService){\n        this.redisService=redisService;\n    }\n\n    @Override\n    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {\n        redisService.getcCode(request);\n        return super.attemptAuthentication(request,response);\n    }\n}\n\n```\n这里redisService 就是你要弄的验证逻辑，其他代码还是从父类那复制过来，不去动它。\n为什么要继承UsernamePasswordAuthenticationFilter 而不是继承AbstractAuthenticationProcessingFilter，这样做的好处是可以少写代码少踩坑。\n然后修改config\n```java\n @Autowired\n RedisService redisService;\n\n @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       http.formLogin().loginPage(\"/login_page\").passwordParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/sign_in\").permitAll()\n               .and().authorizeRequests().antMatchers(\"/test\").hasRole(\"test\").anyRequest().authenticated().and().csrf().disable();\n        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);\n    }\n\n\n    MyUsernamePasswordAuthenticationFilte getAuthenticationFilter(){\n        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = new MyUsernamePasswordAuthenticationFilte(redisService);\n        return myUsernamePasswordAuthenticationFilte;\n    }\n```\n我在加两个处理器，当我登陆成功或者失败，由我自己弄；\n登陆成功处理器\n```java\npublic class MyAuthenticationSuccessHandler extends SimpleUrlAuthenticationSuccessHandler {\n    @Override\n    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {\n\n        response.setContentType(\"application/json;charset=UTF-8\");\n        final PrintWriter writer = response.getWriter();\n        writer.write(\"{\\\"code\\\":\\\"200\\\",\\\"msg\\\":\\\"登录成功\\\"}\");\n        writer.close();\n    }\n}\n\n```\n登陆失败的处理器\n```java\npublic class MyUrlAuthenticationFailureHandler extends SimpleUrlAuthenticationFailureHandler {\n    @Override\n    public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException, ServletException {\n        response.setContentType(\"application/json;charset=UTF-8\");\n        final PrintWriter writer = response.getWriter();\n        if(exception.getMessage().equals(\"坏的凭证\")){\n            writer.write(\"{\\\"code\\\":\\\"401\\\",\\\"msg\\\":\\\"登录失败,用户名或者密码有误\\\"}\");\n            writer.close();\n        }else {\n            writer.write(\"{\\\"code\\\":\\\"401\\\",\\\"msg\\\":\\\"登录失败,\"+exception.getMessage()+\"\\\"}\");\n            writer.close();\n        }\n\n    }\n}\n\n```\n\n#### 说明：\n为什么要继承SimpleUrlAuthenticationFailureHandler和SimpleUrlAuthenticationSuccessHandler 而不是实现AuthenticationFailureHandler，还是那句话，为了少写代码少踩坑，我这里是返回json字符串，你也可以弄成重定向啥的，也比较容易。\nconfig再改一下：\n```java\n MyUsernamePasswordAuthenticationFilte getAuthenticationFilter(){\n        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = new MyUsernamePasswordAuthenticationFilte(redisService);\n        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(new MyUrlAuthenticationFailureHandler());\n        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(new MyAuthenticationSuccessHandler());\n        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(\"/sign_in\");\n        return myUsernamePasswordAuthenticationFilte;\n    }\n```\n这里要注意 myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(\"/sign_in\"); 因为 http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);并不是替换掉UsernamePasswordAuthenticationFilter，而是和你自己添加的过滤器同时存在，security会根据url判断该走哪个过滤器，如果loginProcessingUrl还是“/login”的话走的是UsernamePasswordAuthenticationFilter，这里要留意一下。\n\n\n现在再加需求，我不仅需要普通登录方式，我想其他登录方式；\n实现方式：加多个认证器，每个认证器对应一种登录方式\n```java\npublic class MyAuthenticationProvider  implements AuthenticationProvider {\n    private UserDetailsService userDetailsService;\n    private BCryptPasswordEncoder bCryptPasswordEncoder;\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n//       这里写验证逻辑\n        return null;\n    }\n\n    @Override\n    public boolean supports(Class<?> aClass) {\n        return false;\n    }\n}\n\n```\n在改SecurityConfig\n```java\n @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       http.formLogin().loginPage(\"/login_page\").passwordParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/sign_in\").permitAll()\n               .and().authorizeRequests().antMatchers(\"/test\").hasRole(\"test\").anyRequest().authenticated().and().csrf().disable();\n        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);\n    }\n\n\n    MyUsernamePasswordAuthenticationFilte getAuthenticationFilter(){\n        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = new MyUsernamePasswordAuthenticationFilte(redisService);\n        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(new MyUrlAuthenticationFailureHandler());\n        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(new MyAuthenticationSuccessHandler());\n        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(\"/sign_in\");\n        myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());\n        return myUsernamePasswordAuthenticationFilte;\n    }\n    MyAuthenticationProvider getMyAuthenticationProvider(){\n        MyAuthenticationProvider myAuthenticationProvider = new MyAuthenticationProvider(userDetailService,new BCryptPasswordEncoder());\n        return myAuthenticationProvider;\n    }\n    DaoAuthenticationProvider daoAuthenticationProvider(){\n        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();\n        daoAuthenticationProvider.setPasswordEncoder(new BCryptPasswordEncoder());\n        daoAuthenticationProvider.setUserDetailsService(userDetailService);\n        return daoAuthenticationProvider;\n    }\n    protected AuthenticationManager getAuthenticationManager()  {\n        ProviderManager authenticationManager = new ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));\n        return authenticationManager;\n    }\n```\n我再加需求：\n根据不同的客服端做不同的鉴权策略；\n实现方式：加投票器；\n```java\npublic class MyExpressionVoter extends WebExpressionVoter {\n    @Override\n    public int vote(Authentication authentication, FilterInvocation fi, Collection<ConfigAttribute> attributes) {\n//        这里写鉴权逻辑\n        return 0;\n    }\n}\n\n```\n\n再次改动config\n```java\n @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       http.formLogin().loginPage(\"/login_page\").passwordParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/sign_in\").permitAll()\n               .and().authorizeRequests().antMatchers(\"/test\").hasRole(\"test\").anyRequest().authenticated().accessDecisionManager(accessDecisionManager()).and().csrf().disable();\n        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);\n    }\n\n\n    MyUsernamePasswordAuthenticationFilte getAuthenticationFilter(){\n        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = new MyUsernamePasswordAuthenticationFilte(redisService);\n        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(new MyUrlAuthenticationFailureHandler());\n        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(new MyAuthenticationSuccessHandler());\n        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(\"/sign_in\");\n        myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());\n        return myUsernamePasswordAuthenticationFilte;\n    }\n    MyAuthenticationProvider getMyAuthenticationProvider(){\n        MyAuthenticationProvider myAuthenticationProvider = new MyAuthenticationProvider(userDetailService,new BCryptPasswordEncoder());\n        return myAuthenticationProvider;\n    }\n    DaoAuthenticationProvider daoAuthenticationProvider(){\n        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();\n        daoAuthenticationProvider.setPasswordEncoder(new BCryptPasswordEncoder());\n        daoAuthenticationProvider.setUserDetailsService(userDetailService);\n        return daoAuthenticationProvider;\n    }\n    protected AuthenticationManager getAuthenticationManager()  {\n        ProviderManager authenticationManager = new ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));\n        return authenticationManager;\n    }\n\n    public AccessDecisionManager accessDecisionManager(){\n        List<AccessDecisionVoter<? extends Object>> decisionVoters\n                = Arrays.asList(\n                new MyExpressionVoter(),\n                new WebExpressionVoter(),\n                new RoleVoter(),\n                new AuthenticatedVoter());\n        return new UnanimousBased(decisionVoters);\n    }\n```\n在加两个鉴权失败处理器\n```java\npublic class MyAccessDeniedHandler implements AccessDeniedHandler {\n    @Override\n    public void handle(HttpServletRequest httpServletRequest, HttpServletResponse response, AccessDeniedException e) throws IOException, ServletException {\n        response.setContentType(\"application/json;charset=UTF-8\");\n        PrintWriter writer = response.getWriter();\n        writer.write(\"{\\\"code\\\":\\\"403\\\",\\\"msg\\\":\\\"没有权限\\\"}\");\n        writer.close();\n    }\n}\n\n```\n再加一个登出处理器\n\n```java\n\npublic class MyLogoutSuccessHandler implements LogoutSuccessHandler {\n    @Override\n    public void onLogoutSuccess(HttpServletRequest httpServletRequest, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {\n        final PrintWriter writer = response.getWriter();\n\n        writer.write(\"{\\\"code\\\":\\\"200\\\",\\\"msg\\\":\\\"登出成功\\\"}\");\n        writer.close();\n    }\n}\n\n```\n最后修改SecurityConfig，最终模样为\n```java\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Autowired\n    RedisService redisService;\n    @Autowired\n    MyUserDetailService userDetailService;\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.userDetailsService(userDetailService).passwordEncoder(new BCryptPasswordEncoder());\n    }\n    @Override\n    public void configure(WebSecurity web) throws Exception {\n\n        web.ignoring().antMatchers(\"/resources/**/*.html\", \"/resources/**/*.js\",\n                \"/resources/**/*.css\", \"/resources/**/*.txt\",\n                \"/resources/**/*.png\", \"/**/*.bmp\", \"/**/*.gif\", \"/**/*.png\", \"/**/*.jpg\", \"/**/*.ico\");\n//        super.configure(web);\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       http.formLogin().loginPage(\"/login_page\").passwordParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/sign_in\").permitAll()\n               .and().authorizeRequests().antMatchers(\"/test\").hasRole(\"test\").anyRequest().authenticated().accessDecisionManager(accessDecisionManager())\n               .and().logout().logoutSuccessHandler(new MyLogoutSuccessHandler())\n               .and().csrf().disable();\n        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);\n        http.exceptionHandling().accessDeniedHandler(new MyAccessDeniedHandler());\n    }\n\n\n    MyUsernamePasswordAuthenticationFilte getAuthenticationFilter(){\n        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = new MyUsernamePasswordAuthenticationFilte(redisService);\n        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(new MyUrlAuthenticationFailureHandler());\n        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(new MyAuthenticationSuccessHandler());\n        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(\"/sign_in\");\n        myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());\n        return myUsernamePasswordAuthenticationFilte;\n    }\n    MyAuthenticationProvider getMyAuthenticationProvider(){\n        MyAuthenticationProvider myAuthenticationProvider = new MyAuthenticationProvider(userDetailService,new BCryptPasswordEncoder());\n        return myAuthenticationProvider;\n    }\n    DaoAuthenticationProvider daoAuthenticationProvider(){\n        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();\n        daoAuthenticationProvider.setPasswordEncoder(new BCryptPasswordEncoder());\n        daoAuthenticationProvider.setUserDetailsService(userDetailService);\n        return daoAuthenticationProvider;\n    }\n    protected AuthenticationManager getAuthenticationManager()  {\n        ProviderManager authenticationManager = new ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));\n        return authenticationManager;\n    }\n\n    public AccessDecisionManager accessDecisionManager(){\n        List<AccessDecisionVoter<? extends Object>> decisionVoters\n                = Arrays.asList(\n                new MyExpressionVoter(),\n                new WebExpressionVoter(),\n                new RoleVoter(),\n                new AuthenticatedVoter());\n        return new UnanimousBased(decisionVoters);\n\n    }\n}\n```\n\n你可能想要用jwtToken 做token鉴权的方式；\n也好做，我这里提一下思路，鉴权都是在投票器里面，那我们在投票器之前填充好securitycontext就成，然后实现一个自己的投票器；填充securitycontext随便找个过滤器http.addFilterAfter() 然后在过滤器里面填充好就行，至于拿token的接口，在config里用.permitAll()放行就行了，比上面的改法还简单，我就不写了。\n\n#### 题外话\n\n具体的代码可以参考我的项目[poseindon](https://github.com/muggle0/poseidon/wiki)，这种security改动方式我经过生产实践的，不会有问题。另外篇幅有点长 感谢大佬的阅读。\n","source":"_posts/springSecurity深度解析.md","raw":"---\ntitle: ' springSecurity深度解析'\ndate: 2019-04-11 21:27:31\ntags: security\n---\n作者：muggle\n\n#### 从一个基础的springsecurity开始，进行代码跟踪分析其原理\n\nspringsecurity是一个典型的责任链模式；我们先新建一个springboot项目，进行最基本的springsecurity配置，然后debug;我这里使用的开发工具是idea.建议大家也使用idea来进行日常开发。好了话不多说，开始：\n\n第一步\n\n新建springboot项目 maven依赖：\n```xml\n<dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.security</groupId>\n            <artifactId>spring-security-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n```\n\n启动项目，控制台上会输出这样一段字符串：\n```java\n2019-04-11 09:47:40.388  INFO 16716 --- [           main] .s.s.UserDetailsServiceAutoConfiguration :\n\nUsing generated security password: a6d55bc6-49fb-4241-a5ae-527e5e644731\n\n```\n\n<!--more-->\n现在我们访问 http://localhost:8080 会自动跳转到 http://localhost:8080/login，并弹出一个登陆页面，用户名输user,密码输上面的字符串： a6d55bc6-49fb-4241-a5ae-527e5e644731，每次字符串都是随机的，要留意你的控制台打印的字符串，登陆成功了，现在我们开始debug,看看一次登陆和一次登陆后访问一次不登陆访问这三种情况security都做了哪些事情。\n\n先写一个接口：\n```java\n\n@RestController\npublic class TestController {\n    @GetMapping(\"test\")\n    public String test(){\n        return \"hi 你好啊\";\n    }\n}\n```\nspringsecurity 执行过程是走一条过滤器链，所以我们要先明白，有哪些过滤器，并在过滤器上打上断点追踪，下面贴出各个过滤器名称及作用：\n\n>1、WebAsyncManagerIntegrationFilter\n将Security上下文与Spring Web中用于处理异步请求映射的 WebAsyncManager 进行集成。\n2、SecurityContextPersistenceFilter\n在每次请求处理之前将该请求相关的安全上下文信息加载到SecurityContextHolder中，然后在该次请求处理完成之后，将SecurityContextHolder中关于这次请求的信息存储到一个“仓储”中，然后将SecurityContextHolder中的信息清除\n例如在Session中维护一个用户的安全信息就是这个过滤器处理的。\n3、HeaderWriterFilter\n用于将头信息加入响应中\n4、CsrfFilter\n用于处理跨站请求伪造\n5、LogoutFilter\n用于处理退出登录\n6、UsernamePasswordAuthenticationFilter\n用于处理基于表单的登录请求，从表单中获取用户名和密码。默认情况下处理来自“/login”的请求。\n从表单中获取用户名和密码时，默认使用的表单name值为“username”和“password”，这两个值可以通过设置这个过滤器的usernameParameter 和 passwordParameter 两个参数的值进行修改。\n7、DefaultLoginPageGeneratingFilter\n如果没有配置登录页面，那系统初始化时就会配置这个过滤器，并且用于在需要进行登录时生成一个登录表单页面。\n8、BasicAuthenticationFilter\n处理请求头信息，DigestAuthenticationFilter\n9、RequestCacheAwareFilter\n用来处理请求的缓存\n10、SecurityContextHolderAwareRequestFilter\n11、AnonymousAuthenticationFilter\n12、SessionManagementFilter\n13、ExceptionTranslationFilter\n处理 AccessDeniedException 和 AuthenticationException 异常\n14、FilterSecurityInterceptor\nAbstractInterceptUrlConfigurer.createFilterSecurityInterceptor\n15、RememberMeAuthenticationFilter的作用是, 当用户没有登录而直接访问资源时, 从cookie里找出用户的信息, 如果Spring Security能够识别出用户提供的remember me cookie, 用户将不必填写用户名和密码, 而是直接登录进入系统.\n\n先不管那么多，ctr+alt+shift+t（或者按两下shift） 输入类名找到类，打断点，开始debug\n\n#### springsecurity 的默认登陆url是/login:我们访问一下来捋一捋：\n其代码顺序是：\n`WebAsyncManagerIntegrationFilter`  -> `SecurityContextPersistenceFilter` -> `HeaderWriterFilter` -> `CsrfFilter` -> `LogoutFilter` -> `DefaultLoginPageGeneratingFilter`\n\n然后浏览器会返回一个登陆页面：\n![image.png](https://upload-images.jianshu.io/upload_images/13612520-d6e336c80cbf30c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 说明：\n这其实是发起了一个请求登陆页面的请求，请求首先进入`WebAsyncManagerIntegrationFilter` 这个过滤器做了什么我们不必去关系，它下一个过滤器`SecurityContextPersistenceFilter` 通过request的attribute来上了一次请求锁，并且对SecurityContextHolder进行了管理；而SecurityContextHolder是对用户信息进行管理的一套系统，分为三大类\n\n1. SecurityContextHolder 对用户信息增删改查的操作\n 2. SecurityContext 将用户名，权限等封装成该对象\n 3. SecurityContextHolderStrategy 用于存储 SecurityContext\n\n默认的SecurityContextHolderStrategy 实现类是ThreadLocalSecurityContextHolderStrategy 它使用了ThreadLocal来存储了用户信息。\n下一个过滤器`HeaderWriterFilter`请求和响应封装了一下，用于`CsrfFilter`鉴别csrf攻击 `LogoutFilter`判断是不是登出操作，如果是则不执行下面的过滤器，而执行登出的相关操作，DefaultLoginPageGeneratingFilter生成登录页\n\n我们先输入正确的代码登陆一次\n\n通过跟踪代码发现其执行顺序是：\n`WebAsyncManagerIntegrationFilter` -> `SecurityContextPersistenceFilter` -> `HeaderWriterFilter`->`CsrfFilter`-> `LogoutFilter`->`UsernamePasswordAuthenticationFilter`->`WebAsyncManagerIntegrationFilter`->`SecurityContextPersistenceFilter`->`HeaderWriterFilter`->`CsrfFilter`->`LogoutFilter`->`DefaultLoginPageGeneratingFilter`->`BasicAuthenticationFilter`->`RequestCacheAwareFilter`->`SecurityContextHolderAwareRequestFilter`->`AnonymousAuthenticationFilter`->`SessionManagementFilter`->`ExceptionTranslationFilter`->`FilterSecurityInterceptor`->`SecurityContextPersistenceFilter`->`LogoutFilter`->`DefaultLoginPageGeneratingFilter`->`RequestCacheAwareFilter`->`SecurityContextHolderAwareRequestFilter`->`AnonymousAuthenticationFilter`->`SessionManagementFilter`->`ExceptionTranslationFilter`->`FilterSecurityInterceptor`\n\n这一次之所以过滤器链跑这么长是因为，这里可以认为发起了三次请求，第一次请求是登陆，登陆成功后转发到 url 为“/”的接口，而我没有这个接口，发生了重定向到“/error” 而“/error”页面是springboot请求失败的错误页面返回机制。\n`WebAsyncManagerIntegrationFilter` -> `SecurityContextPersistenceFilter` -> `HeaderWriterFilter`->`CsrfFilter`-> `LogoutFilter`->`UsernamePasswordAuthenticationFilter` 这一过程登陆请求。\n\n`WebAsyncManagerIntegrationFilter`->`SecurityContextPersistenceFilter`->`HeaderWriterFilter`->`CsrfFilter`->`LogoutFilter`->`DefaultLoginPageGeneratingFilter`->`BasicAuthenticationFilter`->`RequestCacheAwareFilter`->`SecurityContextHolderAwareRequestFilter`->`AnonymousAuthenticationFilter`->`SessionManagementFilter`->`ExceptionTranslationFilter`->`FilterSecurityInterceptor`\n这是转发到“/”的过程\n\n`SecurityContextPersistenceFilter`->`LogoutFilter`->`DefaultLoginPageGeneratingFilter`->`RequestCacheAwareFilter`->`SecurityContextHolderAwareRequestFilter`->`AnonymousAuthenticationFilter`->`SessionManagementFilter`->`ExceptionTranslationFilter`->`FilterSecurityInterceptor`\n这是重定向到error的过程\n\n接下来访问一下我们的/test接口\n看看执行顺序：\n`WebAsyncManagerIntegrationFilter`->`SecurityContextPersistenceFilter`->`HeaderWriterFilter`->`CsrfFilter`->`LogoutFilter`->`DefaultLoginPageGeneratingFilter`->`BasicAuthenticationFilter`->`RequestCacheAwareFilter`->`SecurityContextHolderAwareRequestFilter`->`AnonymousAuthenticationFilter`->`SessionManagementFilter`->`ExceptionTranslationFilter`->`FilterSecurityInterceptor`\n#### 说明：\nBasicAuthenticationFilter就是看你请求头里面有没有basic开头的东西，有的话做一些处理，对我们来说没啥用，不必去关心，RequestCacheAwareFilter对请求和响应做了额外处理 SecurityContextHolderAwareRequestFilter 也是对请求做了一些额外处理，我们同样不去关心它。AnonymousAuthenticationFilter过滤器是当securitycontext为null时填充一个匿名权限，这里被执行的原因因为security未配置完全，后面进一步配置了之后再回来详解。ExceptionTranslationFilter是对鉴权或者登陆异常的处理过滤器，FilterSecurityInterceptor可以看做是过滤器链的出口：\n```java\n public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        FilterInvocation fi = new FilterInvocation(request, response, chain);\n        this.invoke(fi);\n    }\n```\n这个fi就是请求的url值。\n\n现在我们完善一下security配置，让它复杂一点\n实现 GrantedAuthority：\n```java\n@Data\npublic class MyGrantedAuthority implements GrantedAuthority {\n    private String authority;\n}\n```\n实现UserDetails\n```java\n@Data\n@Accessors(chain = true)\npublic class MyUserDetail implements UserDetails {\n\n    private List<MyGrantedAuthority> authorities;\n\n    private String password;\n\n    private String username;\n\n    private boolean accountNonExpired;\n\n    private boolean accountNonLocked;\n\n    private boolean credentialsNonExpired;\n\n    private boolean enabled;\n\n}\n\n```\n\n实现UserDetailsService\n```java\n@Service\npublic class MyUserDetailService implements UserDetailsService {\n    @Override\n    public UserDetails loadUserByUsername(String s) throws UsernameNotFoundException {\n        List<MyGrantedAuthority> authorities = new ArrayList<>();\n        MyGrantedAuthority myGrantedAuthority = new MyGrantedAuthority();\n        myGrantedAuthority.setAuthority(\"ROLE_test\");\n        BCryptPasswordEncoder bCryptPasswordEncoder = new BCryptPasswordEncoder();\n        String test = bCryptPasswordEncoder.encode(\"test\");\n        authorities.add(myGrantedAuthority);\n        return new MyUserDetail().setAuthorities(authorities).setAccountNonExpired(true)\n                .setAccountNonLocked(true).setCredentialsNonExpired(true).setEnabled(true)\n                .setPassword(test).setUsername(\"test\");\n    }\n}\n```\n\n重写security适配器WebSecurityConfigurerAdapter：\n```java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Autowired\n    MyUserDetailService userDetailService;\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.userDetailsService(userDetailService).passwordEncoder(new BCryptPasswordEncoder());\n    }\n    @Override\n    public void configure(WebSecurity web) throws Exception {\n\n        web.ignoring().antMatchers(\"/resources/**/*.html\", \"/resources/**/*.js\",\n                \"/resources/**/*.css\", \"/resources/**/*.txt\",\n                \"/resources/**/*.png\", \"/**/*.bmp\", \"/**/*.gif\", \"/**/*.png\", \"/**/*.jpg\", \"/**/*.ico\");\n//        super.configure(web);\n    }\n\n   @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       http.formLogin().loginPage(\"/login_page\").passwordParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/sign_in\").permitAll()\n               .and().authorizeRequests().antMatchers(\"/test\").hasRole(\"test\").anyRequest().authenticated().and().csrf().disable();\n    }\n\n}\n```\n这里比开始又要复杂一点了，我先对相关操作进行说明一下：\n先从SecurityConfig说起\n\n重写了三个config方法\n1.第一个config涉及到的问题比较深——security的认证鉴权系统；\n先说认证的过程，当过滤器跑到usernamepasswordFilter的时候就开始做认证了\n#### security认证原理\n认证的工作是交给AuthenticationManager去做，AuthenticationManager下有多个认证器 AuthenticationProvider\n只要其中一个AuthenticationProvider通过认证就算登陆成功，而且在认证器中抛出异常，无法终止认证流程只是算该认证器未通过。\n第一个config就算配置了一个AuthenticationManagerBuilder 这个类会生成一个 AuthenticationManager和DaoAuthenticationProvider认证器，认证调用userdetailservice 的loadUserByUsername方法来和你传入的username passworde做比较，password 是通过BCryptPasswordEncoder来做编码后比较的，这样做是为了提高安全性。\n\n2.第二个config是对静态资源的放行；\n\n3.第三个config 配置了登录页请求路径，登陆认证路径，用户名密码属性，和一个test权限，注意一点：我在config配的是hasRole(\"test\")，我设置的权限是  myGrantedAuthority.setAuthority(\"ROLE_test\");为什么这样弄后面会说。\n接下来完善一下，边边角角，写个登陆的HTML,一个登陆页面请求接口:\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<form method=\"post\" action=\"/sign_in\">\n    用户名：<input type=\"text\" name=\"username\" value=\"test\"><br>\n    密码：<input type=\"text\" name=\"password\" value=\"test\"><br>\n    <input type=\"text\" name=\"verification\"><br>\n    <input type=\"submit\" name=\"test\">\n</form>\n</body>\n</html>\n```\n\n```java\n@Controller\npublic class LoginController {\n    @GetMapping(\"/login_page\")\n    public String loginPage(){\n        return \"loginPage.html\";\n    }\n}\n\n```\n启动项目，访问localhost:8080/test\n跳转到了/login_page\n![image.png](https://upload-images.jianshu.io/upload_images/13612520-40e8574ede6fdade.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点登陆，debug看看有什么不同 新增的断点DaoAuthenticationProvider和MyUserDetailService\n前面执行顺序还是一样，到SecurityContextHolderAwareRequestFilter的时候我们注意一下\n```java\npublic class SecurityContextHolderAwareRequestFilter extends GenericFilterBean {\n    private String rolePrefix = \"ROLE_\";\n\n```\n我们权限设置的前缀就是从这来的 到后面讲投票器的时候再细说。\n到UsernamePasswordAuthenticationFilter这个过滤器后 下一步到了DaoAuthenticationProvider验证器，验证器执行的是其父类AbstractUserDetailsAuthenticationProvider的authenticate（）方法同时我们看到MyUserDetailService的loadUserByUsername被调用，最后，认证结束转发到访问前路径/test 重新走过滤器。流程和一开始的简单配置一样，走到FilterSecurityInterceptor的时候进入WebExpressionVoter了投票器；\n#### security的投票器：\n当过滤器链走到尽头（FilterSecurityInterceptor）下一步就是鉴权了，鉴权功能会交给AccessDecisionManager去处理，而AccessDecisionManager下又有多个投票器，其中WebExpressionVoter是security的一个默认投票器，我们来分析一下这个类：\n其有个这样的方法\n```java\n public int vote(Authentication authentication, FilterInvocation fi, Collection<ConfigAttribute> attributes)\n```\n返回int类型，1表示赞成，0表示弃权，-1表示反对。当所有投票器的vote执行结束，如果最终结果小于0表示不通过，\n方法的参数说明：\n1. FilterInvocation  可获得请求的相关信息，比如请求方式（get post）url 等\n2.authentication 是从securitycontext中拿出来的用户信息\n3.Collection<ConfigAttribute> 是可以访问该路径的权限集合。也就是前面SecurityContextHolderAwareRequestFilter 查找出来的权限，对于在WebSecurityConfigurerAdapter config方法中的hasRole(\"test\")权限规则并不是直接取权限 test,而是加了前缀rolePrefix（“ROLE_”），这个前缀也是可配置的配置方式：[https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/reference/htmlsingle/#appendix-faq-role-prefix](https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/reference/htmlsingle/#appendix-faq-role-prefix)\n\n\n一些基本的知识点交代的差不多了，现在，我进行下一步\n#### security魔改\n需求：我希望后端能做验证码校验，没通过校验的直接登录失败；\n实现方式：security给我们提供了在各个过滤器上追加过滤器的方法，我们在UsernamePasswordAuthenticationFilter追加一个过滤器\n```java\n\npublic class MyUsernamePasswordAuthenticationFilte extends UsernamePasswordAuthenticationFilter {\n    private RedisService redisService;\n    private boolean postOnly = true;\n\n    public MyUsernamePasswordAuthenticationFilte(RedisService redisService){\n        this.redisService=redisService;\n    }\n\n    @Override\n    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {\n        redisService.getcCode(request);\n        return super.attemptAuthentication(request,response);\n    }\n}\n\n```\n这里redisService 就是你要弄的验证逻辑，其他代码还是从父类那复制过来，不去动它。\n为什么要继承UsernamePasswordAuthenticationFilter 而不是继承AbstractAuthenticationProcessingFilter，这样做的好处是可以少写代码少踩坑。\n然后修改config\n```java\n @Autowired\n RedisService redisService;\n\n @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       http.formLogin().loginPage(\"/login_page\").passwordParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/sign_in\").permitAll()\n               .and().authorizeRequests().antMatchers(\"/test\").hasRole(\"test\").anyRequest().authenticated().and().csrf().disable();\n        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);\n    }\n\n\n    MyUsernamePasswordAuthenticationFilte getAuthenticationFilter(){\n        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = new MyUsernamePasswordAuthenticationFilte(redisService);\n        return myUsernamePasswordAuthenticationFilte;\n    }\n```\n我在加两个处理器，当我登陆成功或者失败，由我自己弄；\n登陆成功处理器\n```java\npublic class MyAuthenticationSuccessHandler extends SimpleUrlAuthenticationSuccessHandler {\n    @Override\n    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {\n\n        response.setContentType(\"application/json;charset=UTF-8\");\n        final PrintWriter writer = response.getWriter();\n        writer.write(\"{\\\"code\\\":\\\"200\\\",\\\"msg\\\":\\\"登录成功\\\"}\");\n        writer.close();\n    }\n}\n\n```\n登陆失败的处理器\n```java\npublic class MyUrlAuthenticationFailureHandler extends SimpleUrlAuthenticationFailureHandler {\n    @Override\n    public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException, ServletException {\n        response.setContentType(\"application/json;charset=UTF-8\");\n        final PrintWriter writer = response.getWriter();\n        if(exception.getMessage().equals(\"坏的凭证\")){\n            writer.write(\"{\\\"code\\\":\\\"401\\\",\\\"msg\\\":\\\"登录失败,用户名或者密码有误\\\"}\");\n            writer.close();\n        }else {\n            writer.write(\"{\\\"code\\\":\\\"401\\\",\\\"msg\\\":\\\"登录失败,\"+exception.getMessage()+\"\\\"}\");\n            writer.close();\n        }\n\n    }\n}\n\n```\n\n#### 说明：\n为什么要继承SimpleUrlAuthenticationFailureHandler和SimpleUrlAuthenticationSuccessHandler 而不是实现AuthenticationFailureHandler，还是那句话，为了少写代码少踩坑，我这里是返回json字符串，你也可以弄成重定向啥的，也比较容易。\nconfig再改一下：\n```java\n MyUsernamePasswordAuthenticationFilte getAuthenticationFilter(){\n        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = new MyUsernamePasswordAuthenticationFilte(redisService);\n        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(new MyUrlAuthenticationFailureHandler());\n        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(new MyAuthenticationSuccessHandler());\n        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(\"/sign_in\");\n        return myUsernamePasswordAuthenticationFilte;\n    }\n```\n这里要注意 myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(\"/sign_in\"); 因为 http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);并不是替换掉UsernamePasswordAuthenticationFilter，而是和你自己添加的过滤器同时存在，security会根据url判断该走哪个过滤器，如果loginProcessingUrl还是“/login”的话走的是UsernamePasswordAuthenticationFilter，这里要留意一下。\n\n\n现在再加需求，我不仅需要普通登录方式，我想其他登录方式；\n实现方式：加多个认证器，每个认证器对应一种登录方式\n```java\npublic class MyAuthenticationProvider  implements AuthenticationProvider {\n    private UserDetailsService userDetailsService;\n    private BCryptPasswordEncoder bCryptPasswordEncoder;\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n//       这里写验证逻辑\n        return null;\n    }\n\n    @Override\n    public boolean supports(Class<?> aClass) {\n        return false;\n    }\n}\n\n```\n在改SecurityConfig\n```java\n @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       http.formLogin().loginPage(\"/login_page\").passwordParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/sign_in\").permitAll()\n               .and().authorizeRequests().antMatchers(\"/test\").hasRole(\"test\").anyRequest().authenticated().and().csrf().disable();\n        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);\n    }\n\n\n    MyUsernamePasswordAuthenticationFilte getAuthenticationFilter(){\n        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = new MyUsernamePasswordAuthenticationFilte(redisService);\n        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(new MyUrlAuthenticationFailureHandler());\n        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(new MyAuthenticationSuccessHandler());\n        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(\"/sign_in\");\n        myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());\n        return myUsernamePasswordAuthenticationFilte;\n    }\n    MyAuthenticationProvider getMyAuthenticationProvider(){\n        MyAuthenticationProvider myAuthenticationProvider = new MyAuthenticationProvider(userDetailService,new BCryptPasswordEncoder());\n        return myAuthenticationProvider;\n    }\n    DaoAuthenticationProvider daoAuthenticationProvider(){\n        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();\n        daoAuthenticationProvider.setPasswordEncoder(new BCryptPasswordEncoder());\n        daoAuthenticationProvider.setUserDetailsService(userDetailService);\n        return daoAuthenticationProvider;\n    }\n    protected AuthenticationManager getAuthenticationManager()  {\n        ProviderManager authenticationManager = new ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));\n        return authenticationManager;\n    }\n```\n我再加需求：\n根据不同的客服端做不同的鉴权策略；\n实现方式：加投票器；\n```java\npublic class MyExpressionVoter extends WebExpressionVoter {\n    @Override\n    public int vote(Authentication authentication, FilterInvocation fi, Collection<ConfigAttribute> attributes) {\n//        这里写鉴权逻辑\n        return 0;\n    }\n}\n\n```\n\n再次改动config\n```java\n @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       http.formLogin().loginPage(\"/login_page\").passwordParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/sign_in\").permitAll()\n               .and().authorizeRequests().antMatchers(\"/test\").hasRole(\"test\").anyRequest().authenticated().accessDecisionManager(accessDecisionManager()).and().csrf().disable();\n        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);\n    }\n\n\n    MyUsernamePasswordAuthenticationFilte getAuthenticationFilter(){\n        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = new MyUsernamePasswordAuthenticationFilte(redisService);\n        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(new MyUrlAuthenticationFailureHandler());\n        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(new MyAuthenticationSuccessHandler());\n        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(\"/sign_in\");\n        myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());\n        return myUsernamePasswordAuthenticationFilte;\n    }\n    MyAuthenticationProvider getMyAuthenticationProvider(){\n        MyAuthenticationProvider myAuthenticationProvider = new MyAuthenticationProvider(userDetailService,new BCryptPasswordEncoder());\n        return myAuthenticationProvider;\n    }\n    DaoAuthenticationProvider daoAuthenticationProvider(){\n        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();\n        daoAuthenticationProvider.setPasswordEncoder(new BCryptPasswordEncoder());\n        daoAuthenticationProvider.setUserDetailsService(userDetailService);\n        return daoAuthenticationProvider;\n    }\n    protected AuthenticationManager getAuthenticationManager()  {\n        ProviderManager authenticationManager = new ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));\n        return authenticationManager;\n    }\n\n    public AccessDecisionManager accessDecisionManager(){\n        List<AccessDecisionVoter<? extends Object>> decisionVoters\n                = Arrays.asList(\n                new MyExpressionVoter(),\n                new WebExpressionVoter(),\n                new RoleVoter(),\n                new AuthenticatedVoter());\n        return new UnanimousBased(decisionVoters);\n    }\n```\n在加两个鉴权失败处理器\n```java\npublic class MyAccessDeniedHandler implements AccessDeniedHandler {\n    @Override\n    public void handle(HttpServletRequest httpServletRequest, HttpServletResponse response, AccessDeniedException e) throws IOException, ServletException {\n        response.setContentType(\"application/json;charset=UTF-8\");\n        PrintWriter writer = response.getWriter();\n        writer.write(\"{\\\"code\\\":\\\"403\\\",\\\"msg\\\":\\\"没有权限\\\"}\");\n        writer.close();\n    }\n}\n\n```\n再加一个登出处理器\n\n```java\n\npublic class MyLogoutSuccessHandler implements LogoutSuccessHandler {\n    @Override\n    public void onLogoutSuccess(HttpServletRequest httpServletRequest, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {\n        final PrintWriter writer = response.getWriter();\n\n        writer.write(\"{\\\"code\\\":\\\"200\\\",\\\"msg\\\":\\\"登出成功\\\"}\");\n        writer.close();\n    }\n}\n\n```\n最后修改SecurityConfig，最终模样为\n```java\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Autowired\n    RedisService redisService;\n    @Autowired\n    MyUserDetailService userDetailService;\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.userDetailsService(userDetailService).passwordEncoder(new BCryptPasswordEncoder());\n    }\n    @Override\n    public void configure(WebSecurity web) throws Exception {\n\n        web.ignoring().antMatchers(\"/resources/**/*.html\", \"/resources/**/*.js\",\n                \"/resources/**/*.css\", \"/resources/**/*.txt\",\n                \"/resources/**/*.png\", \"/**/*.bmp\", \"/**/*.gif\", \"/**/*.png\", \"/**/*.jpg\", \"/**/*.ico\");\n//        super.configure(web);\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       http.formLogin().loginPage(\"/login_page\").passwordParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/sign_in\").permitAll()\n               .and().authorizeRequests().antMatchers(\"/test\").hasRole(\"test\").anyRequest().authenticated().accessDecisionManager(accessDecisionManager())\n               .and().logout().logoutSuccessHandler(new MyLogoutSuccessHandler())\n               .and().csrf().disable();\n        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);\n        http.exceptionHandling().accessDeniedHandler(new MyAccessDeniedHandler());\n    }\n\n\n    MyUsernamePasswordAuthenticationFilte getAuthenticationFilter(){\n        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = new MyUsernamePasswordAuthenticationFilte(redisService);\n        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(new MyUrlAuthenticationFailureHandler());\n        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(new MyAuthenticationSuccessHandler());\n        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(\"/sign_in\");\n        myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());\n        return myUsernamePasswordAuthenticationFilte;\n    }\n    MyAuthenticationProvider getMyAuthenticationProvider(){\n        MyAuthenticationProvider myAuthenticationProvider = new MyAuthenticationProvider(userDetailService,new BCryptPasswordEncoder());\n        return myAuthenticationProvider;\n    }\n    DaoAuthenticationProvider daoAuthenticationProvider(){\n        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();\n        daoAuthenticationProvider.setPasswordEncoder(new BCryptPasswordEncoder());\n        daoAuthenticationProvider.setUserDetailsService(userDetailService);\n        return daoAuthenticationProvider;\n    }\n    protected AuthenticationManager getAuthenticationManager()  {\n        ProviderManager authenticationManager = new ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));\n        return authenticationManager;\n    }\n\n    public AccessDecisionManager accessDecisionManager(){\n        List<AccessDecisionVoter<? extends Object>> decisionVoters\n                = Arrays.asList(\n                new MyExpressionVoter(),\n                new WebExpressionVoter(),\n                new RoleVoter(),\n                new AuthenticatedVoter());\n        return new UnanimousBased(decisionVoters);\n\n    }\n}\n```\n\n你可能想要用jwtToken 做token鉴权的方式；\n也好做，我这里提一下思路，鉴权都是在投票器里面，那我们在投票器之前填充好securitycontext就成，然后实现一个自己的投票器；填充securitycontext随便找个过滤器http.addFilterAfter() 然后在过滤器里面填充好就行，至于拿token的接口，在config里用.permitAll()放行就行了，比上面的改法还简单，我就不写了。\n\n#### 题外话\n\n具体的代码可以参考我的项目[poseindon](https://github.com/muggle0/poseidon/wiki)，这种security改动方式我经过生产实践的，不会有问题。另外篇幅有点长 感谢大佬的阅读。\n","slug":"springSecurity深度解析","published":1,"updated":"2019-04-12T06:32:00.472Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxtr0031vovm1hdhnwyi","content":"<p>作者：muggle</p>\n<h4 id=\"从一个基础的springsecurity开始，进行代码跟踪分析其原理\"><a href=\"#从一个基础的springsecurity开始，进行代码跟踪分析其原理\" class=\"headerlink\" title=\"从一个基础的springsecurity开始，进行代码跟踪分析其原理\"></a>从一个基础的springsecurity开始，进行代码跟踪分析其原理</h4><p>springsecurity是一个典型的责任链模式；我们先新建一个springboot项目，进行最基本的springsecurity配置，然后debug;我这里使用的开发工具是idea.建议大家也使用idea来进行日常开发。好了话不多说，开始：</p>\n<p>第一步</p>\n<p>新建springboot项目 maven依赖：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.security<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-security-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>启动项目，控制台上会输出这样一段字符串：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">04</span>-<span class=\"number\">11</span> <span class=\"number\">09</span>:<span class=\"number\">47</span>:<span class=\"number\">40.388</span>  INFO <span class=\"number\">16716</span> --- [           main] .s.s.UserDetailsServiceAutoConfiguration :</span><br><span class=\"line\"></span><br><span class=\"line\">Using generated security password: a6d55bc6-<span class=\"number\">49f</span>b-<span class=\"number\">4241</span>-a5ae-<span class=\"number\">527e5</span>e644731</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>现在我们访问 <a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a> 会自动跳转到 <a href=\"http://localhost:8080/login，并弹出一个登陆页面，用户名输user,密码输上面的字符串：\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/login，并弹出一个登陆页面，用户名输user,密码输上面的字符串：</a> a6d55bc6-49fb-4241-a5ae-527e5e644731，每次字符串都是随机的，要留意你的控制台打印的字符串，登陆成功了，现在我们开始debug,看看一次登陆和一次登陆后访问一次不登陆访问这三种情况security都做了哪些事情。</p>\n<p>先写一个接口：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"test\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"hi 你好啊\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>springsecurity 执行过程是走一条过滤器链，所以我们要先明白，有哪些过滤器，并在过滤器上打上断点追踪，下面贴出各个过滤器名称及作用：</p>\n<blockquote>\n<p>1、WebAsyncManagerIntegrationFilter<br>将Security上下文与Spring Web中用于处理异步请求映射的 WebAsyncManager 进行集成。<br>2、SecurityContextPersistenceFilter<br>在每次请求处理之前将该请求相关的安全上下文信息加载到SecurityContextHolder中，然后在该次请求处理完成之后，将SecurityContextHolder中关于这次请求的信息存储到一个“仓储”中，然后将SecurityContextHolder中的信息清除<br>例如在Session中维护一个用户的安全信息就是这个过滤器处理的。<br>3、HeaderWriterFilter<br>用于将头信息加入响应中<br>4、CsrfFilter<br>用于处理跨站请求伪造<br>5、LogoutFilter<br>用于处理退出登录<br>6、UsernamePasswordAuthenticationFilter<br>用于处理基于表单的登录请求，从表单中获取用户名和密码。默认情况下处理来自“/login”的请求。<br>从表单中获取用户名和密码时，默认使用的表单name值为“username”和“password”，这两个值可以通过设置这个过滤器的usernameParameter 和 passwordParameter 两个参数的值进行修改。<br>7、DefaultLoginPageGeneratingFilter<br>如果没有配置登录页面，那系统初始化时就会配置这个过滤器，并且用于在需要进行登录时生成一个登录表单页面。<br>8、BasicAuthenticationFilter<br>处理请求头信息，DigestAuthenticationFilter<br>9、RequestCacheAwareFilter<br>用来处理请求的缓存<br>10、SecurityContextHolderAwareRequestFilter<br>11、AnonymousAuthenticationFilter<br>12、SessionManagementFilter<br>13、ExceptionTranslationFilter<br>处理 AccessDeniedException 和 AuthenticationException 异常<br>14、FilterSecurityInterceptor<br>AbstractInterceptUrlConfigurer.createFilterSecurityInterceptor<br>15、RememberMeAuthenticationFilter的作用是, 当用户没有登录而直接访问资源时, 从cookie里找出用户的信息, 如果Spring Security能够识别出用户提供的remember me cookie, 用户将不必填写用户名和密码, 而是直接登录进入系统.</p>\n</blockquote>\n<p>先不管那么多，ctr+alt+shift+t（或者按两下shift） 输入类名找到类，打断点，开始debug</p>\n<h4 id=\"springsecurity-的默认登陆url是-login-我们访问一下来捋一捋：\"><a href=\"#springsecurity-的默认登陆url是-login-我们访问一下来捋一捋：\" class=\"headerlink\" title=\"springsecurity 的默认登陆url是/login:我们访问一下来捋一捋：\"></a>springsecurity 的默认登陆url是/login:我们访问一下来捋一捋：</h4><p>其代码顺序是：<br><code>WebAsyncManagerIntegrationFilter</code>  -&gt; <code>SecurityContextPersistenceFilter</code> -&gt; <code>HeaderWriterFilter</code> -&gt; <code>CsrfFilter</code> -&gt; <code>LogoutFilter</code> -&gt; <code>DefaultLoginPageGeneratingFilter</code></p>\n<p>然后浏览器会返回一个登陆页面：<br><img src=\"https://upload-images.jianshu.io/upload_images/13612520-d6e336c80cbf30c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h4 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h4><p>这其实是发起了一个请求登陆页面的请求，请求首先进入<code>WebAsyncManagerIntegrationFilter</code> 这个过滤器做了什么我们不必去关系，它下一个过滤器<code>SecurityContextPersistenceFilter</code> 通过request的attribute来上了一次请求锁，并且对SecurityContextHolder进行了管理；而SecurityContextHolder是对用户信息进行管理的一套系统，分为三大类</p>\n<ol>\n<li>SecurityContextHolder 对用户信息增删改查的操作<ol start=\"2\">\n<li>SecurityContext 将用户名，权限等封装成该对象</li>\n<li>SecurityContextHolderStrategy 用于存储 SecurityContext</li>\n</ol>\n</li>\n</ol>\n<p>默认的SecurityContextHolderStrategy 实现类是ThreadLocalSecurityContextHolderStrategy 它使用了ThreadLocal来存储了用户信息。<br>下一个过滤器<code>HeaderWriterFilter</code>请求和响应封装了一下，用于<code>CsrfFilter</code>鉴别csrf攻击 <code>LogoutFilter</code>判断是不是登出操作，如果是则不执行下面的过滤器，而执行登出的相关操作，DefaultLoginPageGeneratingFilter生成登录页</p>\n<p>我们先输入正确的代码登陆一次</p>\n<p>通过跟踪代码发现其执行顺序是：<br><code>WebAsyncManagerIntegrationFilter</code> -&gt; <code>SecurityContextPersistenceFilter</code> -&gt; <code>HeaderWriterFilter</code>-&gt;<code>CsrfFilter</code>-&gt; <code>LogoutFilter</code>-&gt;<code>UsernamePasswordAuthenticationFilter</code>-&gt;<code>WebAsyncManagerIntegrationFilter</code>-&gt;<code>SecurityContextPersistenceFilter</code>-&gt;<code>HeaderWriterFilter</code>-&gt;<code>CsrfFilter</code>-&gt;<code>LogoutFilter</code>-&gt;<code>DefaultLoginPageGeneratingFilter</code>-&gt;<code>BasicAuthenticationFilter</code>-&gt;<code>RequestCacheAwareFilter</code>-&gt;<code>SecurityContextHolderAwareRequestFilter</code>-&gt;<code>AnonymousAuthenticationFilter</code>-&gt;<code>SessionManagementFilter</code>-&gt;<code>ExceptionTranslationFilter</code>-&gt;<code>FilterSecurityInterceptor</code>-&gt;<code>SecurityContextPersistenceFilter</code>-&gt;<code>LogoutFilter</code>-&gt;<code>DefaultLoginPageGeneratingFilter</code>-&gt;<code>RequestCacheAwareFilter</code>-&gt;<code>SecurityContextHolderAwareRequestFilter</code>-&gt;<code>AnonymousAuthenticationFilter</code>-&gt;<code>SessionManagementFilter</code>-&gt;<code>ExceptionTranslationFilter</code>-&gt;<code>FilterSecurityInterceptor</code></p>\n<p>这一次之所以过滤器链跑这么长是因为，这里可以认为发起了三次请求，第一次请求是登陆，登陆成功后转发到 url 为“/”的接口，而我没有这个接口，发生了重定向到“/error” 而“/error”页面是springboot请求失败的错误页面返回机制。<br><code>WebAsyncManagerIntegrationFilter</code> -&gt; <code>SecurityContextPersistenceFilter</code> -&gt; <code>HeaderWriterFilter</code>-&gt;<code>CsrfFilter</code>-&gt; <code>LogoutFilter</code>-&gt;<code>UsernamePasswordAuthenticationFilter</code> 这一过程登陆请求。</p>\n<p><code>WebAsyncManagerIntegrationFilter</code>-&gt;<code>SecurityContextPersistenceFilter</code>-&gt;<code>HeaderWriterFilter</code>-&gt;<code>CsrfFilter</code>-&gt;<code>LogoutFilter</code>-&gt;<code>DefaultLoginPageGeneratingFilter</code>-&gt;<code>BasicAuthenticationFilter</code>-&gt;<code>RequestCacheAwareFilter</code>-&gt;<code>SecurityContextHolderAwareRequestFilter</code>-&gt;<code>AnonymousAuthenticationFilter</code>-&gt;<code>SessionManagementFilter</code>-&gt;<code>ExceptionTranslationFilter</code>-&gt;<code>FilterSecurityInterceptor</code><br>这是转发到“/”的过程</p>\n<p><code>SecurityContextPersistenceFilter</code>-&gt;<code>LogoutFilter</code>-&gt;<code>DefaultLoginPageGeneratingFilter</code>-&gt;<code>RequestCacheAwareFilter</code>-&gt;<code>SecurityContextHolderAwareRequestFilter</code>-&gt;<code>AnonymousAuthenticationFilter</code>-&gt;<code>SessionManagementFilter</code>-&gt;<code>ExceptionTranslationFilter</code>-&gt;<code>FilterSecurityInterceptor</code><br>这是重定向到error的过程</p>\n<p>接下来访问一下我们的/test接口<br>看看执行顺序：<br><code>WebAsyncManagerIntegrationFilter</code>-&gt;<code>SecurityContextPersistenceFilter</code>-&gt;<code>HeaderWriterFilter</code>-&gt;<code>CsrfFilter</code>-&gt;<code>LogoutFilter</code>-&gt;<code>DefaultLoginPageGeneratingFilter</code>-&gt;<code>BasicAuthenticationFilter</code>-&gt;<code>RequestCacheAwareFilter</code>-&gt;<code>SecurityContextHolderAwareRequestFilter</code>-&gt;<code>AnonymousAuthenticationFilter</code>-&gt;<code>SessionManagementFilter</code>-&gt;<code>ExceptionTranslationFilter</code>-&gt;<code>FilterSecurityInterceptor</code></p>\n<h4 id=\"说明：-1\"><a href=\"#说明：-1\" class=\"headerlink\" title=\"说明：\"></a>说明：</h4><p>BasicAuthenticationFilter就是看你请求头里面有没有basic开头的东西，有的话做一些处理，对我们来说没啥用，不必去关心，RequestCacheAwareFilter对请求和响应做了额外处理 SecurityContextHolderAwareRequestFilter 也是对请求做了一些额外处理，我们同样不去关心它。AnonymousAuthenticationFilter过滤器是当securitycontext为null时填充一个匿名权限，这里被执行的原因因为security未配置完全，后面进一步配置了之后再回来详解。ExceptionTranslationFilter是对鉴权或者登陆异常的处理过滤器，FilterSecurityInterceptor可以看做是过滤器链的出口：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">       FilterInvocation fi = <span class=\"keyword\">new</span> FilterInvocation(request, response, chain);</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.invoke(fi);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个fi就是请求的url值。</p>\n<p>现在我们完善一下security配置，让它复杂一点<br>实现 GrantedAuthority：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGrantedAuthority</span> <span class=\"keyword\">implements</span> <span class=\"title\">GrantedAuthority</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String authority;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>实现UserDetails<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Accessors</span>(chain = <span class=\"keyword\">true</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUserDetail</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDetails</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;MyGrantedAuthority&gt; authorities;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> accountNonExpired;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> accountNonLocked;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> credentialsNonExpired;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> enabled;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>实现UserDetailsService<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUserDetailService</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDetailsService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UserDetails <span class=\"title\">loadUserByUsername</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class=\"line\">        List&lt;MyGrantedAuthority&gt; authorities = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        MyGrantedAuthority myGrantedAuthority = <span class=\"keyword\">new</span> MyGrantedAuthority();</span><br><span class=\"line\">        myGrantedAuthority.setAuthority(<span class=\"string\">\"ROLE_test\"</span>);</span><br><span class=\"line\">        BCryptPasswordEncoder bCryptPasswordEncoder = <span class=\"keyword\">new</span> BCryptPasswordEncoder();</span><br><span class=\"line\">        String test = bCryptPasswordEncoder.encode(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\">        authorities.add(myGrantedAuthority);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyUserDetail().setAuthorities(authorities).setAccountNonExpired(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">                .setAccountNonLocked(<span class=\"keyword\">true</span>).setCredentialsNonExpired(<span class=\"keyword\">true</span>).setEnabled(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">                .setPassword(test).setUsername(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>重写security适配器WebSecurityConfigurerAdapter：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    MyUserDetailService userDetailService;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        auth.userDetailsService(userDetailService).passwordEncoder(<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(WebSecurity web)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        web.ignoring().antMatchers(<span class=\"string\">\"/resources/**/*.html\"</span>, <span class=\"string\">\"/resources/**/*.js\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"/resources/**/*.css\"</span>, <span class=\"string\">\"/resources/**/*.txt\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"/resources/**/*.png\"</span>, <span class=\"string\">\"/**/*.bmp\"</span>, <span class=\"string\">\"/**/*.gif\"</span>, <span class=\"string\">\"/**/*.png\"</span>, <span class=\"string\">\"/**/*.jpg\"</span>, <span class=\"string\">\"/**/*.ico\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//        super.configure(web);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">       http.formLogin().loginPage(<span class=\"string\">\"/login_page\"</span>).passwordParameter(<span class=\"string\">\"username\"</span>).passwordParameter(<span class=\"string\">\"password\"</span>).loginProcessingUrl(<span class=\"string\">\"/sign_in\"</span>).permitAll()</span><br><span class=\"line\">               .and().authorizeRequests().antMatchers(<span class=\"string\">\"/test\"</span>).hasRole(<span class=\"string\">\"test\"</span>).anyRequest().authenticated().and().csrf().disable();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里比开始又要复杂一点了，我先对相关操作进行说明一下：<br>先从SecurityConfig说起</p>\n<p>重写了三个config方法<br>1.第一个config涉及到的问题比较深——security的认证鉴权系统；<br>先说认证的过程，当过滤器跑到usernamepasswordFilter的时候就开始做认证了</p>\n<h4 id=\"security认证原理\"><a href=\"#security认证原理\" class=\"headerlink\" title=\"security认证原理\"></a>security认证原理</h4><p>认证的工作是交给AuthenticationManager去做，AuthenticationManager下有多个认证器 AuthenticationProvider<br>只要其中一个AuthenticationProvider通过认证就算登陆成功，而且在认证器中抛出异常，无法终止认证流程只是算该认证器未通过。<br>第一个config就算配置了一个AuthenticationManagerBuilder 这个类会生成一个 AuthenticationManager和DaoAuthenticationProvider认证器，认证调用userdetailservice 的loadUserByUsername方法来和你传入的username passworde做比较，password 是通过BCryptPasswordEncoder来做编码后比较的，这样做是为了提高安全性。</p>\n<p>2.第二个config是对静态资源的放行；</p>\n<p>3.第三个config 配置了登录页请求路径，登陆认证路径，用户名密码属性，和一个test权限，注意一点：我在config配的是hasRole(“test”)，我设置的权限是  myGrantedAuthority.setAuthority(“ROLE_test”);为什么这样弄后面会说。<br>接下来完善一下，边边角角，写个登陆的HTML,一个登陆页面请求接口:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/sign_in\"</span>&gt;</span></span><br><span class=\"line\">    用户名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"test\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"test\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"verification\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"test\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/login_page\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">loginPage</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"loginPage.html\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动项目，访问localhost:8080/test<br>跳转到了/login_page<br><img src=\"https://upload-images.jianshu.io/upload_images/13612520-40e8574ede6fdade.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>点登陆，debug看看有什么不同 新增的断点DaoAuthenticationProvider和MyUserDetailService<br>前面执行顺序还是一样，到SecurityContextHolderAwareRequestFilter的时候我们注意一下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityContextHolderAwareRequestFilter</span> <span class=\"keyword\">extends</span> <span class=\"title\">GenericFilterBean</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String rolePrefix = <span class=\"string\">\"ROLE_\"</span>;</span><br></pre></td></tr></table></figure></p>\n<p>我们权限设置的前缀就是从这来的 到后面讲投票器的时候再细说。<br>到UsernamePasswordAuthenticationFilter这个过滤器后 下一步到了DaoAuthenticationProvider验证器，验证器执行的是其父类AbstractUserDetailsAuthenticationProvider的authenticate（）方法同时我们看到MyUserDetailService的loadUserByUsername被调用，最后，认证结束转发到访问前路径/test 重新走过滤器。流程和一开始的简单配置一样，走到FilterSecurityInterceptor的时候进入WebExpressionVoter了投票器；</p>\n<h4 id=\"security的投票器：\"><a href=\"#security的投票器：\" class=\"headerlink\" title=\"security的投票器：\"></a>security的投票器：</h4><p>当过滤器链走到尽头（FilterSecurityInterceptor）下一步就是鉴权了，鉴权功能会交给AccessDecisionManager去处理，而AccessDecisionManager下又有多个投票器，其中WebExpressionVoter是security的一个默认投票器，我们来分析一下这个类：<br>其有个这样的方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">vote</span><span class=\"params\">(Authentication authentication, FilterInvocation fi, Collection&lt;ConfigAttribute&gt; attributes)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>返回int类型，1表示赞成，0表示弃权，-1表示反对。当所有投票器的vote执行结束，如果最终结果小于0表示不通过，<br>方法的参数说明：</p>\n<ol>\n<li>FilterInvocation  可获得请求的相关信息，比如请求方式（get post）url 等<br>2.authentication 是从securitycontext中拿出来的用户信息<br>3.Collection<configattribute> 是可以访问该路径的权限集合。也就是前面SecurityContextHolderAwareRequestFilter 查找出来的权限，对于在WebSecurityConfigurerAdapter config方法中的hasRole(“test”)权限规则并不是直接取权限 test,而是加了前缀rolePrefix（“ROLE_”），这个前缀也是可配置的配置方式：<a href=\"https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/reference/htmlsingle/#appendix-faq-role-prefix\" target=\"_blank\" rel=\"noopener\">https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/reference/htmlsingle/#appendix-faq-role-prefix</a></configattribute></li>\n</ol>\n<p>一些基本的知识点交代的差不多了，现在，我进行下一步</p>\n<h4 id=\"security魔改\"><a href=\"#security魔改\" class=\"headerlink\" title=\"security魔改\"></a>security魔改</h4><p>需求：我希望后端能做验证码校验，没通过校验的直接登录失败；<br>实现方式：security给我们提供了在各个过滤器上追加过滤器的方法，我们在UsernamePasswordAuthenticationFilter追加一个过滤器<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUsernamePasswordAuthenticationFilte</span> <span class=\"keyword\">extends</span> <span class=\"title\">UsernamePasswordAuthenticationFilter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisService redisService;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> postOnly = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyUsernamePasswordAuthenticationFilte</span><span class=\"params\">(RedisService redisService)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.redisService=redisService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Authentication <span class=\"title\">attemptAuthentication</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> AuthenticationException </span>&#123;</span><br><span class=\"line\">        redisService.getcCode(request);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.attemptAuthentication(request,response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里redisService 就是你要弄的验证逻辑，其他代码还是从父类那复制过来，不去动它。<br>为什么要继承UsernamePasswordAuthenticationFilter 而不是继承AbstractAuthenticationProcessingFilter，这样做的好处是可以少写代码少踩坑。<br>然后修改config<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">RedisService redisService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">      http.formLogin().loginPage(<span class=\"string\">\"/login_page\"</span>).passwordParameter(<span class=\"string\">\"username\"</span>).passwordParameter(<span class=\"string\">\"password\"</span>).loginProcessingUrl(<span class=\"string\">\"/sign_in\"</span>).permitAll()</span><br><span class=\"line\">              .and().authorizeRequests().antMatchers(<span class=\"string\">\"/test\"</span>).hasRole(<span class=\"string\">\"test\"</span>).anyRequest().authenticated().and().csrf().disable();</span><br><span class=\"line\">       http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\">MyUsernamePasswordAuthenticationFilte <span class=\"title\">getAuthenticationFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = <span class=\"keyword\">new</span> MyUsernamePasswordAuthenticationFilte(redisService);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> myUsernamePasswordAuthenticationFilte;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>我在加两个处理器，当我登陆成功或者失败，由我自己弄；<br>登陆成功处理器<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAuthenticationSuccessHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleUrlAuthenticationSuccessHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAuthenticationSuccess</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"application/json;charset=UTF-8\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> PrintWriter writer = response.getWriter();</span><br><span class=\"line\">        writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"200\\\",\\\"msg\\\":\\\"登录成功\\\"&#125;\"</span>);</span><br><span class=\"line\">        writer.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>登陆失败的处理器<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUrlAuthenticationFailureHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleUrlAuthenticationFailureHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAuthenticationFailure</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"application/json;charset=UTF-8\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> PrintWriter writer = response.getWriter();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(exception.getMessage().equals(<span class=\"string\">\"坏的凭证\"</span>))&#123;</span><br><span class=\"line\">            writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"401\\\",\\\"msg\\\":\\\"登录失败,用户名或者密码有误\\\"&#125;\"</span>);</span><br><span class=\"line\">            writer.close();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"401\\\",\\\"msg\\\":\\\"登录失败,\"</span>+exception.getMessage()+<span class=\"string\">\"\\\"&#125;\"</span>);</span><br><span class=\"line\">            writer.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"说明：-2\"><a href=\"#说明：-2\" class=\"headerlink\" title=\"说明：\"></a>说明：</h4><p>为什么要继承SimpleUrlAuthenticationFailureHandler和SimpleUrlAuthenticationSuccessHandler 而不是实现AuthenticationFailureHandler，还是那句话，为了少写代码少踩坑，我这里是返回json字符串，你也可以弄成重定向啥的，也比较容易。<br>config再改一下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">MyUsernamePasswordAuthenticationFilte <span class=\"title\">getAuthenticationFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = <span class=\"keyword\">new</span> MyUsernamePasswordAuthenticationFilte(redisService);</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(<span class=\"keyword\">new</span> MyUrlAuthenticationFailureHandler());</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(<span class=\"keyword\">new</span> MyAuthenticationSuccessHandler());</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(<span class=\"string\">\"/sign_in\"</span>);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> myUsernamePasswordAuthenticationFilte;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里要注意 myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(“/sign_in”); 因为 http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);并不是替换掉UsernamePasswordAuthenticationFilter，而是和你自己添加的过滤器同时存在，security会根据url判断该走哪个过滤器，如果loginProcessingUrl还是“/login”的话走的是UsernamePasswordAuthenticationFilter，这里要留意一下。</p>\n<p>现在再加需求，我不仅需要普通登录方式，我想其他登录方式；<br>实现方式：加多个认证器，每个认证器对应一种登录方式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAuthenticationProvider</span>  <span class=\"keyword\">implements</span> <span class=\"title\">AuthenticationProvider</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserDetailsService userDetailsService;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BCryptPasswordEncoder bCryptPasswordEncoder;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Authentication <span class=\"title\">authenticate</span><span class=\"params\">(Authentication authentication)</span> <span class=\"keyword\">throws</span> AuthenticationException </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//       这里写验证逻辑</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supports</span><span class=\"params\">(Class&lt;?&gt; aClass)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在改SecurityConfig<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">      http.formLogin().loginPage(<span class=\"string\">\"/login_page\"</span>).passwordParameter(<span class=\"string\">\"username\"</span>).passwordParameter(<span class=\"string\">\"password\"</span>).loginProcessingUrl(<span class=\"string\">\"/sign_in\"</span>).permitAll()</span><br><span class=\"line\">              .and().authorizeRequests().antMatchers(<span class=\"string\">\"/test\"</span>).hasRole(<span class=\"string\">\"test\"</span>).anyRequest().authenticated().and().csrf().disable();</span><br><span class=\"line\">       http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\">MyUsernamePasswordAuthenticationFilte <span class=\"title\">getAuthenticationFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = <span class=\"keyword\">new</span> MyUsernamePasswordAuthenticationFilte(redisService);</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(<span class=\"keyword\">new</span> MyUrlAuthenticationFailureHandler());</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(<span class=\"keyword\">new</span> MyAuthenticationSuccessHandler());</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(<span class=\"string\">\"/sign_in\"</span>);</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());</span><br><span class=\"line\">       <span class=\"keyword\">return</span> myUsernamePasswordAuthenticationFilte;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\">MyAuthenticationProvider <span class=\"title\">getMyAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       MyAuthenticationProvider myAuthenticationProvider = <span class=\"keyword\">new</span> MyAuthenticationProvider(userDetailService,<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">       <span class=\"keyword\">return</span> myAuthenticationProvider;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\">DaoAuthenticationProvider <span class=\"title\">daoAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       DaoAuthenticationProvider daoAuthenticationProvider = <span class=\"keyword\">new</span> DaoAuthenticationProvider();</span><br><span class=\"line\">       daoAuthenticationProvider.setPasswordEncoder(<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">       daoAuthenticationProvider.setUserDetailsService(userDetailService);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> daoAuthenticationProvider;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> AuthenticationManager <span class=\"title\">getAuthenticationManager</span><span class=\"params\">()</span>  </span>&#123;</span><br><span class=\"line\">       ProviderManager authenticationManager = <span class=\"keyword\">new</span> ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));</span><br><span class=\"line\">       <span class=\"keyword\">return</span> authenticationManager;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>我再加需求：<br>根据不同的客服端做不同的鉴权策略；<br>实现方式：加投票器；<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyExpressionVoter</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebExpressionVoter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">vote</span><span class=\"params\">(Authentication authentication, FilterInvocation fi, Collection&lt;ConfigAttribute&gt; attributes)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        这里写鉴权逻辑</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再次改动config<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">      http.formLogin().loginPage(<span class=\"string\">\"/login_page\"</span>).passwordParameter(<span class=\"string\">\"username\"</span>).passwordParameter(<span class=\"string\">\"password\"</span>).loginProcessingUrl(<span class=\"string\">\"/sign_in\"</span>).permitAll()</span><br><span class=\"line\">              .and().authorizeRequests().antMatchers(<span class=\"string\">\"/test\"</span>).hasRole(<span class=\"string\">\"test\"</span>).anyRequest().authenticated().accessDecisionManager(accessDecisionManager()).and().csrf().disable();</span><br><span class=\"line\">       http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\">MyUsernamePasswordAuthenticationFilte <span class=\"title\">getAuthenticationFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = <span class=\"keyword\">new</span> MyUsernamePasswordAuthenticationFilte(redisService);</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(<span class=\"keyword\">new</span> MyUrlAuthenticationFailureHandler());</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(<span class=\"keyword\">new</span> MyAuthenticationSuccessHandler());</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(<span class=\"string\">\"/sign_in\"</span>);</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());</span><br><span class=\"line\">       <span class=\"keyword\">return</span> myUsernamePasswordAuthenticationFilte;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\">MyAuthenticationProvider <span class=\"title\">getMyAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       MyAuthenticationProvider myAuthenticationProvider = <span class=\"keyword\">new</span> MyAuthenticationProvider(userDetailService,<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">       <span class=\"keyword\">return</span> myAuthenticationProvider;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\">DaoAuthenticationProvider <span class=\"title\">daoAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       DaoAuthenticationProvider daoAuthenticationProvider = <span class=\"keyword\">new</span> DaoAuthenticationProvider();</span><br><span class=\"line\">       daoAuthenticationProvider.setPasswordEncoder(<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">       daoAuthenticationProvider.setUserDetailsService(userDetailService);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> daoAuthenticationProvider;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> AuthenticationManager <span class=\"title\">getAuthenticationManager</span><span class=\"params\">()</span>  </span>&#123;</span><br><span class=\"line\">       ProviderManager authenticationManager = <span class=\"keyword\">new</span> ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));</span><br><span class=\"line\">       <span class=\"keyword\">return</span> authenticationManager;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> AccessDecisionManager <span class=\"title\">accessDecisionManager</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       List&lt;AccessDecisionVoter&lt;? extends Object&gt;&gt; decisionVoters</span><br><span class=\"line\">               = Arrays.asList(</span><br><span class=\"line\">               <span class=\"keyword\">new</span> MyExpressionVoter(),</span><br><span class=\"line\">               <span class=\"keyword\">new</span> WebExpressionVoter(),</span><br><span class=\"line\">               <span class=\"keyword\">new</span> RoleVoter(),</span><br><span class=\"line\">               <span class=\"keyword\">new</span> AuthenticatedVoter());</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UnanimousBased(decisionVoters);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>在加两个鉴权失败处理器<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAccessDeniedHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">AccessDeniedHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(HttpServletRequest httpServletRequest, HttpServletResponse response, AccessDeniedException e)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"application/json;charset=UTF-8\"</span>);</span><br><span class=\"line\">        PrintWriter writer = response.getWriter();</span><br><span class=\"line\">        writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"403\\\",\\\"msg\\\":\\\"没有权限\\\"&#125;\"</span>);</span><br><span class=\"line\">        writer.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再加一个登出处理器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLogoutSuccessHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">LogoutSuccessHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLogoutSuccess</span><span class=\"params\">(HttpServletRequest httpServletRequest, HttpServletResponse response, Authentication authentication)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> PrintWriter writer = response.getWriter();</span><br><span class=\"line\"></span><br><span class=\"line\">        writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"200\\\",\\\"msg\\\":\\\"登出成功\\\"&#125;\"</span>);</span><br><span class=\"line\">        writer.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后修改SecurityConfig，最终模样为<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    RedisService redisService;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    MyUserDetailService userDetailService;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        auth.userDetailsService(userDetailService).passwordEncoder(<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(WebSecurity web)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        web.ignoring().antMatchers(<span class=\"string\">\"/resources/**/*.html\"</span>, <span class=\"string\">\"/resources/**/*.js\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"/resources/**/*.css\"</span>, <span class=\"string\">\"/resources/**/*.txt\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"/resources/**/*.png\"</span>, <span class=\"string\">\"/**/*.bmp\"</span>, <span class=\"string\">\"/**/*.gif\"</span>, <span class=\"string\">\"/**/*.png\"</span>, <span class=\"string\">\"/**/*.jpg\"</span>, <span class=\"string\">\"/**/*.ico\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//        super.configure(web);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">       http.formLogin().loginPage(<span class=\"string\">\"/login_page\"</span>).passwordParameter(<span class=\"string\">\"username\"</span>).passwordParameter(<span class=\"string\">\"password\"</span>).loginProcessingUrl(<span class=\"string\">\"/sign_in\"</span>).permitAll()</span><br><span class=\"line\">               .and().authorizeRequests().antMatchers(<span class=\"string\">\"/test\"</span>).hasRole(<span class=\"string\">\"test\"</span>).anyRequest().authenticated().accessDecisionManager(accessDecisionManager())</span><br><span class=\"line\">               .and().logout().logoutSuccessHandler(<span class=\"keyword\">new</span> MyLogoutSuccessHandler())</span><br><span class=\"line\">               .and().csrf().disable();</span><br><span class=\"line\">        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\">        http.exceptionHandling().accessDeniedHandler(<span class=\"keyword\">new</span> MyAccessDeniedHandler());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">MyUsernamePasswordAuthenticationFilte <span class=\"title\">getAuthenticationFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = <span class=\"keyword\">new</span> MyUsernamePasswordAuthenticationFilte(redisService);</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(<span class=\"keyword\">new</span> MyUrlAuthenticationFailureHandler());</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(<span class=\"keyword\">new</span> MyAuthenticationSuccessHandler());</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(<span class=\"string\">\"/sign_in\"</span>);</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myUsernamePasswordAuthenticationFilte;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">MyAuthenticationProvider <span class=\"title\">getMyAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        MyAuthenticationProvider myAuthenticationProvider = <span class=\"keyword\">new</span> MyAuthenticationProvider(userDetailService,<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myAuthenticationProvider;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">DaoAuthenticationProvider <span class=\"title\">daoAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        DaoAuthenticationProvider daoAuthenticationProvider = <span class=\"keyword\">new</span> DaoAuthenticationProvider();</span><br><span class=\"line\">        daoAuthenticationProvider.setPasswordEncoder(<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">        daoAuthenticationProvider.setUserDetailsService(userDetailService);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> daoAuthenticationProvider;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> AuthenticationManager <span class=\"title\">getAuthenticationManager</span><span class=\"params\">()</span>  </span>&#123;</span><br><span class=\"line\">        ProviderManager authenticationManager = <span class=\"keyword\">new</span> ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> authenticationManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AccessDecisionManager <span class=\"title\">accessDecisionManager</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;AccessDecisionVoter&lt;? extends Object&gt;&gt; decisionVoters</span><br><span class=\"line\">                = Arrays.asList(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> MyExpressionVoter(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> WebExpressionVoter(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> RoleVoter(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> AuthenticatedVoter());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UnanimousBased(decisionVoters);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>你可能想要用jwtToken 做token鉴权的方式；<br>也好做，我这里提一下思路，鉴权都是在投票器里面，那我们在投票器之前填充好securitycontext就成，然后实现一个自己的投票器；填充securitycontext随便找个过滤器http.addFilterAfter() 然后在过滤器里面填充好就行，至于拿token的接口，在config里用.permitAll()放行就行了，比上面的改法还简单，我就不写了。</p>\n<h4 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h4><p>具体的代码可以参考我的项目<a href=\"https://github.com/muggle0/poseidon/wiki\" target=\"_blank\" rel=\"noopener\">poseindon</a>，这种security改动方式我经过生产实践的，不会有问题。另外篇幅有点长 感谢大佬的阅读。</p>\n","site":{"data":{}},"excerpt":"<p>作者：muggle</p>\n<h4 id=\"从一个基础的springsecurity开始，进行代码跟踪分析其原理\"><a href=\"#从一个基础的springsecurity开始，进行代码跟踪分析其原理\" class=\"headerlink\" title=\"从一个基础的springsecurity开始，进行代码跟踪分析其原理\"></a>从一个基础的springsecurity开始，进行代码跟踪分析其原理</h4><p>springsecurity是一个典型的责任链模式；我们先新建一个springboot项目，进行最基本的springsecurity配置，然后debug;我这里使用的开发工具是idea.建议大家也使用idea来进行日常开发。好了话不多说，开始：</p>\n<p>第一步</p>\n<p>新建springboot项目 maven依赖：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.security<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-security-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>启动项目，控制台上会输出这样一段字符串：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">04</span>-<span class=\"number\">11</span> <span class=\"number\">09</span>:<span class=\"number\">47</span>:<span class=\"number\">40.388</span>  INFO <span class=\"number\">16716</span> --- [           main] .s.s.UserDetailsServiceAutoConfiguration :</span><br><span class=\"line\"></span><br><span class=\"line\">Using generated security password: a6d55bc6-<span class=\"number\">49f</span>b-<span class=\"number\">4241</span>-a5ae-<span class=\"number\">527e5</span>e644731</span><br></pre></td></tr></table></figure></p>","more":"<p>现在我们访问 <a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a> 会自动跳转到 <a href=\"http://localhost:8080/login，并弹出一个登陆页面，用户名输user,密码输上面的字符串：\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/login，并弹出一个登陆页面，用户名输user,密码输上面的字符串：</a> a6d55bc6-49fb-4241-a5ae-527e5e644731，每次字符串都是随机的，要留意你的控制台打印的字符串，登陆成功了，现在我们开始debug,看看一次登陆和一次登陆后访问一次不登陆访问这三种情况security都做了哪些事情。</p>\n<p>先写一个接口：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"test\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"hi 你好啊\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>springsecurity 执行过程是走一条过滤器链，所以我们要先明白，有哪些过滤器，并在过滤器上打上断点追踪，下面贴出各个过滤器名称及作用：</p>\n<blockquote>\n<p>1、WebAsyncManagerIntegrationFilter<br>将Security上下文与Spring Web中用于处理异步请求映射的 WebAsyncManager 进行集成。<br>2、SecurityContextPersistenceFilter<br>在每次请求处理之前将该请求相关的安全上下文信息加载到SecurityContextHolder中，然后在该次请求处理完成之后，将SecurityContextHolder中关于这次请求的信息存储到一个“仓储”中，然后将SecurityContextHolder中的信息清除<br>例如在Session中维护一个用户的安全信息就是这个过滤器处理的。<br>3、HeaderWriterFilter<br>用于将头信息加入响应中<br>4、CsrfFilter<br>用于处理跨站请求伪造<br>5、LogoutFilter<br>用于处理退出登录<br>6、UsernamePasswordAuthenticationFilter<br>用于处理基于表单的登录请求，从表单中获取用户名和密码。默认情况下处理来自“/login”的请求。<br>从表单中获取用户名和密码时，默认使用的表单name值为“username”和“password”，这两个值可以通过设置这个过滤器的usernameParameter 和 passwordParameter 两个参数的值进行修改。<br>7、DefaultLoginPageGeneratingFilter<br>如果没有配置登录页面，那系统初始化时就会配置这个过滤器，并且用于在需要进行登录时生成一个登录表单页面。<br>8、BasicAuthenticationFilter<br>处理请求头信息，DigestAuthenticationFilter<br>9、RequestCacheAwareFilter<br>用来处理请求的缓存<br>10、SecurityContextHolderAwareRequestFilter<br>11、AnonymousAuthenticationFilter<br>12、SessionManagementFilter<br>13、ExceptionTranslationFilter<br>处理 AccessDeniedException 和 AuthenticationException 异常<br>14、FilterSecurityInterceptor<br>AbstractInterceptUrlConfigurer.createFilterSecurityInterceptor<br>15、RememberMeAuthenticationFilter的作用是, 当用户没有登录而直接访问资源时, 从cookie里找出用户的信息, 如果Spring Security能够识别出用户提供的remember me cookie, 用户将不必填写用户名和密码, 而是直接登录进入系统.</p>\n</blockquote>\n<p>先不管那么多，ctr+alt+shift+t（或者按两下shift） 输入类名找到类，打断点，开始debug</p>\n<h4 id=\"springsecurity-的默认登陆url是-login-我们访问一下来捋一捋：\"><a href=\"#springsecurity-的默认登陆url是-login-我们访问一下来捋一捋：\" class=\"headerlink\" title=\"springsecurity 的默认登陆url是/login:我们访问一下来捋一捋：\"></a>springsecurity 的默认登陆url是/login:我们访问一下来捋一捋：</h4><p>其代码顺序是：<br><code>WebAsyncManagerIntegrationFilter</code>  -&gt; <code>SecurityContextPersistenceFilter</code> -&gt; <code>HeaderWriterFilter</code> -&gt; <code>CsrfFilter</code> -&gt; <code>LogoutFilter</code> -&gt; <code>DefaultLoginPageGeneratingFilter</code></p>\n<p>然后浏览器会返回一个登陆页面：<br><img src=\"https://upload-images.jianshu.io/upload_images/13612520-d6e336c80cbf30c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h4 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h4><p>这其实是发起了一个请求登陆页面的请求，请求首先进入<code>WebAsyncManagerIntegrationFilter</code> 这个过滤器做了什么我们不必去关系，它下一个过滤器<code>SecurityContextPersistenceFilter</code> 通过request的attribute来上了一次请求锁，并且对SecurityContextHolder进行了管理；而SecurityContextHolder是对用户信息进行管理的一套系统，分为三大类</p>\n<ol>\n<li>SecurityContextHolder 对用户信息增删改查的操作<ol start=\"2\">\n<li>SecurityContext 将用户名，权限等封装成该对象</li>\n<li>SecurityContextHolderStrategy 用于存储 SecurityContext</li>\n</ol>\n</li>\n</ol>\n<p>默认的SecurityContextHolderStrategy 实现类是ThreadLocalSecurityContextHolderStrategy 它使用了ThreadLocal来存储了用户信息。<br>下一个过滤器<code>HeaderWriterFilter</code>请求和响应封装了一下，用于<code>CsrfFilter</code>鉴别csrf攻击 <code>LogoutFilter</code>判断是不是登出操作，如果是则不执行下面的过滤器，而执行登出的相关操作，DefaultLoginPageGeneratingFilter生成登录页</p>\n<p>我们先输入正确的代码登陆一次</p>\n<p>通过跟踪代码发现其执行顺序是：<br><code>WebAsyncManagerIntegrationFilter</code> -&gt; <code>SecurityContextPersistenceFilter</code> -&gt; <code>HeaderWriterFilter</code>-&gt;<code>CsrfFilter</code>-&gt; <code>LogoutFilter</code>-&gt;<code>UsernamePasswordAuthenticationFilter</code>-&gt;<code>WebAsyncManagerIntegrationFilter</code>-&gt;<code>SecurityContextPersistenceFilter</code>-&gt;<code>HeaderWriterFilter</code>-&gt;<code>CsrfFilter</code>-&gt;<code>LogoutFilter</code>-&gt;<code>DefaultLoginPageGeneratingFilter</code>-&gt;<code>BasicAuthenticationFilter</code>-&gt;<code>RequestCacheAwareFilter</code>-&gt;<code>SecurityContextHolderAwareRequestFilter</code>-&gt;<code>AnonymousAuthenticationFilter</code>-&gt;<code>SessionManagementFilter</code>-&gt;<code>ExceptionTranslationFilter</code>-&gt;<code>FilterSecurityInterceptor</code>-&gt;<code>SecurityContextPersistenceFilter</code>-&gt;<code>LogoutFilter</code>-&gt;<code>DefaultLoginPageGeneratingFilter</code>-&gt;<code>RequestCacheAwareFilter</code>-&gt;<code>SecurityContextHolderAwareRequestFilter</code>-&gt;<code>AnonymousAuthenticationFilter</code>-&gt;<code>SessionManagementFilter</code>-&gt;<code>ExceptionTranslationFilter</code>-&gt;<code>FilterSecurityInterceptor</code></p>\n<p>这一次之所以过滤器链跑这么长是因为，这里可以认为发起了三次请求，第一次请求是登陆，登陆成功后转发到 url 为“/”的接口，而我没有这个接口，发生了重定向到“/error” 而“/error”页面是springboot请求失败的错误页面返回机制。<br><code>WebAsyncManagerIntegrationFilter</code> -&gt; <code>SecurityContextPersistenceFilter</code> -&gt; <code>HeaderWriterFilter</code>-&gt;<code>CsrfFilter</code>-&gt; <code>LogoutFilter</code>-&gt;<code>UsernamePasswordAuthenticationFilter</code> 这一过程登陆请求。</p>\n<p><code>WebAsyncManagerIntegrationFilter</code>-&gt;<code>SecurityContextPersistenceFilter</code>-&gt;<code>HeaderWriterFilter</code>-&gt;<code>CsrfFilter</code>-&gt;<code>LogoutFilter</code>-&gt;<code>DefaultLoginPageGeneratingFilter</code>-&gt;<code>BasicAuthenticationFilter</code>-&gt;<code>RequestCacheAwareFilter</code>-&gt;<code>SecurityContextHolderAwareRequestFilter</code>-&gt;<code>AnonymousAuthenticationFilter</code>-&gt;<code>SessionManagementFilter</code>-&gt;<code>ExceptionTranslationFilter</code>-&gt;<code>FilterSecurityInterceptor</code><br>这是转发到“/”的过程</p>\n<p><code>SecurityContextPersistenceFilter</code>-&gt;<code>LogoutFilter</code>-&gt;<code>DefaultLoginPageGeneratingFilter</code>-&gt;<code>RequestCacheAwareFilter</code>-&gt;<code>SecurityContextHolderAwareRequestFilter</code>-&gt;<code>AnonymousAuthenticationFilter</code>-&gt;<code>SessionManagementFilter</code>-&gt;<code>ExceptionTranslationFilter</code>-&gt;<code>FilterSecurityInterceptor</code><br>这是重定向到error的过程</p>\n<p>接下来访问一下我们的/test接口<br>看看执行顺序：<br><code>WebAsyncManagerIntegrationFilter</code>-&gt;<code>SecurityContextPersistenceFilter</code>-&gt;<code>HeaderWriterFilter</code>-&gt;<code>CsrfFilter</code>-&gt;<code>LogoutFilter</code>-&gt;<code>DefaultLoginPageGeneratingFilter</code>-&gt;<code>BasicAuthenticationFilter</code>-&gt;<code>RequestCacheAwareFilter</code>-&gt;<code>SecurityContextHolderAwareRequestFilter</code>-&gt;<code>AnonymousAuthenticationFilter</code>-&gt;<code>SessionManagementFilter</code>-&gt;<code>ExceptionTranslationFilter</code>-&gt;<code>FilterSecurityInterceptor</code></p>\n<h4 id=\"说明：-1\"><a href=\"#说明：-1\" class=\"headerlink\" title=\"说明：\"></a>说明：</h4><p>BasicAuthenticationFilter就是看你请求头里面有没有basic开头的东西，有的话做一些处理，对我们来说没啥用，不必去关心，RequestCacheAwareFilter对请求和响应做了额外处理 SecurityContextHolderAwareRequestFilter 也是对请求做了一些额外处理，我们同样不去关心它。AnonymousAuthenticationFilter过滤器是当securitycontext为null时填充一个匿名权限，这里被执行的原因因为security未配置完全，后面进一步配置了之后再回来详解。ExceptionTranslationFilter是对鉴权或者登陆异常的处理过滤器，FilterSecurityInterceptor可以看做是过滤器链的出口：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">       FilterInvocation fi = <span class=\"keyword\">new</span> FilterInvocation(request, response, chain);</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.invoke(fi);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个fi就是请求的url值。</p>\n<p>现在我们完善一下security配置，让它复杂一点<br>实现 GrantedAuthority：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGrantedAuthority</span> <span class=\"keyword\">implements</span> <span class=\"title\">GrantedAuthority</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String authority;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>实现UserDetails<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Accessors</span>(chain = <span class=\"keyword\">true</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUserDetail</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDetails</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;MyGrantedAuthority&gt; authorities;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> accountNonExpired;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> accountNonLocked;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> credentialsNonExpired;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> enabled;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>实现UserDetailsService<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUserDetailService</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDetailsService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UserDetails <span class=\"title\">loadUserByUsername</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class=\"line\">        List&lt;MyGrantedAuthority&gt; authorities = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        MyGrantedAuthority myGrantedAuthority = <span class=\"keyword\">new</span> MyGrantedAuthority();</span><br><span class=\"line\">        myGrantedAuthority.setAuthority(<span class=\"string\">\"ROLE_test\"</span>);</span><br><span class=\"line\">        BCryptPasswordEncoder bCryptPasswordEncoder = <span class=\"keyword\">new</span> BCryptPasswordEncoder();</span><br><span class=\"line\">        String test = bCryptPasswordEncoder.encode(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\">        authorities.add(myGrantedAuthority);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyUserDetail().setAuthorities(authorities).setAccountNonExpired(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">                .setAccountNonLocked(<span class=\"keyword\">true</span>).setCredentialsNonExpired(<span class=\"keyword\">true</span>).setEnabled(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">                .setPassword(test).setUsername(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>重写security适配器WebSecurityConfigurerAdapter：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    MyUserDetailService userDetailService;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        auth.userDetailsService(userDetailService).passwordEncoder(<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(WebSecurity web)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        web.ignoring().antMatchers(<span class=\"string\">\"/resources/**/*.html\"</span>, <span class=\"string\">\"/resources/**/*.js\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"/resources/**/*.css\"</span>, <span class=\"string\">\"/resources/**/*.txt\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"/resources/**/*.png\"</span>, <span class=\"string\">\"/**/*.bmp\"</span>, <span class=\"string\">\"/**/*.gif\"</span>, <span class=\"string\">\"/**/*.png\"</span>, <span class=\"string\">\"/**/*.jpg\"</span>, <span class=\"string\">\"/**/*.ico\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//        super.configure(web);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">       http.formLogin().loginPage(<span class=\"string\">\"/login_page\"</span>).passwordParameter(<span class=\"string\">\"username\"</span>).passwordParameter(<span class=\"string\">\"password\"</span>).loginProcessingUrl(<span class=\"string\">\"/sign_in\"</span>).permitAll()</span><br><span class=\"line\">               .and().authorizeRequests().antMatchers(<span class=\"string\">\"/test\"</span>).hasRole(<span class=\"string\">\"test\"</span>).anyRequest().authenticated().and().csrf().disable();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里比开始又要复杂一点了，我先对相关操作进行说明一下：<br>先从SecurityConfig说起</p>\n<p>重写了三个config方法<br>1.第一个config涉及到的问题比较深——security的认证鉴权系统；<br>先说认证的过程，当过滤器跑到usernamepasswordFilter的时候就开始做认证了</p>\n<h4 id=\"security认证原理\"><a href=\"#security认证原理\" class=\"headerlink\" title=\"security认证原理\"></a>security认证原理</h4><p>认证的工作是交给AuthenticationManager去做，AuthenticationManager下有多个认证器 AuthenticationProvider<br>只要其中一个AuthenticationProvider通过认证就算登陆成功，而且在认证器中抛出异常，无法终止认证流程只是算该认证器未通过。<br>第一个config就算配置了一个AuthenticationManagerBuilder 这个类会生成一个 AuthenticationManager和DaoAuthenticationProvider认证器，认证调用userdetailservice 的loadUserByUsername方法来和你传入的username passworde做比较，password 是通过BCryptPasswordEncoder来做编码后比较的，这样做是为了提高安全性。</p>\n<p>2.第二个config是对静态资源的放行；</p>\n<p>3.第三个config 配置了登录页请求路径，登陆认证路径，用户名密码属性，和一个test权限，注意一点：我在config配的是hasRole(“test”)，我设置的权限是  myGrantedAuthority.setAuthority(“ROLE_test”);为什么这样弄后面会说。<br>接下来完善一下，边边角角，写个登陆的HTML,一个登陆页面请求接口:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/sign_in\"</span>&gt;</span></span><br><span class=\"line\">    用户名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"test\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"test\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"verification\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"test\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/login_page\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">loginPage</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"loginPage.html\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动项目，访问localhost:8080/test<br>跳转到了/login_page<br><img src=\"https://upload-images.jianshu.io/upload_images/13612520-40e8574ede6fdade.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>点登陆，debug看看有什么不同 新增的断点DaoAuthenticationProvider和MyUserDetailService<br>前面执行顺序还是一样，到SecurityContextHolderAwareRequestFilter的时候我们注意一下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityContextHolderAwareRequestFilter</span> <span class=\"keyword\">extends</span> <span class=\"title\">GenericFilterBean</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String rolePrefix = <span class=\"string\">\"ROLE_\"</span>;</span><br></pre></td></tr></table></figure></p>\n<p>我们权限设置的前缀就是从这来的 到后面讲投票器的时候再细说。<br>到UsernamePasswordAuthenticationFilter这个过滤器后 下一步到了DaoAuthenticationProvider验证器，验证器执行的是其父类AbstractUserDetailsAuthenticationProvider的authenticate（）方法同时我们看到MyUserDetailService的loadUserByUsername被调用，最后，认证结束转发到访问前路径/test 重新走过滤器。流程和一开始的简单配置一样，走到FilterSecurityInterceptor的时候进入WebExpressionVoter了投票器；</p>\n<h4 id=\"security的投票器：\"><a href=\"#security的投票器：\" class=\"headerlink\" title=\"security的投票器：\"></a>security的投票器：</h4><p>当过滤器链走到尽头（FilterSecurityInterceptor）下一步就是鉴权了，鉴权功能会交给AccessDecisionManager去处理，而AccessDecisionManager下又有多个投票器，其中WebExpressionVoter是security的一个默认投票器，我们来分析一下这个类：<br>其有个这样的方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">vote</span><span class=\"params\">(Authentication authentication, FilterInvocation fi, Collection&lt;ConfigAttribute&gt; attributes)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>返回int类型，1表示赞成，0表示弃权，-1表示反对。当所有投票器的vote执行结束，如果最终结果小于0表示不通过，<br>方法的参数说明：</p>\n<ol>\n<li>FilterInvocation  可获得请求的相关信息，比如请求方式（get post）url 等<br>2.authentication 是从securitycontext中拿出来的用户信息<br>3.Collection<configattribute> 是可以访问该路径的权限集合。也就是前面SecurityContextHolderAwareRequestFilter 查找出来的权限，对于在WebSecurityConfigurerAdapter config方法中的hasRole(“test”)权限规则并不是直接取权限 test,而是加了前缀rolePrefix（“ROLE_”），这个前缀也是可配置的配置方式：<a href=\"https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/reference/htmlsingle/#appendix-faq-role-prefix\" target=\"_blank\" rel=\"noopener\">https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/reference/htmlsingle/#appendix-faq-role-prefix</a></configattribute></li>\n</ol>\n<p>一些基本的知识点交代的差不多了，现在，我进行下一步</p>\n<h4 id=\"security魔改\"><a href=\"#security魔改\" class=\"headerlink\" title=\"security魔改\"></a>security魔改</h4><p>需求：我希望后端能做验证码校验，没通过校验的直接登录失败；<br>实现方式：security给我们提供了在各个过滤器上追加过滤器的方法，我们在UsernamePasswordAuthenticationFilter追加一个过滤器<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUsernamePasswordAuthenticationFilte</span> <span class=\"keyword\">extends</span> <span class=\"title\">UsernamePasswordAuthenticationFilter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisService redisService;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> postOnly = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyUsernamePasswordAuthenticationFilte</span><span class=\"params\">(RedisService redisService)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.redisService=redisService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Authentication <span class=\"title\">attemptAuthentication</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> AuthenticationException </span>&#123;</span><br><span class=\"line\">        redisService.getcCode(request);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.attemptAuthentication(request,response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里redisService 就是你要弄的验证逻辑，其他代码还是从父类那复制过来，不去动它。<br>为什么要继承UsernamePasswordAuthenticationFilter 而不是继承AbstractAuthenticationProcessingFilter，这样做的好处是可以少写代码少踩坑。<br>然后修改config<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">RedisService redisService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">      http.formLogin().loginPage(<span class=\"string\">\"/login_page\"</span>).passwordParameter(<span class=\"string\">\"username\"</span>).passwordParameter(<span class=\"string\">\"password\"</span>).loginProcessingUrl(<span class=\"string\">\"/sign_in\"</span>).permitAll()</span><br><span class=\"line\">              .and().authorizeRequests().antMatchers(<span class=\"string\">\"/test\"</span>).hasRole(<span class=\"string\">\"test\"</span>).anyRequest().authenticated().and().csrf().disable();</span><br><span class=\"line\">       http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\">MyUsernamePasswordAuthenticationFilte <span class=\"title\">getAuthenticationFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = <span class=\"keyword\">new</span> MyUsernamePasswordAuthenticationFilte(redisService);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> myUsernamePasswordAuthenticationFilte;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>我在加两个处理器，当我登陆成功或者失败，由我自己弄；<br>登陆成功处理器<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAuthenticationSuccessHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleUrlAuthenticationSuccessHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAuthenticationSuccess</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"application/json;charset=UTF-8\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> PrintWriter writer = response.getWriter();</span><br><span class=\"line\">        writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"200\\\",\\\"msg\\\":\\\"登录成功\\\"&#125;\"</span>);</span><br><span class=\"line\">        writer.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>登陆失败的处理器<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUrlAuthenticationFailureHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleUrlAuthenticationFailureHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAuthenticationFailure</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"application/json;charset=UTF-8\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> PrintWriter writer = response.getWriter();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(exception.getMessage().equals(<span class=\"string\">\"坏的凭证\"</span>))&#123;</span><br><span class=\"line\">            writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"401\\\",\\\"msg\\\":\\\"登录失败,用户名或者密码有误\\\"&#125;\"</span>);</span><br><span class=\"line\">            writer.close();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"401\\\",\\\"msg\\\":\\\"登录失败,\"</span>+exception.getMessage()+<span class=\"string\">\"\\\"&#125;\"</span>);</span><br><span class=\"line\">            writer.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"说明：-2\"><a href=\"#说明：-2\" class=\"headerlink\" title=\"说明：\"></a>说明：</h4><p>为什么要继承SimpleUrlAuthenticationFailureHandler和SimpleUrlAuthenticationSuccessHandler 而不是实现AuthenticationFailureHandler，还是那句话，为了少写代码少踩坑，我这里是返回json字符串，你也可以弄成重定向啥的，也比较容易。<br>config再改一下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">MyUsernamePasswordAuthenticationFilte <span class=\"title\">getAuthenticationFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = <span class=\"keyword\">new</span> MyUsernamePasswordAuthenticationFilte(redisService);</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(<span class=\"keyword\">new</span> MyUrlAuthenticationFailureHandler());</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(<span class=\"keyword\">new</span> MyAuthenticationSuccessHandler());</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(<span class=\"string\">\"/sign_in\"</span>);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> myUsernamePasswordAuthenticationFilte;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里要注意 myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(“/sign_in”); 因为 http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);并不是替换掉UsernamePasswordAuthenticationFilter，而是和你自己添加的过滤器同时存在，security会根据url判断该走哪个过滤器，如果loginProcessingUrl还是“/login”的话走的是UsernamePasswordAuthenticationFilter，这里要留意一下。</p>\n<p>现在再加需求，我不仅需要普通登录方式，我想其他登录方式；<br>实现方式：加多个认证器，每个认证器对应一种登录方式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAuthenticationProvider</span>  <span class=\"keyword\">implements</span> <span class=\"title\">AuthenticationProvider</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserDetailsService userDetailsService;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BCryptPasswordEncoder bCryptPasswordEncoder;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Authentication <span class=\"title\">authenticate</span><span class=\"params\">(Authentication authentication)</span> <span class=\"keyword\">throws</span> AuthenticationException </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//       这里写验证逻辑</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supports</span><span class=\"params\">(Class&lt;?&gt; aClass)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在改SecurityConfig<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">      http.formLogin().loginPage(<span class=\"string\">\"/login_page\"</span>).passwordParameter(<span class=\"string\">\"username\"</span>).passwordParameter(<span class=\"string\">\"password\"</span>).loginProcessingUrl(<span class=\"string\">\"/sign_in\"</span>).permitAll()</span><br><span class=\"line\">              .and().authorizeRequests().antMatchers(<span class=\"string\">\"/test\"</span>).hasRole(<span class=\"string\">\"test\"</span>).anyRequest().authenticated().and().csrf().disable();</span><br><span class=\"line\">       http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\">MyUsernamePasswordAuthenticationFilte <span class=\"title\">getAuthenticationFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = <span class=\"keyword\">new</span> MyUsernamePasswordAuthenticationFilte(redisService);</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(<span class=\"keyword\">new</span> MyUrlAuthenticationFailureHandler());</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(<span class=\"keyword\">new</span> MyAuthenticationSuccessHandler());</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(<span class=\"string\">\"/sign_in\"</span>);</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());</span><br><span class=\"line\">       <span class=\"keyword\">return</span> myUsernamePasswordAuthenticationFilte;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\">MyAuthenticationProvider <span class=\"title\">getMyAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       MyAuthenticationProvider myAuthenticationProvider = <span class=\"keyword\">new</span> MyAuthenticationProvider(userDetailService,<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">       <span class=\"keyword\">return</span> myAuthenticationProvider;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\">DaoAuthenticationProvider <span class=\"title\">daoAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       DaoAuthenticationProvider daoAuthenticationProvider = <span class=\"keyword\">new</span> DaoAuthenticationProvider();</span><br><span class=\"line\">       daoAuthenticationProvider.setPasswordEncoder(<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">       daoAuthenticationProvider.setUserDetailsService(userDetailService);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> daoAuthenticationProvider;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> AuthenticationManager <span class=\"title\">getAuthenticationManager</span><span class=\"params\">()</span>  </span>&#123;</span><br><span class=\"line\">       ProviderManager authenticationManager = <span class=\"keyword\">new</span> ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));</span><br><span class=\"line\">       <span class=\"keyword\">return</span> authenticationManager;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>我再加需求：<br>根据不同的客服端做不同的鉴权策略；<br>实现方式：加投票器；<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyExpressionVoter</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebExpressionVoter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">vote</span><span class=\"params\">(Authentication authentication, FilterInvocation fi, Collection&lt;ConfigAttribute&gt; attributes)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        这里写鉴权逻辑</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再次改动config<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">      http.formLogin().loginPage(<span class=\"string\">\"/login_page\"</span>).passwordParameter(<span class=\"string\">\"username\"</span>).passwordParameter(<span class=\"string\">\"password\"</span>).loginProcessingUrl(<span class=\"string\">\"/sign_in\"</span>).permitAll()</span><br><span class=\"line\">              .and().authorizeRequests().antMatchers(<span class=\"string\">\"/test\"</span>).hasRole(<span class=\"string\">\"test\"</span>).anyRequest().authenticated().accessDecisionManager(accessDecisionManager()).and().csrf().disable();</span><br><span class=\"line\">       http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\">MyUsernamePasswordAuthenticationFilte <span class=\"title\">getAuthenticationFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = <span class=\"keyword\">new</span> MyUsernamePasswordAuthenticationFilte(redisService);</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(<span class=\"keyword\">new</span> MyUrlAuthenticationFailureHandler());</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(<span class=\"keyword\">new</span> MyAuthenticationSuccessHandler());</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(<span class=\"string\">\"/sign_in\"</span>);</span><br><span class=\"line\">       myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());</span><br><span class=\"line\">       <span class=\"keyword\">return</span> myUsernamePasswordAuthenticationFilte;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\">MyAuthenticationProvider <span class=\"title\">getMyAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       MyAuthenticationProvider myAuthenticationProvider = <span class=\"keyword\">new</span> MyAuthenticationProvider(userDetailService,<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">       <span class=\"keyword\">return</span> myAuthenticationProvider;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\">DaoAuthenticationProvider <span class=\"title\">daoAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       DaoAuthenticationProvider daoAuthenticationProvider = <span class=\"keyword\">new</span> DaoAuthenticationProvider();</span><br><span class=\"line\">       daoAuthenticationProvider.setPasswordEncoder(<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">       daoAuthenticationProvider.setUserDetailsService(userDetailService);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> daoAuthenticationProvider;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> AuthenticationManager <span class=\"title\">getAuthenticationManager</span><span class=\"params\">()</span>  </span>&#123;</span><br><span class=\"line\">       ProviderManager authenticationManager = <span class=\"keyword\">new</span> ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));</span><br><span class=\"line\">       <span class=\"keyword\">return</span> authenticationManager;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> AccessDecisionManager <span class=\"title\">accessDecisionManager</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       List&lt;AccessDecisionVoter&lt;? extends Object&gt;&gt; decisionVoters</span><br><span class=\"line\">               = Arrays.asList(</span><br><span class=\"line\">               <span class=\"keyword\">new</span> MyExpressionVoter(),</span><br><span class=\"line\">               <span class=\"keyword\">new</span> WebExpressionVoter(),</span><br><span class=\"line\">               <span class=\"keyword\">new</span> RoleVoter(),</span><br><span class=\"line\">               <span class=\"keyword\">new</span> AuthenticatedVoter());</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UnanimousBased(decisionVoters);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>在加两个鉴权失败处理器<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAccessDeniedHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">AccessDeniedHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(HttpServletRequest httpServletRequest, HttpServletResponse response, AccessDeniedException e)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"application/json;charset=UTF-8\"</span>);</span><br><span class=\"line\">        PrintWriter writer = response.getWriter();</span><br><span class=\"line\">        writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"403\\\",\\\"msg\\\":\\\"没有权限\\\"&#125;\"</span>);</span><br><span class=\"line\">        writer.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再加一个登出处理器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLogoutSuccessHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">LogoutSuccessHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLogoutSuccess</span><span class=\"params\">(HttpServletRequest httpServletRequest, HttpServletResponse response, Authentication authentication)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> PrintWriter writer = response.getWriter();</span><br><span class=\"line\"></span><br><span class=\"line\">        writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"200\\\",\\\"msg\\\":\\\"登出成功\\\"&#125;\"</span>);</span><br><span class=\"line\">        writer.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后修改SecurityConfig，最终模样为<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    RedisService redisService;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    MyUserDetailService userDetailService;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        auth.userDetailsService(userDetailService).passwordEncoder(<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(WebSecurity web)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        web.ignoring().antMatchers(<span class=\"string\">\"/resources/**/*.html\"</span>, <span class=\"string\">\"/resources/**/*.js\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"/resources/**/*.css\"</span>, <span class=\"string\">\"/resources/**/*.txt\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"/resources/**/*.png\"</span>, <span class=\"string\">\"/**/*.bmp\"</span>, <span class=\"string\">\"/**/*.gif\"</span>, <span class=\"string\">\"/**/*.png\"</span>, <span class=\"string\">\"/**/*.jpg\"</span>, <span class=\"string\">\"/**/*.ico\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//        super.configure(web);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">       http.formLogin().loginPage(<span class=\"string\">\"/login_page\"</span>).passwordParameter(<span class=\"string\">\"username\"</span>).passwordParameter(<span class=\"string\">\"password\"</span>).loginProcessingUrl(<span class=\"string\">\"/sign_in\"</span>).permitAll()</span><br><span class=\"line\">               .and().authorizeRequests().antMatchers(<span class=\"string\">\"/test\"</span>).hasRole(<span class=\"string\">\"test\"</span>).anyRequest().authenticated().accessDecisionManager(accessDecisionManager())</span><br><span class=\"line\">               .and().logout().logoutSuccessHandler(<span class=\"keyword\">new</span> MyLogoutSuccessHandler())</span><br><span class=\"line\">               .and().csrf().disable();</span><br><span class=\"line\">        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\">        http.exceptionHandling().accessDeniedHandler(<span class=\"keyword\">new</span> MyAccessDeniedHandler());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">MyUsernamePasswordAuthenticationFilte <span class=\"title\">getAuthenticationFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = <span class=\"keyword\">new</span> MyUsernamePasswordAuthenticationFilte(redisService);</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(<span class=\"keyword\">new</span> MyUrlAuthenticationFailureHandler());</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(<span class=\"keyword\">new</span> MyAuthenticationSuccessHandler());</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(<span class=\"string\">\"/sign_in\"</span>);</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myUsernamePasswordAuthenticationFilte;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">MyAuthenticationProvider <span class=\"title\">getMyAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        MyAuthenticationProvider myAuthenticationProvider = <span class=\"keyword\">new</span> MyAuthenticationProvider(userDetailService,<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myAuthenticationProvider;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">DaoAuthenticationProvider <span class=\"title\">daoAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        DaoAuthenticationProvider daoAuthenticationProvider = <span class=\"keyword\">new</span> DaoAuthenticationProvider();</span><br><span class=\"line\">        daoAuthenticationProvider.setPasswordEncoder(<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">        daoAuthenticationProvider.setUserDetailsService(userDetailService);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> daoAuthenticationProvider;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> AuthenticationManager <span class=\"title\">getAuthenticationManager</span><span class=\"params\">()</span>  </span>&#123;</span><br><span class=\"line\">        ProviderManager authenticationManager = <span class=\"keyword\">new</span> ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> authenticationManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AccessDecisionManager <span class=\"title\">accessDecisionManager</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;AccessDecisionVoter&lt;? extends Object&gt;&gt; decisionVoters</span><br><span class=\"line\">                = Arrays.asList(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> MyExpressionVoter(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> WebExpressionVoter(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> RoleVoter(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> AuthenticatedVoter());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UnanimousBased(decisionVoters);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>你可能想要用jwtToken 做token鉴权的方式；<br>也好做，我这里提一下思路，鉴权都是在投票器里面，那我们在投票器之前填充好securitycontext就成，然后实现一个自己的投票器；填充securitycontext随便找个过滤器http.addFilterAfter() 然后在过滤器里面填充好就行，至于拿token的接口，在config里用.permitAll()放行就行了，比上面的改法还简单，我就不写了。</p>\n<h4 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h4><p>具体的代码可以参考我的项目<a href=\"https://github.com/muggle0/poseidon/wiki\" target=\"_blank\" rel=\"noopener\">poseindon</a>，这种security改动方式我经过生产实践的，不会有问题。另外篇幅有点长 感谢大佬的阅读。</p>"},{"title":"springSecurity深度解析第二版","date":"2019-04-20T04:44:15.000Z","_content":"作者：muggle\n# 前言\n\n由于第一版排版实在太过糟糕，而且很多细节没交代清楚，所以决定写第二版；这一版争取将排版设计得清晰明了一点，以方便读者阅读。\n\n# security原理分析\n\n## springSecurity过滤器链\n\nspringSecurity 采用的是责任链的设计模式，它有一条很长的过滤器链。现在对这条过滤器链的各个进行说明\n\n> 1. WebAsyncManagerIntegrationFilter：将Security上下文与Spring Web中用于处理异步请求映射的 WebAsyncManager 进行集成。\n>\n> 2. SecurityContextPersistenceFilter：在每次请求处理之前将该请求相关的安全上下文信息加载到SecurityContextHolder中，然后在该次请求处理完成之后，将SecurityContextHolder中关于这次请求的信息存储到一个“仓储”中，然后将SecurityContextHolder中的信息清除\n>    例如在Session中维护一个用户的安全信息就是这个过滤器处理的。\n>\n> 3. HeaderWriterFilter：用于将头信息加入响应中\n> 4. CsrfFilter：用于处理跨站请求伪造\n> 5. LogoutFilter：用于处理退出登录\n> 6. UsernamePasswordAuthenticationFilter：用于处理基于表单的登录请求，从表单中获取用户名和密码。默认情况下处理来自“/login”的请求。从表单中获取用户名和密码时，默认使用的表单name值为“username”和“password”，这两个值可以通过设置这个过滤器的usernameParameter 和 passwordParameter 两个参数的值进行修改。\n> 7. DefaultLoginPageGeneratingFilter：如果没有配置登录页面，那系统初始化时就会配置这个过滤器，并且用于在需要进行登录时生成一个登录表单页面。\n> 8. BasicAuthenticationFilter：检测和处理http basic认证\n> 9. RequestCacheAwareFilter：用来处理请求的缓存\n> 10. SecurityContextHolderAwareRequestFilter：主要是包装请求对象request\n> 11. AnonymousAuthenticationFilter：检测SecurityContextHolder中是否存在Authentication对象，如果不存在为其提供一个匿名Authentication\n> 12. SessionManagementFilter：管理session的过滤器\n> 13. ExceptionTranslationFilter：处理 AccessDeniedException 和 AuthenticationException 异常\n> 14. FilterSecurityInterceptor：可以看做过滤器链的出口\n> 15. RememberMeAuthenticationFilter：当用户没有登录而直接访问资源时, 从cookie里找出用户的信息, 如果Spring Security能够识别出用户提供的remember me cookie, 用户将不必填写用户名和密码, 而是直接登录进入系统，该过滤器默认不开启。\n\n## springSecurity 流程图\n\n上一版是通过debug的方法告诉读者springSecurity的一个执行过程，发现反而把问题搞复杂了，这一版我决定画一个流程图来说明其执行过程，只要把springSecurity的执行过程弄明白了，这个框架就会变得很简单\n\n<!--more-->\n\n![security.png](https://upload-images.jianshu.io/upload_images/13612520-e6bfb247ef6edf01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 流程说明\n\n1. 客户端发起一个请求，进入security过滤器链；\n\n2. 当到LogoutFilter的时候判断是否是登出路径，如果是登出路径则到logoutHandler，如果登出成功则到logoutSuccessHandler登出成功处理，如果登出失败则由ExceptionTranslationFilter；如果不是登出路径则直接进入下一个过滤器；\n\n3. 当到UsernamePasswordAuthenticationFilter的时候判断是否为登陆路径，如果是，则进入该过滤器进行登陆操作，如果登陆失败则到AuthenticationFailureHandler登陆失败处理器处理，如果登陆成功则到AuthenticationSuccessHandler登陆成功处理器处理 ；如果不是登陆请求则不进入该过滤器\n\n4. 当到FilterSecurityInterceptor的时候会拿到urI，根据uri去找对应的鉴权管理器，鉴权管理器做鉴权工作，鉴权成功则到controller层否则到AccessDeniedHandler鉴权失败处理器处理\n\n   \n\n# security配置\n\n在`WebSecurityConfigurerAdapter`这个类里面可以完成上述流程图的所有配置\n\n\n\n## 配置类伪代码\n\n```java\n **/\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.userDetailsService(userDetailService).passwordEncoder(new BCryptPasswordEncoder());\n    }\n    @Override\n    public void configure(WebSecurity web) throws Exception {\n\n        web.ignoring().antMatchers(\"/resources/**/*.html\", \"/resources/**/*.js\");\n    }\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       http.formLogin().loginPage(\"/login_page\").passwordParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/sign_in\").permitAll()\n               .and().authorizeRequests().antMatchers(\"/test\").hasRole(\"test\")\n               .anyRequest().authenticated().accessDecisionManager(accessDecisionManager())\n               .and().logout().logoutSuccessHandler(new MyLogoutSuccessHandler())\n               .and().csrf().disable();\n        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);\n        http.exceptionHandling().accessDeniedHandler(new MyAccessDeniedHandler());\n        http.addFilterAfter(new MyFittler(), LogoutFilter.class);\n    }\n}\n\n```\n\n## 配置类说明\n\n###  configure(AuthenticationManagerBuilder auth) 说明\n\nAuthenticationManager的建造器，配置AuthenticationManagerBuilder 会让security自动构建一个AuthenticationManager（该类的功能参考流程图）；如果想要使用该功能你需要配置一个UserDetailService和passwordEncoder。userDetailsService用于在认证器中根据用户传过来的用户名查找一个用户，passwordEncoder用于密码的加密与比对，我们存储用户密码的时候用passwordEncoder.encode()加密存储，在认证器里会调用passwordEncoder.matches()方法进行密码比对。\n\n如果重写了该方法，security会启用DaoAuthenticationProvider这个认证器，该认证就是先调用UserDetailsService.loadUserByUsername然后使用passwordEncoder.matches()进行密码比对，如果认证成功成功则返回一个Authentication对象\n\n### configure(WebSecurity web)说明\n\n这个配置方法用于配置静态资源的处理方式，可使用ant匹配规则\n\n### configure(HttpSecurity http) 说明\n\n这个配置方法是最关键的方法，也是最复杂的方法。我们慢慢掰开来说\n\n```java\nhttp.formLogin().loginPage(\"/login_page\").passwordParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/sign_in\").permitAll()\n```\n\n这是配置登陆相关的操作从方法名可知，配置了登录页请求路径，密码属性名，用户名属性名，和登陆请求路径，permitAll()代表任意用户可访问\n\n```java\nhttp.authorizeRequests().antMatchers(\"/test\").hasRole(\"test\").anyRequest().authenticated().accessDecisionManager(accessDecisionManager());\n```\n\n以上配置是权限相关的配置，配置了一个“/test” url该有什么权限才能访问，anyRequest()表示所有请求，authenticated()表示已登录用户，accessDecisionManager（）表示绑定在url上的鉴权管理器\n\n为了对比，现在贴出另一个权限配置清单\n\n```\nhttp.authorizeRequests().antMatchers(\"/tets_a/**\",\"/test_b/**\").hasRole(\"test\").antMatchers(\"/a/**\",\"/b/**\").authenticated().accessDecisionManager(accessDecisionManager())\n```\n\n我们可以看到权限配置的自由度很高，鉴权管理器可以绑定到任意url上；而且可以硬编码各种url权限;\n\n```java\nhttp.logout().logoutUrl(\"/logout\").logoutSuccessHandler(new MyLogoutSuccessHandler())\n```\n\n登出相关配置，这里配置了登出url和登出成功处理器\n\n```java\nhttp.exceptionHandling().accessDeniedHandler(new MyAccessDeniedHandler());\n```\n\n上面代码是配置鉴权失败的处理器\n\n```java\nhttp.addFilterAfter(new MyFittler(), LogoutFilter.class);\nhttp.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);\n```\n\n上面代码展示如何在过滤器链中插入自己的过滤器，addFilterBefore加在对应的过滤器之前addFilterAfter之后，addFilterAt加在过滤器同一位置，事实上框架原有的Filter在启动HttpSecurity配置的过程中，都由框架完成了其一定程度上固定的配置，是不允许更改替换的。根据测试结果来看，调用addFilterAt方法插入的Filter，会在这个位置上的原有Filter之前执行。\n\n注：关于HttpSecurity使用的是链式编程，其中http.xxxx.and.yyyyy这种写法和http.xxxx;http.yyyy写法意义一样。\n\n### 自定义authenticationManager和accessDecisionManager\n\n重写authenticationManagerBean()方法，并构造一个authenticationManager\n\n```java\n@Override\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        ProviderManager authenticationManager = new ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));\n        return authenticationManager;\n    }\n```\n\n我这里给authenticationManager配置了两个认证器，执行过程参考流程图\n\n定义构造AccessDecisionManager的方法并在配置类中调用，配置参考 configure(HttpSecurity http) 说明\n\n```java\npublic AccessDecisionManager accessDecisionManager(){\n        List<AccessDecisionVoter<? extends Object>> decisionVoters\n                = Arrays.asList(\n                new MyExpressionVoter(),\n                new WebExpressionVoter(),\n                new RoleVoter(),\n                new AuthenticatedVoter());\n        return new UnanimousBased(decisionVoters);\n\n    }\n```\n\n投票管理器会收集投票器投票结果做统计，最终结果大于等于0代表通过；每个投票器会返回三个结果：-1（反对），0（通过），1（赞成）。\n\n# security 权限用户系统说明\n\n## UserDetails\n\nsecurity中的用户接口，我们自定义用户类要实现该接口，各个属性的含义自行百度\n\n## GrantedAuthority\n\nsecurity中的用户权限接口，自定义权限需要实现该接口\n\n```java\n@Data\npublic class MyGrantedAuthority implements GrantedAuthority {\n    private String authority;\n}\n```\n\nauthority权限字段，需要注意的是在config中配置的权限会被加上ROLE_前缀，比如我们的配置authorizeRequests().antMatchers(\"/test\").hasRole(\"test\")，配置了一个“test”权限但我们存储的权限字段（authority）应该是“ROLE_test”\n\n## UserDetailsService\n\nsecurity用户service，自定义用户服务类需要实现该接口\n\n```java\n@Service\npublic class MyUserDetailService implements UserDetailsService {\n    @Override\n    public UserDetails loadUserByUsername(String s) throws UsernameNotFoundException {\n      return.....\n    }\n}\n```\n\nloadUserByUsername的作用在上文中已经说明；\n\n## SecurityContextHolder\n\n用户在完成登陆后security会将用户信息存储到这个类中，之后其他流程需要得到用户信息时都是从这个类中获得，用户信息被封装成SecurityContext ，而实际存储的类是SecurityContextHolderStrategy ，默认的SecurityContextHolderStrategy 实现类是ThreadLocalSecurityContextHolderStrategy 它使用了ThreadLocal来存储了用户信息。\n\n手动填充SecurityContextHolder示例：\n\n```java\nUsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(\"test\",\"test\",list);\nSecurityContextHolder.getContext().setAuthentication(token);\n```\n\n对于token鉴权的系统\n\n我们就可以验证token后手动填充SecurityContextHolder，填充时机只要在执行投票器之前即可，或者干脆可以在投票器中填充，然后在登出操作中清空SecurityContextHolder。\n\n# security扩展说明\n\n可扩展的有\n\n- 鉴权失败处理器：security鉴权失败默认跳转登陆页面，我们可以\n- 验证器\n- 登陆成功处理器\n- 投票器\n- 自定义token处理过滤器\n- 登出成功处理器\n- 登陆失败处理器\n- 自定义UsernamePasswordAuthenticationFilter\n\n## 鉴权失败处理器\n\nsecurity鉴权失败默认跳转登陆页面，我们可以实现AccessDeniedHandler接口，重写handle()方法来自定义处理逻辑；然后参考配置类说明将处理器加入到配置当中\n\n## 验证器\n\n实现AuthenticationProvider接口来实现自己验证逻辑。需要注意的是在这个类里面就算你抛出异常，也不会中断验证流程，而是算你验证失败，我们由流程图知道，只要有一个验证器验证成功，就算验证成功，所以你需要留意这一点\n\n## 登陆成功处理器\n\n在security中验证成功默认跳转到上一次请求页面或者路径为\"/\"的页面，我们同样可以自定义：继承SimpleUrlAuthenticationSuccessHandler这个类或者实现AuthenticationSuccessHandler接口。我这里建议采用继承的方式；SimpleUrlAuthenticationSuccessHandler是默认的处理器，采用继承可以契合里氏替换原则，提高代码的复用性和避免不必要的错误。\n\n## 投票器\n\n投票器可继承WebExpressionVoter或者实现AccessDecisionVoter<FilterInvocation>接口；WebExpressionVoter是security默认的投票器；我这里同样建议采用继承的方式；添加到配置的方式参考 配置类说明章节；\n\n注意：投票器vote方法返回一个int值；-1代表反对，0代表弃权，1代表赞成；投票管理器收集投票结果，如果最终结果大于等于0则放行该请求。\n\n## 自定义token处理过滤器\n\n自定义token处理器继承自可OncePerRequestFilter或者GenericFilterBean或者Filter都可以，在这个处理器里面需要完成的逻辑是：获取请求里的token，验证token是否合法然后填充SecurityContextHolder，虽然说过滤器只要添加在投票器之前就可以；但我这里还是建议添加在http.addFilterAfter(new MyFittler(), LogoutFilter.class);\n\n## 登出成功处理器\n\n实现LogoutSuccessHandler接口，添加到配置的方式参考 配置类说明章节\n\n## 登陆失败处理器\n\n登陆失败默认跳转到登陆页，我们同样可以自定义。继承SimpleUrlAuthenticationFailureHandler 或者实现AuthenticationFailureHandler；建议采用继承。\n\n## 自定义UsernamePasswordAuthenticationFilter\n\n我们自定义UsernamePasswordAuthenticationFilter可以极大提高我们security的灵活性（比如添加验证验证码是否正确的功能），所以我这里是建议自定义UsernamePasswordAuthenticationFilter；\n\n我们直接继承UsernamePasswordAuthenticationFilter，然后在配置类中初始化这个过滤器，给这个过滤器添加登陆失败处理器，登陆成功处理器，登陆管理器，登陆请求url\n\n这里配置略微复杂，贴一下代码清单\n\n初始化过滤器：\n\n```java\nMyUsernamePasswordAuthenticationFilte getAuthenticationFilter(){\n        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = new MyUsernamePasswordAuthenticationFilte(redisService);\n        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(new MyUrlAuthenticationFailureHandler());\n        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(new MyAuthenticationSuccessHandler());\n        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(\"/sign_in\");\n        myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());\n        return myUsernamePasswordAuthenticationFilte;\n    }\n```\n\n添加到配置：\n\n```java\nhttp.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);\n```\n\n# 代码清单\n\n下面贴出适配于 前后端分离和token验证的伪代码清单\n\n## 登陆页请求处理\n\n```java\n@Controller\npublic class LoginController {\n    /** \n    * @Description: 登陆页面的请求 \n    * @Param:  \n    * @return:  \n    */ \n    @GetMapping(\"/login_page\")\n    public String loginPage(){\n        return \"loginPage.html\";\n    }\n}\n```\n\n## 鉴权失败处理器\n\n```java\npublic class MyAccessDeniedHandler implements AccessDeniedHandler {\n    @Override\n    public void handle(HttpServletRequest httpServletRequest, HttpServletResponse response, AccessDeniedException e) throws IOException, ServletException {\n        response.setContentType(\"application/json;charset=UTF-8\");\n        PrintWriter writer = response.getWriter();\n        writer.write(\"{\\\"code\\\":\\\"403\\\",\\\"msg\\\":\\\"没有权限\\\"}\");\n        writer.close();\n    }\n}\n```\n\n## 验证器\n\n```java\npublic class MyAuthenticationProvider  implements AuthenticationProvider {\n    private UserDetailsService userDetailsService;\n    private BCryptPasswordEncoder bCryptPasswordEncoder;\n\n    public MyAuthenticationProvider(UserDetailsService userDetailsService, BCryptPasswordEncoder bCryptPasswordEncoder) {\n        this.userDetailsService = userDetailsService;\n        this.bCryptPasswordEncoder = bCryptPasswordEncoder;\n    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n//       这里写验证逻辑\n        return null;\n    }\n\n    @Override\n    public boolean supports(Class<?> aClass) {\n        return true;\n    }\n}\n```\n\n## 验证成功处理器\n\n```java\nublic class MyAuthenticationSuccessHandler extends SimpleUrlAuthenticationSuccessHandler {\n    @Override\n    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {\n        //随便写点啥\n    }\n}\n```\n\n## 投票器\n\n```java\n/**\n * @program: security-test\n * @description: 鉴权投票器\n * @author: muggle\n * @create: 2019-04-11\n **/\n\npublic class MyExpressionVoter extends WebExpressionVoter {\n    @Override\n    public int vote(Authentication authentication, FilterInvocation fi, Collection<ConfigAttribute> attributes) {\n//        这里写鉴权逻辑\n        System.out.println(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\");\n        return 1 ;\n    }\n}\n```\n\n## 自定义token处理过滤器\n\n```java\n/**\n * @program: security-about\n * @description:填充一个token\n * @author: muggle\n * @create: 2019-04-20\n **/\n\npublic class MyFittler extends OncePerRequestFilter {\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        String token1 = request.getHeader(\"token\");\n        if (token1==null){\n\n        }\n\n        ArrayList<GrantedAuthority> list = new ArrayList<>();\n        GrantedAuthority grantedAuthority = new GrantedAuthority() {\n            @Override\n            public String getAuthority() {\n                return \"test\";\n            }\n        };\n        list.add(grantedAuthority);\n        UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(\"test\",\"test\",list);\n        SecurityContextHolder.getContext().setAuthentication(token);\n        filterChain.doFilter(request, response);\n    }\n}\n```\n\n## 登出成功处理器\n\n```java\npublic class MyLogoutSuccessHandler implements LogoutSuccessHandler {\n    @Override\n    public void onLogoutSuccess(HttpServletRequest httpServletRequest, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {\n        final PrintWriter writer = response.getWriter();\n\n        writer.write(\"{\\\"code\\\":\\\"200\\\",\\\"msg\\\":\\\"登出成功\\\"}\");\n        writer.close();\n    }\n}\n```\n\n## 登陆失败处理器\n\n```java\npublic class MyUrlAuthenticationFailureHandler extends SimpleUrlAuthenticationFailureHandler {\n    @Override\n    public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException, ServletException {\n        response.setContentType(\"application/json;charset=UTF-8\");\n        final PrintWriter writer = response.getWriter();\n        if(exception.getMessage().equals(\"坏的凭证\")){\n            writer.write(\"{\\\"code\\\":\\\"401\\\",\\\"msg\\\":\\\"登录失败,用户名或者密码有误\\\"}\");\n            writer.close();\n        }else {\n            writer.write(\"{\\\"code\\\":\\\"401\\\",\\\"msg\\\":\\\"登录失败,\"+exception.getMessage()+\"\\\"}\");\n            writer.close();\n        }\n\n    }\n}\n```\n\n## 自定义UsernamePasswordAuthenticationFilter\n\n```java\n/**\n * @program: security-test\n * @description: 用户登陆逻辑过滤器\n * @author: muggle\n * @create: 2019-04-11\n **/\n\npublic class MyUsernamePasswordAuthenticationFilte extends UsernamePasswordAuthenticationFilter {\n    private RedisService redisService;\n    private boolean postOnly = true;\n\n    public MyUsernamePasswordAuthenticationFilte(RedisService redisService){\n        this.redisService=redisService;\n    }\n\n    @Override\n    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {\n     \n        //你可以在这里做验证码校验，校验不通过抛出AuthenticationException()即可\n            super.attemptAuthentication(request,response);\n    }\n}\n```\n\n## 配置\n\n```java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Autowired\n    RedisService redisService;\n    @Autowired\n    MyUserDetailService userDetailService;\n  \n    @Override\n    public void configure(WebSecurity web) throws Exception {\n\n        web.ignoring().antMatchers(\"/resources/**/*.html\", \"/resources/**/*.js\",\n                \"/resources/**/*.css\", \"/resources/**/*.txt\",\n                \"/resources/**/*.png\", \"/**/*.bmp\", \"/**/*.gif\", \"/**/*.png\", \"/**/*.jpg\", \"/**/*.ico\");\n//        super.configure(web);\n    }\n\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n//        配置登录页等 permitAll表示任何权限都能访问\n       http.formLogin().loginPage(\"/login_page\").passwordParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/sign_in\").permitAll()\n               .and().authorizeRequests().antMatchers(\"/test\").hasRole(\"test\")\n//               任何请求都被accessDecisionManager() 的鉴权器管理\n               .anyRequest().authenticated().accessDecisionManager(accessDecisionManager())\n//               登出配置\n               .and().logout().logoutUrl(\"/logout\").logoutSuccessHandler(new MyLogoutSuccessHandler())\n//               关闭csrf\n               .and().csrf().disable();\n       http.authorizeRequests().antMatchers(\"/tets_a/**\",\"/test_b/**\").hasRole(\"test\").antMatchers(\"/a/**\",\"/b/**\").authenticated().accessDecisionManager(accessDecisionManager())\n//      加自定义过滤器\n        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);\n//        配置鉴权失败的处理器\n        http.exceptionHandling().accessDeniedHandler(new MyAccessDeniedHandler());\n        http.addFilterAfter(new MyFittler(), LogoutFilter.class);\n\n    }\n\n\n    MyUsernamePasswordAuthenticationFilte getAuthenticationFilter(){\n        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = new MyUsernamePasswordAuthenticationFilte(redisService);\n        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(new MyUrlAuthenticationFailureHandler());\n        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(new MyAuthenticationSuccessHandler());\n        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(\"/sign_in\");\n        myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());\n        return myUsernamePasswordAuthenticationFilte;\n    }\n    MyAuthenticationProvider getMyAuthenticationProvider(){\n        MyAuthenticationProvider myAuthenticationProvider = new MyAuthenticationProvider(userDetailService,new BCryptPasswordEncoder());\n        return myAuthenticationProvider;\n    }\n    DaoAuthenticationProvider daoAuthenticationProvider(){\n        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();\n        daoAuthenticationProvider.setPasswordEncoder(new BCryptPasswordEncoder());\n        daoAuthenticationProvider.setUserDetailsService(userDetailService);\n        return daoAuthenticationProvider;\n    }\n    protected AuthenticationManager getAuthenticationManager()  {\n        ProviderManager authenticationManager = new ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));\n        return authenticationManager;\n    }\n\n    public AccessDecisionManager accessDecisionManager(){\n        List<AccessDecisionVoter<? extends Object>> decisionVoters\n                = Arrays.asList(\n                new MyExpressionVoter(),\n                new WebExpressionVoter(),\n                new RoleVoter(),\n                new AuthenticatedVoter());\n        return new UnanimousBased(decisionVoters);\n\n    }\n}\n```\n\n# 总结\n\n对于security的扩展配置关键在于`configure(HttpSecurity http)`方法；扩展认证方式可以自定义`authenticationManager`并加入自己验证器，在验证器中抛出异常不会终止验证流程；扩展鉴权方式可以自定义`accessDecisionManager`然后添加自己的投票器并绑定到对应的url（url 匹配方式为ant）上，投票器`vote(Authentication authentication, FilterInvocation fi, Collection<ConfigAttribute> attributes)`方法返回值为三种：-1 0 1，分别表示反对弃权赞成；\n\n对于token认证的校验方式，可以暴露一个获取的接口，或者重写`UsernamePasswordAuthenticationFilter`过滤器和扩展登陆成功处理器来获取token，然后在`LogoutFilter`之后添加一个自定义过滤器，用于校验和填充SecurityContextHolder\n\nsecurity的处理器大部分都是重定向的，我们的项目如果是前后端分离的话，我们希望无论什么情况都返回json,那么就需要重写各个处理器了。","source":"_posts/springSecurity2.md","raw":"---\ntitle: springSecurity深度解析第二版\ndate: 2019-04-20 12:44:15\ntags: security\n---\n作者：muggle\n# 前言\n\n由于第一版排版实在太过糟糕，而且很多细节没交代清楚，所以决定写第二版；这一版争取将排版设计得清晰明了一点，以方便读者阅读。\n\n# security原理分析\n\n## springSecurity过滤器链\n\nspringSecurity 采用的是责任链的设计模式，它有一条很长的过滤器链。现在对这条过滤器链的各个进行说明\n\n> 1. WebAsyncManagerIntegrationFilter：将Security上下文与Spring Web中用于处理异步请求映射的 WebAsyncManager 进行集成。\n>\n> 2. SecurityContextPersistenceFilter：在每次请求处理之前将该请求相关的安全上下文信息加载到SecurityContextHolder中，然后在该次请求处理完成之后，将SecurityContextHolder中关于这次请求的信息存储到一个“仓储”中，然后将SecurityContextHolder中的信息清除\n>    例如在Session中维护一个用户的安全信息就是这个过滤器处理的。\n>\n> 3. HeaderWriterFilter：用于将头信息加入响应中\n> 4. CsrfFilter：用于处理跨站请求伪造\n> 5. LogoutFilter：用于处理退出登录\n> 6. UsernamePasswordAuthenticationFilter：用于处理基于表单的登录请求，从表单中获取用户名和密码。默认情况下处理来自“/login”的请求。从表单中获取用户名和密码时，默认使用的表单name值为“username”和“password”，这两个值可以通过设置这个过滤器的usernameParameter 和 passwordParameter 两个参数的值进行修改。\n> 7. DefaultLoginPageGeneratingFilter：如果没有配置登录页面，那系统初始化时就会配置这个过滤器，并且用于在需要进行登录时生成一个登录表单页面。\n> 8. BasicAuthenticationFilter：检测和处理http basic认证\n> 9. RequestCacheAwareFilter：用来处理请求的缓存\n> 10. SecurityContextHolderAwareRequestFilter：主要是包装请求对象request\n> 11. AnonymousAuthenticationFilter：检测SecurityContextHolder中是否存在Authentication对象，如果不存在为其提供一个匿名Authentication\n> 12. SessionManagementFilter：管理session的过滤器\n> 13. ExceptionTranslationFilter：处理 AccessDeniedException 和 AuthenticationException 异常\n> 14. FilterSecurityInterceptor：可以看做过滤器链的出口\n> 15. RememberMeAuthenticationFilter：当用户没有登录而直接访问资源时, 从cookie里找出用户的信息, 如果Spring Security能够识别出用户提供的remember me cookie, 用户将不必填写用户名和密码, 而是直接登录进入系统，该过滤器默认不开启。\n\n## springSecurity 流程图\n\n上一版是通过debug的方法告诉读者springSecurity的一个执行过程，发现反而把问题搞复杂了，这一版我决定画一个流程图来说明其执行过程，只要把springSecurity的执行过程弄明白了，这个框架就会变得很简单\n\n<!--more-->\n\n![security.png](https://upload-images.jianshu.io/upload_images/13612520-e6bfb247ef6edf01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 流程说明\n\n1. 客户端发起一个请求，进入security过滤器链；\n\n2. 当到LogoutFilter的时候判断是否是登出路径，如果是登出路径则到logoutHandler，如果登出成功则到logoutSuccessHandler登出成功处理，如果登出失败则由ExceptionTranslationFilter；如果不是登出路径则直接进入下一个过滤器；\n\n3. 当到UsernamePasswordAuthenticationFilter的时候判断是否为登陆路径，如果是，则进入该过滤器进行登陆操作，如果登陆失败则到AuthenticationFailureHandler登陆失败处理器处理，如果登陆成功则到AuthenticationSuccessHandler登陆成功处理器处理 ；如果不是登陆请求则不进入该过滤器\n\n4. 当到FilterSecurityInterceptor的时候会拿到urI，根据uri去找对应的鉴权管理器，鉴权管理器做鉴权工作，鉴权成功则到controller层否则到AccessDeniedHandler鉴权失败处理器处理\n\n   \n\n# security配置\n\n在`WebSecurityConfigurerAdapter`这个类里面可以完成上述流程图的所有配置\n\n\n\n## 配置类伪代码\n\n```java\n **/\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.userDetailsService(userDetailService).passwordEncoder(new BCryptPasswordEncoder());\n    }\n    @Override\n    public void configure(WebSecurity web) throws Exception {\n\n        web.ignoring().antMatchers(\"/resources/**/*.html\", \"/resources/**/*.js\");\n    }\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       http.formLogin().loginPage(\"/login_page\").passwordParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/sign_in\").permitAll()\n               .and().authorizeRequests().antMatchers(\"/test\").hasRole(\"test\")\n               .anyRequest().authenticated().accessDecisionManager(accessDecisionManager())\n               .and().logout().logoutSuccessHandler(new MyLogoutSuccessHandler())\n               .and().csrf().disable();\n        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);\n        http.exceptionHandling().accessDeniedHandler(new MyAccessDeniedHandler());\n        http.addFilterAfter(new MyFittler(), LogoutFilter.class);\n    }\n}\n\n```\n\n## 配置类说明\n\n###  configure(AuthenticationManagerBuilder auth) 说明\n\nAuthenticationManager的建造器，配置AuthenticationManagerBuilder 会让security自动构建一个AuthenticationManager（该类的功能参考流程图）；如果想要使用该功能你需要配置一个UserDetailService和passwordEncoder。userDetailsService用于在认证器中根据用户传过来的用户名查找一个用户，passwordEncoder用于密码的加密与比对，我们存储用户密码的时候用passwordEncoder.encode()加密存储，在认证器里会调用passwordEncoder.matches()方法进行密码比对。\n\n如果重写了该方法，security会启用DaoAuthenticationProvider这个认证器，该认证就是先调用UserDetailsService.loadUserByUsername然后使用passwordEncoder.matches()进行密码比对，如果认证成功成功则返回一个Authentication对象\n\n### configure(WebSecurity web)说明\n\n这个配置方法用于配置静态资源的处理方式，可使用ant匹配规则\n\n### configure(HttpSecurity http) 说明\n\n这个配置方法是最关键的方法，也是最复杂的方法。我们慢慢掰开来说\n\n```java\nhttp.formLogin().loginPage(\"/login_page\").passwordParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/sign_in\").permitAll()\n```\n\n这是配置登陆相关的操作从方法名可知，配置了登录页请求路径，密码属性名，用户名属性名，和登陆请求路径，permitAll()代表任意用户可访问\n\n```java\nhttp.authorizeRequests().antMatchers(\"/test\").hasRole(\"test\").anyRequest().authenticated().accessDecisionManager(accessDecisionManager());\n```\n\n以上配置是权限相关的配置，配置了一个“/test” url该有什么权限才能访问，anyRequest()表示所有请求，authenticated()表示已登录用户，accessDecisionManager（）表示绑定在url上的鉴权管理器\n\n为了对比，现在贴出另一个权限配置清单\n\n```\nhttp.authorizeRequests().antMatchers(\"/tets_a/**\",\"/test_b/**\").hasRole(\"test\").antMatchers(\"/a/**\",\"/b/**\").authenticated().accessDecisionManager(accessDecisionManager())\n```\n\n我们可以看到权限配置的自由度很高，鉴权管理器可以绑定到任意url上；而且可以硬编码各种url权限;\n\n```java\nhttp.logout().logoutUrl(\"/logout\").logoutSuccessHandler(new MyLogoutSuccessHandler())\n```\n\n登出相关配置，这里配置了登出url和登出成功处理器\n\n```java\nhttp.exceptionHandling().accessDeniedHandler(new MyAccessDeniedHandler());\n```\n\n上面代码是配置鉴权失败的处理器\n\n```java\nhttp.addFilterAfter(new MyFittler(), LogoutFilter.class);\nhttp.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);\n```\n\n上面代码展示如何在过滤器链中插入自己的过滤器，addFilterBefore加在对应的过滤器之前addFilterAfter之后，addFilterAt加在过滤器同一位置，事实上框架原有的Filter在启动HttpSecurity配置的过程中，都由框架完成了其一定程度上固定的配置，是不允许更改替换的。根据测试结果来看，调用addFilterAt方法插入的Filter，会在这个位置上的原有Filter之前执行。\n\n注：关于HttpSecurity使用的是链式编程，其中http.xxxx.and.yyyyy这种写法和http.xxxx;http.yyyy写法意义一样。\n\n### 自定义authenticationManager和accessDecisionManager\n\n重写authenticationManagerBean()方法，并构造一个authenticationManager\n\n```java\n@Override\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        ProviderManager authenticationManager = new ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));\n        return authenticationManager;\n    }\n```\n\n我这里给authenticationManager配置了两个认证器，执行过程参考流程图\n\n定义构造AccessDecisionManager的方法并在配置类中调用，配置参考 configure(HttpSecurity http) 说明\n\n```java\npublic AccessDecisionManager accessDecisionManager(){\n        List<AccessDecisionVoter<? extends Object>> decisionVoters\n                = Arrays.asList(\n                new MyExpressionVoter(),\n                new WebExpressionVoter(),\n                new RoleVoter(),\n                new AuthenticatedVoter());\n        return new UnanimousBased(decisionVoters);\n\n    }\n```\n\n投票管理器会收集投票器投票结果做统计，最终结果大于等于0代表通过；每个投票器会返回三个结果：-1（反对），0（通过），1（赞成）。\n\n# security 权限用户系统说明\n\n## UserDetails\n\nsecurity中的用户接口，我们自定义用户类要实现该接口，各个属性的含义自行百度\n\n## GrantedAuthority\n\nsecurity中的用户权限接口，自定义权限需要实现该接口\n\n```java\n@Data\npublic class MyGrantedAuthority implements GrantedAuthority {\n    private String authority;\n}\n```\n\nauthority权限字段，需要注意的是在config中配置的权限会被加上ROLE_前缀，比如我们的配置authorizeRequests().antMatchers(\"/test\").hasRole(\"test\")，配置了一个“test”权限但我们存储的权限字段（authority）应该是“ROLE_test”\n\n## UserDetailsService\n\nsecurity用户service，自定义用户服务类需要实现该接口\n\n```java\n@Service\npublic class MyUserDetailService implements UserDetailsService {\n    @Override\n    public UserDetails loadUserByUsername(String s) throws UsernameNotFoundException {\n      return.....\n    }\n}\n```\n\nloadUserByUsername的作用在上文中已经说明；\n\n## SecurityContextHolder\n\n用户在完成登陆后security会将用户信息存储到这个类中，之后其他流程需要得到用户信息时都是从这个类中获得，用户信息被封装成SecurityContext ，而实际存储的类是SecurityContextHolderStrategy ，默认的SecurityContextHolderStrategy 实现类是ThreadLocalSecurityContextHolderStrategy 它使用了ThreadLocal来存储了用户信息。\n\n手动填充SecurityContextHolder示例：\n\n```java\nUsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(\"test\",\"test\",list);\nSecurityContextHolder.getContext().setAuthentication(token);\n```\n\n对于token鉴权的系统\n\n我们就可以验证token后手动填充SecurityContextHolder，填充时机只要在执行投票器之前即可，或者干脆可以在投票器中填充，然后在登出操作中清空SecurityContextHolder。\n\n# security扩展说明\n\n可扩展的有\n\n- 鉴权失败处理器：security鉴权失败默认跳转登陆页面，我们可以\n- 验证器\n- 登陆成功处理器\n- 投票器\n- 自定义token处理过滤器\n- 登出成功处理器\n- 登陆失败处理器\n- 自定义UsernamePasswordAuthenticationFilter\n\n## 鉴权失败处理器\n\nsecurity鉴权失败默认跳转登陆页面，我们可以实现AccessDeniedHandler接口，重写handle()方法来自定义处理逻辑；然后参考配置类说明将处理器加入到配置当中\n\n## 验证器\n\n实现AuthenticationProvider接口来实现自己验证逻辑。需要注意的是在这个类里面就算你抛出异常，也不会中断验证流程，而是算你验证失败，我们由流程图知道，只要有一个验证器验证成功，就算验证成功，所以你需要留意这一点\n\n## 登陆成功处理器\n\n在security中验证成功默认跳转到上一次请求页面或者路径为\"/\"的页面，我们同样可以自定义：继承SimpleUrlAuthenticationSuccessHandler这个类或者实现AuthenticationSuccessHandler接口。我这里建议采用继承的方式；SimpleUrlAuthenticationSuccessHandler是默认的处理器，采用继承可以契合里氏替换原则，提高代码的复用性和避免不必要的错误。\n\n## 投票器\n\n投票器可继承WebExpressionVoter或者实现AccessDecisionVoter<FilterInvocation>接口；WebExpressionVoter是security默认的投票器；我这里同样建议采用继承的方式；添加到配置的方式参考 配置类说明章节；\n\n注意：投票器vote方法返回一个int值；-1代表反对，0代表弃权，1代表赞成；投票管理器收集投票结果，如果最终结果大于等于0则放行该请求。\n\n## 自定义token处理过滤器\n\n自定义token处理器继承自可OncePerRequestFilter或者GenericFilterBean或者Filter都可以，在这个处理器里面需要完成的逻辑是：获取请求里的token，验证token是否合法然后填充SecurityContextHolder，虽然说过滤器只要添加在投票器之前就可以；但我这里还是建议添加在http.addFilterAfter(new MyFittler(), LogoutFilter.class);\n\n## 登出成功处理器\n\n实现LogoutSuccessHandler接口，添加到配置的方式参考 配置类说明章节\n\n## 登陆失败处理器\n\n登陆失败默认跳转到登陆页，我们同样可以自定义。继承SimpleUrlAuthenticationFailureHandler 或者实现AuthenticationFailureHandler；建议采用继承。\n\n## 自定义UsernamePasswordAuthenticationFilter\n\n我们自定义UsernamePasswordAuthenticationFilter可以极大提高我们security的灵活性（比如添加验证验证码是否正确的功能），所以我这里是建议自定义UsernamePasswordAuthenticationFilter；\n\n我们直接继承UsernamePasswordAuthenticationFilter，然后在配置类中初始化这个过滤器，给这个过滤器添加登陆失败处理器，登陆成功处理器，登陆管理器，登陆请求url\n\n这里配置略微复杂，贴一下代码清单\n\n初始化过滤器：\n\n```java\nMyUsernamePasswordAuthenticationFilte getAuthenticationFilter(){\n        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = new MyUsernamePasswordAuthenticationFilte(redisService);\n        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(new MyUrlAuthenticationFailureHandler());\n        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(new MyAuthenticationSuccessHandler());\n        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(\"/sign_in\");\n        myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());\n        return myUsernamePasswordAuthenticationFilte;\n    }\n```\n\n添加到配置：\n\n```java\nhttp.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);\n```\n\n# 代码清单\n\n下面贴出适配于 前后端分离和token验证的伪代码清单\n\n## 登陆页请求处理\n\n```java\n@Controller\npublic class LoginController {\n    /** \n    * @Description: 登陆页面的请求 \n    * @Param:  \n    * @return:  \n    */ \n    @GetMapping(\"/login_page\")\n    public String loginPage(){\n        return \"loginPage.html\";\n    }\n}\n```\n\n## 鉴权失败处理器\n\n```java\npublic class MyAccessDeniedHandler implements AccessDeniedHandler {\n    @Override\n    public void handle(HttpServletRequest httpServletRequest, HttpServletResponse response, AccessDeniedException e) throws IOException, ServletException {\n        response.setContentType(\"application/json;charset=UTF-8\");\n        PrintWriter writer = response.getWriter();\n        writer.write(\"{\\\"code\\\":\\\"403\\\",\\\"msg\\\":\\\"没有权限\\\"}\");\n        writer.close();\n    }\n}\n```\n\n## 验证器\n\n```java\npublic class MyAuthenticationProvider  implements AuthenticationProvider {\n    private UserDetailsService userDetailsService;\n    private BCryptPasswordEncoder bCryptPasswordEncoder;\n\n    public MyAuthenticationProvider(UserDetailsService userDetailsService, BCryptPasswordEncoder bCryptPasswordEncoder) {\n        this.userDetailsService = userDetailsService;\n        this.bCryptPasswordEncoder = bCryptPasswordEncoder;\n    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n//       这里写验证逻辑\n        return null;\n    }\n\n    @Override\n    public boolean supports(Class<?> aClass) {\n        return true;\n    }\n}\n```\n\n## 验证成功处理器\n\n```java\nublic class MyAuthenticationSuccessHandler extends SimpleUrlAuthenticationSuccessHandler {\n    @Override\n    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {\n        //随便写点啥\n    }\n}\n```\n\n## 投票器\n\n```java\n/**\n * @program: security-test\n * @description: 鉴权投票器\n * @author: muggle\n * @create: 2019-04-11\n **/\n\npublic class MyExpressionVoter extends WebExpressionVoter {\n    @Override\n    public int vote(Authentication authentication, FilterInvocation fi, Collection<ConfigAttribute> attributes) {\n//        这里写鉴权逻辑\n        System.out.println(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\");\n        return 1 ;\n    }\n}\n```\n\n## 自定义token处理过滤器\n\n```java\n/**\n * @program: security-about\n * @description:填充一个token\n * @author: muggle\n * @create: 2019-04-20\n **/\n\npublic class MyFittler extends OncePerRequestFilter {\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        String token1 = request.getHeader(\"token\");\n        if (token1==null){\n\n        }\n\n        ArrayList<GrantedAuthority> list = new ArrayList<>();\n        GrantedAuthority grantedAuthority = new GrantedAuthority() {\n            @Override\n            public String getAuthority() {\n                return \"test\";\n            }\n        };\n        list.add(grantedAuthority);\n        UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(\"test\",\"test\",list);\n        SecurityContextHolder.getContext().setAuthentication(token);\n        filterChain.doFilter(request, response);\n    }\n}\n```\n\n## 登出成功处理器\n\n```java\npublic class MyLogoutSuccessHandler implements LogoutSuccessHandler {\n    @Override\n    public void onLogoutSuccess(HttpServletRequest httpServletRequest, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {\n        final PrintWriter writer = response.getWriter();\n\n        writer.write(\"{\\\"code\\\":\\\"200\\\",\\\"msg\\\":\\\"登出成功\\\"}\");\n        writer.close();\n    }\n}\n```\n\n## 登陆失败处理器\n\n```java\npublic class MyUrlAuthenticationFailureHandler extends SimpleUrlAuthenticationFailureHandler {\n    @Override\n    public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException, ServletException {\n        response.setContentType(\"application/json;charset=UTF-8\");\n        final PrintWriter writer = response.getWriter();\n        if(exception.getMessage().equals(\"坏的凭证\")){\n            writer.write(\"{\\\"code\\\":\\\"401\\\",\\\"msg\\\":\\\"登录失败,用户名或者密码有误\\\"}\");\n            writer.close();\n        }else {\n            writer.write(\"{\\\"code\\\":\\\"401\\\",\\\"msg\\\":\\\"登录失败,\"+exception.getMessage()+\"\\\"}\");\n            writer.close();\n        }\n\n    }\n}\n```\n\n## 自定义UsernamePasswordAuthenticationFilter\n\n```java\n/**\n * @program: security-test\n * @description: 用户登陆逻辑过滤器\n * @author: muggle\n * @create: 2019-04-11\n **/\n\npublic class MyUsernamePasswordAuthenticationFilte extends UsernamePasswordAuthenticationFilter {\n    private RedisService redisService;\n    private boolean postOnly = true;\n\n    public MyUsernamePasswordAuthenticationFilte(RedisService redisService){\n        this.redisService=redisService;\n    }\n\n    @Override\n    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {\n     \n        //你可以在这里做验证码校验，校验不通过抛出AuthenticationException()即可\n            super.attemptAuthentication(request,response);\n    }\n}\n```\n\n## 配置\n\n```java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Autowired\n    RedisService redisService;\n    @Autowired\n    MyUserDetailService userDetailService;\n  \n    @Override\n    public void configure(WebSecurity web) throws Exception {\n\n        web.ignoring().antMatchers(\"/resources/**/*.html\", \"/resources/**/*.js\",\n                \"/resources/**/*.css\", \"/resources/**/*.txt\",\n                \"/resources/**/*.png\", \"/**/*.bmp\", \"/**/*.gif\", \"/**/*.png\", \"/**/*.jpg\", \"/**/*.ico\");\n//        super.configure(web);\n    }\n\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n//        配置登录页等 permitAll表示任何权限都能访问\n       http.formLogin().loginPage(\"/login_page\").passwordParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/sign_in\").permitAll()\n               .and().authorizeRequests().antMatchers(\"/test\").hasRole(\"test\")\n//               任何请求都被accessDecisionManager() 的鉴权器管理\n               .anyRequest().authenticated().accessDecisionManager(accessDecisionManager())\n//               登出配置\n               .and().logout().logoutUrl(\"/logout\").logoutSuccessHandler(new MyLogoutSuccessHandler())\n//               关闭csrf\n               .and().csrf().disable();\n       http.authorizeRequests().antMatchers(\"/tets_a/**\",\"/test_b/**\").hasRole(\"test\").antMatchers(\"/a/**\",\"/b/**\").authenticated().accessDecisionManager(accessDecisionManager())\n//      加自定义过滤器\n        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);\n//        配置鉴权失败的处理器\n        http.exceptionHandling().accessDeniedHandler(new MyAccessDeniedHandler());\n        http.addFilterAfter(new MyFittler(), LogoutFilter.class);\n\n    }\n\n\n    MyUsernamePasswordAuthenticationFilte getAuthenticationFilter(){\n        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = new MyUsernamePasswordAuthenticationFilte(redisService);\n        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(new MyUrlAuthenticationFailureHandler());\n        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(new MyAuthenticationSuccessHandler());\n        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(\"/sign_in\");\n        myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());\n        return myUsernamePasswordAuthenticationFilte;\n    }\n    MyAuthenticationProvider getMyAuthenticationProvider(){\n        MyAuthenticationProvider myAuthenticationProvider = new MyAuthenticationProvider(userDetailService,new BCryptPasswordEncoder());\n        return myAuthenticationProvider;\n    }\n    DaoAuthenticationProvider daoAuthenticationProvider(){\n        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();\n        daoAuthenticationProvider.setPasswordEncoder(new BCryptPasswordEncoder());\n        daoAuthenticationProvider.setUserDetailsService(userDetailService);\n        return daoAuthenticationProvider;\n    }\n    protected AuthenticationManager getAuthenticationManager()  {\n        ProviderManager authenticationManager = new ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));\n        return authenticationManager;\n    }\n\n    public AccessDecisionManager accessDecisionManager(){\n        List<AccessDecisionVoter<? extends Object>> decisionVoters\n                = Arrays.asList(\n                new MyExpressionVoter(),\n                new WebExpressionVoter(),\n                new RoleVoter(),\n                new AuthenticatedVoter());\n        return new UnanimousBased(decisionVoters);\n\n    }\n}\n```\n\n# 总结\n\n对于security的扩展配置关键在于`configure(HttpSecurity http)`方法；扩展认证方式可以自定义`authenticationManager`并加入自己验证器，在验证器中抛出异常不会终止验证流程；扩展鉴权方式可以自定义`accessDecisionManager`然后添加自己的投票器并绑定到对应的url（url 匹配方式为ant）上，投票器`vote(Authentication authentication, FilterInvocation fi, Collection<ConfigAttribute> attributes)`方法返回值为三种：-1 0 1，分别表示反对弃权赞成；\n\n对于token认证的校验方式，可以暴露一个获取的接口，或者重写`UsernamePasswordAuthenticationFilter`过滤器和扩展登陆成功处理器来获取token，然后在`LogoutFilter`之后添加一个自定义过滤器，用于校验和填充SecurityContextHolder\n\nsecurity的处理器大部分都是重定向的，我们的项目如果是前后端分离的话，我们希望无论什么情况都返回json,那么就需要重写各个处理器了。","slug":"springSecurity2","published":1,"updated":"2019-04-26T01:45:14.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxts0033vovmz1jwz6aa","content":"<p>作者：muggle</p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>由于第一版排版实在太过糟糕，而且很多细节没交代清楚，所以决定写第二版；这一版争取将排版设计得清晰明了一点，以方便读者阅读。</p>\n<h1 id=\"security原理分析\"><a href=\"#security原理分析\" class=\"headerlink\" title=\"security原理分析\"></a>security原理分析</h1><h2 id=\"springSecurity过滤器链\"><a href=\"#springSecurity过滤器链\" class=\"headerlink\" title=\"springSecurity过滤器链\"></a>springSecurity过滤器链</h2><p>springSecurity 采用的是责任链的设计模式，它有一条很长的过滤器链。现在对这条过滤器链的各个进行说明</p>\n<blockquote>\n<ol>\n<li><p>WebAsyncManagerIntegrationFilter：将Security上下文与Spring Web中用于处理异步请求映射的 WebAsyncManager 进行集成。</p>\n</li>\n<li><p>SecurityContextPersistenceFilter：在每次请求处理之前将该请求相关的安全上下文信息加载到SecurityContextHolder中，然后在该次请求处理完成之后，将SecurityContextHolder中关于这次请求的信息存储到一个“仓储”中，然后将SecurityContextHolder中的信息清除<br>例如在Session中维护一个用户的安全信息就是这个过滤器处理的。</p>\n</li>\n<li><p>HeaderWriterFilter：用于将头信息加入响应中</p>\n</li>\n<li>CsrfFilter：用于处理跨站请求伪造</li>\n<li>LogoutFilter：用于处理退出登录</li>\n<li>UsernamePasswordAuthenticationFilter：用于处理基于表单的登录请求，从表单中获取用户名和密码。默认情况下处理来自“/login”的请求。从表单中获取用户名和密码时，默认使用的表单name值为“username”和“password”，这两个值可以通过设置这个过滤器的usernameParameter 和 passwordParameter 两个参数的值进行修改。</li>\n<li>DefaultLoginPageGeneratingFilter：如果没有配置登录页面，那系统初始化时就会配置这个过滤器，并且用于在需要进行登录时生成一个登录表单页面。</li>\n<li>BasicAuthenticationFilter：检测和处理http basic认证</li>\n<li>RequestCacheAwareFilter：用来处理请求的缓存</li>\n<li>SecurityContextHolderAwareRequestFilter：主要是包装请求对象request</li>\n<li>AnonymousAuthenticationFilter：检测SecurityContextHolder中是否存在Authentication对象，如果不存在为其提供一个匿名Authentication</li>\n<li>SessionManagementFilter：管理session的过滤器</li>\n<li>ExceptionTranslationFilter：处理 AccessDeniedException 和 AuthenticationException 异常</li>\n<li>FilterSecurityInterceptor：可以看做过滤器链的出口</li>\n<li>RememberMeAuthenticationFilter：当用户没有登录而直接访问资源时, 从cookie里找出用户的信息, 如果Spring Security能够识别出用户提供的remember me cookie, 用户将不必填写用户名和密码, 而是直接登录进入系统，该过滤器默认不开启。</li>\n</ol>\n</blockquote>\n<h2 id=\"springSecurity-流程图\"><a href=\"#springSecurity-流程图\" class=\"headerlink\" title=\"springSecurity 流程图\"></a>springSecurity 流程图</h2><p>上一版是通过debug的方法告诉读者springSecurity的一个执行过程，发现反而把问题搞复杂了，这一版我决定画一个流程图来说明其执行过程，只要把springSecurity的执行过程弄明白了，这个框架就会变得很简单</p>\n<a id=\"more\"></a>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/13612520-e6bfb247ef6edf01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"security.png\"></p>\n<h2 id=\"流程说明\"><a href=\"#流程说明\" class=\"headerlink\" title=\"流程说明\"></a>流程说明</h2><ol>\n<li><p>客户端发起一个请求，进入security过滤器链；</p>\n</li>\n<li><p>当到LogoutFilter的时候判断是否是登出路径，如果是登出路径则到logoutHandler，如果登出成功则到logoutSuccessHandler登出成功处理，如果登出失败则由ExceptionTranslationFilter；如果不是登出路径则直接进入下一个过滤器；</p>\n</li>\n<li><p>当到UsernamePasswordAuthenticationFilter的时候判断是否为登陆路径，如果是，则进入该过滤器进行登陆操作，如果登陆失败则到AuthenticationFailureHandler登陆失败处理器处理，如果登陆成功则到AuthenticationSuccessHandler登陆成功处理器处理 ；如果不是登陆请求则不进入该过滤器</p>\n</li>\n<li><p>当到FilterSecurityInterceptor的时候会拿到urI，根据uri去找对应的鉴权管理器，鉴权管理器做鉴权工作，鉴权成功则到controller层否则到AccessDeniedHandler鉴权失败处理器处理</p>\n</li>\n</ol>\n<h1 id=\"security配置\"><a href=\"#security配置\" class=\"headerlink\" title=\"security配置\"></a>security配置</h1><p>在<code>WebSecurityConfigurerAdapter</code>这个类里面可以完成上述流程图的所有配置</p>\n<h2 id=\"配置类伪代码\"><a href=\"#配置类伪代码\" class=\"headerlink\" title=\"配置类伪代码\"></a>配置类伪代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> **/</span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        auth.userDetailsService(userDetailService).passwordEncoder(<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(WebSecurity web)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        web.ignoring().antMatchers(<span class=\"string\">\"/resources/**/*.html\"</span>, <span class=\"string\">\"/resources/**/*.js\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">       http.formLogin().loginPage(<span class=\"string\">\"/login_page\"</span>).passwordParameter(<span class=\"string\">\"username\"</span>).passwordParameter(<span class=\"string\">\"password\"</span>).loginProcessingUrl(<span class=\"string\">\"/sign_in\"</span>).permitAll()</span><br><span class=\"line\">               .and().authorizeRequests().antMatchers(<span class=\"string\">\"/test\"</span>).hasRole(<span class=\"string\">\"test\"</span>)</span><br><span class=\"line\">               .anyRequest().authenticated().accessDecisionManager(accessDecisionManager())</span><br><span class=\"line\">               .and().logout().logoutSuccessHandler(<span class=\"keyword\">new</span> MyLogoutSuccessHandler())</span><br><span class=\"line\">               .and().csrf().disable();</span><br><span class=\"line\">        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\">        http.exceptionHandling().accessDeniedHandler(<span class=\"keyword\">new</span> MyAccessDeniedHandler());</span><br><span class=\"line\">        http.addFilterAfter(<span class=\"keyword\">new</span> MyFittler(), LogoutFilter.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置类说明\"><a href=\"#配置类说明\" class=\"headerlink\" title=\"配置类说明\"></a>配置类说明</h2><h3 id=\"configure-AuthenticationManagerBuilder-auth-说明\"><a href=\"#configure-AuthenticationManagerBuilder-auth-说明\" class=\"headerlink\" title=\"configure(AuthenticationManagerBuilder auth) 说明\"></a>configure(AuthenticationManagerBuilder auth) 说明</h3><p>AuthenticationManager的建造器，配置AuthenticationManagerBuilder 会让security自动构建一个AuthenticationManager（该类的功能参考流程图）；如果想要使用该功能你需要配置一个UserDetailService和passwordEncoder。userDetailsService用于在认证器中根据用户传过来的用户名查找一个用户，passwordEncoder用于密码的加密与比对，我们存储用户密码的时候用passwordEncoder.encode()加密存储，在认证器里会调用passwordEncoder.matches()方法进行密码比对。</p>\n<p>如果重写了该方法，security会启用DaoAuthenticationProvider这个认证器，该认证就是先调用UserDetailsService.loadUserByUsername然后使用passwordEncoder.matches()进行密码比对，如果认证成功成功则返回一个Authentication对象</p>\n<h3 id=\"configure-WebSecurity-web-说明\"><a href=\"#configure-WebSecurity-web-说明\" class=\"headerlink\" title=\"configure(WebSecurity web)说明\"></a>configure(WebSecurity web)说明</h3><p>这个配置方法用于配置静态资源的处理方式，可使用ant匹配规则</p>\n<h3 id=\"configure-HttpSecurity-http-说明\"><a href=\"#configure-HttpSecurity-http-说明\" class=\"headerlink\" title=\"configure(HttpSecurity http) 说明\"></a>configure(HttpSecurity http) 说明</h3><p>这个配置方法是最关键的方法，也是最复杂的方法。我们慢慢掰开来说</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.formLogin().loginPage(<span class=\"string\">\"/login_page\"</span>).passwordParameter(<span class=\"string\">\"username\"</span>).passwordParameter(<span class=\"string\">\"password\"</span>).loginProcessingUrl(<span class=\"string\">\"/sign_in\"</span>).permitAll()</span><br></pre></td></tr></table></figure>\n<p>这是配置登陆相关的操作从方法名可知，配置了登录页请求路径，密码属性名，用户名属性名，和登陆请求路径，permitAll()代表任意用户可访问</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">\"/test\"</span>).hasRole(<span class=\"string\">\"test\"</span>).anyRequest().authenticated().accessDecisionManager(accessDecisionManager());</span><br></pre></td></tr></table></figure>\n<p>以上配置是权限相关的配置，配置了一个“/test” url该有什么权限才能访问，anyRequest()表示所有请求，authenticated()表示已登录用户，accessDecisionManager（）表示绑定在url上的鉴权管理器</p>\n<p>为了对比，现在贴出另一个权限配置清单</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.authorizeRequests().antMatchers(&quot;/tets_a/**&quot;,&quot;/test_b/**&quot;).hasRole(&quot;test&quot;).antMatchers(&quot;/a/**&quot;,&quot;/b/**&quot;).authenticated().accessDecisionManager(accessDecisionManager())</span><br></pre></td></tr></table></figure>\n<p>我们可以看到权限配置的自由度很高，鉴权管理器可以绑定到任意url上；而且可以硬编码各种url权限;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.logout().logoutUrl(<span class=\"string\">\"/logout\"</span>).logoutSuccessHandler(<span class=\"keyword\">new</span> MyLogoutSuccessHandler())</span><br></pre></td></tr></table></figure>\n<p>登出相关配置，这里配置了登出url和登出成功处理器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.exceptionHandling().accessDeniedHandler(<span class=\"keyword\">new</span> MyAccessDeniedHandler());</span><br></pre></td></tr></table></figure>\n<p>上面代码是配置鉴权失败的处理器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.addFilterAfter(<span class=\"keyword\">new</span> MyFittler(), LogoutFilter.class);</span><br><span class=\"line\">http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);</span><br></pre></td></tr></table></figure>\n<p>上面代码展示如何在过滤器链中插入自己的过滤器，addFilterBefore加在对应的过滤器之前addFilterAfter之后，addFilterAt加在过滤器同一位置，事实上框架原有的Filter在启动HttpSecurity配置的过程中，都由框架完成了其一定程度上固定的配置，是不允许更改替换的。根据测试结果来看，调用addFilterAt方法插入的Filter，会在这个位置上的原有Filter之前执行。</p>\n<p>注：关于HttpSecurity使用的是链式编程，其中http.xxxx.and.yyyyy这种写法和http.xxxx;http.yyyy写法意义一样。</p>\n<h3 id=\"自定义authenticationManager和accessDecisionManager\"><a href=\"#自定义authenticationManager和accessDecisionManager\" class=\"headerlink\" title=\"自定义authenticationManager和accessDecisionManager\"></a>自定义authenticationManager和accessDecisionManager</h3><p>重写authenticationManagerBean()方法，并构造一个authenticationManager</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AuthenticationManager <span class=\"title\">authenticationManagerBean</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ProviderManager authenticationManager = <span class=\"keyword\">new</span> ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> authenticationManager;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>我这里给authenticationManager配置了两个认证器，执行过程参考流程图</p>\n<p>定义构造AccessDecisionManager的方法并在配置类中调用，配置参考 configure(HttpSecurity http) 说明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> AccessDecisionManager <span class=\"title\">accessDecisionManager</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;AccessDecisionVoter&lt;? extends Object&gt;&gt; decisionVoters</span><br><span class=\"line\">                = Arrays.asList(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> MyExpressionVoter(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> WebExpressionVoter(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> RoleVoter(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> AuthenticatedVoter());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UnanimousBased(decisionVoters);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>投票管理器会收集投票器投票结果做统计，最终结果大于等于0代表通过；每个投票器会返回三个结果：-1（反对），0（通过），1（赞成）。</p>\n<h1 id=\"security-权限用户系统说明\"><a href=\"#security-权限用户系统说明\" class=\"headerlink\" title=\"security 权限用户系统说明\"></a>security 权限用户系统说明</h1><h2 id=\"UserDetails\"><a href=\"#UserDetails\" class=\"headerlink\" title=\"UserDetails\"></a>UserDetails</h2><p>security中的用户接口，我们自定义用户类要实现该接口，各个属性的含义自行百度</p>\n<h2 id=\"GrantedAuthority\"><a href=\"#GrantedAuthority\" class=\"headerlink\" title=\"GrantedAuthority\"></a>GrantedAuthority</h2><p>security中的用户权限接口，自定义权限需要实现该接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGrantedAuthority</span> <span class=\"keyword\">implements</span> <span class=\"title\">GrantedAuthority</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String authority;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>authority权限字段，需要注意的是在config中配置的权限会被加上ROLE_前缀，比如我们的配置authorizeRequests().antMatchers(“/test”).hasRole(“test”)，配置了一个“test”权限但我们存储的权限字段（authority）应该是“ROLE_test”</p>\n<h2 id=\"UserDetailsService\"><a href=\"#UserDetailsService\" class=\"headerlink\" title=\"UserDetailsService\"></a>UserDetailsService</h2><p>security用户service，自定义用户服务类需要实现该接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUserDetailService</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDetailsService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UserDetails <span class=\"title\">loadUserByUsername</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>.....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>loadUserByUsername的作用在上文中已经说明；</p>\n<h2 id=\"SecurityContextHolder\"><a href=\"#SecurityContextHolder\" class=\"headerlink\" title=\"SecurityContextHolder\"></a>SecurityContextHolder</h2><p>用户在完成登陆后security会将用户信息存储到这个类中，之后其他流程需要得到用户信息时都是从这个类中获得，用户信息被封装成SecurityContext ，而实际存储的类是SecurityContextHolderStrategy ，默认的SecurityContextHolderStrategy 实现类是ThreadLocalSecurityContextHolderStrategy 它使用了ThreadLocal来存储了用户信息。</p>\n<p>手动填充SecurityContextHolder示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UsernamePasswordAuthenticationToken token = <span class=\"keyword\">new</span> UsernamePasswordAuthenticationToken(<span class=\"string\">\"test\"</span>,<span class=\"string\">\"test\"</span>,list);</span><br><span class=\"line\">SecurityContextHolder.getContext().setAuthentication(token);</span><br></pre></td></tr></table></figure>\n<p>对于token鉴权的系统</p>\n<p>我们就可以验证token后手动填充SecurityContextHolder，填充时机只要在执行投票器之前即可，或者干脆可以在投票器中填充，然后在登出操作中清空SecurityContextHolder。</p>\n<h1 id=\"security扩展说明\"><a href=\"#security扩展说明\" class=\"headerlink\" title=\"security扩展说明\"></a>security扩展说明</h1><p>可扩展的有</p>\n<ul>\n<li>鉴权失败处理器：security鉴权失败默认跳转登陆页面，我们可以</li>\n<li>验证器</li>\n<li>登陆成功处理器</li>\n<li>投票器</li>\n<li>自定义token处理过滤器</li>\n<li>登出成功处理器</li>\n<li>登陆失败处理器</li>\n<li>自定义UsernamePasswordAuthenticationFilter</li>\n</ul>\n<h2 id=\"鉴权失败处理器\"><a href=\"#鉴权失败处理器\" class=\"headerlink\" title=\"鉴权失败处理器\"></a>鉴权失败处理器</h2><p>security鉴权失败默认跳转登陆页面，我们可以实现AccessDeniedHandler接口，重写handle()方法来自定义处理逻辑；然后参考配置类说明将处理器加入到配置当中</p>\n<h2 id=\"验证器\"><a href=\"#验证器\" class=\"headerlink\" title=\"验证器\"></a>验证器</h2><p>实现AuthenticationProvider接口来实现自己验证逻辑。需要注意的是在这个类里面就算你抛出异常，也不会中断验证流程，而是算你验证失败，我们由流程图知道，只要有一个验证器验证成功，就算验证成功，所以你需要留意这一点</p>\n<h2 id=\"登陆成功处理器\"><a href=\"#登陆成功处理器\" class=\"headerlink\" title=\"登陆成功处理器\"></a>登陆成功处理器</h2><p>在security中验证成功默认跳转到上一次请求页面或者路径为”/“的页面，我们同样可以自定义：继承SimpleUrlAuthenticationSuccessHandler这个类或者实现AuthenticationSuccessHandler接口。我这里建议采用继承的方式；SimpleUrlAuthenticationSuccessHandler是默认的处理器，采用继承可以契合里氏替换原则，提高代码的复用性和避免不必要的错误。</p>\n<h2 id=\"投票器\"><a href=\"#投票器\" class=\"headerlink\" title=\"投票器\"></a>投票器</h2><p>投票器可继承WebExpressionVoter或者实现AccessDecisionVoter<filterinvocation>接口；WebExpressionVoter是security默认的投票器；我这里同样建议采用继承的方式；添加到配置的方式参考 配置类说明章节；</filterinvocation></p>\n<p>注意：投票器vote方法返回一个int值；-1代表反对，0代表弃权，1代表赞成；投票管理器收集投票结果，如果最终结果大于等于0则放行该请求。</p>\n<h2 id=\"自定义token处理过滤器\"><a href=\"#自定义token处理过滤器\" class=\"headerlink\" title=\"自定义token处理过滤器\"></a>自定义token处理过滤器</h2><p>自定义token处理器继承自可OncePerRequestFilter或者GenericFilterBean或者Filter都可以，在这个处理器里面需要完成的逻辑是：获取请求里的token，验证token是否合法然后填充SecurityContextHolder，虽然说过滤器只要添加在投票器之前就可以；但我这里还是建议添加在http.addFilterAfter(new MyFittler(), LogoutFilter.class);</p>\n<h2 id=\"登出成功处理器\"><a href=\"#登出成功处理器\" class=\"headerlink\" title=\"登出成功处理器\"></a>登出成功处理器</h2><p>实现LogoutSuccessHandler接口，添加到配置的方式参考 配置类说明章节</p>\n<h2 id=\"登陆失败处理器\"><a href=\"#登陆失败处理器\" class=\"headerlink\" title=\"登陆失败处理器\"></a>登陆失败处理器</h2><p>登陆失败默认跳转到登陆页，我们同样可以自定义。继承SimpleUrlAuthenticationFailureHandler 或者实现AuthenticationFailureHandler；建议采用继承。</p>\n<h2 id=\"自定义UsernamePasswordAuthenticationFilter\"><a href=\"#自定义UsernamePasswordAuthenticationFilter\" class=\"headerlink\" title=\"自定义UsernamePasswordAuthenticationFilter\"></a>自定义UsernamePasswordAuthenticationFilter</h2><p>我们自定义UsernamePasswordAuthenticationFilter可以极大提高我们security的灵活性（比如添加验证验证码是否正确的功能），所以我这里是建议自定义UsernamePasswordAuthenticationFilter；</p>\n<p>我们直接继承UsernamePasswordAuthenticationFilter，然后在配置类中初始化这个过滤器，给这个过滤器添加登陆失败处理器，登陆成功处理器，登陆管理器，登陆请求url</p>\n<p>这里配置略微复杂，贴一下代码清单</p>\n<p>初始化过滤器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">MyUsernamePasswordAuthenticationFilte <span class=\"title\">getAuthenticationFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = <span class=\"keyword\">new</span> MyUsernamePasswordAuthenticationFilte(redisService);</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(<span class=\"keyword\">new</span> MyUrlAuthenticationFailureHandler());</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(<span class=\"keyword\">new</span> MyAuthenticationSuccessHandler());</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(<span class=\"string\">\"/sign_in\"</span>);</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myUsernamePasswordAuthenticationFilte;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>添加到配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);</span><br></pre></td></tr></table></figure>\n<h1 id=\"代码清单\"><a href=\"#代码清单\" class=\"headerlink\" title=\"代码清单\"></a>代码清单</h1><p>下面贴出适配于 前后端分离和token验证的伪代码清单</p>\n<h2 id=\"登陆页请求处理\"><a href=\"#登陆页请求处理\" class=\"headerlink\" title=\"登陆页请求处理\"></a>登陆页请求处理</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@Description</span>: 登陆页面的请求 </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@Param</span>:  </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span>:  </span></span><br><span class=\"line\"><span class=\"comment\">    */</span> </span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/login_page\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">loginPage</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"loginPage.html\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"鉴权失败处理器-1\"><a href=\"#鉴权失败处理器-1\" class=\"headerlink\" title=\"鉴权失败处理器\"></a>鉴权失败处理器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAccessDeniedHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">AccessDeniedHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(HttpServletRequest httpServletRequest, HttpServletResponse response, AccessDeniedException e)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"application/json;charset=UTF-8\"</span>);</span><br><span class=\"line\">        PrintWriter writer = response.getWriter();</span><br><span class=\"line\">        writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"403\\\",\\\"msg\\\":\\\"没有权限\\\"&#125;\"</span>);</span><br><span class=\"line\">        writer.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"验证器-1\"><a href=\"#验证器-1\" class=\"headerlink\" title=\"验证器\"></a>验证器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAuthenticationProvider</span>  <span class=\"keyword\">implements</span> <span class=\"title\">AuthenticationProvider</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserDetailsService userDetailsService;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BCryptPasswordEncoder bCryptPasswordEncoder;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyAuthenticationProvider</span><span class=\"params\">(UserDetailsService userDetailsService, BCryptPasswordEncoder bCryptPasswordEncoder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.userDetailsService = userDetailsService;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.bCryptPasswordEncoder = bCryptPasswordEncoder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Authentication <span class=\"title\">authenticate</span><span class=\"params\">(Authentication authentication)</span> <span class=\"keyword\">throws</span> AuthenticationException </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//       这里写验证逻辑</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supports</span><span class=\"params\">(Class&lt;?&gt; aClass)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"验证成功处理器\"><a href=\"#验证成功处理器\" class=\"headerlink\" title=\"验证成功处理器\"></a>验证成功处理器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ublic <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAuthenticationSuccessHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleUrlAuthenticationSuccessHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAuthenticationSuccess</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//随便写点啥</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"投票器-1\"><a href=\"#投票器-1\" class=\"headerlink\" title=\"投票器\"></a>投票器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@program</span>: security-test</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 鉴权投票器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: muggle</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span>: 2019-04-11</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyExpressionVoter</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebExpressionVoter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">vote</span><span class=\"params\">(Authentication authentication, FilterInvocation fi, Collection&lt;ConfigAttribute&gt; attributes)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        这里写鉴权逻辑</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义token处理过滤器-1\"><a href=\"#自定义token处理过滤器-1\" class=\"headerlink\" title=\"自定义token处理过滤器\"></a>自定义token处理过滤器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@program</span>: security-about</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:填充一个token</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: muggle</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span>: 2019-04-20</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFittler</span> <span class=\"keyword\">extends</span> <span class=\"title\">OncePerRequestFilter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilterInternal</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String token1 = request.getHeader(<span class=\"string\">\"token\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (token1==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ArrayList&lt;GrantedAuthority&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        GrantedAuthority grantedAuthority = <span class=\"keyword\">new</span> GrantedAuthority() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAuthority</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"test\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        list.add(grantedAuthority);</span><br><span class=\"line\">        UsernamePasswordAuthenticationToken token = <span class=\"keyword\">new</span> UsernamePasswordAuthenticationToken(<span class=\"string\">\"test\"</span>,<span class=\"string\">\"test\"</span>,list);</span><br><span class=\"line\">        SecurityContextHolder.getContext().setAuthentication(token);</span><br><span class=\"line\">        filterChain.doFilter(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"登出成功处理器-1\"><a href=\"#登出成功处理器-1\" class=\"headerlink\" title=\"登出成功处理器\"></a>登出成功处理器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLogoutSuccessHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">LogoutSuccessHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLogoutSuccess</span><span class=\"params\">(HttpServletRequest httpServletRequest, HttpServletResponse response, Authentication authentication)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> PrintWriter writer = response.getWriter();</span><br><span class=\"line\"></span><br><span class=\"line\">        writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"200\\\",\\\"msg\\\":\\\"登出成功\\\"&#125;\"</span>);</span><br><span class=\"line\">        writer.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"登陆失败处理器-1\"><a href=\"#登陆失败处理器-1\" class=\"headerlink\" title=\"登陆失败处理器\"></a>登陆失败处理器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUrlAuthenticationFailureHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleUrlAuthenticationFailureHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAuthenticationFailure</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"application/json;charset=UTF-8\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> PrintWriter writer = response.getWriter();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(exception.getMessage().equals(<span class=\"string\">\"坏的凭证\"</span>))&#123;</span><br><span class=\"line\">            writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"401\\\",\\\"msg\\\":\\\"登录失败,用户名或者密码有误\\\"&#125;\"</span>);</span><br><span class=\"line\">            writer.close();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"401\\\",\\\"msg\\\":\\\"登录失败,\"</span>+exception.getMessage()+<span class=\"string\">\"\\\"&#125;\"</span>);</span><br><span class=\"line\">            writer.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义UsernamePasswordAuthenticationFilter-1\"><a href=\"#自定义UsernamePasswordAuthenticationFilter-1\" class=\"headerlink\" title=\"自定义UsernamePasswordAuthenticationFilter\"></a>自定义UsernamePasswordAuthenticationFilter</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@program</span>: security-test</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 用户登陆逻辑过滤器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: muggle</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span>: 2019-04-11</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUsernamePasswordAuthenticationFilte</span> <span class=\"keyword\">extends</span> <span class=\"title\">UsernamePasswordAuthenticationFilter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisService redisService;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> postOnly = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyUsernamePasswordAuthenticationFilte</span><span class=\"params\">(RedisService redisService)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.redisService=redisService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Authentication <span class=\"title\">attemptAuthentication</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> AuthenticationException </span>&#123;</span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"comment\">//你可以在这里做验证码校验，校验不通过抛出AuthenticationException()即可</span></span><br><span class=\"line\">            <span class=\"keyword\">super</span>.attemptAuthentication(request,response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    RedisService redisService;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    MyUserDetailService userDetailService;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(WebSecurity web)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        web.ignoring().antMatchers(<span class=\"string\">\"/resources/**/*.html\"</span>, <span class=\"string\">\"/resources/**/*.js\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"/resources/**/*.css\"</span>, <span class=\"string\">\"/resources/**/*.txt\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"/resources/**/*.png\"</span>, <span class=\"string\">\"/**/*.bmp\"</span>, <span class=\"string\">\"/**/*.gif\"</span>, <span class=\"string\">\"/**/*.png\"</span>, <span class=\"string\">\"/**/*.jpg\"</span>, <span class=\"string\">\"/**/*.ico\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//        super.configure(web);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        配置登录页等 permitAll表示任何权限都能访问</span></span><br><span class=\"line\">       http.formLogin().loginPage(<span class=\"string\">\"/login_page\"</span>).passwordParameter(<span class=\"string\">\"username\"</span>).passwordParameter(<span class=\"string\">\"password\"</span>).loginProcessingUrl(<span class=\"string\">\"/sign_in\"</span>).permitAll()</span><br><span class=\"line\">               .and().authorizeRequests().antMatchers(<span class=\"string\">\"/test\"</span>).hasRole(<span class=\"string\">\"test\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//               任何请求都被accessDecisionManager() 的鉴权器管理</span></span><br><span class=\"line\">               .anyRequest().authenticated().accessDecisionManager(accessDecisionManager())</span><br><span class=\"line\"><span class=\"comment\">//               登出配置</span></span><br><span class=\"line\">               .and().logout().logoutUrl(<span class=\"string\">\"/logout\"</span>).logoutSuccessHandler(<span class=\"keyword\">new</span> MyLogoutSuccessHandler())</span><br><span class=\"line\"><span class=\"comment\">//               关闭csrf</span></span><br><span class=\"line\">               .and().csrf().disable();</span><br><span class=\"line\">       http.authorizeRequests().antMatchers(<span class=\"string\">\"/tets_a/**\"</span>,<span class=\"string\">\"/test_b/**\"</span>).hasRole(<span class=\"string\">\"test\"</span>).antMatchers(<span class=\"string\">\"/a/**\"</span>,<span class=\"string\">\"/b/**\"</span>).authenticated().accessDecisionManager(accessDecisionManager())</span><br><span class=\"line\"><span class=\"comment\">//      加自定义过滤器</span></span><br><span class=\"line\">        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\"><span class=\"comment\">//        配置鉴权失败的处理器</span></span><br><span class=\"line\">        http.exceptionHandling().accessDeniedHandler(<span class=\"keyword\">new</span> MyAccessDeniedHandler());</span><br><span class=\"line\">        http.addFilterAfter(<span class=\"keyword\">new</span> MyFittler(), LogoutFilter.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">MyUsernamePasswordAuthenticationFilte <span class=\"title\">getAuthenticationFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = <span class=\"keyword\">new</span> MyUsernamePasswordAuthenticationFilte(redisService);</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(<span class=\"keyword\">new</span> MyUrlAuthenticationFailureHandler());</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(<span class=\"keyword\">new</span> MyAuthenticationSuccessHandler());</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(<span class=\"string\">\"/sign_in\"</span>);</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myUsernamePasswordAuthenticationFilte;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">MyAuthenticationProvider <span class=\"title\">getMyAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        MyAuthenticationProvider myAuthenticationProvider = <span class=\"keyword\">new</span> MyAuthenticationProvider(userDetailService,<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myAuthenticationProvider;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">DaoAuthenticationProvider <span class=\"title\">daoAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        DaoAuthenticationProvider daoAuthenticationProvider = <span class=\"keyword\">new</span> DaoAuthenticationProvider();</span><br><span class=\"line\">        daoAuthenticationProvider.setPasswordEncoder(<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">        daoAuthenticationProvider.setUserDetailsService(userDetailService);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> daoAuthenticationProvider;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> AuthenticationManager <span class=\"title\">getAuthenticationManager</span><span class=\"params\">()</span>  </span>&#123;</span><br><span class=\"line\">        ProviderManager authenticationManager = <span class=\"keyword\">new</span> ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> authenticationManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AccessDecisionManager <span class=\"title\">accessDecisionManager</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;AccessDecisionVoter&lt;? extends Object&gt;&gt; decisionVoters</span><br><span class=\"line\">                = Arrays.asList(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> MyExpressionVoter(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> WebExpressionVoter(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> RoleVoter(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> AuthenticatedVoter());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UnanimousBased(decisionVoters);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>对于security的扩展配置关键在于<code>configure(HttpSecurity http)</code>方法；扩展认证方式可以自定义<code>authenticationManager</code>并加入自己验证器，在验证器中抛出异常不会终止验证流程；扩展鉴权方式可以自定义<code>accessDecisionManager</code>然后添加自己的投票器并绑定到对应的url（url 匹配方式为ant）上，投票器<code>vote(Authentication authentication, FilterInvocation fi, Collection&lt;ConfigAttribute&gt; attributes)</code>方法返回值为三种：-1 0 1，分别表示反对弃权赞成；</p>\n<p>对于token认证的校验方式，可以暴露一个获取的接口，或者重写<code>UsernamePasswordAuthenticationFilter</code>过滤器和扩展登陆成功处理器来获取token，然后在<code>LogoutFilter</code>之后添加一个自定义过滤器，用于校验和填充SecurityContextHolder</p>\n<p>security的处理器大部分都是重定向的，我们的项目如果是前后端分离的话，我们希望无论什么情况都返回json,那么就需要重写各个处理器了。</p>\n","site":{"data":{}},"excerpt":"<p>作者：muggle</p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>由于第一版排版实在太过糟糕，而且很多细节没交代清楚，所以决定写第二版；这一版争取将排版设计得清晰明了一点，以方便读者阅读。</p>\n<h1 id=\"security原理分析\"><a href=\"#security原理分析\" class=\"headerlink\" title=\"security原理分析\"></a>security原理分析</h1><h2 id=\"springSecurity过滤器链\"><a href=\"#springSecurity过滤器链\" class=\"headerlink\" title=\"springSecurity过滤器链\"></a>springSecurity过滤器链</h2><p>springSecurity 采用的是责任链的设计模式，它有一条很长的过滤器链。现在对这条过滤器链的各个进行说明</p>\n<blockquote>\n<ol>\n<li><p>WebAsyncManagerIntegrationFilter：将Security上下文与Spring Web中用于处理异步请求映射的 WebAsyncManager 进行集成。</p>\n</li>\n<li><p>SecurityContextPersistenceFilter：在每次请求处理之前将该请求相关的安全上下文信息加载到SecurityContextHolder中，然后在该次请求处理完成之后，将SecurityContextHolder中关于这次请求的信息存储到一个“仓储”中，然后将SecurityContextHolder中的信息清除<br>例如在Session中维护一个用户的安全信息就是这个过滤器处理的。</p>\n</li>\n<li><p>HeaderWriterFilter：用于将头信息加入响应中</p>\n</li>\n<li>CsrfFilter：用于处理跨站请求伪造</li>\n<li>LogoutFilter：用于处理退出登录</li>\n<li>UsernamePasswordAuthenticationFilter：用于处理基于表单的登录请求，从表单中获取用户名和密码。默认情况下处理来自“/login”的请求。从表单中获取用户名和密码时，默认使用的表单name值为“username”和“password”，这两个值可以通过设置这个过滤器的usernameParameter 和 passwordParameter 两个参数的值进行修改。</li>\n<li>DefaultLoginPageGeneratingFilter：如果没有配置登录页面，那系统初始化时就会配置这个过滤器，并且用于在需要进行登录时生成一个登录表单页面。</li>\n<li>BasicAuthenticationFilter：检测和处理http basic认证</li>\n<li>RequestCacheAwareFilter：用来处理请求的缓存</li>\n<li>SecurityContextHolderAwareRequestFilter：主要是包装请求对象request</li>\n<li>AnonymousAuthenticationFilter：检测SecurityContextHolder中是否存在Authentication对象，如果不存在为其提供一个匿名Authentication</li>\n<li>SessionManagementFilter：管理session的过滤器</li>\n<li>ExceptionTranslationFilter：处理 AccessDeniedException 和 AuthenticationException 异常</li>\n<li>FilterSecurityInterceptor：可以看做过滤器链的出口</li>\n<li>RememberMeAuthenticationFilter：当用户没有登录而直接访问资源时, 从cookie里找出用户的信息, 如果Spring Security能够识别出用户提供的remember me cookie, 用户将不必填写用户名和密码, 而是直接登录进入系统，该过滤器默认不开启。</li>\n</ol>\n</blockquote>\n<h2 id=\"springSecurity-流程图\"><a href=\"#springSecurity-流程图\" class=\"headerlink\" title=\"springSecurity 流程图\"></a>springSecurity 流程图</h2><p>上一版是通过debug的方法告诉读者springSecurity的一个执行过程，发现反而把问题搞复杂了，这一版我决定画一个流程图来说明其执行过程，只要把springSecurity的执行过程弄明白了，这个框架就会变得很简单</p>","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/13612520-e6bfb247ef6edf01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"security.png\"></p>\n<h2 id=\"流程说明\"><a href=\"#流程说明\" class=\"headerlink\" title=\"流程说明\"></a>流程说明</h2><ol>\n<li><p>客户端发起一个请求，进入security过滤器链；</p>\n</li>\n<li><p>当到LogoutFilter的时候判断是否是登出路径，如果是登出路径则到logoutHandler，如果登出成功则到logoutSuccessHandler登出成功处理，如果登出失败则由ExceptionTranslationFilter；如果不是登出路径则直接进入下一个过滤器；</p>\n</li>\n<li><p>当到UsernamePasswordAuthenticationFilter的时候判断是否为登陆路径，如果是，则进入该过滤器进行登陆操作，如果登陆失败则到AuthenticationFailureHandler登陆失败处理器处理，如果登陆成功则到AuthenticationSuccessHandler登陆成功处理器处理 ；如果不是登陆请求则不进入该过滤器</p>\n</li>\n<li><p>当到FilterSecurityInterceptor的时候会拿到urI，根据uri去找对应的鉴权管理器，鉴权管理器做鉴权工作，鉴权成功则到controller层否则到AccessDeniedHandler鉴权失败处理器处理</p>\n</li>\n</ol>\n<h1 id=\"security配置\"><a href=\"#security配置\" class=\"headerlink\" title=\"security配置\"></a>security配置</h1><p>在<code>WebSecurityConfigurerAdapter</code>这个类里面可以完成上述流程图的所有配置</p>\n<h2 id=\"配置类伪代码\"><a href=\"#配置类伪代码\" class=\"headerlink\" title=\"配置类伪代码\"></a>配置类伪代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> **/</span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        auth.userDetailsService(userDetailService).passwordEncoder(<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(WebSecurity web)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        web.ignoring().antMatchers(<span class=\"string\">\"/resources/**/*.html\"</span>, <span class=\"string\">\"/resources/**/*.js\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">       http.formLogin().loginPage(<span class=\"string\">\"/login_page\"</span>).passwordParameter(<span class=\"string\">\"username\"</span>).passwordParameter(<span class=\"string\">\"password\"</span>).loginProcessingUrl(<span class=\"string\">\"/sign_in\"</span>).permitAll()</span><br><span class=\"line\">               .and().authorizeRequests().antMatchers(<span class=\"string\">\"/test\"</span>).hasRole(<span class=\"string\">\"test\"</span>)</span><br><span class=\"line\">               .anyRequest().authenticated().accessDecisionManager(accessDecisionManager())</span><br><span class=\"line\">               .and().logout().logoutSuccessHandler(<span class=\"keyword\">new</span> MyLogoutSuccessHandler())</span><br><span class=\"line\">               .and().csrf().disable();</span><br><span class=\"line\">        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\">        http.exceptionHandling().accessDeniedHandler(<span class=\"keyword\">new</span> MyAccessDeniedHandler());</span><br><span class=\"line\">        http.addFilterAfter(<span class=\"keyword\">new</span> MyFittler(), LogoutFilter.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置类说明\"><a href=\"#配置类说明\" class=\"headerlink\" title=\"配置类说明\"></a>配置类说明</h2><h3 id=\"configure-AuthenticationManagerBuilder-auth-说明\"><a href=\"#configure-AuthenticationManagerBuilder-auth-说明\" class=\"headerlink\" title=\"configure(AuthenticationManagerBuilder auth) 说明\"></a>configure(AuthenticationManagerBuilder auth) 说明</h3><p>AuthenticationManager的建造器，配置AuthenticationManagerBuilder 会让security自动构建一个AuthenticationManager（该类的功能参考流程图）；如果想要使用该功能你需要配置一个UserDetailService和passwordEncoder。userDetailsService用于在认证器中根据用户传过来的用户名查找一个用户，passwordEncoder用于密码的加密与比对，我们存储用户密码的时候用passwordEncoder.encode()加密存储，在认证器里会调用passwordEncoder.matches()方法进行密码比对。</p>\n<p>如果重写了该方法，security会启用DaoAuthenticationProvider这个认证器，该认证就是先调用UserDetailsService.loadUserByUsername然后使用passwordEncoder.matches()进行密码比对，如果认证成功成功则返回一个Authentication对象</p>\n<h3 id=\"configure-WebSecurity-web-说明\"><a href=\"#configure-WebSecurity-web-说明\" class=\"headerlink\" title=\"configure(WebSecurity web)说明\"></a>configure(WebSecurity web)说明</h3><p>这个配置方法用于配置静态资源的处理方式，可使用ant匹配规则</p>\n<h3 id=\"configure-HttpSecurity-http-说明\"><a href=\"#configure-HttpSecurity-http-说明\" class=\"headerlink\" title=\"configure(HttpSecurity http) 说明\"></a>configure(HttpSecurity http) 说明</h3><p>这个配置方法是最关键的方法，也是最复杂的方法。我们慢慢掰开来说</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.formLogin().loginPage(<span class=\"string\">\"/login_page\"</span>).passwordParameter(<span class=\"string\">\"username\"</span>).passwordParameter(<span class=\"string\">\"password\"</span>).loginProcessingUrl(<span class=\"string\">\"/sign_in\"</span>).permitAll()</span><br></pre></td></tr></table></figure>\n<p>这是配置登陆相关的操作从方法名可知，配置了登录页请求路径，密码属性名，用户名属性名，和登陆请求路径，permitAll()代表任意用户可访问</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">\"/test\"</span>).hasRole(<span class=\"string\">\"test\"</span>).anyRequest().authenticated().accessDecisionManager(accessDecisionManager());</span><br></pre></td></tr></table></figure>\n<p>以上配置是权限相关的配置，配置了一个“/test” url该有什么权限才能访问，anyRequest()表示所有请求，authenticated()表示已登录用户，accessDecisionManager（）表示绑定在url上的鉴权管理器</p>\n<p>为了对比，现在贴出另一个权限配置清单</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.authorizeRequests().antMatchers(&quot;/tets_a/**&quot;,&quot;/test_b/**&quot;).hasRole(&quot;test&quot;).antMatchers(&quot;/a/**&quot;,&quot;/b/**&quot;).authenticated().accessDecisionManager(accessDecisionManager())</span><br></pre></td></tr></table></figure>\n<p>我们可以看到权限配置的自由度很高，鉴权管理器可以绑定到任意url上；而且可以硬编码各种url权限;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.logout().logoutUrl(<span class=\"string\">\"/logout\"</span>).logoutSuccessHandler(<span class=\"keyword\">new</span> MyLogoutSuccessHandler())</span><br></pre></td></tr></table></figure>\n<p>登出相关配置，这里配置了登出url和登出成功处理器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.exceptionHandling().accessDeniedHandler(<span class=\"keyword\">new</span> MyAccessDeniedHandler());</span><br></pre></td></tr></table></figure>\n<p>上面代码是配置鉴权失败的处理器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.addFilterAfter(<span class=\"keyword\">new</span> MyFittler(), LogoutFilter.class);</span><br><span class=\"line\">http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);</span><br></pre></td></tr></table></figure>\n<p>上面代码展示如何在过滤器链中插入自己的过滤器，addFilterBefore加在对应的过滤器之前addFilterAfter之后，addFilterAt加在过滤器同一位置，事实上框架原有的Filter在启动HttpSecurity配置的过程中，都由框架完成了其一定程度上固定的配置，是不允许更改替换的。根据测试结果来看，调用addFilterAt方法插入的Filter，会在这个位置上的原有Filter之前执行。</p>\n<p>注：关于HttpSecurity使用的是链式编程，其中http.xxxx.and.yyyyy这种写法和http.xxxx;http.yyyy写法意义一样。</p>\n<h3 id=\"自定义authenticationManager和accessDecisionManager\"><a href=\"#自定义authenticationManager和accessDecisionManager\" class=\"headerlink\" title=\"自定义authenticationManager和accessDecisionManager\"></a>自定义authenticationManager和accessDecisionManager</h3><p>重写authenticationManagerBean()方法，并构造一个authenticationManager</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AuthenticationManager <span class=\"title\">authenticationManagerBean</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ProviderManager authenticationManager = <span class=\"keyword\">new</span> ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> authenticationManager;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>我这里给authenticationManager配置了两个认证器，执行过程参考流程图</p>\n<p>定义构造AccessDecisionManager的方法并在配置类中调用，配置参考 configure(HttpSecurity http) 说明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> AccessDecisionManager <span class=\"title\">accessDecisionManager</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;AccessDecisionVoter&lt;? extends Object&gt;&gt; decisionVoters</span><br><span class=\"line\">                = Arrays.asList(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> MyExpressionVoter(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> WebExpressionVoter(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> RoleVoter(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> AuthenticatedVoter());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UnanimousBased(decisionVoters);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>投票管理器会收集投票器投票结果做统计，最终结果大于等于0代表通过；每个投票器会返回三个结果：-1（反对），0（通过），1（赞成）。</p>\n<h1 id=\"security-权限用户系统说明\"><a href=\"#security-权限用户系统说明\" class=\"headerlink\" title=\"security 权限用户系统说明\"></a>security 权限用户系统说明</h1><h2 id=\"UserDetails\"><a href=\"#UserDetails\" class=\"headerlink\" title=\"UserDetails\"></a>UserDetails</h2><p>security中的用户接口，我们自定义用户类要实现该接口，各个属性的含义自行百度</p>\n<h2 id=\"GrantedAuthority\"><a href=\"#GrantedAuthority\" class=\"headerlink\" title=\"GrantedAuthority\"></a>GrantedAuthority</h2><p>security中的用户权限接口，自定义权限需要实现该接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGrantedAuthority</span> <span class=\"keyword\">implements</span> <span class=\"title\">GrantedAuthority</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String authority;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>authority权限字段，需要注意的是在config中配置的权限会被加上ROLE_前缀，比如我们的配置authorizeRequests().antMatchers(“/test”).hasRole(“test”)，配置了一个“test”权限但我们存储的权限字段（authority）应该是“ROLE_test”</p>\n<h2 id=\"UserDetailsService\"><a href=\"#UserDetailsService\" class=\"headerlink\" title=\"UserDetailsService\"></a>UserDetailsService</h2><p>security用户service，自定义用户服务类需要实现该接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUserDetailService</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDetailsService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UserDetails <span class=\"title\">loadUserByUsername</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>.....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>loadUserByUsername的作用在上文中已经说明；</p>\n<h2 id=\"SecurityContextHolder\"><a href=\"#SecurityContextHolder\" class=\"headerlink\" title=\"SecurityContextHolder\"></a>SecurityContextHolder</h2><p>用户在完成登陆后security会将用户信息存储到这个类中，之后其他流程需要得到用户信息时都是从这个类中获得，用户信息被封装成SecurityContext ，而实际存储的类是SecurityContextHolderStrategy ，默认的SecurityContextHolderStrategy 实现类是ThreadLocalSecurityContextHolderStrategy 它使用了ThreadLocal来存储了用户信息。</p>\n<p>手动填充SecurityContextHolder示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UsernamePasswordAuthenticationToken token = <span class=\"keyword\">new</span> UsernamePasswordAuthenticationToken(<span class=\"string\">\"test\"</span>,<span class=\"string\">\"test\"</span>,list);</span><br><span class=\"line\">SecurityContextHolder.getContext().setAuthentication(token);</span><br></pre></td></tr></table></figure>\n<p>对于token鉴权的系统</p>\n<p>我们就可以验证token后手动填充SecurityContextHolder，填充时机只要在执行投票器之前即可，或者干脆可以在投票器中填充，然后在登出操作中清空SecurityContextHolder。</p>\n<h1 id=\"security扩展说明\"><a href=\"#security扩展说明\" class=\"headerlink\" title=\"security扩展说明\"></a>security扩展说明</h1><p>可扩展的有</p>\n<ul>\n<li>鉴权失败处理器：security鉴权失败默认跳转登陆页面，我们可以</li>\n<li>验证器</li>\n<li>登陆成功处理器</li>\n<li>投票器</li>\n<li>自定义token处理过滤器</li>\n<li>登出成功处理器</li>\n<li>登陆失败处理器</li>\n<li>自定义UsernamePasswordAuthenticationFilter</li>\n</ul>\n<h2 id=\"鉴权失败处理器\"><a href=\"#鉴权失败处理器\" class=\"headerlink\" title=\"鉴权失败处理器\"></a>鉴权失败处理器</h2><p>security鉴权失败默认跳转登陆页面，我们可以实现AccessDeniedHandler接口，重写handle()方法来自定义处理逻辑；然后参考配置类说明将处理器加入到配置当中</p>\n<h2 id=\"验证器\"><a href=\"#验证器\" class=\"headerlink\" title=\"验证器\"></a>验证器</h2><p>实现AuthenticationProvider接口来实现自己验证逻辑。需要注意的是在这个类里面就算你抛出异常，也不会中断验证流程，而是算你验证失败，我们由流程图知道，只要有一个验证器验证成功，就算验证成功，所以你需要留意这一点</p>\n<h2 id=\"登陆成功处理器\"><a href=\"#登陆成功处理器\" class=\"headerlink\" title=\"登陆成功处理器\"></a>登陆成功处理器</h2><p>在security中验证成功默认跳转到上一次请求页面或者路径为”/“的页面，我们同样可以自定义：继承SimpleUrlAuthenticationSuccessHandler这个类或者实现AuthenticationSuccessHandler接口。我这里建议采用继承的方式；SimpleUrlAuthenticationSuccessHandler是默认的处理器，采用继承可以契合里氏替换原则，提高代码的复用性和避免不必要的错误。</p>\n<h2 id=\"投票器\"><a href=\"#投票器\" class=\"headerlink\" title=\"投票器\"></a>投票器</h2><p>投票器可继承WebExpressionVoter或者实现AccessDecisionVoter<filterinvocation>接口；WebExpressionVoter是security默认的投票器；我这里同样建议采用继承的方式；添加到配置的方式参考 配置类说明章节；</filterinvocation></p>\n<p>注意：投票器vote方法返回一个int值；-1代表反对，0代表弃权，1代表赞成；投票管理器收集投票结果，如果最终结果大于等于0则放行该请求。</p>\n<h2 id=\"自定义token处理过滤器\"><a href=\"#自定义token处理过滤器\" class=\"headerlink\" title=\"自定义token处理过滤器\"></a>自定义token处理过滤器</h2><p>自定义token处理器继承自可OncePerRequestFilter或者GenericFilterBean或者Filter都可以，在这个处理器里面需要完成的逻辑是：获取请求里的token，验证token是否合法然后填充SecurityContextHolder，虽然说过滤器只要添加在投票器之前就可以；但我这里还是建议添加在http.addFilterAfter(new MyFittler(), LogoutFilter.class);</p>\n<h2 id=\"登出成功处理器\"><a href=\"#登出成功处理器\" class=\"headerlink\" title=\"登出成功处理器\"></a>登出成功处理器</h2><p>实现LogoutSuccessHandler接口，添加到配置的方式参考 配置类说明章节</p>\n<h2 id=\"登陆失败处理器\"><a href=\"#登陆失败处理器\" class=\"headerlink\" title=\"登陆失败处理器\"></a>登陆失败处理器</h2><p>登陆失败默认跳转到登陆页，我们同样可以自定义。继承SimpleUrlAuthenticationFailureHandler 或者实现AuthenticationFailureHandler；建议采用继承。</p>\n<h2 id=\"自定义UsernamePasswordAuthenticationFilter\"><a href=\"#自定义UsernamePasswordAuthenticationFilter\" class=\"headerlink\" title=\"自定义UsernamePasswordAuthenticationFilter\"></a>自定义UsernamePasswordAuthenticationFilter</h2><p>我们自定义UsernamePasswordAuthenticationFilter可以极大提高我们security的灵活性（比如添加验证验证码是否正确的功能），所以我这里是建议自定义UsernamePasswordAuthenticationFilter；</p>\n<p>我们直接继承UsernamePasswordAuthenticationFilter，然后在配置类中初始化这个过滤器，给这个过滤器添加登陆失败处理器，登陆成功处理器，登陆管理器，登陆请求url</p>\n<p>这里配置略微复杂，贴一下代码清单</p>\n<p>初始化过滤器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">MyUsernamePasswordAuthenticationFilte <span class=\"title\">getAuthenticationFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = <span class=\"keyword\">new</span> MyUsernamePasswordAuthenticationFilte(redisService);</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(<span class=\"keyword\">new</span> MyUrlAuthenticationFailureHandler());</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(<span class=\"keyword\">new</span> MyAuthenticationSuccessHandler());</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(<span class=\"string\">\"/sign_in\"</span>);</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myUsernamePasswordAuthenticationFilte;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>添加到配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);</span><br></pre></td></tr></table></figure>\n<h1 id=\"代码清单\"><a href=\"#代码清单\" class=\"headerlink\" title=\"代码清单\"></a>代码清单</h1><p>下面贴出适配于 前后端分离和token验证的伪代码清单</p>\n<h2 id=\"登陆页请求处理\"><a href=\"#登陆页请求处理\" class=\"headerlink\" title=\"登陆页请求处理\"></a>登陆页请求处理</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@Description</span>: 登陆页面的请求 </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@Param</span>:  </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span>:  </span></span><br><span class=\"line\"><span class=\"comment\">    */</span> </span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/login_page\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">loginPage</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"loginPage.html\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"鉴权失败处理器-1\"><a href=\"#鉴权失败处理器-1\" class=\"headerlink\" title=\"鉴权失败处理器\"></a>鉴权失败处理器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAccessDeniedHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">AccessDeniedHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(HttpServletRequest httpServletRequest, HttpServletResponse response, AccessDeniedException e)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"application/json;charset=UTF-8\"</span>);</span><br><span class=\"line\">        PrintWriter writer = response.getWriter();</span><br><span class=\"line\">        writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"403\\\",\\\"msg\\\":\\\"没有权限\\\"&#125;\"</span>);</span><br><span class=\"line\">        writer.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"验证器-1\"><a href=\"#验证器-1\" class=\"headerlink\" title=\"验证器\"></a>验证器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAuthenticationProvider</span>  <span class=\"keyword\">implements</span> <span class=\"title\">AuthenticationProvider</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserDetailsService userDetailsService;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BCryptPasswordEncoder bCryptPasswordEncoder;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyAuthenticationProvider</span><span class=\"params\">(UserDetailsService userDetailsService, BCryptPasswordEncoder bCryptPasswordEncoder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.userDetailsService = userDetailsService;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.bCryptPasswordEncoder = bCryptPasswordEncoder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Authentication <span class=\"title\">authenticate</span><span class=\"params\">(Authentication authentication)</span> <span class=\"keyword\">throws</span> AuthenticationException </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//       这里写验证逻辑</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supports</span><span class=\"params\">(Class&lt;?&gt; aClass)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"验证成功处理器\"><a href=\"#验证成功处理器\" class=\"headerlink\" title=\"验证成功处理器\"></a>验证成功处理器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ublic <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAuthenticationSuccessHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleUrlAuthenticationSuccessHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAuthenticationSuccess</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//随便写点啥</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"投票器-1\"><a href=\"#投票器-1\" class=\"headerlink\" title=\"投票器\"></a>投票器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@program</span>: security-test</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 鉴权投票器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: muggle</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span>: 2019-04-11</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyExpressionVoter</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebExpressionVoter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">vote</span><span class=\"params\">(Authentication authentication, FilterInvocation fi, Collection&lt;ConfigAttribute&gt; attributes)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        这里写鉴权逻辑</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义token处理过滤器-1\"><a href=\"#自定义token处理过滤器-1\" class=\"headerlink\" title=\"自定义token处理过滤器\"></a>自定义token处理过滤器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@program</span>: security-about</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:填充一个token</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: muggle</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span>: 2019-04-20</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFittler</span> <span class=\"keyword\">extends</span> <span class=\"title\">OncePerRequestFilter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilterInternal</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String token1 = request.getHeader(<span class=\"string\">\"token\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (token1==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ArrayList&lt;GrantedAuthority&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        GrantedAuthority grantedAuthority = <span class=\"keyword\">new</span> GrantedAuthority() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAuthority</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"test\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        list.add(grantedAuthority);</span><br><span class=\"line\">        UsernamePasswordAuthenticationToken token = <span class=\"keyword\">new</span> UsernamePasswordAuthenticationToken(<span class=\"string\">\"test\"</span>,<span class=\"string\">\"test\"</span>,list);</span><br><span class=\"line\">        SecurityContextHolder.getContext().setAuthentication(token);</span><br><span class=\"line\">        filterChain.doFilter(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"登出成功处理器-1\"><a href=\"#登出成功处理器-1\" class=\"headerlink\" title=\"登出成功处理器\"></a>登出成功处理器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLogoutSuccessHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">LogoutSuccessHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLogoutSuccess</span><span class=\"params\">(HttpServletRequest httpServletRequest, HttpServletResponse response, Authentication authentication)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> PrintWriter writer = response.getWriter();</span><br><span class=\"line\"></span><br><span class=\"line\">        writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"200\\\",\\\"msg\\\":\\\"登出成功\\\"&#125;\"</span>);</span><br><span class=\"line\">        writer.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"登陆失败处理器-1\"><a href=\"#登陆失败处理器-1\" class=\"headerlink\" title=\"登陆失败处理器\"></a>登陆失败处理器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUrlAuthenticationFailureHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleUrlAuthenticationFailureHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAuthenticationFailure</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"application/json;charset=UTF-8\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> PrintWriter writer = response.getWriter();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(exception.getMessage().equals(<span class=\"string\">\"坏的凭证\"</span>))&#123;</span><br><span class=\"line\">            writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"401\\\",\\\"msg\\\":\\\"登录失败,用户名或者密码有误\\\"&#125;\"</span>);</span><br><span class=\"line\">            writer.close();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"401\\\",\\\"msg\\\":\\\"登录失败,\"</span>+exception.getMessage()+<span class=\"string\">\"\\\"&#125;\"</span>);</span><br><span class=\"line\">            writer.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义UsernamePasswordAuthenticationFilter-1\"><a href=\"#自定义UsernamePasswordAuthenticationFilter-1\" class=\"headerlink\" title=\"自定义UsernamePasswordAuthenticationFilter\"></a>自定义UsernamePasswordAuthenticationFilter</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@program</span>: security-test</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 用户登陆逻辑过滤器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: muggle</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span>: 2019-04-11</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUsernamePasswordAuthenticationFilte</span> <span class=\"keyword\">extends</span> <span class=\"title\">UsernamePasswordAuthenticationFilter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisService redisService;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> postOnly = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyUsernamePasswordAuthenticationFilte</span><span class=\"params\">(RedisService redisService)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.redisService=redisService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Authentication <span class=\"title\">attemptAuthentication</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> AuthenticationException </span>&#123;</span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"comment\">//你可以在这里做验证码校验，校验不通过抛出AuthenticationException()即可</span></span><br><span class=\"line\">            <span class=\"keyword\">super</span>.attemptAuthentication(request,response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    RedisService redisService;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    MyUserDetailService userDetailService;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(WebSecurity web)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        web.ignoring().antMatchers(<span class=\"string\">\"/resources/**/*.html\"</span>, <span class=\"string\">\"/resources/**/*.js\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"/resources/**/*.css\"</span>, <span class=\"string\">\"/resources/**/*.txt\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"/resources/**/*.png\"</span>, <span class=\"string\">\"/**/*.bmp\"</span>, <span class=\"string\">\"/**/*.gif\"</span>, <span class=\"string\">\"/**/*.png\"</span>, <span class=\"string\">\"/**/*.jpg\"</span>, <span class=\"string\">\"/**/*.ico\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//        super.configure(web);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        配置登录页等 permitAll表示任何权限都能访问</span></span><br><span class=\"line\">       http.formLogin().loginPage(<span class=\"string\">\"/login_page\"</span>).passwordParameter(<span class=\"string\">\"username\"</span>).passwordParameter(<span class=\"string\">\"password\"</span>).loginProcessingUrl(<span class=\"string\">\"/sign_in\"</span>).permitAll()</span><br><span class=\"line\">               .and().authorizeRequests().antMatchers(<span class=\"string\">\"/test\"</span>).hasRole(<span class=\"string\">\"test\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//               任何请求都被accessDecisionManager() 的鉴权器管理</span></span><br><span class=\"line\">               .anyRequest().authenticated().accessDecisionManager(accessDecisionManager())</span><br><span class=\"line\"><span class=\"comment\">//               登出配置</span></span><br><span class=\"line\">               .and().logout().logoutUrl(<span class=\"string\">\"/logout\"</span>).logoutSuccessHandler(<span class=\"keyword\">new</span> MyLogoutSuccessHandler())</span><br><span class=\"line\"><span class=\"comment\">//               关闭csrf</span></span><br><span class=\"line\">               .and().csrf().disable();</span><br><span class=\"line\">       http.authorizeRequests().antMatchers(<span class=\"string\">\"/tets_a/**\"</span>,<span class=\"string\">\"/test_b/**\"</span>).hasRole(<span class=\"string\">\"test\"</span>).antMatchers(<span class=\"string\">\"/a/**\"</span>,<span class=\"string\">\"/b/**\"</span>).authenticated().accessDecisionManager(accessDecisionManager())</span><br><span class=\"line\"><span class=\"comment\">//      加自定义过滤器</span></span><br><span class=\"line\">        http.addFilterAt(getAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\"><span class=\"comment\">//        配置鉴权失败的处理器</span></span><br><span class=\"line\">        http.exceptionHandling().accessDeniedHandler(<span class=\"keyword\">new</span> MyAccessDeniedHandler());</span><br><span class=\"line\">        http.addFilterAfter(<span class=\"keyword\">new</span> MyFittler(), LogoutFilter.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">MyUsernamePasswordAuthenticationFilte <span class=\"title\">getAuthenticationFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        MyUsernamePasswordAuthenticationFilte myUsernamePasswordAuthenticationFilte = <span class=\"keyword\">new</span> MyUsernamePasswordAuthenticationFilte(redisService);</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setAuthenticationFailureHandler(<span class=\"keyword\">new</span> MyUrlAuthenticationFailureHandler());</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setAuthenticationSuccessHandler(<span class=\"keyword\">new</span> MyAuthenticationSuccessHandler());</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setFilterProcessesUrl(<span class=\"string\">\"/sign_in\"</span>);</span><br><span class=\"line\">        myUsernamePasswordAuthenticationFilte.setAuthenticationManager(getAuthenticationManager());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myUsernamePasswordAuthenticationFilte;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">MyAuthenticationProvider <span class=\"title\">getMyAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        MyAuthenticationProvider myAuthenticationProvider = <span class=\"keyword\">new</span> MyAuthenticationProvider(userDetailService,<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myAuthenticationProvider;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">DaoAuthenticationProvider <span class=\"title\">daoAuthenticationProvider</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        DaoAuthenticationProvider daoAuthenticationProvider = <span class=\"keyword\">new</span> DaoAuthenticationProvider();</span><br><span class=\"line\">        daoAuthenticationProvider.setPasswordEncoder(<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">        daoAuthenticationProvider.setUserDetailsService(userDetailService);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> daoAuthenticationProvider;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> AuthenticationManager <span class=\"title\">getAuthenticationManager</span><span class=\"params\">()</span>  </span>&#123;</span><br><span class=\"line\">        ProviderManager authenticationManager = <span class=\"keyword\">new</span> ProviderManager(Arrays.asList(getMyAuthenticationProvider(),daoAuthenticationProvider()));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> authenticationManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AccessDecisionManager <span class=\"title\">accessDecisionManager</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;AccessDecisionVoter&lt;? extends Object&gt;&gt; decisionVoters</span><br><span class=\"line\">                = Arrays.asList(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> MyExpressionVoter(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> WebExpressionVoter(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> RoleVoter(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> AuthenticatedVoter());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UnanimousBased(decisionVoters);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>对于security的扩展配置关键在于<code>configure(HttpSecurity http)</code>方法；扩展认证方式可以自定义<code>authenticationManager</code>并加入自己验证器，在验证器中抛出异常不会终止验证流程；扩展鉴权方式可以自定义<code>accessDecisionManager</code>然后添加自己的投票器并绑定到对应的url（url 匹配方式为ant）上，投票器<code>vote(Authentication authentication, FilterInvocation fi, Collection&lt;ConfigAttribute&gt; attributes)</code>方法返回值为三种：-1 0 1，分别表示反对弃权赞成；</p>\n<p>对于token认证的校验方式，可以暴露一个获取的接口，或者重写<code>UsernamePasswordAuthenticationFilter</code>过滤器和扩展登陆成功处理器来获取token，然后在<code>LogoutFilter</code>之后添加一个自定义过滤器，用于校验和填充SecurityContextHolder</p>\n<p>security的处理器大部分都是重定向的，我们的项目如果是前后端分离的话，我们希望无论什么情况都返回json,那么就需要重写各个处理器了。</p>"},{"title":" logback深度使用","date":"2019-03-28T01:44:50.000Z","_content":"\n\n##### 作者：muggle\n\nLogback是由log4j创始人设计的另一个开源日志组件,分为三个模块：\n\n1. logback-core：其它两个模块的基础模块\n\n2. logback-classic：它是log4j的一个改良版本，同时它完整实现了slf4j API使你可以很方便地更换成其它日志系统如log4j或JDK14 Logging\n\n3. logback-access：访问模块与Servlet容器集成提供通过Http来访问日志的功能\n在springboot中我们通过xml配置来操作logback\n\n<!--more-->\nspringboot中logback的默认配置文件名称为logback-spring.xml，若需要指定xml名称，需在application.properties（application.yml）中配置logging.config=xxxx.xml\n现在贴出一份logback的xml配置，可直接使用，懒得看的小伙伴复制粘贴到你的项目中去体验吧\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\n\n<configuration scan=\"true\" scanPeriod=\"60 seconds\" debug=\"false\">\n\n    <jmxConfigurator/>\n\n    <property name=\"log_dir\" value=\"logs\"/>\n    <property name=\"maxHistory\" value=\"100\"/>\n\n    <appender name=\"console\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <pattern>\n                %d{yyyy-MM-dd HH:mm:ss.SSS} %highlight([%-5level]) %logger - %msg%n\n            </pattern>\n        </encoder>\n    </appender>\n    <appender name=\"logs\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <fileNamePattern>\n                ${log_dir}/%d{yyyy-MM-dd}-poseidon.log\n            </fileNamePattern>\n            <maxHistory>${maxHistory}</maxHistory>\n        </rollingPolicy>\n        <encoder>\n            <pattern>\n                %d{yyyy-MM-dd HH:mm:ss.SSS} %highlight([%-5level]) %logger - %msg%n\n            </pattern>\n        </encoder>\n    </appender>\n\n    <appender name=\"runningTime-file\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <fileNamePattern>${log_dir}/runningTime/%d{yyyy-MM-dd}-poseidon.log</fileNamePattern>\n            <maxHistory>${maxHistory}</maxHistory>\n        </rollingPolicy>\n        <encoder>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %logger - %msg%n</pattern>\n        </encoder>\n    </appender>\n    <appender name=\"runningTime-console\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <pattern>\n                %d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %logger - %msg%n\n            </pattern>\n        </encoder>\n    </appender>\n    <logger name=\"runningTime\" level=\"info\" additivity=\"false\">\n        <!--<appender-ref ref=\"runningTime-file\"/>-->\n        <appender-ref ref=\"runningTime-console\"/>\n    </logger>\n<!--  可能会抛出方言异常 两个解决方案 配置方言或者换连接池 换druid不会有这个异常-->\n    <appender name=\"requestLog-db\" class=\"ch.qos.logback.classic.db.DBAppender\">\n        <connectionSource class=\"ch.qos.logback.core.db.DataSourceConnectionSource\">\n            <dataSource class=\"org.apache.commons.dbcp.BasicDataSource\">\n                <driverClassName>com.mysql.cj.jdbc.Driver</driverClassName>\n                <url>jdbc:mysql://xxx/xxxx?characterEncoding=UTF-8</url>\n                <username>xx</username>\n                <password>xxxx</password>\n            </dataSource>\n        </connectionSource>\n        <!--<sqlDialect class=\"ch.qos.logback.core.db.dialect.MySQLDialect\" />-->\n    </appender>\n    <!--异步配置-->\n    <!--<appender name=\"requestLog-file\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n         <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n             <fileNamePattern>${log_dir}/requestLog/%d{yyyy-MM-dd}-poseidon.log</fileNamePattern>\n             <maxHistory>${maxHistory}</maxHistory>\n         </rollingPolicy>\n         <encoder>\n             <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %logger - %msg%n</pattern>\n         </encoder>\n     </appender>-->\n    <!-- <appender name=\"request-asyn\" class=\"ch.qos.logback.classic.AsyncAppender\">\n        <appender-ref ref=\"requestLog-file\"/>\n    </appender> -->\n    <appender name=\"logs-asyn\" class=\"ch.qos.logback.classic.AsyncAppender\">\n        <appender-ref ref=\"logs\"/>\n    </appender>\n    <logger name=\"requestLog\" level=\"info\" additivity=\"false\">\n        <!--<appender-ref ref=\"requestLog-file\"/>-->\n        <!-- DBAppender 查看可知其父类dbappenderbase继承了UnsynchronizedAppenderBase<E> 所以dbappender本身是异步的 无需配置异步-->\n        <appender-ref ref=\"requestLog-db\"/>\n    </logger>\n    <root>\n        <level value=\"info\"/>\n        <appender-ref ref=\"console\"/>\n        <!--<appender-ref ref=\"logs\"/>-->\n        <appender-ref ref=\"logs-asyn\"/>\n    </root>\n</configuration>\n```\n\n我们可以看到xml中有四种节点\nappender，logger，root,configuration\n#### 节点解读\n\nconfiguration包含三个属性：\n\n1. scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。\n2. scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。\n3. debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。\n4.\nLogger作为日志的记录器，把它关联到应用的对应的context上后，主要用于存放日志对象，也可以定义日志类型、级别。\n\nAppender主要用于指定日志输出的目的地，目的地可以是控制台、文件、远程套接字服务器、 MySQL、PostreSQL、 Oracle和其他数据库、 JMS和远程UNIX Syslog守护进程等。\n\nroot 就是最高级别logger,所有不被指定logger的日志都归root管理。\n\n在slf4j框架下我们使用log是这样的:\n```java\n private static final Logger logger= LoggerFactory.getLogger(xxx.class);\n```\n或者\n```java\n private static final Logger logger= LoggerFactory.getLogger(\"xxxx\");\n```\n\n可以理解为代码中的getLogger() 方法就是获取xml配置中的logger,如果没有配置相应的logger则为root\n比如我配置了：\n```xml\n<logger name=\"hhh\" level=\"info\" additivity=\"false\">\n        <!--<appender-ref ref=\"requestLog-file\"/>-->\n        <appender-ref ref=\"xxx\"/>\n</logger>\n```\n那我在获得一个logger时可以这样获得它：\n```java\n private static final Logger logger= LoggerFactory.getLogger(\"hhh\");\n```\n我所输出的日志将被这个logger所管理\nlogger 上有三个配置 name level additivity\nname就是这个logger的名称，level就是这个日志过滤的级别，低于这个级别的日志不输入到对应的appender中；additivity是否向上级logger传递打印信息，默认是true。logger中可以配置多个appender-ref，也就是可以指定多个输出地点。\n而root只是特殊的logger，用法上无差别\n\n\nappender节点：\nappender节点是logback配置的关键，其name属性指定其名称，class属性指定实现类，对应得实现类有\n```java\nch.qos.logback.core.ConsoleAppender // 以控制台作为输出\nch.qos.logback.core.rolling.RollingFileAppender//以日志文件作为输出\nch.qos.logback.classic.db.DBAppender//以数据库作为输出\nnet.logstash.logback.appender.LogstashTcpSocketAppender//以logstash作为输出需要引入如下依赖：\nch.qos.logback.classic.AsyncAppender//异步输出 需要定义appender-ref\n\n// logstash依赖\n<dependency>\n  <groupId>net.logstash.logback</groupId>\n  <artifactId>logstash-logback-encoder</artifactId>\n  <version>4.11</version>\n</dependency>\n```\n\n所有的appender 实现ch.qos.logback.core.Appender接口或者 ch.qos.logback.core.UnsynchronizedAppenderBase接口（异步），我们也可以自定义appender来指定日志输出；\n\n在Appender中可以定义哪些节点我们一个个来看：\n\n第一种： ConsoleAppender\n如同它的名字一样，这个Appender将日志输出到console，更准确的说是System.out 或者System.err。\n它包含的参数如下：\n\nProperty | Name\tType |\tDescription |\n---------|-----------| -----------\nencoder  | Encoder   | 通常在其pattern里指定日志格式  如： %d{yyyy-MM-dd HH:mm:ss.SSS} %highlight([%-5level]) %logger - %msg%n表示 日期格式 日志级别（高亮）logger的名称 logger的message\ntarget|String|指定输出目标。可选值：System.out 或 System.err。默认值：System.out\nwithJansi|boolean|是否支持ANSI color codes（类似linux中的shell脚本的输出字符串颜色控制代码）。默认为false。如果设置为true。例如：[31m 代表将前景色设置成红色。在windows中，需要提供\"org.fusesource.jansi:jansi:1.9\"，而在linux，mac os x中默认支持。\n\n第二种： FileAppender\n将日志输出到文件当中，目标文件取决于file属性。是否追加输出，取决于append属性。\n\nProperty | Name\tType |\tDescription |\n---------|-----------| -----------\nappend |\tboolean\t| 是否以追加方式输出。默认为true。\nencoder |\tEncoder\t|See OutputStreamAppender properties.\nfile\t| String |\t指定文件名。注意在windows当中，反斜杠 \\ 需要转义，或直接使用 / 也可以。例如 c:/temp/test.logor 或 c:\\\\temp\\\\test.log 都可以。没有默认值，如果上层目录不存在，FileAppender会自动创建。\nprudent |\tboolean|\t是否工作在谨慎模式下。在谨慎模式下，FileAppender将会安全写入日志到指定文件，即时在不同的虚拟机jvm中有另一个相同的FileAppender实例。默认值：fales;设置为true，意味着append会被自动设置成true。prudent依赖于文件排它锁。实验表明，使用文件锁，会增加3倍的日志写入消耗。比如说，当prudent模式为off，写入一条日志到文件只要10毫秒，但是prudent为真，则会接近30毫秒。prudent 模式实际上是将I/O请求序列化，因此在I/O数量较大，比如说100次/s或更多的时候，带来的延迟也会显而易见，所以应该避免。在networked file system（远程文件系统）中，这种消耗将会更大，可能导致死锁。\n\n第三个： RollingFileAppender\n\nRollingFileAppender继承自FileAppender，提供日志目标文件自动切换的功能。例如可以用日期作为日志分割的条件。\nRollingFileAppender有两个重要属性，RollingPolicy负责怎么切换日志，TriggeringPolicy负责何时切换。为了使RollingFileAppender起作用，这两个属性必须设置，但是如果RollingPolicy的实现类同样实现了TriggeringPolicy接口，则也可以只设置RollingPolicy这个属性。\n下面是它的参数：\n\nProperty | Name\tType |\tDescription |\n---------|-----------| -----------\nfile |\tString |\t指定文件名。注意在windows当中，反斜杠 \\ 需要转义，或直接使用 / 也可以。例如 c:/temp/test.logor 或 c:\\\\temp\\\\test.log 都可以。没有默认值，如果上层目录不存在，FileAppender会自动创建。\nappend\t|boolean\t|是否以追加方式输出。默认为true。\nencoder\t| Encoder\t| See OutputStreamAppender properties.\nrollingPolicy |\tRollingPolicy\t| 当发生日志切换时，RollingFileAppender的切换行为。例如日志文件名的修改\ntriggeringPolicy\t| TriggeringPolicy\t| 决定什么时候发生日志切换，例如日期，日志文件大小到达一定值\nprudent\t| boolean\t|FixedWindowRollingPolicy 不支持prudent模式。TimeBasedRollingPolicy 支持prudent模式，但是需要满足一下两条约束：在prudent模式中，日志文件的压缩是不被允许，不被支持的。不能设置file属性。\n\n第四个：SocketAppender及SSLSocketAppender（未尝试过）\n\n到目前为止我们讲的appender都只能将日志输出到本地资源。与之相对的，SocketAppender就是被设计用来输出日志到远程实例中的。SocketAppender输出日志采用明文方式，SSLSocketAppender则采用加密方式传输日志。\n被序列化的日志事件的类型是 LoggingEventVO 继承ILoggingEvent接口。远程日志记录并非是侵入式的。在反序列化接收后，日志事件就可以好像在本地生成的日志一样处理了。多个SockerAppender可以向同一台日志服务器发送日志。SocketAppender并不需要关联一个Layout，因为它只是发送序列化的日志事件给远程日志服务器。SocketAppender的发送操作是基于TCP协议的。因此如果远程服务器是可到达的，则日志会被其处理，如果远程服务器宕机或不可到达，那么日志将会被丢弃。等到远程服务器复活，日志发送将会透明的重新开始。这种透明式的重连，是通过一个“连接“线程周期性的尝试连接远程服务器实现的。\nLogging events会由TCP协议实现自动缓冲。这意味着，如果网络速度比日志请求产生速度快，则网络速度并不会影响应用。但如果网络速度过慢，则网络速度则会变成限制，在极端情况下，如果远程日志服务器不可到达，则会导致应用最终阻塞。不过，如果服务器可到达，但是服务器宕机了，这种情况，应用不会阻塞，而只是丢失一些日志事件而已。\n需要注意的是，即使SocketAppender没有被logger链接，它也不会被gc回收，因为他在connector thread中任然存在引用。一个connector thread 只有在网络不可达的情况下，才会退出。为了防止这个垃圾回收的问题，我们应该显示声明关闭SocketAppender。长久存活并创建/销毁大量的SocketAppender实例的应用，更应该注意这个问题。不过大多数应用可以忽略这个问题。如果JVM在SocketAppender关闭之前将其退出，又或者是被垃圾回收，这样子可能导致丢失一些还未被传输，在管道中等待的日志数据。为了防止避免日志丢失，经常可靠的办法就是调用SocketAppender的close方法，或者调用LoggerContext的stop方法，在退出应用之前。\n\n下面我们来看看SocketAppender的属性：\n\nProperty | Name\tType |\tDescription |\n---------|-----------| -----------\nincludeCallerData |\tboolean\t|是否包含调用者的信息如果为true，则以下日志输出的 ?:? 会替换成调用者的文件名跟行号，为false，则为问号。2019-01-06 17:37:30,968 DEBUG [Thread-0] [?:?] chapters.appenders.socket.SocketClient2 - Hi\nport |\tint\t| 端口号\nreconnectionDelay\t| Duration\t| 重连延时，如果设置成“10 seconds”，就会在连接u武器失败后，等待10秒，再连接。默认值：“30 seconds”。如果设置成0，则关闭重连功能。\nqueueSize\t| int\t| 设置缓冲日志数，如果设置成0，日志发送是同步的，如果设置成大于0的值，会将日志放入队列，队列长度到达指定值，在统一发送。可以加大服务吞吐量。\neventDelayLimit |\tDuration |\t设置日志超时丢弃时间。当设置“10 seconds”类似的值，如果日志队列已满，而服务器长时间来不及接收，当滞留时间超过10 seconds，日志就会被丢弃。默认值： 100 milliseconds\nremoteHost |\tString |\t远程日志服务器的IP\nssl\t| SSLConfiguration | 只在SSLSocketAppender包含该属性节点。提供SSL配置，详情见 Using SSL.\n\n标准的Logback Classic包含四个可供使用的Receiver用来接收来自SocketAppender的logging evnets。\n\n第五个： SMTPAppender\n\nSMTPAppender 可以将logging event存放在一个或多个固定大小的缓冲区中，然后在用户指定的event到来之时，将适当的大小的logging event以邮件方式发送给运维人员。\n详细属性如下：\n\nProperty | Name\tType |\tDescription |\n---------|-----------| -----------\nsmtpHost |\tString\t| SMTP server的地址，必需指定。如网易的SMTP服务器地址是： smtp.163.com\nsmtpPort |\tint\t| SMTP server的端口地址。默认值：25\nto\t| String |\t指定发送到那个邮箱，可设置多个<to>属性，指定多个目的邮箱\nfrom |\tString |\t指定发件人名称。如果设置成“muggle &lt;hh@moral.org&gt; ”，则邮件发件人将会是“muggle <hh@moral.org> ”\nsubject |\tString |指定emial的标题，它需要满足PatternLayout中的格式要求。如果设置成“Log: %logger - %msg”，就案例来讲，则发送邮件时，标题为“Log: com.foo.Bar - Hello World ”。 默认值：\"%logger{20} - %m\".\ndiscriminator\t| Discriminator\t| 通过Discriminator, SMTPAppender可以根据Discriminator的返回值，将到来的logging event分发到不同的缓冲区中。默认情况下，总是返回相同的值来达到使用一个缓冲区的目的。\nevaluator |\tIEvaluator\t| 指定触发日志发送的条件。通过<evaluator class=... />指定EventEvaluator接口的实现类。默认情况下SMTPAppeender使用的是OnErrorEvaluator，表示当发送ERROR或更高级别的日志请求时，发送邮件。Logback提供了几个evaluators：OnErrorEvaluator、OnMarkerEvaluator、JaninoEventEvaluator、GEventEvaluator（功能强大）\ncyclicBufferTracker |\tCyclicBufferTracker\t| 指定一个cyclicBufferTracker跟踪cyclic buffer。它是基于discriminator的实现的。如果你不指定，默认会创建一个CyclicBufferTracker ，默认设置cyclic buffer大小为256。你也可以手动指定使用默认的CyclicBufferTracker，并且通过<bufferSize>属性修改默认的缓冲区接收多少条logging event。\nusername\t| String |\t发送邮件账号，默认为null\npassword |\tString |\t发送邮件密码，默认为null\nSTARTTLS\t| boolean\t|如果设置为true，appender会尝试使用STARTTLS命令，如果服务端支持，则会将明文连接转换成加密连接。需要注意的是，与日志服务器连接一开始是未加密的。默认值：false\nSSL\t| boolean\t| 如果设置为true，appender将会使用SSL连接到日志服务器。 默认值：false\ncharsetEncoding |\tString\t|指定邮件信息的编码格式 默认值：UTF-8\nlocalhost\t| String |\t如果smtpHost没有正确配置，比如说不是完整的地址。这时候就需要localhost这个属性提供服务器的完整路径（如同java中的完全限定名 ），详情参考com.sun.mail.smtp 中的mail.smtp.localhost属性\nasynchronousSending\t| boolean\t| 这个属性决定email的发送是否是异步。默认：true，异步发送但是在某些情况下，需要以同步方式发送错误日志的邮件给管理人员，防止不能及时维护应用。\nincludeCallerData |\tboolean\t|默认：false 指定是否包含callerData在日志中\nsessionViaJNDI |\tboolean\t| SMTPAppender依赖javax.mail.Session来发送邮件。默认情况下，sessionViaJNDI为false。javax.mail.Session实例的创建依赖于SMTPAppender本身的配置信息。如果设置为true，则Session的创建时通过JNDI获取引用。这样做的好处可以让你的代码复用更好，让配置更简洁。需要注意的是，如果使用JNDI获取Session对象，需要保证移除mail.jar以及activation.jar这两个jar包\njndiLocation |\tString\t| 如果sessionViaJNDI设置为true，则jndiLocation指定JNDI的资源名，默认值为：\"java:comp/env/mail/Session\"\n\nSMTPAppender只保留最近的256条logging events 在循环缓冲区中，当缓冲区慢，就会开始丢弃最老的logging event。因此不管什么时候，SMTPAppender一封邮件最多传递256条日志事件。SMTPAppender依赖于JavaMail API。而JavaMail API又依赖于IOC框架（依赖注入）。\n\n第六个：DBAppender\n\n DBAppender 可以将日志事件插入到3张数据表中。它们分别是logging_event，logging_event_property，logging_event_exception。这三张数据表必须在DBAppender工作之前存在。它们的sql脚本可以在 logback-classic/src/main/java/ch/qos/logback/classic/db/script folder 这个目录下找到。这个脚本对大部分SQL数据库都是有效的，除了少部分，少数语法有差异需要调整。\n下面是logback与常见数据库的支持信息：\n\nRDBMS\t| tested version(s)\t| tested JDBC driver version(s)| \tsupports getGeneratedKeys() method |\tis a dialect provided by logback\n----------|----------|--------|----------|----\nDB2 |\tuntested |\tuntested |\tunknown |\tNO\nH2 |\t--| - |\tunknown\t| YES\nHSQL |-- |\t-\t| NO |\tYES\nMicrosoft SQL Server |\t-- | -- |\tYES\t| YES\nMySQL |\t5.7\t|  \t|YES|\tYES\nPostgreSQL | --|-- |\tNO|\tYES\nOracle\t|--|--|\tYES\t|YES\nSQLLite\t|--|\t-|\tunknown\t|YES\nSybase |--|\t\t-\t|unknown|\tYES\n\n\n下面给出三张表的sql语句：\n```sql\nBEGIN;\nDROP TABLE IF EXISTS logging_event_property;\nDROP TABLE IF EXISTS logging_event_exception;\nDROP TABLE IF EXISTS logging_event;\nCOMMIT;\n\nBEGIN;\nCREATE TABLE logging_event\n  (\n    timestmp         BIGINT NOT NULL,\n    formatted_message  TEXT NOT NULL,\n    logger_name       VARCHAR(254) NOT NULL,\n    level_string      VARCHAR(254) NOT NULL,\n    thread_name       VARCHAR(254),\n    reference_flag    SMALLINT,\n    arg0              VARCHAR(254),\n    arg1              VARCHAR(254),\n    arg2              VARCHAR(254),\n    arg3              VARCHAR(254),\n    caller_filename   VARCHAR(254) NOT NULL,\n    caller_class      VARCHAR(254) NOT NULL,\n    caller_method     VARCHAR(254) NOT NULL,\n    caller_line       CHAR(4) NOT NULL,\n    event_id          BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY\n  );\nCOMMIT;\n\n\nBEGIN;\nCREATE TABLE logging_event_property\n  (\n    event_id       BIGINT NOT NULL,\n    mapped_key        VARCHAR(254) NOT NULL,\n    mapped_value      TEXT,\n    PRIMARY KEY(event_id, mapped_key),\n    FOREIGN KEY (event_id) REFERENCES logging_event(event_id)\n  );\nCOMMIT;\n\n\nBEGIN;\nCREATE TABLE logging_event_exception\n  (\n    event_id         BIGINT NOT NULL,\n    i                SMALLINT NOT NULL,\n    trace_line       VARCHAR(254) NOT NULL,\n    PRIMARY KEY(event_id, i),\n    FOREIGN KEY (event_id) REFERENCES logging_event(event_id)\n  );\nCOMMIT;\n```\n\n第七个： AsyncAppender\n\nAsyncAppender记录ILoggingEvents的方式是异步的。它仅仅相当于一个event分配器，因此需要配合其他appender才能有所作为。\n\n需要注意的是：AsyncAppender将event缓存在 BlockingQueue ，一个由AsyncAppender创建的工作线程，会一直从这个队列的头部获取events，然后将它们分配给与AsyncAppender唯一关联的Appender中。默认情况下，如果这个队列80%已经被占满，则AsyncAppender会丢弃等级为 TRACE，DEBUG，INFO这三个等级的日志事件。\n在应用关闭或重新部署的时候，AsyncAppender一定要被关闭，目的是为了停止，回收再利用worker thread，和刷新缓冲队列中logging events。那如果关闭AsyncAppender呢？可以通过关闭LoggerContext来关闭所有appender，当然也包括AsyncAppender了。AsyncAppender会在maxFlushTime属性设置的时间内等待Worker thread刷新全部日志event。如果你发现缓冲的event在关闭LoggerContext的时候被丢弃，这时候你就也许需要增加等待的时间。将maxFlushTime设置成0，就是AsyncAppender一直等待直到工作线程将所有被缓冲的events全部刷新出去才执行才结束。\n根据JVM退出的模式，工作线程worker thread处理被缓冲的events的工作是可以被中断的，这样就导致了剩余未处理的events被搁浅。这种现象通常的原因是当LoggerContext没有完全关闭，或者当JVM终止那些非典型的控制流（不明觉厉）。为了避免工作线程的因为这些情况而发生中断，一个shutdown hook（关闭钩子）可以被插入到JVM运行的时候，这个钩子的作用是在JVM开始shutdown刚开始的时候执行关闭 LoggerContext的任务。\n\n下面是AsyncAppender的属性表\n\nProperty | Name\tType |\tDescription |\n---------|-----------| -----------\nqueueSize\t| int\t| 设置blocking queue的最大容量，默认是256条events\ndiscardingThreshold\t| int\t| 默认，当blocking queue被占用80%以上，AsyncAppender就会丢弃level为 TRACE，DEBUG，INFO的日志事件，如果要保留所有等级的日志，需要设置成0\nincludeCallerData\t| boolean\t| 提取CallerData代价比较昂贵，为了提高性能，caller data默认不提供。只有一些获取代价较低的数据，如线程名称，MDC值才会被保留。如果设置为true，就会包含caller data\nmaxFlushTime | \tint\t|设置最大等待刷新事件，单位为miliseconds(毫秒)。当LoggerContext关闭的时候，AsyncAppender会在这个时间内等待工作线程完成events的flush工作，超时未处理的events将会被抛弃。\nneverBlock |\tboolean |\t默认为false，如果队列被填满，为了处理所有日志，就会阻塞的应用。如果为true，为了不阻塞你的应用，也会选择抛弃一些message。\n\n默认情况下，event queue最大的容量是256。如果队列被填充满那么就会阻塞你的应用，直到队列能够容纳新的logging event。所以当AsyncAppender工作在队列满的情况下，可以称作伪同步。\n在以下四种情况下容易导致AsyncAppender伪同步状态的出现：\n\n1. 应用中存在大量线程\n2. 每秒产生大量的logging events\n3. 每一个logging event都存在大量的数据\n4. 子appender中存在很高的延迟\n\n为了避免伪同步的出现，提高queueSizes普遍有效，但是就消耗了应用的可用内存。\n\n下面列出一些 appender配置示例：\n\n```xml\n\n<configuration>\n  <appender name=\"FILE\" class=\"ch.qos.logback.core.FileAppender\">\n    <file>myapp.log</file>\n    <encoder>\n      <pattern>%logger{35} - %msg%n</pattern>\n    </encoder>\n  </appender>\n\n  <appender name=\"ASYNC\" class=\"ch.qos.logback.classic.AsyncAppender\">\n    <appender-ref ref=\"FILE\" />\n  </appender>\n\n  <root level=\"DEBUG\">\n    <appender-ref ref=\"ASYNC\" />\n  </root>\n</configuration>\n\n<configuration>\n\n  <appender name=\"DB\" class=\"ch.qos.logback.classic.db.DBAppender\">\n    <connectionSource\n      class=\"ch.qos.logback.core.db.DataSourceConnectionSource\">\n      <dataSource\n        class=\"com.mchange.v2.c3p0.ComboPooledDataSource\">\n        <driverClass>com.mysql.jdbc.Driver</driverClass>\n        <jdbcUrl>jdbc:mysql://${serverName}:${port}/${dbName}</jdbcUrl>\n        <user>${user}</user>\n        <password>${password}</password>\n      </dataSource>\n    </connectionSource>\n  </appender>\n\n  <root level=\"DEBUG\">\n    <appender-ref ref=\"DB\" />\n  </root>\n</configuration>\n\n<configuration>\n  <appender name=\"EMAIL\" class=\"ch.qos.logback.classic.net.SMTPAppender\">\n    <smtpHost>smtp.gmail.com</smtpHost>\n    <smtpPort>465</smtpPort>\n    <SSL>true</SSL>\n    <username>YOUR_USERNAME@gmail.com</username>\n    <password>YOUR_GMAIL_PASSWORD</password>\n\n    <to>EMAIL-DESTINATION</to>\n    <to>ANOTHER_EMAIL_DESTINATION</to> <!-- additional destinations are possible -->\n    <from>YOUR_USERNAME@gmail.com</from>\n    <subject>TESTING: %logger{20} - %m</subject>\n    <layout class=\"ch.qos.logback.classic.PatternLayout\">\n      <pattern>%date %-5level %logger{35} - %message%n</pattern>\n    </layout>\n  </appender>\n\n  <root level=\"DEBUG\">\n    <appender-ref ref=\"EMAIL\" />\n  </root>\n</configuration>\n\n<configuration>\n  <appender name=\"EMAIL\" class=\"ch.qos.logback.classic.net.SMTPAppender\">\n    <smtpHost>smtp.gmail.com</smtpHost>\n    <smtpPort>587</smtpPort>\n    <STARTTLS>true</STARTTLS>\n    <username>YOUR_USERNAME@gmail.com</username>\n    <password>YOUR_GMAIL_xPASSWORD</password>\n\n    <to>EMAIL-DESTINATION</to>\n    <to>ANOTHER_EMAIL_DESTINATION</to> <!-- additional destinations are possible -->\n    <from>YOUR_USERNAME@gmail.com</from>\n    <subject>TESTING: %logger{20} - %m</subject>\n    <layout class=\"ch.qos.logback.classic.PatternLayout\">\n      <pattern>%date %-5level %logger - %message%n</pattern>\n    </layout>\n  </appender>\n\n  <root level=\"DEBUG\">\n    <appender-ref ref=\"EMAIL\" />\n  </root>\n</configuration>\n\nSimpleSocketServer需要两个命令行参数，port 和 configFile路径。(该方法待验证)\njava ch.qos.logback.classic.net.SimpleSocketServer 6000 \\ src/main/java/chapters/appenders/socket/server1.xml\n\n客户端的SocketAppender的简单配置例子：\n<configuration>\n\n  <appender name=\"SOCKET\" class=\"ch.qos.logback.classic.net.SocketAppender\">\n    <remoteHost>192.168.0.101</remoteHost>\n    <port>8888</port>\n    <reconnectionDelay>10000</reconnectionDelay>\n    <includeCallerData>true</includeCallerData>\n  </appender>\n\n  <root level=\"DEBUG\">\n    <appender-ref ref=\"SOCKET\" />\n  </root>\n\n</configuration>\n\n在服务端使用SimpleSSLSocketServer\njava -Djavax.net.ssl.keyStore=src/main/java/chapters/appenders/socket/ssl/keystore.jks \\ -Djavax.net.ssl.keyStorePassword=changeit \\ ch.qos.logback.classic.net.SimpleSSLSocketServer 6000 \\ src/main/java/chapters/appenders/socket/ssl/server.xml\n\nSSLSocketAppender配置\n<configuration debug=\"true\">\n\n  <appender name=\"SOCKET\" class=\"ch.qos.logback.classic.net.SSLSocketAppender\">\n    <remoteHost>${host}</remoteHost>\n    <port>${port}</port>\n    <reconnectionDelay>10000</reconnectionDelay>\n    <ssl>\n      <trustStore>\n        <location>${truststore}</location>\n        <password>${password}</password>\n      </trustStore>\n    </ssl>\n  </appender>\n\n  <root level=\"DEBUG\">\n    <appender-ref ref=\"SOCKET\" />\n  </root>\n\n</configuration>\n\n<configuration>\n\n  <appender name=\"FILE\" class=\"ch.qos.logback.core.FileAppender\">\n    <file>testFile.log</file>\n    <append>true</append>\n    <!-- encoders are assigned the type\n        ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->\n    <encoder>\n      <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>\n    </encoder>\n  </appender>\n\n  <root level=\"DEBUG\">\n    <appender-ref ref=\"FILE\" />\n  </root>\n</configuration>\n```\n参考：https://blog.csdn.net/tianyaleixiaowu/article/details/73327752\n\n下面基于logback配置做一个请求日志的的封装\n\n功能：记录每次请求的参数和用户ID存入数据库或者elk\n问题：javaee规范中request输入输出流都只能被读取一次，所以如果用过滤器或者拦截器读取request中的流都会导致后面的controller无法接受到数据。\n所以我们要用原生的aop获得请求参数，切点为controller，这就很好的避开了以上问题。\n\n```java\npackage com.muggle.poseidon.core.aspect;\n\nimport com.muggle.poseidon.manager.UserInfoManager;\nimport com.muggle.poseidon.utils.RequestUtils;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.*;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.Serializable;\n\n/**\n * @program: hiram_erp\n * @description: 日志信息切面\n * @author: muggle\n * @create: 2019-02-21\n **/\n@Aspect\n@Component\npublic class LogMessageAspect {\n\n    private final static Logger logger = LoggerFactory.getLogger(\"requestLog\");\n//    private final static Logger timeLog = LoggerFactory.getLogger(LogMessageAspect.class);\n    private static final ThreadLocal<Long> threadLocal = new ThreadLocal<>();\n    @Pointcut(\"execution(public * com.hiram.erp.controller.*.*(..))\")\n    public void webLog() {}\n\n    /**\n     * 在切点之前织入\n     * @param joinPoint\n     * @throws Throwable\n     */\n    @Before(\"webLog()\")\n    public void doBefore(JoinPoint joinPoint) throws Throwable {\n//        System.out.println(\"sssssssssssssssssssssssssssssssssssssssssssssssssssss\");\n       /* // 开始打印请求日志\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = attributes.getRequest();\n\n        // 打印请求相关参数\n        // 打印请求 url\n        // 请求id\n        Long userId=null;\n        if (user!=null){\n            userId=user.getUserInfo().getUserId();\n        }\n        logger.info(\"URL : {}, 登录id: {} ,HTTP Method: {},ip :{},Request Args : {}\", request.getRequestURL().toString(),userId, request.getMethod(),request.getRemoteAddr());\n*/    }\n\n    /**\n     * 在切点之后织入\n     * @throws Throwable\n     */\n    @After(\"webLog()\")\n    public void doAfter(JoinPoint joinPoint) throws Throwable {\n\n\n\n    }\n\n    /**\n     * 环绕\n     * @param joinPoint\n     * @return\n     * @throws Throwable\n     */\n    @Around(\"webLog()\")\n    public Object doAround(ProceedingJoinPoint joinPoint) throws Throwable {\n        long startTime = System.currentTimeMillis();\n        Object result = joinPoint.proceed();\n        // 打印出参\n//        logger.info(\"Response Args  : {},\", JSONObject.toJSONString(result),new Date());\n        // 执行耗时\n        // 开始打印请求日志\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = attributes.getRequest();\n        HttpServletResponse response = attributes.getResponse();\n        String requestURL = request.getRequestURL().toString();\n        if (requestURL.contains(\"/sys/log_info/\")){\n            return result;\n        }\n        // 打印请求相关参数\n        // 打印请求 url\n        // 请求id\n        String userId = UserInfoManager.getUserId();\n\n        String url = request.getRequestURL().toString();\n        String method = request.getMethod();\n        String remoteAddr = RequestUtils.getIpAddr(request);\n        Object[] args = joinPoint.getArgs();\n//        List<Object> objects=new ArrayList<>();\n        StringBuilder stringBuilder = new StringBuilder();\n        for (int i=0;i<args.length;i++){\n            if (args[i] instanceof Serializable||args[i] instanceof Number ||args[i] instanceof String){\n                stringBuilder.append( args[i].toString());\n//                objects.add(args[i]);\n            }\n        }\n        logger.info(\"{\\\"startTime\\\":\\\"{}\\\",\\\"url\\\":\\\"{}\\\",\\\"userId\\\":\\\"{}\\\" ,\\\"httpMethod\\\":\\\"{}\\\",\\\"ip\\\":\\\"{}\\\",\\\"requestArgs\\\":\\\"{}\\\",\\\"status\\\":{}}\",startTime,url,userId,method,remoteAddr,stringBuilder.toString(),response.getStatus());\n        return result;\n    }\n\n\n}\n\n```\n对于数据库存储，如果我们希望log存在另外一个数据库中不存在项目里的数据库中，并且可以通过持久化框架查询数据库内信息。我们则可以配置多数据源，如果将日志放在同一个数据库中则直接配置appender就行了，很方便。\n多数据源配置mybatis版：\n\n其原理是配置多个sessionfactory,然后根据不同的mapperscan来区分不同mapper对应的数据库\n\n以druid连接池为例\n\napplication.yml\n\n```java\nlog:\n  datasource:\n    druid:\n      url: ${mysql_url}/log?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true&serverTimezone=GMT%2B8&nullCatalogMeansCurrent=true\n      username:\n      password:\n      driver-class-name: com.mysql.cj.jdbc.Driver\n      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\n      filters: stat,wall\n      initialSize: 5\n      maxActive: 20\n      maxPoolPreparedStatementPerConnectionSize: 20\n      maxWait: 60000\n      minIdle: 5\n      poolPreparedStatements: true\n      testOnBorrow: false\n      testOnReturn: false\n      testWhileIdle: true\n      timeBetweenEvictionRunsMillis: 60000\n      validationQuery: SELECT 1\n\n\nspring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    druid:\n      url: ${mysql_url}/hiram_erp?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true&serverTimezone=GMT%2B8&nullCatalogMeansCurrent=true\n      username:\n      password:\n      driver-class-name: com.mysql.cj.jdbc.Driver\n      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\n      filters: stat,wall\n      initialSize: 5\n      maxActive: 20\n      maxPoolPreparedStatementPerConnectionSize: 20\n      maxWait: 60000\n      minIdle: 5\n      poolPreparedStatements: true\n      testOnBorrow: false\n      testOnReturn: false\n      testWhileIdle: true\n      timeBetweenEvictionRunsMillis: 60000\n      validationQuery: SELECT 1\n```\n\n```java\n\n@Configuration\n// 主数据库配置 指定mapper位置\n@MapperScan(basePackages = {\"com.muggle.poseidon.mapper\"}, sqlSessionTemplateRef = \"sqlSessionTemplate\")\npublic class ManySourceDBConfig {\n\n    @Bean(name = \"dataSource\")\n    // 读取application的配置信息\n   @ConfigurationProperties(prefix = \"spring.datasource.druid\")\n   // 最高优先级，表示系统默认使用该配置\n    @Primary\n    public DataSource dataSource() {\n        DruidDataSource druidDataSource = new DruidDataSource();\n\n        List filterList = new ArrayList<>();\n\n        filterList.add(wallFilter());\n\n        druidDataSource.setProxyFilters(filterList);\n\n        return druidDataSource;\n    }\n\n    @Bean(name = \"sqlSessionFactory\")\n    @Primary\n    public SqlSessionFactory sqlSessionFactory() throws Exception {\n        SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();\n        sqlSessionFactoryBean.setDataSource(this.dataSource());\n\n        Properties props = new Properties();\n        props.setProperty(\"localCacheScope\", \"true\");\n        props.setProperty(\"lazyLoadingEnabled\", \"true\");\n        props.setProperty(\"aggressiveLazyLoading\", \"false\");\n        props.setProperty(\"jdbcTypeForNull\", \"NULL\");\n        sqlSessionFactoryBean.setConfigurationProperties(props);\n        sqlSessionFactoryBean.setVfs(SpringBootVFS.class);\n        //pageHelper\n        Properties properties = new Properties();\n        properties.setProperty(\"reasonable\", \"true\");\n        properties.setProperty(\"supportMethodsArguments\", \"true\");\n        properties.setProperty(\"params\", \"count=countSql\");\n        properties.setProperty(\"pageSizeZero\", \"true\");\n        PageInterceptor interceptor = new PageInterceptor();\n        interceptor.setProperties(properties);\n        sqlSessionFactoryBean.setPlugins(new Interceptor[]{interceptor});\n        sqlSessionFactoryBean.setTypeAliasesPackage(\"com.muggle.poseidon.model\");\n        PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();\n        sqlSessionFactoryBean.setMapperLocations(resolver.getResources(\"classpath*:/mapper/*.xml\"));\n        return sqlSessionFactoryBean.getObject();\n    }\n\n    @Bean(name = \"transactionManager\")\n    @Primary\n    public PlatformTransactionManager transactionManager() {\n        return new DataSourceTransactionManager(this.dataSource());\n    }\n\n    @Bean(name = \"sqlSessionTemplate\")\n    public SqlSessionTemplate testSqlSessionTemplate(@Qualifier(\"sqlSessionFactory\") SqlSessionFactory sqlSessionFactory) throws Exception {\n        return new SqlSessionTemplate(sqlSessionFactory);\n    }\n\n    @Bean\n    public ServletRegistrationBean statViewServlet() {\n        ServletRegistrationBean druid = new ServletRegistrationBean();\n        druid.setServlet(new StatViewServlet());\n        druid.setUrlMappings(Collections.singletonList(\"/druid/*\"));\n        Map<String, String> params = new HashMap<>();\n        params.put(\"loginUsername\", \"\");\n        params.put(\"loginPassword\", \"\");\n        druid.setInitParameters(params);\n        return druid;\n    }\n\n    @Bean\n    public FilterRegistrationBean webStatFilter() {\n        FilterRegistrationBean fitler = new FilterRegistrationBean();\n        fitler.setFilter(new WebStatFilter());\n        fitler.setUrlPatterns(Collections.singletonList(\"/*\"));\n        fitler.addInitParameter(\"exclusions\", \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\");\n        return fitler;\n    }\n\n    @Bean\n    public WallFilter wallFilter() {\n\n        WallFilter wallFilter = new WallFilter();\n\n        wallFilter.setConfig(wallConfig());\n\n        return wallFilter;\n\n    }\n\n    @Bean\n    public WallConfig wallConfig() {\n\n        WallConfig config = new WallConfig();\n\n        config.setMultiStatementAllow(true);//允许一次执行多条语句\n\n        config.setNoneBaseStatementAllow(true);//允许非基本语句的其他语句\n\n        return config;\n\n    }\n\n    @Bean\n    public ProcessEngineConfiguration processEngineConfiguration() {\n        ProcessEngineConfiguration pec = StandaloneProcessEngineConfiguration.createStandaloneProcessEngineConfiguration();\n        pec.setDataSource(dataSource());\n        //如果表不存在，自动创建表\n        pec.setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n        //属性asyncExecutorActivate定义为true，工作流引擎在启动时就建立启动async executor线程池\n        pec.setAsyncExecutorActivate(false);\n        return pec;\n    }\n\n\n    @Bean\n    public ProcessEngine processEngine() {\n        return processEngineConfiguration().buildProcessEngine();\n    }\n\n}\n\n```\n\nlog数据库配置\n\n```java\n\n\n\n/**\n * @program:\n * @description:\n * @author: muggle\n * @create: 2019-02-23\n **/\n@Configuration\n// 注意确保主配置无法扫描到这个包\n@MapperScan(basePackages = \"com.muggle.poseidon.logmapper\", sqlSessionTemplateRef  = \"test1SqlSessionTemplate\")\n\npublic class LogDBConfig  {\n    @Bean(name = \"test1DataSource\")\n    @ConfigurationProperties(prefix = \"log.datasource.druid\")\n    public DataSource dataSource() {\n        DruidDataSource druidDataSource = new DruidDataSource();\n\n        List filterList = new ArrayList<>();\n\n        filterList.add(wallFilter());\n\n        druidDataSource.setProxyFilters(filterList);\n\n        return druidDataSource;\n    }\n\n    @Bean(name = \"test1SqlSessionFactory\")\n    public SqlSessionFactory testSqlSessionFactory(@Qualifier(\"test1DataSource\") DataSource dataSource) throws Exception {\n        SqlSessionFactoryBean bean = new SqlSessionFactoryBean();\n        bean.setDataSource(dataSource);\n        bean.setMapperLocations(new\n        // mapper位置，不要和主配置的mapper放到一起\n         PathMatchingResourcePatternResolver().getResources(\"classpath*:/mapper/log/*.xml\"));\n        return bean.getObject();\n    }\n\n    @Bean(name = \"test1TransactionManager\")\n    public DataSourceTransactionManager testTransactionManager(@Qualifier(\"test1DataSource\") DataSource dataSource) {\n        return new DataSourceTransactionManager(dataSource);\n    }\n\n    @Bean(name = \"test1SqlSessionTemplate\")\n    public SqlSessionTemplate testSqlSessionTemplate(@Qualifier(\"test1SqlSessionFactory\") SqlSessionFactory sqlSessionFactory) throws Exception {\n        return new SqlSessionTemplate(sqlSessionFactory);\n    }\n\n    @Bean\n    public WallFilter wallFilter() {\n\n        WallFilter wallFilter = new WallFilter();\n\n        wallFilter.setConfig(wallConfig());\n\n        return wallFilter;\n\n    }\n    @Bean\n    public WallConfig wallConfig() {\n\n        WallConfig config = new WallConfig();\n\n        config.setMultiStatementAllow(true);//允许一次执行多条语句\n\n        config.setNoneBaseStatementAllow(true);//允许非基本语句的其他语句\n\n        return config;\n\n    }\n}\n\n```\n\n多数据源jpa版\n```java\npackage com.muggle.poseidon.config;\n\n\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.jdbc.DataSourceBuilder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.jdbc.core.JdbcTemplate;\n\nimport javax.sql.DataSource;\n\n@Configuration\npublic class DataSourceConfig {\n\n    /**\n     * 扫描spring.datasource.primary开头的配置信息\n     *\n     * @return 数据源配置信息\n     */\n    @Primary\n    @Bean(name = \"primaryDataSourceProperties\")\n    @ConfigurationProperties(prefix = \"spring.datasource\")\n    public DataSourceProperties dataSourceProperties() {\n        return new DataSourceProperties();\n    }\n\n    /**\n     * 获取主库数据源对象\n     *\n     * @param properties 注入名为primaryDataSourceProperties的bean\n     * @return 数据源对象\n     */\n    @Primary\n    @Bean(name = \"primaryDataSource\")\n    public DataSource dataSource(@Qualifier(\"primaryDataSourceProperties\") DataSourceProperties properties) {\n        return properties.initializeDataSourceBuilder().build();\n    }\n\n    /**\n     * 该方法仅在需要使用JdbcTemplate对象时选用\n     *\n     * @param dataSource 注入名为primaryDataSource的bean\n     * @return 数据源JdbcTemplate对象\n     */\n    @Primary\n    @Bean(name = \"primaryJdbcTemplate\")\n    public JdbcTemplate jdbcTemplate(@Qualifier(\"primaryDataSource\") DataSource dataSource) {\n        return new JdbcTemplate(dataSource);\n    }\n\n\n\n\n}\n\n```\n\n```java\npackage com.muggle.poseidon.config;\n\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateSettings;\nimport org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\nimport org.springframework.orm.jpa.JpaTransactionManager;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\n\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.sql.DataSource;\nimport java.util.Map;\n\n\n@Configuration\n@EnableTransactionManagement\n@EnableJpaRepositories(\n        // repository包名\n        basePackages = \"com.muggle.poseidon.repos\",\n        // 实体管理bean名称\n        entityManagerFactoryRef = \"primaryEntityManagerFactory\",\n        // 事务管理bean名称\n        transactionManagerRef = \"primaryTransactionManager\"\n)\npublic class MainDataBaseConfig {\n\n    /**\n     * 扫描spring.jpa.primary开头的配置信息\n     *\n     * @return jpa配置信息\n     */\n    @Primary\n    @Bean(name = \"primaryJpaProperties\")\n    @ConfigurationProperties(prefix = \"spring.jpa\")\n    public JpaProperties jpaProperties() {\n        return new JpaProperties();\n    }\n\n    /**\n     * 获取主库实体管理工厂对象\n     *\n     * @param primaryDataSource 注入名为primaryDataSource的数据源\n     * @param jpaProperties     注入名为primaryJpaProperties的jpa配置信息\n     * @param builder           注入EntityManagerFactoryBuilder\n     * @return 实体管理工厂对象\n     */\n    @Primary\n    @Bean(name = \"primaryEntityManagerFactory\")\n    public LocalContainerEntityManagerFactoryBean entityManagerFactory(@Qualifier(\"primaryDataSource\") DataSource primaryDataSource\n            , @Qualifier(\"primaryJpaProperties\") JpaProperties jpaProperties, EntityManagerFactoryBuilder builder) {\n        return builder\n                // 设置数据源\n                .dataSource(primaryDataSource)\n                // 设置jpa配置\n                .properties(jpaProperties.getProperties())\n                // 设置hibernate配置\n                .properties(jpaProperties.getHibernateProperties(new HibernateSettings()))\n                // 设置实体包名\n                .packages(\"com.muggle.poseidon.model\")\n                // 设置持久化单元名，用于@PersistenceContext注解获取EntityManager时指定数据源\n                .persistenceUnit(\"primaryPersistenceUnit\")\n                .build();\n    }\n\n    /**\n     * 获取实体管理对象\n     *\n     * @param factory 注入名为primaryEntityManagerFactory的bean\n     * @return 实体管理对象\n     */\n    @Primary\n    @Bean(name = \"primaryEntityManager\")\n    public EntityManager entityManager(@Qualifier(\"primaryEntityManagerFactory\") EntityManagerFactory factory) {\n        return factory.createEntityManager();\n    }\n\n    /**\n     * 获取主库事务管理对象\n     *\n     * @param factory 注入名为primaryEntityManagerFactory的bean\n     * @return 事务管理对象\n     */\n    @Primary\n    @Bean(name = \"primaryTransactionManager\")\n    public PlatformTransactionManager transactionManager(@Qualifier(\"primaryEntityManagerFactory\") EntityManagerFactory factory) {\n        return new JpaTransactionManager(factory);\n    }\n}\n\n​```java\npackage com.muggle.poseidon.core.config;\n\n\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateSettings;\nimport org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\nimport org.springframework.orm.jpa.JpaTransactionManager;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\n\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.sql.DataSource;\n\n@Configuration\n@EnableTransactionManagement\n@EnableJpaRepositories(\n        // repository包名\n        basePackages = \"com.muggle.poseidon.logrep\",\n        // 实体管理bean名称\n        entityManagerFactoryRef = \"secondEntityManagerFactory\",\n        // 事务管理bean名称\n        transactionManagerRef = \"secondTransactionManager\"\n)\npublic class LogDataBaseConfig {\n\n    /**\n     * 扫描spring.jpa.second开头的配置信息\n     *\n     * @return jpa配置信息\n     */\n    @Bean(name = \"secondJpaProperties\")\n    @ConfigurationProperties(prefix = \"spring.aa\")\n    public JpaProperties jpaProperties() {\n        return new JpaProperties();\n    }\n\n    /**\n     * 获取从库实体管理工厂对象\n     *\n     * @param secondDataSource 注入名为secondDataSource的数据源\n     * @param jpaProperties    注入名为secondJpaProperties的jpa配置信息\n     * @param builder          注入EntityManagerFactoryBuilder\n     * @return 实体管理工厂对象\n     */\n    @Bean(name = \"secondEntityManagerFactory\")\n    public LocalContainerEntityManagerFactoryBean entityManagerFactory(@Qualifier(\"secondDataSource\") DataSource secondDataSource\n            , @Qualifier(\"secondJpaProperties\") JpaProperties jpaProperties, EntityManagerFactoryBuilder builder) {\n        return builder\n                // 设置数据源\n                .dataSource(secondDataSource)\n                // 设置jpa配置\n                .properties(jpaProperties.getProperties())\n                // 设置hibernate配置\n                .properties(jpaProperties.getHibernateProperties(new HibernateSettings()))\n                // 设置实体包名\n                .packages(\"com.muggle.poseidon.entity\")\n                // 设置持久化单元名，用于@PersistenceContext注解获取EntityManager时指定数据源\n                .persistenceUnit(\"secondPersistenceUnit\")\n                .build();\n    }\n\n    /**\n     * 获取实体管理对象\n     *\n     * @param factory 注入名为secondEntityManagerFactory的bean\n     * @return 实体管理对象\n     */\n    @Bean(name = \"secondEntityManager\")\n    public EntityManager entityManager(@Qualifier(\"secondEntityManagerFactory\") EntityManagerFactory factory) {\n        return factory.createEntityManager();\n    }\n\n    /**\n     * 获取从库事务管理对象\n     *\n     * @param factory 注入名为secondEntityManagerFactory的bean\n     * @return 事务管理对象\n     */\n    @Bean(name = \"secondTransactionManager\")\n    public PlatformTransactionManager transactionManager(@Qualifier(\"secondEntityManagerFactory\") EntityManagerFactory factory) {\n        return new JpaTransactionManager(factory);\n    }\n}\n\n```\n\n```java\n\npackage com.muggle.poseidon.core.config;\n\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jdbc.core.JdbcTemplate;\n\nimport javax.sql.DataSource;\n\n@Configuration\npublic class LogDataConfig {\n    /**\n     * 扫描spring.datasource.second开头的配置信息\n     *\n     * @return 数据源配置信息\n     */\n    @Bean(name = \"secondDataSourceProperties\")\n    @ConfigurationProperties(prefix = \"spring.ss\")\n    public DataSourceProperties dataSourceProperties() {\n        return new DataSourceProperties();\n    }\n\n    /**\n     * 获取从库数据源对象\n     *\n     * @param properties 注入名为secondDataSourceProperties的beanf\n     * @return 数据源对象\n     */\n    @Bean(name = \"secondDataSource\")\n    public DataSource dataSource(@Qualifier(\"secondDataSourceProperties\") DataSourceProperties properties) {\n        return properties.initializeDataSourceBuilder().build();\n    }\n\n    /**\n     * 该方法仅在需要使用JdbcTemplate对象时选用\n     *\n     * @param dataSource 注入名为secondDataSource的bean\n     * @return 数据源JdbcTemplate对象\n     */\n    @Bean(name = \"secondJdbcTemplate\")\n    public JdbcTemplate jdbcTemplate(@Qualifier(\"secondDataSource\") DataSource dataSource) {\n        return new JdbcTemplate(dataSource);\n    }\n}\n\n```\n\napplication.properties\n\n```java\nserver.port=8080\nspring.datasource.type=com.alibaba.druid.pool.DruidDataSource\n#spring.datasource.url = jdbc:mysql://localhost:3306/test\nspring.datasource.driverClassName = com.mysql.cj.jdbc.Driver\nspring.datasource.url = jdbc:mysql://119.23.75.58:3306/poseidon?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true\nspring.datasource.username =\nspring.datasource.password =\nspring.datasource.max-active=20\nspring.datasource.max-idle=8\nspring.datasource.min-idle=8\nspring.datasource.initial-size=10\n\nspring.jpa.database=mysql\nspring.jpa.show-sql = true\n#配置方言\nspring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect\n\nspring.ss.type=com.alibaba.druid.pool.DruidDataSource\n#spring.datasource.url = jdbc:mysql://localhost:3306/test\nspring.ss.driverClassName = com.mysql.cj.jdbc.Driver\nspring.ss.url = jdbc:mysql://zzzzz/log?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true\nspring.ss.username =\nspring.ss.password =\nspring.ss.max-active=20\nspring.ss.max-idle=8\nspring.ss.min-idle=8\nspring.ss.initial-size=10\n\n\nspring.aa.database=mysql\nspring.aa.show-sql = true\n#配置方言\nspring.aa.database-platform=org.hibernate.dialect.MySQL5Dialect\n```\n\n\n以数据库作为输出配置就算完成了，接下来整合elk系统到我们日志系统中：\n\n\n先整合logstash\n\nlogstash安装和配置：\nhttps://www.elastic.co/cn/downloads/logstash 选择zip包下载\n\n解压，进入bin目录 创建logstash.conf 并配置：\n```xml\ninput {\n    tcp {\n    ##host:port就是上面appender中的 destination，这里其实把logstash作为服务，开启9250端口接收logback发出的消息\n    host => \"127.0.0.1\"\n    port => 9100\n    mode => \"server\"\n    tags => [\"tags\"]\n    codec => json_lines\n    }\n}\noutput {\n    stdout { codec => rubydebug }\n    #输出到es\n    #elasticsearch { hosts => \"127.0.0.1:9200\" }\n        #输出到一个文件中\n    file {\n       path => \"D:\\logs\\test.log\"\n       codec => line\n    }\n}\n\n```\n我这里先配置输出到文件，后面再修改,创建文件：D:\\logs\\test.log\n\n启动：\n\n打开cmd（不要使用powershell），进入bin:\n```xml\nD:\\exe\\logstash-6.6.1\\logstash-6.6.1\\bin>logstash -f logstash.conf\n```\n\n然后在我们的项目中进行相应的配置：\n按这个来：https://github.com/logstash/logstash-logback-encoder\n\n加入pom并指定logback版本：\n```xml\n<!-- 父pom中 -->\n<ch.qos.logback.version>1.2.3</ch.qos.logback.version>\n\n<!--  日志模块-->\n<dependency>\n  <groupId>net.logstash.logback</groupId>\n  <artifactId>logstash-logback-encoder</artifactId>\n  <version>5.3</version>\n  </dependency>\n        <!-- Your project must also directly depend on either logback-classic or logback-access.  For example: -->\n  <dependency>\n    <groupId>ch.qos.logback</groupId>\n    <artifactId>logback-classic</artifactId>\n    <version>1.2.3</version>\n  </dependency>\n```\n\n配置apppender和logger\n\n```xml\n<appender name=\"stash\" class=\"net.logstash.logback.appender.LogstashTcpSocketAppender\">\n    <destination>127.0.0.1:9100</destination>\n    <includeCallerData>true</includeCallerData>\n\n    <encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n        <includeCallerData>true</includeCallerData>\n    </encoder>\n  </appender>\n  <logger name=\"logstash\" level=\"info\">\n      <appender-ref ref=\"stash\"/>\n  </logger>\n```\n测试：\n```java\nRestController\n@RequestMapping(\"/public/log\")\npublic class LogTestController {\n    private static final Logger log = LoggerFactory.getLogger(\"logstash\");\n    @Autowired\n    LoggingEventRepository repository;\n\n    @GetMapping(\"/\")\n    public String test(){\n        log.info(\"sssssssssssssss\");\n        Iterable<LoggingEvent> all = repository.findAll();\n\n        return \"sss\";\n\n    }\n}\n```\n\n访问接口，logstash打印信息：\n\n```\n[2019-03-09T11:32:56,358][INFO ][logstash.outputs.file    ] Opening file {:path=>\"D:/logs/test.log\"}\n{\n                  \"host\" => \"www.xmind.net\",\n                 \"level\" => \"INFO\",\n     \"caller_class_name\" => \"com.muggle.poseidon.controller.LogTestController\",\n            \"@timestamp\" => 2019-03-09T03:33:03.413Z,\n           \"logger_name\" => \"logstash\",\n              \"@version\" => \"1\",\n           \"thread_name\" => \"http-nio-8080-exec-9\",\n               \"message\" => \"sssssssssssssss\",\n    \"caller_line_number\" => 22,\n                  \"port\" => 58368,\n           \"level_value\" => 20000,\n      \"caller_file_name\" => \"LogTestController.java\",\n                  \"tags\" => [\n        [0] \"tags\"\n    ],\n    \"caller_method_name\" => \"test\"\n}\n```\ntest.log输出了文件：\n\n```\n2019-03-09T03:33:03.413Z www.xmind.net sssssssssssssss\n```\n接下来只要把输出路径换成ES就可以了，这属于logstash和es的整合，这里先不讲解；重新回归到我们的请求模块：\n\n我希望我的模块，对每次请求都能记录下来（请求日志），并将记录存到数据库或者ES，同时我要对所有接口都进行一个幂等性的保障；保障接口的幂等性有多种方法，比较简单的是数据库做唯一索引或者加拦截器，我这里加了一个拦截器来保障接口幂等和拦截前端数据的重复提交(关于接口幂等性在其他文档中介绍)：\n```java\n@Slf4j\npublic class RequestLockInterceptor implements HandlerInterceptor {\n    RedisLock redisTool;\n    private int expireTime;\n\n    public RequestLockInterceptor(int expireTime, RedislockImpl redisTool) {\n        this.expireTime = expireTime;\n        this.redisTool = redisTool;\n    }\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n\n        if(\"post\".equalsIgnoreCase(request.getMethod())){\n            String token = request.getParameter(\"request_key\");\n            if (token==null||\"\".equals(token)){\n                log.error(\"请求非法\");\n//            throw new PoseidonException(\"请求太频繁\",PoseidonProperties.TOO_NUMBER_REQUEST);\n                response.setContentType(\"application/json;charset=UTF-8\");\n                PrintWriter writer = response.getWriter();\n                writer.write(\"{\\\"code\\\":\\\"5001\\\",\\\"msg\\\":\\\"请求非法\\\"}\");\n                writer.close();\n                return false;\n            }\n            String ipAddr = RequestUtils.getIpAddr(request);\n            String lockKey = request.getRequestURI() + \"_\"  + \"_\" + token;\n            boolean lock = redisTool.lock(lockKey, ipAddr, expireTime);\n            if (!lock) {//\n                log.error(\"拦截表单重复提交\");\n//            throw new PoseidonException(\"请求太频繁\",PoseidonProperties.TOO_NUMBER_REQUEST);\n                response.setContentType(\"application/json;charset=UTF-8\");\n                PrintWriter writer = response.getWriter();\n                writer.write(\"{\\\"code\\\":\\\"5001\\\",\\\"msg\\\":\\\"请求太频繁\\\"}\");\n                writer.close();\n                return false;\n            }\n        }\n        return true;\n    }\n\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n//        String requestURI = request.getRequestURI();\n//        String lockKey = request.getRequestURI() + \"_\" + RequestUtils.getIpAddr(request);\n//        redisTool.unlock(lockKey,getIpAddr(request));\n    }\n\n\n}\n\n```\n项目使用了redis锁（redis锁原理和使用在其他文档中介绍）\n\n对于系统异常，如果是业务的异常，正常处理，如果是系统发生的异常比如空指针，数据库异常等我希望系统能马上通知，以便排查问题，所以我配置邮件异常通知(关于springboot邮件配置其他文档介绍)：\n\n```java\n\n@RestControllerAdvice\n@Slf4j\npublic class RestExceptionHandlerController {\n    @Autowired\n    EmailService emailService;\n    @Value(\"${admin.email}\")\n    private String adminEmail;\n\n    @ExceptionHandler(value = {PoseidonException.class})\n    public ResultBean poseidonExceptionHandler(PoseidonException e, HttpServletRequest req) {\n        return new ResultBean().setMsg(e.getMsg()).setCode(e.getCode());\n    }\n    @ExceptionHandler(value = {MethodArgumentNotValidException.class})\n    public ResultBean MethodArgumentNotValidException(MethodArgumentNotValidException e, HttpServletRequest req) {\n        System.out.println(e.getMessage());\n        return new ResultBean().setMsg(\"数据未通过校验\").setCode(PoseidonProperties.COMMIT_DATA_ERROR);\n    }\n\n    @ExceptionHandler(value = {Exception.class})\n    public ResultBean exceptionHandler(Exception e, HttpServletRequest req) {\n        log.error(\"系统异常：\" + req.getMethod() + req.getRequestURI(), e);\n        try {\n//\n            EmailBean emailBean = new EmailBean();\n            emailBean.setRecipient(adminEmail);\n            emailBean.setSubject(\"poseidon---系统异常\");\n            emailBean.setContent(\"系统异常：\" + req.getMethod() + req.getRequestURI()+\"----\"+e.getMessage());\n//            改良\n            emailService.sendSimpleMail(emailBean);\n        } finally {\n            return new ResultBean().setMsg(\"系统异常，请联系管理员\").setCode(\"500\");\n        }\n    }\n\n    @ExceptionHandler(value = {HttpRequestMethodNotSupportedException.class})\n    public ResultBean notsupported(Exception e, HttpServletRequest req) {\n        return new ResultBean().setMsg(\"不支持的请求方式\").setCode(PoseidonProperties.NOT_SUPPORT_METHOD);\n    }\n    @ExceptionHandler(value = {NoHandlerFoundException.class})\n    public ResultBean notFoundUrl(Exception e, HttpServletRequest req) {\n        return new ResultBean().setMsg(\"请求路径不存在\").setCode(\"404\");\n    }\n}\n\n```\n\n\n项目架构信得\ncommon 和core模块存在的意义\n\n\n","source":"_posts/logback.md","raw":"---\ntitle: ' logback深度使用'\ndate: 2019-03-28 09:44:50\ntags: log\n---\n\n\n##### 作者：muggle\n\nLogback是由log4j创始人设计的另一个开源日志组件,分为三个模块：\n\n1. logback-core：其它两个模块的基础模块\n\n2. logback-classic：它是log4j的一个改良版本，同时它完整实现了slf4j API使你可以很方便地更换成其它日志系统如log4j或JDK14 Logging\n\n3. logback-access：访问模块与Servlet容器集成提供通过Http来访问日志的功能\n在springboot中我们通过xml配置来操作logback\n\n<!--more-->\nspringboot中logback的默认配置文件名称为logback-spring.xml，若需要指定xml名称，需在application.properties（application.yml）中配置logging.config=xxxx.xml\n现在贴出一份logback的xml配置，可直接使用，懒得看的小伙伴复制粘贴到你的项目中去体验吧\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\n\n<configuration scan=\"true\" scanPeriod=\"60 seconds\" debug=\"false\">\n\n    <jmxConfigurator/>\n\n    <property name=\"log_dir\" value=\"logs\"/>\n    <property name=\"maxHistory\" value=\"100\"/>\n\n    <appender name=\"console\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <pattern>\n                %d{yyyy-MM-dd HH:mm:ss.SSS} %highlight([%-5level]) %logger - %msg%n\n            </pattern>\n        </encoder>\n    </appender>\n    <appender name=\"logs\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <fileNamePattern>\n                ${log_dir}/%d{yyyy-MM-dd}-poseidon.log\n            </fileNamePattern>\n            <maxHistory>${maxHistory}</maxHistory>\n        </rollingPolicy>\n        <encoder>\n            <pattern>\n                %d{yyyy-MM-dd HH:mm:ss.SSS} %highlight([%-5level]) %logger - %msg%n\n            </pattern>\n        </encoder>\n    </appender>\n\n    <appender name=\"runningTime-file\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <fileNamePattern>${log_dir}/runningTime/%d{yyyy-MM-dd}-poseidon.log</fileNamePattern>\n            <maxHistory>${maxHistory}</maxHistory>\n        </rollingPolicy>\n        <encoder>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %logger - %msg%n</pattern>\n        </encoder>\n    </appender>\n    <appender name=\"runningTime-console\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <pattern>\n                %d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %logger - %msg%n\n            </pattern>\n        </encoder>\n    </appender>\n    <logger name=\"runningTime\" level=\"info\" additivity=\"false\">\n        <!--<appender-ref ref=\"runningTime-file\"/>-->\n        <appender-ref ref=\"runningTime-console\"/>\n    </logger>\n<!--  可能会抛出方言异常 两个解决方案 配置方言或者换连接池 换druid不会有这个异常-->\n    <appender name=\"requestLog-db\" class=\"ch.qos.logback.classic.db.DBAppender\">\n        <connectionSource class=\"ch.qos.logback.core.db.DataSourceConnectionSource\">\n            <dataSource class=\"org.apache.commons.dbcp.BasicDataSource\">\n                <driverClassName>com.mysql.cj.jdbc.Driver</driverClassName>\n                <url>jdbc:mysql://xxx/xxxx?characterEncoding=UTF-8</url>\n                <username>xx</username>\n                <password>xxxx</password>\n            </dataSource>\n        </connectionSource>\n        <!--<sqlDialect class=\"ch.qos.logback.core.db.dialect.MySQLDialect\" />-->\n    </appender>\n    <!--异步配置-->\n    <!--<appender name=\"requestLog-file\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n         <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n             <fileNamePattern>${log_dir}/requestLog/%d{yyyy-MM-dd}-poseidon.log</fileNamePattern>\n             <maxHistory>${maxHistory}</maxHistory>\n         </rollingPolicy>\n         <encoder>\n             <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %logger - %msg%n</pattern>\n         </encoder>\n     </appender>-->\n    <!-- <appender name=\"request-asyn\" class=\"ch.qos.logback.classic.AsyncAppender\">\n        <appender-ref ref=\"requestLog-file\"/>\n    </appender> -->\n    <appender name=\"logs-asyn\" class=\"ch.qos.logback.classic.AsyncAppender\">\n        <appender-ref ref=\"logs\"/>\n    </appender>\n    <logger name=\"requestLog\" level=\"info\" additivity=\"false\">\n        <!--<appender-ref ref=\"requestLog-file\"/>-->\n        <!-- DBAppender 查看可知其父类dbappenderbase继承了UnsynchronizedAppenderBase<E> 所以dbappender本身是异步的 无需配置异步-->\n        <appender-ref ref=\"requestLog-db\"/>\n    </logger>\n    <root>\n        <level value=\"info\"/>\n        <appender-ref ref=\"console\"/>\n        <!--<appender-ref ref=\"logs\"/>-->\n        <appender-ref ref=\"logs-asyn\"/>\n    </root>\n</configuration>\n```\n\n我们可以看到xml中有四种节点\nappender，logger，root,configuration\n#### 节点解读\n\nconfiguration包含三个属性：\n\n1. scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。\n2. scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。\n3. debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。\n4.\nLogger作为日志的记录器，把它关联到应用的对应的context上后，主要用于存放日志对象，也可以定义日志类型、级别。\n\nAppender主要用于指定日志输出的目的地，目的地可以是控制台、文件、远程套接字服务器、 MySQL、PostreSQL、 Oracle和其他数据库、 JMS和远程UNIX Syslog守护进程等。\n\nroot 就是最高级别logger,所有不被指定logger的日志都归root管理。\n\n在slf4j框架下我们使用log是这样的:\n```java\n private static final Logger logger= LoggerFactory.getLogger(xxx.class);\n```\n或者\n```java\n private static final Logger logger= LoggerFactory.getLogger(\"xxxx\");\n```\n\n可以理解为代码中的getLogger() 方法就是获取xml配置中的logger,如果没有配置相应的logger则为root\n比如我配置了：\n```xml\n<logger name=\"hhh\" level=\"info\" additivity=\"false\">\n        <!--<appender-ref ref=\"requestLog-file\"/>-->\n        <appender-ref ref=\"xxx\"/>\n</logger>\n```\n那我在获得一个logger时可以这样获得它：\n```java\n private static final Logger logger= LoggerFactory.getLogger(\"hhh\");\n```\n我所输出的日志将被这个logger所管理\nlogger 上有三个配置 name level additivity\nname就是这个logger的名称，level就是这个日志过滤的级别，低于这个级别的日志不输入到对应的appender中；additivity是否向上级logger传递打印信息，默认是true。logger中可以配置多个appender-ref，也就是可以指定多个输出地点。\n而root只是特殊的logger，用法上无差别\n\n\nappender节点：\nappender节点是logback配置的关键，其name属性指定其名称，class属性指定实现类，对应得实现类有\n```java\nch.qos.logback.core.ConsoleAppender // 以控制台作为输出\nch.qos.logback.core.rolling.RollingFileAppender//以日志文件作为输出\nch.qos.logback.classic.db.DBAppender//以数据库作为输出\nnet.logstash.logback.appender.LogstashTcpSocketAppender//以logstash作为输出需要引入如下依赖：\nch.qos.logback.classic.AsyncAppender//异步输出 需要定义appender-ref\n\n// logstash依赖\n<dependency>\n  <groupId>net.logstash.logback</groupId>\n  <artifactId>logstash-logback-encoder</artifactId>\n  <version>4.11</version>\n</dependency>\n```\n\n所有的appender 实现ch.qos.logback.core.Appender接口或者 ch.qos.logback.core.UnsynchronizedAppenderBase接口（异步），我们也可以自定义appender来指定日志输出；\n\n在Appender中可以定义哪些节点我们一个个来看：\n\n第一种： ConsoleAppender\n如同它的名字一样，这个Appender将日志输出到console，更准确的说是System.out 或者System.err。\n它包含的参数如下：\n\nProperty | Name\tType |\tDescription |\n---------|-----------| -----------\nencoder  | Encoder   | 通常在其pattern里指定日志格式  如： %d{yyyy-MM-dd HH:mm:ss.SSS} %highlight([%-5level]) %logger - %msg%n表示 日期格式 日志级别（高亮）logger的名称 logger的message\ntarget|String|指定输出目标。可选值：System.out 或 System.err。默认值：System.out\nwithJansi|boolean|是否支持ANSI color codes（类似linux中的shell脚本的输出字符串颜色控制代码）。默认为false。如果设置为true。例如：[31m 代表将前景色设置成红色。在windows中，需要提供\"org.fusesource.jansi:jansi:1.9\"，而在linux，mac os x中默认支持。\n\n第二种： FileAppender\n将日志输出到文件当中，目标文件取决于file属性。是否追加输出，取决于append属性。\n\nProperty | Name\tType |\tDescription |\n---------|-----------| -----------\nappend |\tboolean\t| 是否以追加方式输出。默认为true。\nencoder |\tEncoder\t|See OutputStreamAppender properties.\nfile\t| String |\t指定文件名。注意在windows当中，反斜杠 \\ 需要转义，或直接使用 / 也可以。例如 c:/temp/test.logor 或 c:\\\\temp\\\\test.log 都可以。没有默认值，如果上层目录不存在，FileAppender会自动创建。\nprudent |\tboolean|\t是否工作在谨慎模式下。在谨慎模式下，FileAppender将会安全写入日志到指定文件，即时在不同的虚拟机jvm中有另一个相同的FileAppender实例。默认值：fales;设置为true，意味着append会被自动设置成true。prudent依赖于文件排它锁。实验表明，使用文件锁，会增加3倍的日志写入消耗。比如说，当prudent模式为off，写入一条日志到文件只要10毫秒，但是prudent为真，则会接近30毫秒。prudent 模式实际上是将I/O请求序列化，因此在I/O数量较大，比如说100次/s或更多的时候，带来的延迟也会显而易见，所以应该避免。在networked file system（远程文件系统）中，这种消耗将会更大，可能导致死锁。\n\n第三个： RollingFileAppender\n\nRollingFileAppender继承自FileAppender，提供日志目标文件自动切换的功能。例如可以用日期作为日志分割的条件。\nRollingFileAppender有两个重要属性，RollingPolicy负责怎么切换日志，TriggeringPolicy负责何时切换。为了使RollingFileAppender起作用，这两个属性必须设置，但是如果RollingPolicy的实现类同样实现了TriggeringPolicy接口，则也可以只设置RollingPolicy这个属性。\n下面是它的参数：\n\nProperty | Name\tType |\tDescription |\n---------|-----------| -----------\nfile |\tString |\t指定文件名。注意在windows当中，反斜杠 \\ 需要转义，或直接使用 / 也可以。例如 c:/temp/test.logor 或 c:\\\\temp\\\\test.log 都可以。没有默认值，如果上层目录不存在，FileAppender会自动创建。\nappend\t|boolean\t|是否以追加方式输出。默认为true。\nencoder\t| Encoder\t| See OutputStreamAppender properties.\nrollingPolicy |\tRollingPolicy\t| 当发生日志切换时，RollingFileAppender的切换行为。例如日志文件名的修改\ntriggeringPolicy\t| TriggeringPolicy\t| 决定什么时候发生日志切换，例如日期，日志文件大小到达一定值\nprudent\t| boolean\t|FixedWindowRollingPolicy 不支持prudent模式。TimeBasedRollingPolicy 支持prudent模式，但是需要满足一下两条约束：在prudent模式中，日志文件的压缩是不被允许，不被支持的。不能设置file属性。\n\n第四个：SocketAppender及SSLSocketAppender（未尝试过）\n\n到目前为止我们讲的appender都只能将日志输出到本地资源。与之相对的，SocketAppender就是被设计用来输出日志到远程实例中的。SocketAppender输出日志采用明文方式，SSLSocketAppender则采用加密方式传输日志。\n被序列化的日志事件的类型是 LoggingEventVO 继承ILoggingEvent接口。远程日志记录并非是侵入式的。在反序列化接收后，日志事件就可以好像在本地生成的日志一样处理了。多个SockerAppender可以向同一台日志服务器发送日志。SocketAppender并不需要关联一个Layout，因为它只是发送序列化的日志事件给远程日志服务器。SocketAppender的发送操作是基于TCP协议的。因此如果远程服务器是可到达的，则日志会被其处理，如果远程服务器宕机或不可到达，那么日志将会被丢弃。等到远程服务器复活，日志发送将会透明的重新开始。这种透明式的重连，是通过一个“连接“线程周期性的尝试连接远程服务器实现的。\nLogging events会由TCP协议实现自动缓冲。这意味着，如果网络速度比日志请求产生速度快，则网络速度并不会影响应用。但如果网络速度过慢，则网络速度则会变成限制，在极端情况下，如果远程日志服务器不可到达，则会导致应用最终阻塞。不过，如果服务器可到达，但是服务器宕机了，这种情况，应用不会阻塞，而只是丢失一些日志事件而已。\n需要注意的是，即使SocketAppender没有被logger链接，它也不会被gc回收，因为他在connector thread中任然存在引用。一个connector thread 只有在网络不可达的情况下，才会退出。为了防止这个垃圾回收的问题，我们应该显示声明关闭SocketAppender。长久存活并创建/销毁大量的SocketAppender实例的应用，更应该注意这个问题。不过大多数应用可以忽略这个问题。如果JVM在SocketAppender关闭之前将其退出，又或者是被垃圾回收，这样子可能导致丢失一些还未被传输，在管道中等待的日志数据。为了防止避免日志丢失，经常可靠的办法就是调用SocketAppender的close方法，或者调用LoggerContext的stop方法，在退出应用之前。\n\n下面我们来看看SocketAppender的属性：\n\nProperty | Name\tType |\tDescription |\n---------|-----------| -----------\nincludeCallerData |\tboolean\t|是否包含调用者的信息如果为true，则以下日志输出的 ?:? 会替换成调用者的文件名跟行号，为false，则为问号。2019-01-06 17:37:30,968 DEBUG [Thread-0] [?:?] chapters.appenders.socket.SocketClient2 - Hi\nport |\tint\t| 端口号\nreconnectionDelay\t| Duration\t| 重连延时，如果设置成“10 seconds”，就会在连接u武器失败后，等待10秒，再连接。默认值：“30 seconds”。如果设置成0，则关闭重连功能。\nqueueSize\t| int\t| 设置缓冲日志数，如果设置成0，日志发送是同步的，如果设置成大于0的值，会将日志放入队列，队列长度到达指定值，在统一发送。可以加大服务吞吐量。\neventDelayLimit |\tDuration |\t设置日志超时丢弃时间。当设置“10 seconds”类似的值，如果日志队列已满，而服务器长时间来不及接收，当滞留时间超过10 seconds，日志就会被丢弃。默认值： 100 milliseconds\nremoteHost |\tString |\t远程日志服务器的IP\nssl\t| SSLConfiguration | 只在SSLSocketAppender包含该属性节点。提供SSL配置，详情见 Using SSL.\n\n标准的Logback Classic包含四个可供使用的Receiver用来接收来自SocketAppender的logging evnets。\n\n第五个： SMTPAppender\n\nSMTPAppender 可以将logging event存放在一个或多个固定大小的缓冲区中，然后在用户指定的event到来之时，将适当的大小的logging event以邮件方式发送给运维人员。\n详细属性如下：\n\nProperty | Name\tType |\tDescription |\n---------|-----------| -----------\nsmtpHost |\tString\t| SMTP server的地址，必需指定。如网易的SMTP服务器地址是： smtp.163.com\nsmtpPort |\tint\t| SMTP server的端口地址。默认值：25\nto\t| String |\t指定发送到那个邮箱，可设置多个<to>属性，指定多个目的邮箱\nfrom |\tString |\t指定发件人名称。如果设置成“muggle &lt;hh@moral.org&gt; ”，则邮件发件人将会是“muggle <hh@moral.org> ”\nsubject |\tString |指定emial的标题，它需要满足PatternLayout中的格式要求。如果设置成“Log: %logger - %msg”，就案例来讲，则发送邮件时，标题为“Log: com.foo.Bar - Hello World ”。 默认值：\"%logger{20} - %m\".\ndiscriminator\t| Discriminator\t| 通过Discriminator, SMTPAppender可以根据Discriminator的返回值，将到来的logging event分发到不同的缓冲区中。默认情况下，总是返回相同的值来达到使用一个缓冲区的目的。\nevaluator |\tIEvaluator\t| 指定触发日志发送的条件。通过<evaluator class=... />指定EventEvaluator接口的实现类。默认情况下SMTPAppeender使用的是OnErrorEvaluator，表示当发送ERROR或更高级别的日志请求时，发送邮件。Logback提供了几个evaluators：OnErrorEvaluator、OnMarkerEvaluator、JaninoEventEvaluator、GEventEvaluator（功能强大）\ncyclicBufferTracker |\tCyclicBufferTracker\t| 指定一个cyclicBufferTracker跟踪cyclic buffer。它是基于discriminator的实现的。如果你不指定，默认会创建一个CyclicBufferTracker ，默认设置cyclic buffer大小为256。你也可以手动指定使用默认的CyclicBufferTracker，并且通过<bufferSize>属性修改默认的缓冲区接收多少条logging event。\nusername\t| String |\t发送邮件账号，默认为null\npassword |\tString |\t发送邮件密码，默认为null\nSTARTTLS\t| boolean\t|如果设置为true，appender会尝试使用STARTTLS命令，如果服务端支持，则会将明文连接转换成加密连接。需要注意的是，与日志服务器连接一开始是未加密的。默认值：false\nSSL\t| boolean\t| 如果设置为true，appender将会使用SSL连接到日志服务器。 默认值：false\ncharsetEncoding |\tString\t|指定邮件信息的编码格式 默认值：UTF-8\nlocalhost\t| String |\t如果smtpHost没有正确配置，比如说不是完整的地址。这时候就需要localhost这个属性提供服务器的完整路径（如同java中的完全限定名 ），详情参考com.sun.mail.smtp 中的mail.smtp.localhost属性\nasynchronousSending\t| boolean\t| 这个属性决定email的发送是否是异步。默认：true，异步发送但是在某些情况下，需要以同步方式发送错误日志的邮件给管理人员，防止不能及时维护应用。\nincludeCallerData |\tboolean\t|默认：false 指定是否包含callerData在日志中\nsessionViaJNDI |\tboolean\t| SMTPAppender依赖javax.mail.Session来发送邮件。默认情况下，sessionViaJNDI为false。javax.mail.Session实例的创建依赖于SMTPAppender本身的配置信息。如果设置为true，则Session的创建时通过JNDI获取引用。这样做的好处可以让你的代码复用更好，让配置更简洁。需要注意的是，如果使用JNDI获取Session对象，需要保证移除mail.jar以及activation.jar这两个jar包\njndiLocation |\tString\t| 如果sessionViaJNDI设置为true，则jndiLocation指定JNDI的资源名，默认值为：\"java:comp/env/mail/Session\"\n\nSMTPAppender只保留最近的256条logging events 在循环缓冲区中，当缓冲区慢，就会开始丢弃最老的logging event。因此不管什么时候，SMTPAppender一封邮件最多传递256条日志事件。SMTPAppender依赖于JavaMail API。而JavaMail API又依赖于IOC框架（依赖注入）。\n\n第六个：DBAppender\n\n DBAppender 可以将日志事件插入到3张数据表中。它们分别是logging_event，logging_event_property，logging_event_exception。这三张数据表必须在DBAppender工作之前存在。它们的sql脚本可以在 logback-classic/src/main/java/ch/qos/logback/classic/db/script folder 这个目录下找到。这个脚本对大部分SQL数据库都是有效的，除了少部分，少数语法有差异需要调整。\n下面是logback与常见数据库的支持信息：\n\nRDBMS\t| tested version(s)\t| tested JDBC driver version(s)| \tsupports getGeneratedKeys() method |\tis a dialect provided by logback\n----------|----------|--------|----------|----\nDB2 |\tuntested |\tuntested |\tunknown |\tNO\nH2 |\t--| - |\tunknown\t| YES\nHSQL |-- |\t-\t| NO |\tYES\nMicrosoft SQL Server |\t-- | -- |\tYES\t| YES\nMySQL |\t5.7\t|  \t|YES|\tYES\nPostgreSQL | --|-- |\tNO|\tYES\nOracle\t|--|--|\tYES\t|YES\nSQLLite\t|--|\t-|\tunknown\t|YES\nSybase |--|\t\t-\t|unknown|\tYES\n\n\n下面给出三张表的sql语句：\n```sql\nBEGIN;\nDROP TABLE IF EXISTS logging_event_property;\nDROP TABLE IF EXISTS logging_event_exception;\nDROP TABLE IF EXISTS logging_event;\nCOMMIT;\n\nBEGIN;\nCREATE TABLE logging_event\n  (\n    timestmp         BIGINT NOT NULL,\n    formatted_message  TEXT NOT NULL,\n    logger_name       VARCHAR(254) NOT NULL,\n    level_string      VARCHAR(254) NOT NULL,\n    thread_name       VARCHAR(254),\n    reference_flag    SMALLINT,\n    arg0              VARCHAR(254),\n    arg1              VARCHAR(254),\n    arg2              VARCHAR(254),\n    arg3              VARCHAR(254),\n    caller_filename   VARCHAR(254) NOT NULL,\n    caller_class      VARCHAR(254) NOT NULL,\n    caller_method     VARCHAR(254) NOT NULL,\n    caller_line       CHAR(4) NOT NULL,\n    event_id          BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY\n  );\nCOMMIT;\n\n\nBEGIN;\nCREATE TABLE logging_event_property\n  (\n    event_id       BIGINT NOT NULL,\n    mapped_key        VARCHAR(254) NOT NULL,\n    mapped_value      TEXT,\n    PRIMARY KEY(event_id, mapped_key),\n    FOREIGN KEY (event_id) REFERENCES logging_event(event_id)\n  );\nCOMMIT;\n\n\nBEGIN;\nCREATE TABLE logging_event_exception\n  (\n    event_id         BIGINT NOT NULL,\n    i                SMALLINT NOT NULL,\n    trace_line       VARCHAR(254) NOT NULL,\n    PRIMARY KEY(event_id, i),\n    FOREIGN KEY (event_id) REFERENCES logging_event(event_id)\n  );\nCOMMIT;\n```\n\n第七个： AsyncAppender\n\nAsyncAppender记录ILoggingEvents的方式是异步的。它仅仅相当于一个event分配器，因此需要配合其他appender才能有所作为。\n\n需要注意的是：AsyncAppender将event缓存在 BlockingQueue ，一个由AsyncAppender创建的工作线程，会一直从这个队列的头部获取events，然后将它们分配给与AsyncAppender唯一关联的Appender中。默认情况下，如果这个队列80%已经被占满，则AsyncAppender会丢弃等级为 TRACE，DEBUG，INFO这三个等级的日志事件。\n在应用关闭或重新部署的时候，AsyncAppender一定要被关闭，目的是为了停止，回收再利用worker thread，和刷新缓冲队列中logging events。那如果关闭AsyncAppender呢？可以通过关闭LoggerContext来关闭所有appender，当然也包括AsyncAppender了。AsyncAppender会在maxFlushTime属性设置的时间内等待Worker thread刷新全部日志event。如果你发现缓冲的event在关闭LoggerContext的时候被丢弃，这时候你就也许需要增加等待的时间。将maxFlushTime设置成0，就是AsyncAppender一直等待直到工作线程将所有被缓冲的events全部刷新出去才执行才结束。\n根据JVM退出的模式，工作线程worker thread处理被缓冲的events的工作是可以被中断的，这样就导致了剩余未处理的events被搁浅。这种现象通常的原因是当LoggerContext没有完全关闭，或者当JVM终止那些非典型的控制流（不明觉厉）。为了避免工作线程的因为这些情况而发生中断，一个shutdown hook（关闭钩子）可以被插入到JVM运行的时候，这个钩子的作用是在JVM开始shutdown刚开始的时候执行关闭 LoggerContext的任务。\n\n下面是AsyncAppender的属性表\n\nProperty | Name\tType |\tDescription |\n---------|-----------| -----------\nqueueSize\t| int\t| 设置blocking queue的最大容量，默认是256条events\ndiscardingThreshold\t| int\t| 默认，当blocking queue被占用80%以上，AsyncAppender就会丢弃level为 TRACE，DEBUG，INFO的日志事件，如果要保留所有等级的日志，需要设置成0\nincludeCallerData\t| boolean\t| 提取CallerData代价比较昂贵，为了提高性能，caller data默认不提供。只有一些获取代价较低的数据，如线程名称，MDC值才会被保留。如果设置为true，就会包含caller data\nmaxFlushTime | \tint\t|设置最大等待刷新事件，单位为miliseconds(毫秒)。当LoggerContext关闭的时候，AsyncAppender会在这个时间内等待工作线程完成events的flush工作，超时未处理的events将会被抛弃。\nneverBlock |\tboolean |\t默认为false，如果队列被填满，为了处理所有日志，就会阻塞的应用。如果为true，为了不阻塞你的应用，也会选择抛弃一些message。\n\n默认情况下，event queue最大的容量是256。如果队列被填充满那么就会阻塞你的应用，直到队列能够容纳新的logging event。所以当AsyncAppender工作在队列满的情况下，可以称作伪同步。\n在以下四种情况下容易导致AsyncAppender伪同步状态的出现：\n\n1. 应用中存在大量线程\n2. 每秒产生大量的logging events\n3. 每一个logging event都存在大量的数据\n4. 子appender中存在很高的延迟\n\n为了避免伪同步的出现，提高queueSizes普遍有效，但是就消耗了应用的可用内存。\n\n下面列出一些 appender配置示例：\n\n```xml\n\n<configuration>\n  <appender name=\"FILE\" class=\"ch.qos.logback.core.FileAppender\">\n    <file>myapp.log</file>\n    <encoder>\n      <pattern>%logger{35} - %msg%n</pattern>\n    </encoder>\n  </appender>\n\n  <appender name=\"ASYNC\" class=\"ch.qos.logback.classic.AsyncAppender\">\n    <appender-ref ref=\"FILE\" />\n  </appender>\n\n  <root level=\"DEBUG\">\n    <appender-ref ref=\"ASYNC\" />\n  </root>\n</configuration>\n\n<configuration>\n\n  <appender name=\"DB\" class=\"ch.qos.logback.classic.db.DBAppender\">\n    <connectionSource\n      class=\"ch.qos.logback.core.db.DataSourceConnectionSource\">\n      <dataSource\n        class=\"com.mchange.v2.c3p0.ComboPooledDataSource\">\n        <driverClass>com.mysql.jdbc.Driver</driverClass>\n        <jdbcUrl>jdbc:mysql://${serverName}:${port}/${dbName}</jdbcUrl>\n        <user>${user}</user>\n        <password>${password}</password>\n      </dataSource>\n    </connectionSource>\n  </appender>\n\n  <root level=\"DEBUG\">\n    <appender-ref ref=\"DB\" />\n  </root>\n</configuration>\n\n<configuration>\n  <appender name=\"EMAIL\" class=\"ch.qos.logback.classic.net.SMTPAppender\">\n    <smtpHost>smtp.gmail.com</smtpHost>\n    <smtpPort>465</smtpPort>\n    <SSL>true</SSL>\n    <username>YOUR_USERNAME@gmail.com</username>\n    <password>YOUR_GMAIL_PASSWORD</password>\n\n    <to>EMAIL-DESTINATION</to>\n    <to>ANOTHER_EMAIL_DESTINATION</to> <!-- additional destinations are possible -->\n    <from>YOUR_USERNAME@gmail.com</from>\n    <subject>TESTING: %logger{20} - %m</subject>\n    <layout class=\"ch.qos.logback.classic.PatternLayout\">\n      <pattern>%date %-5level %logger{35} - %message%n</pattern>\n    </layout>\n  </appender>\n\n  <root level=\"DEBUG\">\n    <appender-ref ref=\"EMAIL\" />\n  </root>\n</configuration>\n\n<configuration>\n  <appender name=\"EMAIL\" class=\"ch.qos.logback.classic.net.SMTPAppender\">\n    <smtpHost>smtp.gmail.com</smtpHost>\n    <smtpPort>587</smtpPort>\n    <STARTTLS>true</STARTTLS>\n    <username>YOUR_USERNAME@gmail.com</username>\n    <password>YOUR_GMAIL_xPASSWORD</password>\n\n    <to>EMAIL-DESTINATION</to>\n    <to>ANOTHER_EMAIL_DESTINATION</to> <!-- additional destinations are possible -->\n    <from>YOUR_USERNAME@gmail.com</from>\n    <subject>TESTING: %logger{20} - %m</subject>\n    <layout class=\"ch.qos.logback.classic.PatternLayout\">\n      <pattern>%date %-5level %logger - %message%n</pattern>\n    </layout>\n  </appender>\n\n  <root level=\"DEBUG\">\n    <appender-ref ref=\"EMAIL\" />\n  </root>\n</configuration>\n\nSimpleSocketServer需要两个命令行参数，port 和 configFile路径。(该方法待验证)\njava ch.qos.logback.classic.net.SimpleSocketServer 6000 \\ src/main/java/chapters/appenders/socket/server1.xml\n\n客户端的SocketAppender的简单配置例子：\n<configuration>\n\n  <appender name=\"SOCKET\" class=\"ch.qos.logback.classic.net.SocketAppender\">\n    <remoteHost>192.168.0.101</remoteHost>\n    <port>8888</port>\n    <reconnectionDelay>10000</reconnectionDelay>\n    <includeCallerData>true</includeCallerData>\n  </appender>\n\n  <root level=\"DEBUG\">\n    <appender-ref ref=\"SOCKET\" />\n  </root>\n\n</configuration>\n\n在服务端使用SimpleSSLSocketServer\njava -Djavax.net.ssl.keyStore=src/main/java/chapters/appenders/socket/ssl/keystore.jks \\ -Djavax.net.ssl.keyStorePassword=changeit \\ ch.qos.logback.classic.net.SimpleSSLSocketServer 6000 \\ src/main/java/chapters/appenders/socket/ssl/server.xml\n\nSSLSocketAppender配置\n<configuration debug=\"true\">\n\n  <appender name=\"SOCKET\" class=\"ch.qos.logback.classic.net.SSLSocketAppender\">\n    <remoteHost>${host}</remoteHost>\n    <port>${port}</port>\n    <reconnectionDelay>10000</reconnectionDelay>\n    <ssl>\n      <trustStore>\n        <location>${truststore}</location>\n        <password>${password}</password>\n      </trustStore>\n    </ssl>\n  </appender>\n\n  <root level=\"DEBUG\">\n    <appender-ref ref=\"SOCKET\" />\n  </root>\n\n</configuration>\n\n<configuration>\n\n  <appender name=\"FILE\" class=\"ch.qos.logback.core.FileAppender\">\n    <file>testFile.log</file>\n    <append>true</append>\n    <!-- encoders are assigned the type\n        ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->\n    <encoder>\n      <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>\n    </encoder>\n  </appender>\n\n  <root level=\"DEBUG\">\n    <appender-ref ref=\"FILE\" />\n  </root>\n</configuration>\n```\n参考：https://blog.csdn.net/tianyaleixiaowu/article/details/73327752\n\n下面基于logback配置做一个请求日志的的封装\n\n功能：记录每次请求的参数和用户ID存入数据库或者elk\n问题：javaee规范中request输入输出流都只能被读取一次，所以如果用过滤器或者拦截器读取request中的流都会导致后面的controller无法接受到数据。\n所以我们要用原生的aop获得请求参数，切点为controller，这就很好的避开了以上问题。\n\n```java\npackage com.muggle.poseidon.core.aspect;\n\nimport com.muggle.poseidon.manager.UserInfoManager;\nimport com.muggle.poseidon.utils.RequestUtils;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.*;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.Serializable;\n\n/**\n * @program: hiram_erp\n * @description: 日志信息切面\n * @author: muggle\n * @create: 2019-02-21\n **/\n@Aspect\n@Component\npublic class LogMessageAspect {\n\n    private final static Logger logger = LoggerFactory.getLogger(\"requestLog\");\n//    private final static Logger timeLog = LoggerFactory.getLogger(LogMessageAspect.class);\n    private static final ThreadLocal<Long> threadLocal = new ThreadLocal<>();\n    @Pointcut(\"execution(public * com.hiram.erp.controller.*.*(..))\")\n    public void webLog() {}\n\n    /**\n     * 在切点之前织入\n     * @param joinPoint\n     * @throws Throwable\n     */\n    @Before(\"webLog()\")\n    public void doBefore(JoinPoint joinPoint) throws Throwable {\n//        System.out.println(\"sssssssssssssssssssssssssssssssssssssssssssssssssssss\");\n       /* // 开始打印请求日志\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = attributes.getRequest();\n\n        // 打印请求相关参数\n        // 打印请求 url\n        // 请求id\n        Long userId=null;\n        if (user!=null){\n            userId=user.getUserInfo().getUserId();\n        }\n        logger.info(\"URL : {}, 登录id: {} ,HTTP Method: {},ip :{},Request Args : {}\", request.getRequestURL().toString(),userId, request.getMethod(),request.getRemoteAddr());\n*/    }\n\n    /**\n     * 在切点之后织入\n     * @throws Throwable\n     */\n    @After(\"webLog()\")\n    public void doAfter(JoinPoint joinPoint) throws Throwable {\n\n\n\n    }\n\n    /**\n     * 环绕\n     * @param joinPoint\n     * @return\n     * @throws Throwable\n     */\n    @Around(\"webLog()\")\n    public Object doAround(ProceedingJoinPoint joinPoint) throws Throwable {\n        long startTime = System.currentTimeMillis();\n        Object result = joinPoint.proceed();\n        // 打印出参\n//        logger.info(\"Response Args  : {},\", JSONObject.toJSONString(result),new Date());\n        // 执行耗时\n        // 开始打印请求日志\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = attributes.getRequest();\n        HttpServletResponse response = attributes.getResponse();\n        String requestURL = request.getRequestURL().toString();\n        if (requestURL.contains(\"/sys/log_info/\")){\n            return result;\n        }\n        // 打印请求相关参数\n        // 打印请求 url\n        // 请求id\n        String userId = UserInfoManager.getUserId();\n\n        String url = request.getRequestURL().toString();\n        String method = request.getMethod();\n        String remoteAddr = RequestUtils.getIpAddr(request);\n        Object[] args = joinPoint.getArgs();\n//        List<Object> objects=new ArrayList<>();\n        StringBuilder stringBuilder = new StringBuilder();\n        for (int i=0;i<args.length;i++){\n            if (args[i] instanceof Serializable||args[i] instanceof Number ||args[i] instanceof String){\n                stringBuilder.append( args[i].toString());\n//                objects.add(args[i]);\n            }\n        }\n        logger.info(\"{\\\"startTime\\\":\\\"{}\\\",\\\"url\\\":\\\"{}\\\",\\\"userId\\\":\\\"{}\\\" ,\\\"httpMethod\\\":\\\"{}\\\",\\\"ip\\\":\\\"{}\\\",\\\"requestArgs\\\":\\\"{}\\\",\\\"status\\\":{}}\",startTime,url,userId,method,remoteAddr,stringBuilder.toString(),response.getStatus());\n        return result;\n    }\n\n\n}\n\n```\n对于数据库存储，如果我们希望log存在另外一个数据库中不存在项目里的数据库中，并且可以通过持久化框架查询数据库内信息。我们则可以配置多数据源，如果将日志放在同一个数据库中则直接配置appender就行了，很方便。\n多数据源配置mybatis版：\n\n其原理是配置多个sessionfactory,然后根据不同的mapperscan来区分不同mapper对应的数据库\n\n以druid连接池为例\n\napplication.yml\n\n```java\nlog:\n  datasource:\n    druid:\n      url: ${mysql_url}/log?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true&serverTimezone=GMT%2B8&nullCatalogMeansCurrent=true\n      username:\n      password:\n      driver-class-name: com.mysql.cj.jdbc.Driver\n      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\n      filters: stat,wall\n      initialSize: 5\n      maxActive: 20\n      maxPoolPreparedStatementPerConnectionSize: 20\n      maxWait: 60000\n      minIdle: 5\n      poolPreparedStatements: true\n      testOnBorrow: false\n      testOnReturn: false\n      testWhileIdle: true\n      timeBetweenEvictionRunsMillis: 60000\n      validationQuery: SELECT 1\n\n\nspring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    druid:\n      url: ${mysql_url}/hiram_erp?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true&serverTimezone=GMT%2B8&nullCatalogMeansCurrent=true\n      username:\n      password:\n      driver-class-name: com.mysql.cj.jdbc.Driver\n      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\n      filters: stat,wall\n      initialSize: 5\n      maxActive: 20\n      maxPoolPreparedStatementPerConnectionSize: 20\n      maxWait: 60000\n      minIdle: 5\n      poolPreparedStatements: true\n      testOnBorrow: false\n      testOnReturn: false\n      testWhileIdle: true\n      timeBetweenEvictionRunsMillis: 60000\n      validationQuery: SELECT 1\n```\n\n```java\n\n@Configuration\n// 主数据库配置 指定mapper位置\n@MapperScan(basePackages = {\"com.muggle.poseidon.mapper\"}, sqlSessionTemplateRef = \"sqlSessionTemplate\")\npublic class ManySourceDBConfig {\n\n    @Bean(name = \"dataSource\")\n    // 读取application的配置信息\n   @ConfigurationProperties(prefix = \"spring.datasource.druid\")\n   // 最高优先级，表示系统默认使用该配置\n    @Primary\n    public DataSource dataSource() {\n        DruidDataSource druidDataSource = new DruidDataSource();\n\n        List filterList = new ArrayList<>();\n\n        filterList.add(wallFilter());\n\n        druidDataSource.setProxyFilters(filterList);\n\n        return druidDataSource;\n    }\n\n    @Bean(name = \"sqlSessionFactory\")\n    @Primary\n    public SqlSessionFactory sqlSessionFactory() throws Exception {\n        SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();\n        sqlSessionFactoryBean.setDataSource(this.dataSource());\n\n        Properties props = new Properties();\n        props.setProperty(\"localCacheScope\", \"true\");\n        props.setProperty(\"lazyLoadingEnabled\", \"true\");\n        props.setProperty(\"aggressiveLazyLoading\", \"false\");\n        props.setProperty(\"jdbcTypeForNull\", \"NULL\");\n        sqlSessionFactoryBean.setConfigurationProperties(props);\n        sqlSessionFactoryBean.setVfs(SpringBootVFS.class);\n        //pageHelper\n        Properties properties = new Properties();\n        properties.setProperty(\"reasonable\", \"true\");\n        properties.setProperty(\"supportMethodsArguments\", \"true\");\n        properties.setProperty(\"params\", \"count=countSql\");\n        properties.setProperty(\"pageSizeZero\", \"true\");\n        PageInterceptor interceptor = new PageInterceptor();\n        interceptor.setProperties(properties);\n        sqlSessionFactoryBean.setPlugins(new Interceptor[]{interceptor});\n        sqlSessionFactoryBean.setTypeAliasesPackage(\"com.muggle.poseidon.model\");\n        PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();\n        sqlSessionFactoryBean.setMapperLocations(resolver.getResources(\"classpath*:/mapper/*.xml\"));\n        return sqlSessionFactoryBean.getObject();\n    }\n\n    @Bean(name = \"transactionManager\")\n    @Primary\n    public PlatformTransactionManager transactionManager() {\n        return new DataSourceTransactionManager(this.dataSource());\n    }\n\n    @Bean(name = \"sqlSessionTemplate\")\n    public SqlSessionTemplate testSqlSessionTemplate(@Qualifier(\"sqlSessionFactory\") SqlSessionFactory sqlSessionFactory) throws Exception {\n        return new SqlSessionTemplate(sqlSessionFactory);\n    }\n\n    @Bean\n    public ServletRegistrationBean statViewServlet() {\n        ServletRegistrationBean druid = new ServletRegistrationBean();\n        druid.setServlet(new StatViewServlet());\n        druid.setUrlMappings(Collections.singletonList(\"/druid/*\"));\n        Map<String, String> params = new HashMap<>();\n        params.put(\"loginUsername\", \"\");\n        params.put(\"loginPassword\", \"\");\n        druid.setInitParameters(params);\n        return druid;\n    }\n\n    @Bean\n    public FilterRegistrationBean webStatFilter() {\n        FilterRegistrationBean fitler = new FilterRegistrationBean();\n        fitler.setFilter(new WebStatFilter());\n        fitler.setUrlPatterns(Collections.singletonList(\"/*\"));\n        fitler.addInitParameter(\"exclusions\", \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\");\n        return fitler;\n    }\n\n    @Bean\n    public WallFilter wallFilter() {\n\n        WallFilter wallFilter = new WallFilter();\n\n        wallFilter.setConfig(wallConfig());\n\n        return wallFilter;\n\n    }\n\n    @Bean\n    public WallConfig wallConfig() {\n\n        WallConfig config = new WallConfig();\n\n        config.setMultiStatementAllow(true);//允许一次执行多条语句\n\n        config.setNoneBaseStatementAllow(true);//允许非基本语句的其他语句\n\n        return config;\n\n    }\n\n    @Bean\n    public ProcessEngineConfiguration processEngineConfiguration() {\n        ProcessEngineConfiguration pec = StandaloneProcessEngineConfiguration.createStandaloneProcessEngineConfiguration();\n        pec.setDataSource(dataSource());\n        //如果表不存在，自动创建表\n        pec.setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n        //属性asyncExecutorActivate定义为true，工作流引擎在启动时就建立启动async executor线程池\n        pec.setAsyncExecutorActivate(false);\n        return pec;\n    }\n\n\n    @Bean\n    public ProcessEngine processEngine() {\n        return processEngineConfiguration().buildProcessEngine();\n    }\n\n}\n\n```\n\nlog数据库配置\n\n```java\n\n\n\n/**\n * @program:\n * @description:\n * @author: muggle\n * @create: 2019-02-23\n **/\n@Configuration\n// 注意确保主配置无法扫描到这个包\n@MapperScan(basePackages = \"com.muggle.poseidon.logmapper\", sqlSessionTemplateRef  = \"test1SqlSessionTemplate\")\n\npublic class LogDBConfig  {\n    @Bean(name = \"test1DataSource\")\n    @ConfigurationProperties(prefix = \"log.datasource.druid\")\n    public DataSource dataSource() {\n        DruidDataSource druidDataSource = new DruidDataSource();\n\n        List filterList = new ArrayList<>();\n\n        filterList.add(wallFilter());\n\n        druidDataSource.setProxyFilters(filterList);\n\n        return druidDataSource;\n    }\n\n    @Bean(name = \"test1SqlSessionFactory\")\n    public SqlSessionFactory testSqlSessionFactory(@Qualifier(\"test1DataSource\") DataSource dataSource) throws Exception {\n        SqlSessionFactoryBean bean = new SqlSessionFactoryBean();\n        bean.setDataSource(dataSource);\n        bean.setMapperLocations(new\n        // mapper位置，不要和主配置的mapper放到一起\n         PathMatchingResourcePatternResolver().getResources(\"classpath*:/mapper/log/*.xml\"));\n        return bean.getObject();\n    }\n\n    @Bean(name = \"test1TransactionManager\")\n    public DataSourceTransactionManager testTransactionManager(@Qualifier(\"test1DataSource\") DataSource dataSource) {\n        return new DataSourceTransactionManager(dataSource);\n    }\n\n    @Bean(name = \"test1SqlSessionTemplate\")\n    public SqlSessionTemplate testSqlSessionTemplate(@Qualifier(\"test1SqlSessionFactory\") SqlSessionFactory sqlSessionFactory) throws Exception {\n        return new SqlSessionTemplate(sqlSessionFactory);\n    }\n\n    @Bean\n    public WallFilter wallFilter() {\n\n        WallFilter wallFilter = new WallFilter();\n\n        wallFilter.setConfig(wallConfig());\n\n        return wallFilter;\n\n    }\n    @Bean\n    public WallConfig wallConfig() {\n\n        WallConfig config = new WallConfig();\n\n        config.setMultiStatementAllow(true);//允许一次执行多条语句\n\n        config.setNoneBaseStatementAllow(true);//允许非基本语句的其他语句\n\n        return config;\n\n    }\n}\n\n```\n\n多数据源jpa版\n```java\npackage com.muggle.poseidon.config;\n\n\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.jdbc.DataSourceBuilder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.jdbc.core.JdbcTemplate;\n\nimport javax.sql.DataSource;\n\n@Configuration\npublic class DataSourceConfig {\n\n    /**\n     * 扫描spring.datasource.primary开头的配置信息\n     *\n     * @return 数据源配置信息\n     */\n    @Primary\n    @Bean(name = \"primaryDataSourceProperties\")\n    @ConfigurationProperties(prefix = \"spring.datasource\")\n    public DataSourceProperties dataSourceProperties() {\n        return new DataSourceProperties();\n    }\n\n    /**\n     * 获取主库数据源对象\n     *\n     * @param properties 注入名为primaryDataSourceProperties的bean\n     * @return 数据源对象\n     */\n    @Primary\n    @Bean(name = \"primaryDataSource\")\n    public DataSource dataSource(@Qualifier(\"primaryDataSourceProperties\") DataSourceProperties properties) {\n        return properties.initializeDataSourceBuilder().build();\n    }\n\n    /**\n     * 该方法仅在需要使用JdbcTemplate对象时选用\n     *\n     * @param dataSource 注入名为primaryDataSource的bean\n     * @return 数据源JdbcTemplate对象\n     */\n    @Primary\n    @Bean(name = \"primaryJdbcTemplate\")\n    public JdbcTemplate jdbcTemplate(@Qualifier(\"primaryDataSource\") DataSource dataSource) {\n        return new JdbcTemplate(dataSource);\n    }\n\n\n\n\n}\n\n```\n\n```java\npackage com.muggle.poseidon.config;\n\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateSettings;\nimport org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\nimport org.springframework.orm.jpa.JpaTransactionManager;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\n\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.sql.DataSource;\nimport java.util.Map;\n\n\n@Configuration\n@EnableTransactionManagement\n@EnableJpaRepositories(\n        // repository包名\n        basePackages = \"com.muggle.poseidon.repos\",\n        // 实体管理bean名称\n        entityManagerFactoryRef = \"primaryEntityManagerFactory\",\n        // 事务管理bean名称\n        transactionManagerRef = \"primaryTransactionManager\"\n)\npublic class MainDataBaseConfig {\n\n    /**\n     * 扫描spring.jpa.primary开头的配置信息\n     *\n     * @return jpa配置信息\n     */\n    @Primary\n    @Bean(name = \"primaryJpaProperties\")\n    @ConfigurationProperties(prefix = \"spring.jpa\")\n    public JpaProperties jpaProperties() {\n        return new JpaProperties();\n    }\n\n    /**\n     * 获取主库实体管理工厂对象\n     *\n     * @param primaryDataSource 注入名为primaryDataSource的数据源\n     * @param jpaProperties     注入名为primaryJpaProperties的jpa配置信息\n     * @param builder           注入EntityManagerFactoryBuilder\n     * @return 实体管理工厂对象\n     */\n    @Primary\n    @Bean(name = \"primaryEntityManagerFactory\")\n    public LocalContainerEntityManagerFactoryBean entityManagerFactory(@Qualifier(\"primaryDataSource\") DataSource primaryDataSource\n            , @Qualifier(\"primaryJpaProperties\") JpaProperties jpaProperties, EntityManagerFactoryBuilder builder) {\n        return builder\n                // 设置数据源\n                .dataSource(primaryDataSource)\n                // 设置jpa配置\n                .properties(jpaProperties.getProperties())\n                // 设置hibernate配置\n                .properties(jpaProperties.getHibernateProperties(new HibernateSettings()))\n                // 设置实体包名\n                .packages(\"com.muggle.poseidon.model\")\n                // 设置持久化单元名，用于@PersistenceContext注解获取EntityManager时指定数据源\n                .persistenceUnit(\"primaryPersistenceUnit\")\n                .build();\n    }\n\n    /**\n     * 获取实体管理对象\n     *\n     * @param factory 注入名为primaryEntityManagerFactory的bean\n     * @return 实体管理对象\n     */\n    @Primary\n    @Bean(name = \"primaryEntityManager\")\n    public EntityManager entityManager(@Qualifier(\"primaryEntityManagerFactory\") EntityManagerFactory factory) {\n        return factory.createEntityManager();\n    }\n\n    /**\n     * 获取主库事务管理对象\n     *\n     * @param factory 注入名为primaryEntityManagerFactory的bean\n     * @return 事务管理对象\n     */\n    @Primary\n    @Bean(name = \"primaryTransactionManager\")\n    public PlatformTransactionManager transactionManager(@Qualifier(\"primaryEntityManagerFactory\") EntityManagerFactory factory) {\n        return new JpaTransactionManager(factory);\n    }\n}\n\n​```java\npackage com.muggle.poseidon.core.config;\n\n\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateSettings;\nimport org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\nimport org.springframework.orm.jpa.JpaTransactionManager;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\n\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.sql.DataSource;\n\n@Configuration\n@EnableTransactionManagement\n@EnableJpaRepositories(\n        // repository包名\n        basePackages = \"com.muggle.poseidon.logrep\",\n        // 实体管理bean名称\n        entityManagerFactoryRef = \"secondEntityManagerFactory\",\n        // 事务管理bean名称\n        transactionManagerRef = \"secondTransactionManager\"\n)\npublic class LogDataBaseConfig {\n\n    /**\n     * 扫描spring.jpa.second开头的配置信息\n     *\n     * @return jpa配置信息\n     */\n    @Bean(name = \"secondJpaProperties\")\n    @ConfigurationProperties(prefix = \"spring.aa\")\n    public JpaProperties jpaProperties() {\n        return new JpaProperties();\n    }\n\n    /**\n     * 获取从库实体管理工厂对象\n     *\n     * @param secondDataSource 注入名为secondDataSource的数据源\n     * @param jpaProperties    注入名为secondJpaProperties的jpa配置信息\n     * @param builder          注入EntityManagerFactoryBuilder\n     * @return 实体管理工厂对象\n     */\n    @Bean(name = \"secondEntityManagerFactory\")\n    public LocalContainerEntityManagerFactoryBean entityManagerFactory(@Qualifier(\"secondDataSource\") DataSource secondDataSource\n            , @Qualifier(\"secondJpaProperties\") JpaProperties jpaProperties, EntityManagerFactoryBuilder builder) {\n        return builder\n                // 设置数据源\n                .dataSource(secondDataSource)\n                // 设置jpa配置\n                .properties(jpaProperties.getProperties())\n                // 设置hibernate配置\n                .properties(jpaProperties.getHibernateProperties(new HibernateSettings()))\n                // 设置实体包名\n                .packages(\"com.muggle.poseidon.entity\")\n                // 设置持久化单元名，用于@PersistenceContext注解获取EntityManager时指定数据源\n                .persistenceUnit(\"secondPersistenceUnit\")\n                .build();\n    }\n\n    /**\n     * 获取实体管理对象\n     *\n     * @param factory 注入名为secondEntityManagerFactory的bean\n     * @return 实体管理对象\n     */\n    @Bean(name = \"secondEntityManager\")\n    public EntityManager entityManager(@Qualifier(\"secondEntityManagerFactory\") EntityManagerFactory factory) {\n        return factory.createEntityManager();\n    }\n\n    /**\n     * 获取从库事务管理对象\n     *\n     * @param factory 注入名为secondEntityManagerFactory的bean\n     * @return 事务管理对象\n     */\n    @Bean(name = \"secondTransactionManager\")\n    public PlatformTransactionManager transactionManager(@Qualifier(\"secondEntityManagerFactory\") EntityManagerFactory factory) {\n        return new JpaTransactionManager(factory);\n    }\n}\n\n```\n\n```java\n\npackage com.muggle.poseidon.core.config;\n\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jdbc.core.JdbcTemplate;\n\nimport javax.sql.DataSource;\n\n@Configuration\npublic class LogDataConfig {\n    /**\n     * 扫描spring.datasource.second开头的配置信息\n     *\n     * @return 数据源配置信息\n     */\n    @Bean(name = \"secondDataSourceProperties\")\n    @ConfigurationProperties(prefix = \"spring.ss\")\n    public DataSourceProperties dataSourceProperties() {\n        return new DataSourceProperties();\n    }\n\n    /**\n     * 获取从库数据源对象\n     *\n     * @param properties 注入名为secondDataSourceProperties的beanf\n     * @return 数据源对象\n     */\n    @Bean(name = \"secondDataSource\")\n    public DataSource dataSource(@Qualifier(\"secondDataSourceProperties\") DataSourceProperties properties) {\n        return properties.initializeDataSourceBuilder().build();\n    }\n\n    /**\n     * 该方法仅在需要使用JdbcTemplate对象时选用\n     *\n     * @param dataSource 注入名为secondDataSource的bean\n     * @return 数据源JdbcTemplate对象\n     */\n    @Bean(name = \"secondJdbcTemplate\")\n    public JdbcTemplate jdbcTemplate(@Qualifier(\"secondDataSource\") DataSource dataSource) {\n        return new JdbcTemplate(dataSource);\n    }\n}\n\n```\n\napplication.properties\n\n```java\nserver.port=8080\nspring.datasource.type=com.alibaba.druid.pool.DruidDataSource\n#spring.datasource.url = jdbc:mysql://localhost:3306/test\nspring.datasource.driverClassName = com.mysql.cj.jdbc.Driver\nspring.datasource.url = jdbc:mysql://119.23.75.58:3306/poseidon?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true\nspring.datasource.username =\nspring.datasource.password =\nspring.datasource.max-active=20\nspring.datasource.max-idle=8\nspring.datasource.min-idle=8\nspring.datasource.initial-size=10\n\nspring.jpa.database=mysql\nspring.jpa.show-sql = true\n#配置方言\nspring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect\n\nspring.ss.type=com.alibaba.druid.pool.DruidDataSource\n#spring.datasource.url = jdbc:mysql://localhost:3306/test\nspring.ss.driverClassName = com.mysql.cj.jdbc.Driver\nspring.ss.url = jdbc:mysql://zzzzz/log?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true\nspring.ss.username =\nspring.ss.password =\nspring.ss.max-active=20\nspring.ss.max-idle=8\nspring.ss.min-idle=8\nspring.ss.initial-size=10\n\n\nspring.aa.database=mysql\nspring.aa.show-sql = true\n#配置方言\nspring.aa.database-platform=org.hibernate.dialect.MySQL5Dialect\n```\n\n\n以数据库作为输出配置就算完成了，接下来整合elk系统到我们日志系统中：\n\n\n先整合logstash\n\nlogstash安装和配置：\nhttps://www.elastic.co/cn/downloads/logstash 选择zip包下载\n\n解压，进入bin目录 创建logstash.conf 并配置：\n```xml\ninput {\n    tcp {\n    ##host:port就是上面appender中的 destination，这里其实把logstash作为服务，开启9250端口接收logback发出的消息\n    host => \"127.0.0.1\"\n    port => 9100\n    mode => \"server\"\n    tags => [\"tags\"]\n    codec => json_lines\n    }\n}\noutput {\n    stdout { codec => rubydebug }\n    #输出到es\n    #elasticsearch { hosts => \"127.0.0.1:9200\" }\n        #输出到一个文件中\n    file {\n       path => \"D:\\logs\\test.log\"\n       codec => line\n    }\n}\n\n```\n我这里先配置输出到文件，后面再修改,创建文件：D:\\logs\\test.log\n\n启动：\n\n打开cmd（不要使用powershell），进入bin:\n```xml\nD:\\exe\\logstash-6.6.1\\logstash-6.6.1\\bin>logstash -f logstash.conf\n```\n\n然后在我们的项目中进行相应的配置：\n按这个来：https://github.com/logstash/logstash-logback-encoder\n\n加入pom并指定logback版本：\n```xml\n<!-- 父pom中 -->\n<ch.qos.logback.version>1.2.3</ch.qos.logback.version>\n\n<!--  日志模块-->\n<dependency>\n  <groupId>net.logstash.logback</groupId>\n  <artifactId>logstash-logback-encoder</artifactId>\n  <version>5.3</version>\n  </dependency>\n        <!-- Your project must also directly depend on either logback-classic or logback-access.  For example: -->\n  <dependency>\n    <groupId>ch.qos.logback</groupId>\n    <artifactId>logback-classic</artifactId>\n    <version>1.2.3</version>\n  </dependency>\n```\n\n配置apppender和logger\n\n```xml\n<appender name=\"stash\" class=\"net.logstash.logback.appender.LogstashTcpSocketAppender\">\n    <destination>127.0.0.1:9100</destination>\n    <includeCallerData>true</includeCallerData>\n\n    <encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n        <includeCallerData>true</includeCallerData>\n    </encoder>\n  </appender>\n  <logger name=\"logstash\" level=\"info\">\n      <appender-ref ref=\"stash\"/>\n  </logger>\n```\n测试：\n```java\nRestController\n@RequestMapping(\"/public/log\")\npublic class LogTestController {\n    private static final Logger log = LoggerFactory.getLogger(\"logstash\");\n    @Autowired\n    LoggingEventRepository repository;\n\n    @GetMapping(\"/\")\n    public String test(){\n        log.info(\"sssssssssssssss\");\n        Iterable<LoggingEvent> all = repository.findAll();\n\n        return \"sss\";\n\n    }\n}\n```\n\n访问接口，logstash打印信息：\n\n```\n[2019-03-09T11:32:56,358][INFO ][logstash.outputs.file    ] Opening file {:path=>\"D:/logs/test.log\"}\n{\n                  \"host\" => \"www.xmind.net\",\n                 \"level\" => \"INFO\",\n     \"caller_class_name\" => \"com.muggle.poseidon.controller.LogTestController\",\n            \"@timestamp\" => 2019-03-09T03:33:03.413Z,\n           \"logger_name\" => \"logstash\",\n              \"@version\" => \"1\",\n           \"thread_name\" => \"http-nio-8080-exec-9\",\n               \"message\" => \"sssssssssssssss\",\n    \"caller_line_number\" => 22,\n                  \"port\" => 58368,\n           \"level_value\" => 20000,\n      \"caller_file_name\" => \"LogTestController.java\",\n                  \"tags\" => [\n        [0] \"tags\"\n    ],\n    \"caller_method_name\" => \"test\"\n}\n```\ntest.log输出了文件：\n\n```\n2019-03-09T03:33:03.413Z www.xmind.net sssssssssssssss\n```\n接下来只要把输出路径换成ES就可以了，这属于logstash和es的整合，这里先不讲解；重新回归到我们的请求模块：\n\n我希望我的模块，对每次请求都能记录下来（请求日志），并将记录存到数据库或者ES，同时我要对所有接口都进行一个幂等性的保障；保障接口的幂等性有多种方法，比较简单的是数据库做唯一索引或者加拦截器，我这里加了一个拦截器来保障接口幂等和拦截前端数据的重复提交(关于接口幂等性在其他文档中介绍)：\n```java\n@Slf4j\npublic class RequestLockInterceptor implements HandlerInterceptor {\n    RedisLock redisTool;\n    private int expireTime;\n\n    public RequestLockInterceptor(int expireTime, RedislockImpl redisTool) {\n        this.expireTime = expireTime;\n        this.redisTool = redisTool;\n    }\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n\n        if(\"post\".equalsIgnoreCase(request.getMethod())){\n            String token = request.getParameter(\"request_key\");\n            if (token==null||\"\".equals(token)){\n                log.error(\"请求非法\");\n//            throw new PoseidonException(\"请求太频繁\",PoseidonProperties.TOO_NUMBER_REQUEST);\n                response.setContentType(\"application/json;charset=UTF-8\");\n                PrintWriter writer = response.getWriter();\n                writer.write(\"{\\\"code\\\":\\\"5001\\\",\\\"msg\\\":\\\"请求非法\\\"}\");\n                writer.close();\n                return false;\n            }\n            String ipAddr = RequestUtils.getIpAddr(request);\n            String lockKey = request.getRequestURI() + \"_\"  + \"_\" + token;\n            boolean lock = redisTool.lock(lockKey, ipAddr, expireTime);\n            if (!lock) {//\n                log.error(\"拦截表单重复提交\");\n//            throw new PoseidonException(\"请求太频繁\",PoseidonProperties.TOO_NUMBER_REQUEST);\n                response.setContentType(\"application/json;charset=UTF-8\");\n                PrintWriter writer = response.getWriter();\n                writer.write(\"{\\\"code\\\":\\\"5001\\\",\\\"msg\\\":\\\"请求太频繁\\\"}\");\n                writer.close();\n                return false;\n            }\n        }\n        return true;\n    }\n\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n//        String requestURI = request.getRequestURI();\n//        String lockKey = request.getRequestURI() + \"_\" + RequestUtils.getIpAddr(request);\n//        redisTool.unlock(lockKey,getIpAddr(request));\n    }\n\n\n}\n\n```\n项目使用了redis锁（redis锁原理和使用在其他文档中介绍）\n\n对于系统异常，如果是业务的异常，正常处理，如果是系统发生的异常比如空指针，数据库异常等我希望系统能马上通知，以便排查问题，所以我配置邮件异常通知(关于springboot邮件配置其他文档介绍)：\n\n```java\n\n@RestControllerAdvice\n@Slf4j\npublic class RestExceptionHandlerController {\n    @Autowired\n    EmailService emailService;\n    @Value(\"${admin.email}\")\n    private String adminEmail;\n\n    @ExceptionHandler(value = {PoseidonException.class})\n    public ResultBean poseidonExceptionHandler(PoseidonException e, HttpServletRequest req) {\n        return new ResultBean().setMsg(e.getMsg()).setCode(e.getCode());\n    }\n    @ExceptionHandler(value = {MethodArgumentNotValidException.class})\n    public ResultBean MethodArgumentNotValidException(MethodArgumentNotValidException e, HttpServletRequest req) {\n        System.out.println(e.getMessage());\n        return new ResultBean().setMsg(\"数据未通过校验\").setCode(PoseidonProperties.COMMIT_DATA_ERROR);\n    }\n\n    @ExceptionHandler(value = {Exception.class})\n    public ResultBean exceptionHandler(Exception e, HttpServletRequest req) {\n        log.error(\"系统异常：\" + req.getMethod() + req.getRequestURI(), e);\n        try {\n//\n            EmailBean emailBean = new EmailBean();\n            emailBean.setRecipient(adminEmail);\n            emailBean.setSubject(\"poseidon---系统异常\");\n            emailBean.setContent(\"系统异常：\" + req.getMethod() + req.getRequestURI()+\"----\"+e.getMessage());\n//            改良\n            emailService.sendSimpleMail(emailBean);\n        } finally {\n            return new ResultBean().setMsg(\"系统异常，请联系管理员\").setCode(\"500\");\n        }\n    }\n\n    @ExceptionHandler(value = {HttpRequestMethodNotSupportedException.class})\n    public ResultBean notsupported(Exception e, HttpServletRequest req) {\n        return new ResultBean().setMsg(\"不支持的请求方式\").setCode(PoseidonProperties.NOT_SUPPORT_METHOD);\n    }\n    @ExceptionHandler(value = {NoHandlerFoundException.class})\n    public ResultBean notFoundUrl(Exception e, HttpServletRequest req) {\n        return new ResultBean().setMsg(\"请求路径不存在\").setCode(\"404\");\n    }\n}\n\n```\n\n\n项目架构信得\ncommon 和core模块存在的意义\n\n\n","slug":"logback","published":1,"updated":"2019-05-13T02:14:42.574Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvrruxu20036vovmzchdgxmg","content":"<h5 id=\"作者：muggle\"><a href=\"#作者：muggle\" class=\"headerlink\" title=\"作者：muggle\"></a>作者：muggle</h5><p>Logback是由log4j创始人设计的另一个开源日志组件,分为三个模块：</p>\n<ol>\n<li><p>logback-core：其它两个模块的基础模块</p>\n</li>\n<li><p>logback-classic：它是log4j的一个改良版本，同时它完整实现了slf4j API使你可以很方便地更换成其它日志系统如log4j或JDK14 Logging</p>\n</li>\n<li><p>logback-access：访问模块与Servlet容器集成提供通过Http来访问日志的功能<br>在springboot中我们通过xml配置来操作logback</p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<p>springboot中logback的默认配置文件名称为logback-spring.xml，若需要指定xml名称，需在application.properties（application.yml）中配置logging.config=xxxx.xml<br>现在贴出一份logback的xml配置，可直接使用，懒得看的小伙伴复制粘贴到你的项目中去体验吧<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">scan</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">scanPeriod</span>=<span class=\"string\">\"60 seconds\"</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jmxConfigurator</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"log_dir\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"logs\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxHistory\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"100\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"console\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.ConsoleAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">                %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %highlight([%-5level]) %logger - %msg%n</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logs\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">                $&#123;log_dir&#125;/%d&#123;yyyy-MM-dd&#125;-poseidon.log</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">maxHistory</span>&gt;</span>$&#123;maxHistory&#125;<span class=\"tag\">&lt;/<span class=\"name\">maxHistory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">                %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %highlight([%-5level]) %logger - %msg%n</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"runningTime-file\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>$&#123;log_dir&#125;/runningTime/%d&#123;yyyy-MM-dd&#125;-poseidon.log<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">maxHistory</span>&gt;</span>$&#123;maxHistory&#125;<span class=\"tag\">&lt;/<span class=\"name\">maxHistory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%-5level] %logger - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"runningTime-console\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.ConsoleAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">                %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%-5level] %logger - %msg%n</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"runningTime\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"info\"</span> <span class=\"attr\">additivity</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;appender-ref ref=\"runningTime-file\"/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"runningTime-console\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--  可能会抛出方言异常 两个解决方案 配置方言或者换连接池 换druid不会有这个异常--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"requestLog-db\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.db.DBAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">connectionSource</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.db.DataSourceConnectionSource\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.commons.dbcp.BasicDataSource\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">driverClassName</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">driverClassName</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>jdbc:mysql://xxx/xxxx?characterEncoding=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>xx<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>xxxx<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">connectionSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;sqlDialect class=\"ch.qos.logback.core.db.dialect.MySQLDialect\" /&gt;--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--异步配置--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;appender name=\"requestLog-file\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         &lt;rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">             &lt;fileNamePattern&gt;$&#123;log_dir&#125;/requestLog/%d&#123;yyyy-MM-dd&#125;-poseidon.log&lt;/fileNamePattern&gt;</span></span><br><span class=\"line\"><span class=\"comment\">             &lt;maxHistory&gt;$&#123;maxHistory&#125;&lt;/maxHistory&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         &lt;/rollingPolicy&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         &lt;encoder&gt;</span></span><br><span class=\"line\"><span class=\"comment\">             &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%-5level] %logger - %msg%n&lt;/pattern&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         &lt;/encoder&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     &lt;/appender&gt;--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;appender name=\"request-asyn\" class=\"ch.qos.logback.classic.AsyncAppender\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;appender-ref ref=\"requestLog-file\"/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/appender&gt; --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logs-asyn\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.AsyncAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"logs\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"requestLog\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"info\"</span> <span class=\"attr\">additivity</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;appender-ref ref=\"requestLog-file\"/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- DBAppender 查看可知其父类dbappenderbase继承了UnsynchronizedAppenderBase&lt;E&gt; 所以dbappender本身是异步的 无需配置异步--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"requestLog-db\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">\"info\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"console\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;appender-ref ref=\"logs\"/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"logs-asyn\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>我们可以看到xml中有四种节点<br>appender，logger，root,configuration</p>\n<h4 id=\"节点解读\"><a href=\"#节点解读\" class=\"headerlink\" title=\"节点解读\"></a>节点解读</h4><p>configuration包含三个属性：</p>\n<ol>\n<li>scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</li>\n<li>scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。</li>\n<li>debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。<br>4.<br>Logger作为日志的记录器，把它关联到应用的对应的context上后，主要用于存放日志对象，也可以定义日志类型、级别。</li>\n</ol>\n<p>Appender主要用于指定日志输出的目的地，目的地可以是控制台、文件、远程套接字服务器、 MySQL、PostreSQL、 Oracle和其他数据库、 JMS和远程UNIX Syslog守护进程等。</p>\n<p>root 就是最高级别logger,所有不被指定logger的日志都归root管理。</p>\n<p>在slf4j框架下我们使用log是这样的:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger logger= LoggerFactory.getLogger(xxx.class);</span><br></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger logger= LoggerFactory.getLogger(<span class=\"string\">\"xxxx\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>可以理解为代码中的getLogger() 方法就是获取xml配置中的logger,如果没有配置相应的logger则为root<br>比如我配置了：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hhh\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"info\"</span> <span class=\"attr\">additivity</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;appender-ref ref=\"requestLog-file\"/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"xxx\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>那我在获得一个logger时可以这样获得它：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger logger= LoggerFactory.getLogger(<span class=\"string\">\"hhh\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>我所输出的日志将被这个logger所管理<br>logger 上有三个配置 name level additivity<br>name就是这个logger的名称，level就是这个日志过滤的级别，低于这个级别的日志不输入到对应的appender中；additivity是否向上级logger传递打印信息，默认是true。logger中可以配置多个appender-ref，也就是可以指定多个输出地点。<br>而root只是特殊的logger，用法上无差别</p>\n<p>appender节点：<br>appender节点是logback配置的关键，其name属性指定其名称，class属性指定实现类，对应得实现类有<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch.qos.logback.core.ConsoleAppender <span class=\"comment\">// 以控制台作为输出</span></span><br><span class=\"line\">ch.qos.logback.core.rolling.RollingFileAppender<span class=\"comment\">//以日志文件作为输出</span></span><br><span class=\"line\">ch.qos.logback.classic.db.DBAppender<span class=\"comment\">//以数据库作为输出</span></span><br><span class=\"line\">net.logstash.logback.appender.LogstashTcpSocketAppender<span class=\"comment\">//以logstash作为输出需要引入如下依赖：</span></span><br><span class=\"line\">ch.qos.logback.classic.AsyncAppender<span class=\"comment\">//异步输出 需要定义appender-ref</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// logstash依赖</span></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;net.logstash.logback&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;logstash-logback-encoder&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;4.11&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>所有的appender 实现ch.qos.logback.core.Appender接口或者 ch.qos.logback.core.UnsynchronizedAppenderBase接口（异步），我们也可以自定义appender来指定日志输出；</p>\n<p>在Appender中可以定义哪些节点我们一个个来看：</p>\n<p>第一种： ConsoleAppender<br>如同它的名字一样，这个Appender将日志输出到console，更准确的说是System.out 或者System.err。<br>它包含的参数如下：</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Name    Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>encoder</td>\n<td>Encoder</td>\n<td>通常在其pattern里指定日志格式  如： %d{yyyy-MM-dd HH:mm:ss.SSS} %highlight([%-5level]) %logger - %msg%n表示 日期格式 日志级别（高亮）logger的名称 logger的message</td>\n</tr>\n<tr>\n<td>target</td>\n<td>String</td>\n<td>指定输出目标。可选值：System.out 或 System.err。默认值：System.out</td>\n</tr>\n<tr>\n<td>withJansi</td>\n<td>boolean</td>\n<td>是否支持ANSI color codes（类似linux中的shell脚本的输出字符串颜色控制代码）。默认为false。如果设置为true。例如：[31m 代表将前景色设置成红色。在windows中，需要提供”org.fusesource.jansi:jansi:1.9”，而在linux，mac os x中默认支持。</td>\n</tr>\n</tbody>\n</table>\n<p>第二种： FileAppender<br>将日志输出到文件当中，目标文件取决于file属性。是否追加输出，取决于append属性。</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Name    Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>append</td>\n<td>boolean</td>\n<td>是否以追加方式输出。默认为true。</td>\n</tr>\n<tr>\n<td>encoder</td>\n<td>Encoder</td>\n<td>See OutputStreamAppender properties.</td>\n</tr>\n<tr>\n<td>file</td>\n<td>String</td>\n<td>指定文件名。注意在windows当中，反斜杠 \\ 需要转义，或直接使用 / 也可以。例如 c:/temp/test.logor 或 c:\\temp\\test.log 都可以。没有默认值，如果上层目录不存在，FileAppender会自动创建。</td>\n</tr>\n<tr>\n<td>prudent</td>\n<td>boolean</td>\n<td>是否工作在谨慎模式下。在谨慎模式下，FileAppender将会安全写入日志到指定文件，即时在不同的虚拟机jvm中有另一个相同的FileAppender实例。默认值：fales;设置为true，意味着append会被自动设置成true。prudent依赖于文件排它锁。实验表明，使用文件锁，会增加3倍的日志写入消耗。比如说，当prudent模式为off，写入一条日志到文件只要10毫秒，但是prudent为真，则会接近30毫秒。prudent 模式实际上是将I/O请求序列化，因此在I/O数量较大，比如说100次/s或更多的时候，带来的延迟也会显而易见，所以应该避免。在networked file system（远程文件系统）中，这种消耗将会更大，可能导致死锁。</td>\n</tr>\n</tbody>\n</table>\n<p>第三个： RollingFileAppender</p>\n<p>RollingFileAppender继承自FileAppender，提供日志目标文件自动切换的功能。例如可以用日期作为日志分割的条件。<br>RollingFileAppender有两个重要属性，RollingPolicy负责怎么切换日志，TriggeringPolicy负责何时切换。为了使RollingFileAppender起作用，这两个属性必须设置，但是如果RollingPolicy的实现类同样实现了TriggeringPolicy接口，则也可以只设置RollingPolicy这个属性。<br>下面是它的参数：</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Name    Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>file</td>\n<td>String</td>\n<td>指定文件名。注意在windows当中，反斜杠 \\ 需要转义，或直接使用 / 也可以。例如 c:/temp/test.logor 或 c:\\temp\\test.log 都可以。没有默认值，如果上层目录不存在，FileAppender会自动创建。</td>\n</tr>\n<tr>\n<td>append</td>\n<td>boolean</td>\n<td>是否以追加方式输出。默认为true。</td>\n</tr>\n<tr>\n<td>encoder</td>\n<td>Encoder</td>\n<td>See OutputStreamAppender properties.</td>\n</tr>\n<tr>\n<td>rollingPolicy</td>\n<td>RollingPolicy</td>\n<td>当发生日志切换时，RollingFileAppender的切换行为。例如日志文件名的修改</td>\n</tr>\n<tr>\n<td>triggeringPolicy</td>\n<td>TriggeringPolicy</td>\n<td>决定什么时候发生日志切换，例如日期，日志文件大小到达一定值</td>\n</tr>\n<tr>\n<td>prudent</td>\n<td>boolean</td>\n<td>FixedWindowRollingPolicy 不支持prudent模式。TimeBasedRollingPolicy 支持prudent模式，但是需要满足一下两条约束：在prudent模式中，日志文件的压缩是不被允许，不被支持的。不能设置file属性。</td>\n</tr>\n</tbody>\n</table>\n<p>第四个：SocketAppender及SSLSocketAppender（未尝试过）</p>\n<p>到目前为止我们讲的appender都只能将日志输出到本地资源。与之相对的，SocketAppender就是被设计用来输出日志到远程实例中的。SocketAppender输出日志采用明文方式，SSLSocketAppender则采用加密方式传输日志。<br>被序列化的日志事件的类型是 LoggingEventVO 继承ILoggingEvent接口。远程日志记录并非是侵入式的。在反序列化接收后，日志事件就可以好像在本地生成的日志一样处理了。多个SockerAppender可以向同一台日志服务器发送日志。SocketAppender并不需要关联一个Layout，因为它只是发送序列化的日志事件给远程日志服务器。SocketAppender的发送操作是基于TCP协议的。因此如果远程服务器是可到达的，则日志会被其处理，如果远程服务器宕机或不可到达，那么日志将会被丢弃。等到远程服务器复活，日志发送将会透明的重新开始。这种透明式的重连，是通过一个“连接“线程周期性的尝试连接远程服务器实现的。<br>Logging events会由TCP协议实现自动缓冲。这意味着，如果网络速度比日志请求产生速度快，则网络速度并不会影响应用。但如果网络速度过慢，则网络速度则会变成限制，在极端情况下，如果远程日志服务器不可到达，则会导致应用最终阻塞。不过，如果服务器可到达，但是服务器宕机了，这种情况，应用不会阻塞，而只是丢失一些日志事件而已。<br>需要注意的是，即使SocketAppender没有被logger链接，它也不会被gc回收，因为他在connector thread中任然存在引用。一个connector thread 只有在网络不可达的情况下，才会退出。为了防止这个垃圾回收的问题，我们应该显示声明关闭SocketAppender。长久存活并创建/销毁大量的SocketAppender实例的应用，更应该注意这个问题。不过大多数应用可以忽略这个问题。如果JVM在SocketAppender关闭之前将其退出，又或者是被垃圾回收，这样子可能导致丢失一些还未被传输，在管道中等待的日志数据。为了防止避免日志丢失，经常可靠的办法就是调用SocketAppender的close方法，或者调用LoggerContext的stop方法，在退出应用之前。</p>\n<p>下面我们来看看SocketAppender的属性：</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Name    Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>includeCallerData</td>\n<td>boolean</td>\n<td>是否包含调用者的信息如果为true，则以下日志输出的 ?:? 会替换成调用者的文件名跟行号，为false，则为问号。2019-01-06 17:37:30,968 DEBUG [Thread-0] [?:?] chapters.appenders.socket.SocketClient2 - Hi</td>\n</tr>\n<tr>\n<td>port</td>\n<td>int</td>\n<td>端口号</td>\n</tr>\n<tr>\n<td>reconnectionDelay</td>\n<td>Duration</td>\n<td>重连延时，如果设置成“10 seconds”，就会在连接u武器失败后，等待10秒，再连接。默认值：“30 seconds”。如果设置成0，则关闭重连功能。</td>\n</tr>\n<tr>\n<td>queueSize</td>\n<td>int</td>\n<td>设置缓冲日志数，如果设置成0，日志发送是同步的，如果设置成大于0的值，会将日志放入队列，队列长度到达指定值，在统一发送。可以加大服务吞吐量。</td>\n</tr>\n<tr>\n<td>eventDelayLimit</td>\n<td>Duration</td>\n<td>设置日志超时丢弃时间。当设置“10 seconds”类似的值，如果日志队列已满，而服务器长时间来不及接收，当滞留时间超过10 seconds，日志就会被丢弃。默认值： 100 milliseconds</td>\n</tr>\n<tr>\n<td>remoteHost</td>\n<td>String</td>\n<td>远程日志服务器的IP</td>\n</tr>\n<tr>\n<td>ssl</td>\n<td>SSLConfiguration</td>\n<td>只在SSLSocketAppender包含该属性节点。提供SSL配置，详情见 Using SSL.</td>\n</tr>\n</tbody>\n</table>\n<p>标准的Logback Classic包含四个可供使用的Receiver用来接收来自SocketAppender的logging evnets。</p>\n<p>第五个： SMTPAppender</p>\n<p>SMTPAppender 可以将logging event存放在一个或多个固定大小的缓冲区中，然后在用户指定的event到来之时，将适当的大小的logging event以邮件方式发送给运维人员。<br>详细属性如下：</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Name    Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>smtpHost</td>\n<td>String</td>\n<td>SMTP server的地址，必需指定。如网易的SMTP服务器地址是： smtp.163.com</td>\n</tr>\n<tr>\n<td>smtpPort</td>\n<td>int</td>\n<td>SMTP server的端口地址。默认值：25</td>\n</tr>\n<tr>\n<td>to</td>\n<td>String</td>\n<td>指定发送到那个邮箱，可设置多个<to>属性，指定多个目的邮箱</to></td>\n</tr>\n<tr>\n<td>from</td>\n<td>String</td>\n<td>指定发件人名称。如果设置成“muggle &lt;<a href=\"mailto:hh@moral.org\" target=\"_blank\" rel=\"noopener\">hh@moral.org</a>&gt; ”，则邮件发件人将会是“muggle <a href=\"mailto:&#x68;&#104;&#64;&#109;&#111;&#114;&#x61;&#x6c;&#46;&#111;&#x72;&#x67;\" target=\"_blank\" rel=\"noopener\">&#x68;&#104;&#64;&#109;&#111;&#114;&#x61;&#x6c;&#46;&#111;&#x72;&#x67;</a> ”</td>\n</tr>\n<tr>\n<td>subject</td>\n<td>String</td>\n<td>指定emial的标题，它需要满足PatternLayout中的格式要求。如果设置成“Log: %logger - %msg”，就案例来讲，则发送邮件时，标题为“Log: com.foo.Bar - Hello World ”。 默认值：”%logger{20} - %m”.</td>\n</tr>\n<tr>\n<td>discriminator</td>\n<td>Discriminator</td>\n<td>通过Discriminator, SMTPAppender可以根据Discriminator的返回值，将到来的logging event分发到不同的缓冲区中。默认情况下，总是返回相同的值来达到使用一个缓冲区的目的。</td>\n</tr>\n<tr>\n<td>evaluator</td>\n<td>IEvaluator</td>\n<td>指定触发日志发送的条件。通过<evaluator class=\"...\">指定EventEvaluator接口的实现类。默认情况下SMTPAppeender使用的是OnErrorEvaluator，表示当发送ERROR或更高级别的日志请求时，发送邮件。Logback提供了几个evaluators：OnErrorEvaluator、OnMarkerEvaluator、JaninoEventEvaluator、GEventEvaluator（功能强大）</evaluator></td>\n</tr>\n<tr>\n<td>cyclicBufferTracker</td>\n<td>CyclicBufferTracker</td>\n<td>指定一个cyclicBufferTracker跟踪cyclic buffer。它是基于discriminator的实现的。如果你不指定，默认会创建一个CyclicBufferTracker ，默认设置cyclic buffer大小为256。你也可以手动指定使用默认的CyclicBufferTracker，并且通过<buffersize>属性修改默认的缓冲区接收多少条logging event。</buffersize></td>\n</tr>\n<tr>\n<td>username</td>\n<td>String</td>\n<td>发送邮件账号，默认为null</td>\n</tr>\n<tr>\n<td>password</td>\n<td>String</td>\n<td>发送邮件密码，默认为null</td>\n</tr>\n<tr>\n<td>STARTTLS</td>\n<td>boolean</td>\n<td>如果设置为true，appender会尝试使用STARTTLS命令，如果服务端支持，则会将明文连接转换成加密连接。需要注意的是，与日志服务器连接一开始是未加密的。默认值：false</td>\n</tr>\n<tr>\n<td>SSL</td>\n<td>boolean</td>\n<td>如果设置为true，appender将会使用SSL连接到日志服务器。 默认值：false</td>\n</tr>\n<tr>\n<td>charsetEncoding</td>\n<td>String</td>\n<td>指定邮件信息的编码格式 默认值：UTF-8</td>\n</tr>\n<tr>\n<td>localhost</td>\n<td>String</td>\n<td>如果smtpHost没有正确配置，比如说不是完整的地址。这时候就需要localhost这个属性提供服务器的完整路径（如同java中的完全限定名 ），详情参考com.sun.mail.smtp 中的mail.smtp.localhost属性</td>\n</tr>\n<tr>\n<td>asynchronousSending</td>\n<td>boolean</td>\n<td>这个属性决定email的发送是否是异步。默认：true，异步发送但是在某些情况下，需要以同步方式发送错误日志的邮件给管理人员，防止不能及时维护应用。</td>\n</tr>\n<tr>\n<td>includeCallerData</td>\n<td>boolean</td>\n<td>默认：false 指定是否包含callerData在日志中</td>\n</tr>\n<tr>\n<td>sessionViaJNDI</td>\n<td>boolean</td>\n<td>SMTPAppender依赖javax.mail.Session来发送邮件。默认情况下，sessionViaJNDI为false。javax.mail.Session实例的创建依赖于SMTPAppender本身的配置信息。如果设置为true，则Session的创建时通过JNDI获取引用。这样做的好处可以让你的代码复用更好，让配置更简洁。需要注意的是，如果使用JNDI获取Session对象，需要保证移除mail.jar以及activation.jar这两个jar包</td>\n</tr>\n<tr>\n<td>jndiLocation</td>\n<td>String</td>\n<td>如果sessionViaJNDI设置为true，则jndiLocation指定JNDI的资源名，默认值为：”java:comp/env/mail/Session”</td>\n</tr>\n</tbody>\n</table>\n<p>SMTPAppender只保留最近的256条logging events 在循环缓冲区中，当缓冲区慢，就会开始丢弃最老的logging event。因此不管什么时候，SMTPAppender一封邮件最多传递256条日志事件。SMTPAppender依赖于JavaMail API。而JavaMail API又依赖于IOC框架（依赖注入）。</p>\n<p>第六个：DBAppender</p>\n<p> DBAppender 可以将日志事件插入到3张数据表中。它们分别是logging_event，logging_event_property，logging_event_exception。这三张数据表必须在DBAppender工作之前存在。它们的sql脚本可以在 logback-classic/src/main/java/ch/qos/logback/classic/db/script folder 这个目录下找到。这个脚本对大部分SQL数据库都是有效的，除了少部分，少数语法有差异需要调整。<br>下面是logback与常见数据库的支持信息：</p>\n<table>\n<thead>\n<tr>\n<th>RDBMS</th>\n<th>tested version(s)</th>\n<th>tested JDBC driver version(s)</th>\n<th>supports getGeneratedKeys() method</th>\n<th>is a dialect provided by logback</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DB2</td>\n<td>untested</td>\n<td>untested</td>\n<td>unknown</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>H2</td>\n<td>–</td>\n<td>-</td>\n<td>unknown</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>HSQL</td>\n<td>–</td>\n<td>-</td>\n<td>NO</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>Microsoft SQL Server</td>\n<td>–</td>\n<td>–</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>MySQL</td>\n<td>5.7</td>\n<td></td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>PostgreSQL</td>\n<td>–</td>\n<td>–</td>\n<td>NO</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>Oracle</td>\n<td>–</td>\n<td>–</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>SQLLite</td>\n<td>–</td>\n<td>-</td>\n<td>unknown</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>Sybase</td>\n<td>–</td>\n<td>-</td>\n<td>unknown</td>\n<td>YES</td>\n</tr>\n</tbody>\n</table>\n<p>下面给出三张表的sql语句：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> logging_event_property;</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> logging_event_exception;</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> logging_event;</span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> logging_event</span><br><span class=\"line\">  (</span><br><span class=\"line\">    timestmp         <span class=\"built_in\">BIGINT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    formatted_message  <span class=\"built_in\">TEXT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    logger_name       <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">254</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    level_string      <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">254</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    thread_name       <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">254</span>),</span><br><span class=\"line\">    reference_flag    <span class=\"built_in\">SMALLINT</span>,</span><br><span class=\"line\">    arg0              <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">254</span>),</span><br><span class=\"line\">    arg1              <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">254</span>),</span><br><span class=\"line\">    arg2              <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">254</span>),</span><br><span class=\"line\">    arg3              <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">254</span>),</span><br><span class=\"line\">    caller_filename   <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">254</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    caller_class      <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">254</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    caller_method     <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">254</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    caller_line       <span class=\"built_in\">CHAR</span>(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    event_id          <span class=\"built_in\">BIGINT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT PRIMARY <span class=\"keyword\">KEY</span></span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> logging_event_property</span><br><span class=\"line\">  (</span><br><span class=\"line\">    event_id       <span class=\"built_in\">BIGINT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    mapped_key        <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">254</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    mapped_value      <span class=\"built_in\">TEXT</span>,</span><br><span class=\"line\">    PRIMARY <span class=\"keyword\">KEY</span>(event_id, mapped_key),</span><br><span class=\"line\">    <span class=\"keyword\">FOREIGN</span> <span class=\"keyword\">KEY</span> (event_id) <span class=\"keyword\">REFERENCES</span> logging_event(event_id)</span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> logging_event_exception</span><br><span class=\"line\">  (</span><br><span class=\"line\">    event_id         <span class=\"built_in\">BIGINT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    i                <span class=\"built_in\">SMALLINT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    trace_line       <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">254</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    PRIMARY <span class=\"keyword\">KEY</span>(event_id, i),</span><br><span class=\"line\">    <span class=\"keyword\">FOREIGN</span> <span class=\"keyword\">KEY</span> (event_id) <span class=\"keyword\">REFERENCES</span> logging_event(event_id)</span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure></p>\n<p>第七个： AsyncAppender</p>\n<p>AsyncAppender记录ILoggingEvents的方式是异步的。它仅仅相当于一个event分配器，因此需要配合其他appender才能有所作为。</p>\n<p>需要注意的是：AsyncAppender将event缓存在 BlockingQueue ，一个由AsyncAppender创建的工作线程，会一直从这个队列的头部获取events，然后将它们分配给与AsyncAppender唯一关联的Appender中。默认情况下，如果这个队列80%已经被占满，则AsyncAppender会丢弃等级为 TRACE，DEBUG，INFO这三个等级的日志事件。<br>在应用关闭或重新部署的时候，AsyncAppender一定要被关闭，目的是为了停止，回收再利用worker thread，和刷新缓冲队列中logging events。那如果关闭AsyncAppender呢？可以通过关闭LoggerContext来关闭所有appender，当然也包括AsyncAppender了。AsyncAppender会在maxFlushTime属性设置的时间内等待Worker thread刷新全部日志event。如果你发现缓冲的event在关闭LoggerContext的时候被丢弃，这时候你就也许需要增加等待的时间。将maxFlushTime设置成0，就是AsyncAppender一直等待直到工作线程将所有被缓冲的events全部刷新出去才执行才结束。<br>根据JVM退出的模式，工作线程worker thread处理被缓冲的events的工作是可以被中断的，这样就导致了剩余未处理的events被搁浅。这种现象通常的原因是当LoggerContext没有完全关闭，或者当JVM终止那些非典型的控制流（不明觉厉）。为了避免工作线程的因为这些情况而发生中断，一个shutdown hook（关闭钩子）可以被插入到JVM运行的时候，这个钩子的作用是在JVM开始shutdown刚开始的时候执行关闭 LoggerContext的任务。</p>\n<p>下面是AsyncAppender的属性表</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Name    Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>queueSize</td>\n<td>int</td>\n<td>设置blocking queue的最大容量，默认是256条events</td>\n</tr>\n<tr>\n<td>discardingThreshold</td>\n<td>int</td>\n<td>默认，当blocking queue被占用80%以上，AsyncAppender就会丢弃level为 TRACE，DEBUG，INFO的日志事件，如果要保留所有等级的日志，需要设置成0</td>\n</tr>\n<tr>\n<td>includeCallerData</td>\n<td>boolean</td>\n<td>提取CallerData代价比较昂贵，为了提高性能，caller data默认不提供。只有一些获取代价较低的数据，如线程名称，MDC值才会被保留。如果设置为true，就会包含caller data</td>\n</tr>\n<tr>\n<td>maxFlushTime</td>\n<td>int</td>\n<td>设置最大等待刷新事件，单位为miliseconds(毫秒)。当LoggerContext关闭的时候，AsyncAppender会在这个时间内等待工作线程完成events的flush工作，超时未处理的events将会被抛弃。</td>\n</tr>\n<tr>\n<td>neverBlock</td>\n<td>boolean</td>\n<td>默认为false，如果队列被填满，为了处理所有日志，就会阻塞的应用。如果为true，为了不阻塞你的应用，也会选择抛弃一些message。</td>\n</tr>\n</tbody>\n</table>\n<p>默认情况下，event queue最大的容量是256。如果队列被填充满那么就会阻塞你的应用，直到队列能够容纳新的logging event。所以当AsyncAppender工作在队列满的情况下，可以称作伪同步。<br>在以下四种情况下容易导致AsyncAppender伪同步状态的出现：</p>\n<ol>\n<li>应用中存在大量线程</li>\n<li>每秒产生大量的logging events</li>\n<li>每一个logging event都存在大量的数据</li>\n<li>子appender中存在很高的延迟</li>\n</ol>\n<p>为了避免伪同步的出现，提高queueSizes普遍有效，但是就消耗了应用的可用内存。</p>\n<p>下面列出一些 appender配置示例：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FILE\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.FileAppender\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>myapp.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%logger&#123;35&#125; - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ASYNC\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.AsyncAppender\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"FILE\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"ASYNC\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"DB\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.db.DBAppender\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">connectionSource</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.db.DataSourceConnectionSource\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dataSource</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">class</span>=<span class=\"string\">\"com.mchange.v2.c3p0.ComboPooledDataSource\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">driverClass</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">driverClass</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">jdbcUrl</span>&gt;</span>jdbc:mysql://$&#123;serverName&#125;:$&#123;port&#125;/$&#123;dbName&#125;<span class=\"tag\">&lt;/<span class=\"name\">jdbcUrl</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">user</span>&gt;</span>$&#123;user&#125;<span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>$&#123;password&#125;<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">connectionSource</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"DB\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"EMAIL\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.net.SMTPAppender\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">smtpHost</span>&gt;</span>smtp.gmail.com<span class=\"tag\">&lt;/<span class=\"name\">smtpHost</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">smtpPort</span>&gt;</span>465<span class=\"tag\">&lt;/<span class=\"name\">smtpPort</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">SSL</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">SSL</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>YOUR_USERNAME@gmail.com<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>YOUR_GMAIL_PASSWORD<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">to</span>&gt;</span>EMAIL-DESTINATION<span class=\"tag\">&lt;/<span class=\"name\">to</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">to</span>&gt;</span>ANOTHER_EMAIL_DESTINATION<span class=\"tag\">&lt;/<span class=\"name\">to</span>&gt;</span> <span class=\"comment\">&lt;!-- additional destinations are possible --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">from</span>&gt;</span>YOUR_USERNAME@gmail.com<span class=\"tag\">&lt;/<span class=\"name\">from</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">subject</span>&gt;</span>TESTING: %logger&#123;20&#125; - %m<span class=\"tag\">&lt;/<span class=\"name\">subject</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.PatternLayout\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%date %-5level %logger&#123;35&#125; - %message%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"EMAIL\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"EMAIL\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.net.SMTPAppender\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">smtpHost</span>&gt;</span>smtp.gmail.com<span class=\"tag\">&lt;/<span class=\"name\">smtpHost</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">smtpPort</span>&gt;</span>587<span class=\"tag\">&lt;/<span class=\"name\">smtpPort</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">STARTTLS</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">STARTTLS</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>YOUR_USERNAME@gmail.com<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>YOUR_GMAIL_xPASSWORD<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">to</span>&gt;</span>EMAIL-DESTINATION<span class=\"tag\">&lt;/<span class=\"name\">to</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">to</span>&gt;</span>ANOTHER_EMAIL_DESTINATION<span class=\"tag\">&lt;/<span class=\"name\">to</span>&gt;</span> <span class=\"comment\">&lt;!-- additional destinations are possible --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">from</span>&gt;</span>YOUR_USERNAME@gmail.com<span class=\"tag\">&lt;/<span class=\"name\">from</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">subject</span>&gt;</span>TESTING: %logger&#123;20&#125; - %m<span class=\"tag\">&lt;/<span class=\"name\">subject</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.PatternLayout\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%date %-5level %logger - %message%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"EMAIL\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">SimpleSocketServer需要两个命令行参数，port 和 configFile路径。(该方法待验证)</span><br><span class=\"line\">java ch.qos.logback.classic.net.SimpleSocketServer 6000 \\ src/main/java/chapters/appenders/socket/server1.xml</span><br><span class=\"line\"></span><br><span class=\"line\">客户端的SocketAppender的简单配置例子：</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"SOCKET\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.net.SocketAppender\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">remoteHost</span>&gt;</span>192.168.0.101<span class=\"tag\">&lt;/<span class=\"name\">remoteHost</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>8888<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">reconnectionDelay</span>&gt;</span>10000<span class=\"tag\">&lt;/<span class=\"name\">reconnectionDelay</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">includeCallerData</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">includeCallerData</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"SOCKET\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">在服务端使用SimpleSSLSocketServer</span><br><span class=\"line\">java -Djavax.net.ssl.keyStore=src/main/java/chapters/appenders/socket/ssl/keystore.jks \\ -Djavax.net.ssl.keyStorePassword=changeit \\ ch.qos.logback.classic.net.SimpleSSLSocketServer 6000 \\ src/main/java/chapters/appenders/socket/ssl/server.xml</span><br><span class=\"line\"></span><br><span class=\"line\">SSLSocketAppender配置</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"SOCKET\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.net.SSLSocketAppender\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">remoteHost</span>&gt;</span>$&#123;host&#125;<span class=\"tag\">&lt;/<span class=\"name\">remoteHost</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>$&#123;port&#125;<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">reconnectionDelay</span>&gt;</span>10000<span class=\"tag\">&lt;/<span class=\"name\">reconnectionDelay</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ssl</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">trustStore</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">location</span>&gt;</span>$&#123;truststore&#125;<span class=\"tag\">&lt;/<span class=\"name\">location</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>$&#123;password&#125;<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">trustStore</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ssl</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"SOCKET\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FILE\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.FileAppender\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>testFile.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">append</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">append</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- encoders are assigned the type</span></span><br><span class=\"line\"><span class=\"comment\">        ch.qos.logback.classic.encoder.PatternLayoutEncoder by default --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"FILE\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://blog.csdn.net/tianyaleixiaowu/article/details/73327752\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/tianyaleixiaowu/article/details/73327752</a></p>\n<p>下面基于logback配置做一个请求日志的的封装</p>\n<p>功能：记录每次请求的参数和用户ID存入数据库或者elk<br>问题：javaee规范中request输入输出流都只能被读取一次，所以如果用过滤器或者拦截器读取request中的流都会导致后面的controller无法接受到数据。<br>所以我们要用原生的aop获得请求参数，切点为controller，这就很好的避开了以上问题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.muggle.poseidon.core.aspect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.muggle.poseidon.manager.UserInfoManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.muggle.poseidon.utils.RequestUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.JoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@program</span>: hiram_erp</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 日志信息切面</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: muggle</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span>: 2019-02-21</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogMessageAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(<span class=\"string\">\"requestLog\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//    private final static Logger timeLog = LoggerFactory.getLogger(LogMessageAspect.class);</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;Long&gt; threadLocal = <span class=\"keyword\">new</span> ThreadLocal&lt;&gt;();</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(public * com.hiram.erp.controller.*.*(..))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">webLog</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在切点之前织入</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> joinPoint</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Throwable</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"webLog()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doBefore</span><span class=\"params\">(JoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(\"sssssssssssssssssssssssssssssssssssssssssssssssssssss\");</span></span><br><span class=\"line\">       <span class=\"comment\">/* // 开始打印请求日志</span></span><br><span class=\"line\"><span class=\"comment\">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span></span><br><span class=\"line\"><span class=\"comment\">        HttpServletRequest request = attributes.getRequest();</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        // 打印请求相关参数</span></span><br><span class=\"line\"><span class=\"comment\">        // 打印请求 url</span></span><br><span class=\"line\"><span class=\"comment\">        // 请求id</span></span><br><span class=\"line\"><span class=\"comment\">        Long userId=null;</span></span><br><span class=\"line\"><span class=\"comment\">        if (user!=null)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            userId=user.getUserInfo().getUserId();</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        logger.info(\"URL : &#123;&#125;, 登录id: &#123;&#125; ,HTTP Method: &#123;&#125;,ip :&#123;&#125;,Request Args : &#123;&#125;\", request.getRequestURL().toString(),userId, request.getMethod(),request.getRemoteAddr());</span></span><br><span class=\"line\"><span class=\"comment\">*/</span>    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在切点之后织入</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Throwable</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@After</span>(<span class=\"string\">\"webLog()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doAfter</span><span class=\"params\">(JoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 环绕</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> joinPoint</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Throwable</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Around</span>(<span class=\"string\">\"webLog()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">doAround</span><span class=\"params\">(ProceedingJoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> startTime = System.currentTimeMillis();</span><br><span class=\"line\">        Object result = joinPoint.proceed();</span><br><span class=\"line\">        <span class=\"comment\">// 打印出参</span></span><br><span class=\"line\"><span class=\"comment\">//        logger.info(\"Response Args  : &#123;&#125;,\", JSONObject.toJSONString(result),new Date());</span></span><br><span class=\"line\">        <span class=\"comment\">// 执行耗时</span></span><br><span class=\"line\">        <span class=\"comment\">// 开始打印请求日志</span></span><br><span class=\"line\">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class=\"line\">        HttpServletRequest request = attributes.getRequest();</span><br><span class=\"line\">        HttpServletResponse response = attributes.getResponse();</span><br><span class=\"line\">        String requestURL = request.getRequestURL().toString();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (requestURL.contains(<span class=\"string\">\"/sys/log_info/\"</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 打印请求相关参数</span></span><br><span class=\"line\">        <span class=\"comment\">// 打印请求 url</span></span><br><span class=\"line\">        <span class=\"comment\">// 请求id</span></span><br><span class=\"line\">        String userId = UserInfoManager.getUserId();</span><br><span class=\"line\"></span><br><span class=\"line\">        String url = request.getRequestURL().toString();</span><br><span class=\"line\">        String method = request.getMethod();</span><br><span class=\"line\">        String remoteAddr = RequestUtils.getIpAddr(request);</span><br><span class=\"line\">        Object[] args = joinPoint.getArgs();</span><br><span class=\"line\"><span class=\"comment\">//        List&lt;Object&gt; objects=new ArrayList&lt;&gt;();</span></span><br><span class=\"line\">        StringBuilder stringBuilder = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;args.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (args[i] <span class=\"keyword\">instanceof</span> Serializable||args[i] <span class=\"keyword\">instanceof</span> Number ||args[i] <span class=\"keyword\">instanceof</span> String)&#123;</span><br><span class=\"line\">                stringBuilder.append( args[i].toString());</span><br><span class=\"line\"><span class=\"comment\">//                objects.add(args[i]);</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"&#123;\\\"startTime\\\":\\\"&#123;&#125;\\\",\\\"url\\\":\\\"&#123;&#125;\\\",\\\"userId\\\":\\\"&#123;&#125;\\\" ,\\\"httpMethod\\\":\\\"&#123;&#125;\\\",\\\"ip\\\":\\\"&#123;&#125;\\\",\\\"requestArgs\\\":\\\"&#123;&#125;\\\",\\\"status\\\":&#123;&#125;&#125;\"</span>,startTime,url,userId,method,remoteAddr,stringBuilder.toString(),response.getStatus());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于数据库存储，如果我们希望log存在另外一个数据库中不存在项目里的数据库中，并且可以通过持久化框架查询数据库内信息。我们则可以配置多数据源，如果将日志放在同一个数据库中则直接配置appender就行了，很方便。<br>多数据源配置mybatis版：</p>\n<p>其原理是配置多个sessionfactory,然后根据不同的mapperscan来区分不同mapper对应的数据库</p>\n<p>以druid连接池为例</p>\n<p>application.yml</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log:</span><br><span class=\"line\">  datasource:</span><br><span class=\"line\">    druid:</span><br><span class=\"line\">      url: $&#123;mysql_url&#125;/log?useUnicode=<span class=\"keyword\">true</span>&amp;characterEncoding=UTF-<span class=\"number\">8</span>&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=<span class=\"keyword\">false</span>&amp;allowMultiQueries=<span class=\"keyword\">true</span>&amp;serverTimezone=GMT%<span class=\"number\">2</span>B8&amp;nullCatalogMeansCurrent=<span class=\"keyword\">true</span></span><br><span class=\"line\">      username:</span><br><span class=\"line\">      password:</span><br><span class=\"line\">      driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">      connectionProperties: druid.stat.mergeSql=<span class=\"keyword\">true</span>;druid.stat.slowSqlMillis=<span class=\"number\">5000</span></span><br><span class=\"line\">      filters: stat,wall</span><br><span class=\"line\">      initialSize: <span class=\"number\">5</span></span><br><span class=\"line\">      maxActive: <span class=\"number\">20</span></span><br><span class=\"line\">      maxPoolPreparedStatementPerConnectionSize: <span class=\"number\">20</span></span><br><span class=\"line\">      maxWait: <span class=\"number\">60000</span></span><br><span class=\"line\">      minIdle: <span class=\"number\">5</span></span><br><span class=\"line\">      poolPreparedStatements: <span class=\"keyword\">true</span></span><br><span class=\"line\">      testOnBorrow: <span class=\"keyword\">false</span></span><br><span class=\"line\">      testOnReturn: <span class=\"keyword\">false</span></span><br><span class=\"line\">      testWhileIdle: <span class=\"keyword\">true</span></span><br><span class=\"line\">      timeBetweenEvictionRunsMillis: <span class=\"number\">60000</span></span><br><span class=\"line\">      validationQuery: SELECT <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">spring:</span><br><span class=\"line\">  datasource:</span><br><span class=\"line\">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class=\"line\">    druid:</span><br><span class=\"line\">      url: $&#123;mysql_url&#125;/hiram_erp?useUnicode=<span class=\"keyword\">true</span>&amp;characterEncoding=UTF-<span class=\"number\">8</span>&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=<span class=\"keyword\">false</span>&amp;allowMultiQueries=<span class=\"keyword\">true</span>&amp;serverTimezone=GMT%<span class=\"number\">2</span>B8&amp;nullCatalogMeansCurrent=<span class=\"keyword\">true</span></span><br><span class=\"line\">      username:</span><br><span class=\"line\">      password:</span><br><span class=\"line\">      driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">      connectionProperties: druid.stat.mergeSql=<span class=\"keyword\">true</span>;druid.stat.slowSqlMillis=<span class=\"number\">5000</span></span><br><span class=\"line\">      filters: stat,wall</span><br><span class=\"line\">      initialSize: <span class=\"number\">5</span></span><br><span class=\"line\">      maxActive: <span class=\"number\">20</span></span><br><span class=\"line\">      maxPoolPreparedStatementPerConnectionSize: <span class=\"number\">20</span></span><br><span class=\"line\">      maxWait: <span class=\"number\">60000</span></span><br><span class=\"line\">      minIdle: <span class=\"number\">5</span></span><br><span class=\"line\">      poolPreparedStatements: <span class=\"keyword\">true</span></span><br><span class=\"line\">      testOnBorrow: <span class=\"keyword\">false</span></span><br><span class=\"line\">      testOnReturn: <span class=\"keyword\">false</span></span><br><span class=\"line\">      testWhileIdle: <span class=\"keyword\">true</span></span><br><span class=\"line\">      timeBetweenEvictionRunsMillis: <span class=\"number\">60000</span></span><br><span class=\"line\">      validationQuery: SELECT <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"comment\">// 主数据库配置 指定mapper位置</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan</span>(basePackages = &#123;<span class=\"string\">\"com.muggle.poseidon.mapper\"</span>&#125;, sqlSessionTemplateRef = <span class=\"string\">\"sqlSessionTemplate\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ManySourceDBConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"dataSource\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 读取application的配置信息</span></span><br><span class=\"line\">   <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.datasource.druid\"</span>)</span><br><span class=\"line\">   <span class=\"comment\">// 最高优先级，表示系统默认使用该配置</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">dataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        DruidDataSource druidDataSource = <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\"></span><br><span class=\"line\">        List filterList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        filterList.add(wallFilter());</span><br><span class=\"line\"></span><br><span class=\"line\">        druidDataSource.setProxyFilters(filterList);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> druidDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"sqlSessionFactory\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title\">sqlSessionFactory</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class=\"keyword\">new</span> SqlSessionFactoryBean();</span><br><span class=\"line\">        sqlSessionFactoryBean.setDataSource(<span class=\"keyword\">this</span>.dataSource());</span><br><span class=\"line\"></span><br><span class=\"line\">        Properties props = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        props.setProperty(<span class=\"string\">\"localCacheScope\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">        props.setProperty(<span class=\"string\">\"lazyLoadingEnabled\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">        props.setProperty(<span class=\"string\">\"aggressiveLazyLoading\"</span>, <span class=\"string\">\"false\"</span>);</span><br><span class=\"line\">        props.setProperty(<span class=\"string\">\"jdbcTypeForNull\"</span>, <span class=\"string\">\"NULL\"</span>);</span><br><span class=\"line\">        sqlSessionFactoryBean.setConfigurationProperties(props);</span><br><span class=\"line\">        sqlSessionFactoryBean.setVfs(SpringBootVFS.class);</span><br><span class=\"line\">        <span class=\"comment\">//pageHelper</span></span><br><span class=\"line\">        Properties properties = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        properties.setProperty(<span class=\"string\">\"reasonable\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">        properties.setProperty(<span class=\"string\">\"supportMethodsArguments\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">        properties.setProperty(<span class=\"string\">\"params\"</span>, <span class=\"string\">\"count=countSql\"</span>);</span><br><span class=\"line\">        properties.setProperty(<span class=\"string\">\"pageSizeZero\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">        PageInterceptor interceptor = <span class=\"keyword\">new</span> PageInterceptor();</span><br><span class=\"line\">        interceptor.setProperties(properties);</span><br><span class=\"line\">        sqlSessionFactoryBean.setPlugins(<span class=\"keyword\">new</span> Interceptor[]&#123;interceptor&#125;);</span><br><span class=\"line\">        sqlSessionFactoryBean.setTypeAliasesPackage(<span class=\"string\">\"com.muggle.poseidon.model\"</span>);</span><br><span class=\"line\">        PathMatchingResourcePatternResolver resolver = <span class=\"keyword\">new</span> PathMatchingResourcePatternResolver();</span><br><span class=\"line\">        sqlSessionFactoryBean.setMapperLocations(resolver.getResources(<span class=\"string\">\"classpath*:/mapper/*.xml\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sqlSessionFactoryBean.getObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"transactionManager\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PlatformTransactionManager <span class=\"title\">transactionManager</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceTransactionManager(<span class=\"keyword\">this</span>.dataSource());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"sqlSessionTemplate\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionTemplate <span class=\"title\">testSqlSessionTemplate</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"sqlSessionFactory\"</span>)</span> SqlSessionFactory sqlSessionFactory) <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SqlSessionTemplate(sqlSessionFactory);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">statViewServlet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ServletRegistrationBean druid = <span class=\"keyword\">new</span> ServletRegistrationBean();</span><br><span class=\"line\">        druid.setServlet(<span class=\"keyword\">new</span> StatViewServlet());</span><br><span class=\"line\">        druid.setUrlMappings(Collections.singletonList(<span class=\"string\">\"/druid/*\"</span>));</span><br><span class=\"line\">        Map&lt;String, String&gt; params = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        params.put(<span class=\"string\">\"loginUsername\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        params.put(<span class=\"string\">\"loginPassword\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        druid.setInitParameters(params);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> druid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">webStatFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        FilterRegistrationBean fitler = <span class=\"keyword\">new</span> FilterRegistrationBean();</span><br><span class=\"line\">        fitler.setFilter(<span class=\"keyword\">new</span> WebStatFilter());</span><br><span class=\"line\">        fitler.setUrlPatterns(Collections.singletonList(<span class=\"string\">\"/*\"</span>));</span><br><span class=\"line\">        fitler.addInitParameter(<span class=\"string\">\"exclusions\"</span>, <span class=\"string\">\"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fitler;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> WallFilter <span class=\"title\">wallFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        WallFilter wallFilter = <span class=\"keyword\">new</span> WallFilter();</span><br><span class=\"line\"></span><br><span class=\"line\">        wallFilter.setConfig(wallConfig());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> wallFilter;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> WallConfig <span class=\"title\">wallConfig</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        WallConfig config = <span class=\"keyword\">new</span> WallConfig();</span><br><span class=\"line\"></span><br><span class=\"line\">        config.setMultiStatementAllow(<span class=\"keyword\">true</span>);<span class=\"comment\">//允许一次执行多条语句</span></span><br><span class=\"line\"></span><br><span class=\"line\">        config.setNoneBaseStatementAllow(<span class=\"keyword\">true</span>);<span class=\"comment\">//允许非基本语句的其他语句</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> config;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ProcessEngineConfiguration <span class=\"title\">processEngineConfiguration</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ProcessEngineConfiguration pec = StandaloneProcessEngineConfiguration.createStandaloneProcessEngineConfiguration();</span><br><span class=\"line\">        pec.setDataSource(dataSource());</span><br><span class=\"line\">        <span class=\"comment\">//如果表不存在，自动创建表</span></span><br><span class=\"line\">        pec.setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">        <span class=\"comment\">//属性asyncExecutorActivate定义为true，工作流引擎在启动时就建立启动async executor线程池</span></span><br><span class=\"line\">        pec.setAsyncExecutorActivate(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pec;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ProcessEngine <span class=\"title\">processEngine</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> processEngineConfiguration().buildProcessEngine();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>log数据库配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@program</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: muggle</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span>: 2019-02-23</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"comment\">// 注意确保主配置无法扫描到这个包</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan</span>(basePackages = <span class=\"string\">\"com.muggle.poseidon.logmapper\"</span>, sqlSessionTemplateRef  = <span class=\"string\">\"test1SqlSessionTemplate\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogDBConfig</span>  </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"test1DataSource\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"log.datasource.druid\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">dataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        DruidDataSource druidDataSource = <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\"></span><br><span class=\"line\">        List filterList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        filterList.add(wallFilter());</span><br><span class=\"line\"></span><br><span class=\"line\">        druidDataSource.setProxyFilters(filterList);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> druidDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"test1SqlSessionFactory\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title\">testSqlSessionFactory</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"test1DataSource\"</span>)</span> DataSource dataSource) <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        SqlSessionFactoryBean bean = <span class=\"keyword\">new</span> SqlSessionFactoryBean();</span><br><span class=\"line\">        bean.setDataSource(dataSource);</span><br><span class=\"line\">        bean.setMapperLocations(<span class=\"keyword\">new</span></span><br><span class=\"line\">        <span class=\"comment\">// mapper位置，不要和主配置的mapper放到一起</span></span><br><span class=\"line\">         PathMatchingResourcePatternResolver().getResources(<span class=\"string\">\"classpath*:/mapper/log/*.xml\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean.getObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"test1TransactionManager\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSourceTransactionManager <span class=\"title\">testTransactionManager</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"test1DataSource\"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceTransactionManager(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"test1SqlSessionTemplate\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionTemplate <span class=\"title\">testSqlSessionTemplate</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"test1SqlSessionFactory\"</span>)</span> SqlSessionFactory sqlSessionFactory) <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SqlSessionTemplate(sqlSessionFactory);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> WallFilter <span class=\"title\">wallFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        WallFilter wallFilter = <span class=\"keyword\">new</span> WallFilter();</span><br><span class=\"line\"></span><br><span class=\"line\">        wallFilter.setConfig(wallConfig());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> wallFilter;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> WallConfig <span class=\"title\">wallConfig</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        WallConfig config = <span class=\"keyword\">new</span> WallConfig();</span><br><span class=\"line\"></span><br><span class=\"line\">        config.setMultiStatementAllow(<span class=\"keyword\">true</span>);<span class=\"comment\">//允许一次执行多条语句</span></span><br><span class=\"line\"></span><br><span class=\"line\">        config.setNoneBaseStatementAllow(<span class=\"keyword\">true</span>);<span class=\"comment\">//允许非基本语句的其他语句</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> config;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>多数据源jpa版<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.muggle.poseidon.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.jdbc.DataSourceBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Primary;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataSourceConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 扫描spring.datasource.primary开头的配置信息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 数据源配置信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"primaryDataSourceProperties\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.datasource\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSourceProperties <span class=\"title\">dataSourceProperties</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceProperties();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取主库数据源对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> properties 注入名为primaryDataSourceProperties的bean</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 数据源对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"primaryDataSource\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">dataSource</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"primaryDataSourceProperties\"</span>)</span> DataSourceProperties properties) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> properties.initializeDataSourceBuilder().build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 该方法仅在需要使用JdbcTemplate对象时选用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dataSource 注入名为primaryDataSource的bean</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 数据源JdbcTemplate对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"primaryJdbcTemplate\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JdbcTemplate <span class=\"title\">jdbcTemplate</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"primaryDataSource\"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JdbcTemplate(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.muggle.poseidon.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.orm.jpa.HibernateSettings;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Primary;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.orm.jpa.JpaTransactionManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.persistence.EntityManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.persistence.EntityManagerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableTransactionManagement</span></span><br><span class=\"line\"><span class=\"meta\">@EnableJpaRepositories</span>(</span><br><span class=\"line\">        <span class=\"comment\">// repository包名</span></span><br><span class=\"line\">        basePackages = <span class=\"string\">\"com.muggle.poseidon.repos\"</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 实体管理bean名称</span></span><br><span class=\"line\">        entityManagerFactoryRef = <span class=\"string\">\"primaryEntityManagerFactory\"</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 事务管理bean名称</span></span><br><span class=\"line\">        transactionManagerRef = <span class=\"string\">\"primaryTransactionManager\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainDataBaseConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 扫描spring.jpa.primary开头的配置信息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> jpa配置信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"primaryJpaProperties\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.jpa\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JpaProperties <span class=\"title\">jpaProperties</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JpaProperties();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取主库实体管理工厂对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> primaryDataSource 注入名为primaryDataSource的数据源</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jpaProperties     注入名为primaryJpaProperties的jpa配置信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> builder           注入EntityManagerFactoryBuilder</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 实体管理工厂对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"primaryEntityManagerFactory\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> LocalContainerEntityManagerFactoryBean <span class=\"title\">entityManagerFactory</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"primaryDataSource\"</span>)</span> DataSource primaryDataSource</span></span><br><span class=\"line\"><span class=\"function\">            , @<span class=\"title\">Qualifier</span><span class=\"params\">(<span class=\"string\">\"primaryJpaProperties\"</span>)</span> JpaProperties jpaProperties, EntityManagerFactoryBuilder builder) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder</span><br><span class=\"line\">                <span class=\"comment\">// 设置数据源</span></span><br><span class=\"line\">                .dataSource(primaryDataSource)</span><br><span class=\"line\">                <span class=\"comment\">// 设置jpa配置</span></span><br><span class=\"line\">                .properties(jpaProperties.getProperties())</span><br><span class=\"line\">                <span class=\"comment\">// 设置hibernate配置</span></span><br><span class=\"line\">                .properties(jpaProperties.getHibernateProperties(<span class=\"keyword\">new</span> HibernateSettings()))</span><br><span class=\"line\">                <span class=\"comment\">// 设置实体包名</span></span><br><span class=\"line\">                .packages(<span class=\"string\">\"com.muggle.poseidon.model\"</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 设置持久化单元名，用于@PersistenceContext注解获取EntityManager时指定数据源</span></span><br><span class=\"line\">                .persistenceUnit(<span class=\"string\">\"primaryPersistenceUnit\"</span>)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取实体管理对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> factory 注入名为primaryEntityManagerFactory的bean</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 实体管理对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"primaryEntityManager\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EntityManager <span class=\"title\">entityManager</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"primaryEntityManagerFactory\"</span>)</span> EntityManagerFactory factory) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> factory.createEntityManager();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取主库事务管理对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> factory 注入名为primaryEntityManagerFactory的bean</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 事务管理对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"primaryTransactionManager\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PlatformTransactionManager <span class=\"title\">transactionManager</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"primaryEntityManagerFactory\"</span>)</span> EntityManagerFactory factory) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JpaTransactionManager(factory);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">​```java</span><br><span class=\"line\"><span class=\"keyword\">package</span> com.muggle.poseidon.core.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.orm.jpa.HibernateSettings;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.orm.jpa.JpaTransactionManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.persistence.EntityManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.persistence.EntityManagerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableTransactionManagement</span></span><br><span class=\"line\"><span class=\"meta\">@EnableJpaRepositories</span>(</span><br><span class=\"line\">        <span class=\"comment\">// repository包名</span></span><br><span class=\"line\">        basePackages = <span class=\"string\">\"com.muggle.poseidon.logrep\"</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 实体管理bean名称</span></span><br><span class=\"line\">        entityManagerFactoryRef = <span class=\"string\">\"secondEntityManagerFactory\"</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 事务管理bean名称</span></span><br><span class=\"line\">        transactionManagerRef = <span class=\"string\">\"secondTransactionManager\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogDataBaseConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 扫描spring.jpa.second开头的配置信息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> jpa配置信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"secondJpaProperties\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.aa\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JpaProperties <span class=\"title\">jpaProperties</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JpaProperties();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取从库实体管理工厂对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> secondDataSource 注入名为secondDataSource的数据源</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jpaProperties    注入名为secondJpaProperties的jpa配置信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> builder          注入EntityManagerFactoryBuilder</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 实体管理工厂对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"secondEntityManagerFactory\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> LocalContainerEntityManagerFactoryBean <span class=\"title\">entityManagerFactory</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"secondDataSource\"</span>)</span> DataSource secondDataSource</span></span><br><span class=\"line\"><span class=\"function\">            , @<span class=\"title\">Qualifier</span><span class=\"params\">(<span class=\"string\">\"secondJpaProperties\"</span>)</span> JpaProperties jpaProperties, EntityManagerFactoryBuilder builder) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder</span><br><span class=\"line\">                <span class=\"comment\">// 设置数据源</span></span><br><span class=\"line\">                .dataSource(secondDataSource)</span><br><span class=\"line\">                <span class=\"comment\">// 设置jpa配置</span></span><br><span class=\"line\">                .properties(jpaProperties.getProperties())</span><br><span class=\"line\">                <span class=\"comment\">// 设置hibernate配置</span></span><br><span class=\"line\">                .properties(jpaProperties.getHibernateProperties(<span class=\"keyword\">new</span> HibernateSettings()))</span><br><span class=\"line\">                <span class=\"comment\">// 设置实体包名</span></span><br><span class=\"line\">                .packages(<span class=\"string\">\"com.muggle.poseidon.entity\"</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 设置持久化单元名，用于@PersistenceContext注解获取EntityManager时指定数据源</span></span><br><span class=\"line\">                .persistenceUnit(<span class=\"string\">\"secondPersistenceUnit\"</span>)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取实体管理对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> factory 注入名为secondEntityManagerFactory的bean</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 实体管理对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"secondEntityManager\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EntityManager <span class=\"title\">entityManager</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"secondEntityManagerFactory\"</span>)</span> EntityManagerFactory factory) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> factory.createEntityManager();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取从库事务管理对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> factory 注入名为secondEntityManagerFactory的bean</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 事务管理对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"secondTransactionManager\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PlatformTransactionManager <span class=\"title\">transactionManager</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"secondEntityManagerFactory\"</span>)</span> EntityManagerFactory factory) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JpaTransactionManager(factory);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.muggle.poseidon.core.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogDataConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 扫描spring.datasource.second开头的配置信息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 数据源配置信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"secondDataSourceProperties\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.ss\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSourceProperties <span class=\"title\">dataSourceProperties</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceProperties();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取从库数据源对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> properties 注入名为secondDataSourceProperties的beanf</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 数据源对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"secondDataSource\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">dataSource</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"secondDataSourceProperties\"</span>)</span> DataSourceProperties properties) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> properties.initializeDataSourceBuilder().build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 该方法仅在需要使用JdbcTemplate对象时选用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dataSource 注入名为secondDataSource的bean</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 数据源JdbcTemplate对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"secondJdbcTemplate\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JdbcTemplate <span class=\"title\">jdbcTemplate</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"secondDataSource\"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JdbcTemplate(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>application.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=<span class=\"number\">8080</span></span><br><span class=\"line\">spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class=\"line\">#spring.datasource.url = jdbc:mysql://localhost:3306/test</span><br><span class=\"line\">spring.datasource.driverClassName = com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">spring.datasource.url = jdbc:mysql:<span class=\"comment\">//119.23.75.58:3306/poseidon?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowMultiQueries=true</span></span><br><span class=\"line\">spring.datasource.username =</span><br><span class=\"line\">spring.datasource.password =</span><br><span class=\"line\">spring.datasource.max-active=<span class=\"number\">20</span></span><br><span class=\"line\">spring.datasource.max-idle=<span class=\"number\">8</span></span><br><span class=\"line\">spring.datasource.min-idle=<span class=\"number\">8</span></span><br><span class=\"line\">spring.datasource.initial-size=<span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\">spring.jpa.database=mysql</span><br><span class=\"line\">spring.jpa.show-sql = <span class=\"keyword\">true</span></span><br><span class=\"line\">#配置方言</span><br><span class=\"line\">spring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect</span><br><span class=\"line\"></span><br><span class=\"line\">spring.ss.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class=\"line\">#spring.datasource.url = jdbc:mysql://localhost:3306/test</span><br><span class=\"line\">spring.ss.driverClassName = com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">spring.ss.url = jdbc:mysql:<span class=\"comment\">//zzzzz/log?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowMultiQueries=true</span></span><br><span class=\"line\">spring.ss.username =</span><br><span class=\"line\">spring.ss.password =</span><br><span class=\"line\">spring.ss.max-active=<span class=\"number\">20</span></span><br><span class=\"line\">spring.ss.max-idle=<span class=\"number\">8</span></span><br><span class=\"line\">spring.ss.min-idle=<span class=\"number\">8</span></span><br><span class=\"line\">spring.ss.initial-size=<span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">spring.aa.database=mysql</span><br><span class=\"line\">spring.aa.show-sql = <span class=\"keyword\">true</span></span><br><span class=\"line\">#配置方言</span><br><span class=\"line\">spring.aa.database-platform=org.hibernate.dialect.MySQL5Dialect</span><br></pre></td></tr></table></figure>\n<p>以数据库作为输出配置就算完成了，接下来整合elk系统到我们日志系统中：</p>\n<p>先整合logstash</p>\n<p>logstash安装和配置：<br><a href=\"https://www.elastic.co/cn/downloads/logstash\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/cn/downloads/logstash</a> 选择zip包下载</p>\n<p>解压，进入bin目录 创建logstash.conf 并配置：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">    tcp &#123;</span><br><span class=\"line\">    ##host:port就是上面appender中的 destination，这里其实把logstash作为服务，开启9250端口接收logback发出的消息</span><br><span class=\"line\">    host =&gt; \"127.0.0.1\"</span><br><span class=\"line\">    port =&gt; 9100</span><br><span class=\"line\">    mode =&gt; \"server\"</span><br><span class=\"line\">    tags =&gt; [\"tags\"]</span><br><span class=\"line\">    codec =&gt; json_lines</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">    stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class=\"line\">    #输出到es</span><br><span class=\"line\">    #elasticsearch &#123; hosts =&gt; \"127.0.0.1:9200\" &#125;</span><br><span class=\"line\">        #输出到一个文件中</span><br><span class=\"line\">    file &#123;</span><br><span class=\"line\">       path =&gt; \"D:\\logs\\test.log\"</span><br><span class=\"line\">       codec =&gt; line</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我这里先配置输出到文件，后面再修改,创建文件：D:\\logs\\test.log</p>\n<p>启动：</p>\n<p>打开cmd（不要使用powershell），进入bin:<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\exe\\logstash-6.6.1\\logstash-6.6.1\\bin&gt;logstash -f logstash.conf</span><br></pre></td></tr></table></figure></p>\n<p>然后在我们的项目中进行相应的配置：<br>按这个来：<a href=\"https://github.com/logstash/logstash-logback-encoder\" target=\"_blank\" rel=\"noopener\">https://github.com/logstash/logstash-logback-encoder</a></p>\n<p>加入pom并指定logback版本：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 父pom中 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ch.qos.logback.version</span>&gt;</span>1.2.3<span class=\"tag\">&lt;/<span class=\"name\">ch.qos.logback.version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--  日志模块--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.logstash.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logstash-logback-encoder<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Your project must also directly depend on either logback-classic or logback-access.  For example: --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>配置apppender和logger</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"stash\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"net.logstash.logback.appender.LogstashTcpSocketAppender\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">destination</span>&gt;</span>127.0.0.1:9100<span class=\"tag\">&lt;/<span class=\"name\">destination</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">includeCallerData</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">includeCallerData</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">encoder</span> <span class=\"attr\">class</span>=<span class=\"string\">\"net.logstash.logback.encoder.LogstashEncoder\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">includeCallerData</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">includeCallerData</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logstash\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"info\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"stash\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>测试：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RestController</span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/public/log\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogTestController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger log = LoggerFactory.getLogger(<span class=\"string\">\"logstash\"</span>);</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    LoggingEventRepository repository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"sssssssssssssss\"</span>);</span><br><span class=\"line\">        Iterable&lt;LoggingEvent&gt; all = repository.findAll();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"sss\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>访问接口，logstash打印信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[2019-03-09T11:32:56,358][INFO ][logstash.outputs.file    ] Opening file &#123;:path=&gt;&quot;D:/logs/test.log&quot;&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">                  &quot;host&quot; =&gt; &quot;www.xmind.net&quot;,</span><br><span class=\"line\">                 &quot;level&quot; =&gt; &quot;INFO&quot;,</span><br><span class=\"line\">     &quot;caller_class_name&quot; =&gt; &quot;com.muggle.poseidon.controller.LogTestController&quot;,</span><br><span class=\"line\">            &quot;@timestamp&quot; =&gt; 2019-03-09T03:33:03.413Z,</span><br><span class=\"line\">           &quot;logger_name&quot; =&gt; &quot;logstash&quot;,</span><br><span class=\"line\">              &quot;@version&quot; =&gt; &quot;1&quot;,</span><br><span class=\"line\">           &quot;thread_name&quot; =&gt; &quot;http-nio-8080-exec-9&quot;,</span><br><span class=\"line\">               &quot;message&quot; =&gt; &quot;sssssssssssssss&quot;,</span><br><span class=\"line\">    &quot;caller_line_number&quot; =&gt; 22,</span><br><span class=\"line\">                  &quot;port&quot; =&gt; 58368,</span><br><span class=\"line\">           &quot;level_value&quot; =&gt; 20000,</span><br><span class=\"line\">      &quot;caller_file_name&quot; =&gt; &quot;LogTestController.java&quot;,</span><br><span class=\"line\">                  &quot;tags&quot; =&gt; [</span><br><span class=\"line\">        [0] &quot;tags&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;caller_method_name&quot; =&gt; &quot;test&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>test.log输出了文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-03-09T03:33:03.413Z www.xmind.net sssssssssssssss</span><br></pre></td></tr></table></figure>\n<p>接下来只要把输出路径换成ES就可以了，这属于logstash和es的整合，这里先不讲解；重新回归到我们的请求模块：</p>\n<p>我希望我的模块，对每次请求都能记录下来（请求日志），并将记录存到数据库或者ES，同时我要对所有接口都进行一个幂等性的保障；保障接口的幂等性有多种方法，比较简单的是数据库做唯一索引或者加拦截器，我这里加了一个拦截器来保障接口幂等和拦截前端数据的重复提交(关于接口幂等性在其他文档中介绍)：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestLockInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\">    RedisLock redisTool;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> expireTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RequestLockInterceptor</span><span class=\"params\">(<span class=\"keyword\">int</span> expireTime, RedislockImpl redisTool)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.expireTime = expireTime;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.redisTool = redisTool;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">\"post\"</span>.equalsIgnoreCase(request.getMethod()))&#123;</span><br><span class=\"line\">            String token = request.getParameter(<span class=\"string\">\"request_key\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (token==<span class=\"keyword\">null</span>||<span class=\"string\">\"\"</span>.equals(token))&#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">\"请求非法\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//            throw new PoseidonException(\"请求太频繁\",PoseidonProperties.TOO_NUMBER_REQUEST);</span></span><br><span class=\"line\">                response.setContentType(<span class=\"string\">\"application/json;charset=UTF-8\"</span>);</span><br><span class=\"line\">                PrintWriter writer = response.getWriter();</span><br><span class=\"line\">                writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"5001\\\",\\\"msg\\\":\\\"请求非法\\\"&#125;\"</span>);</span><br><span class=\"line\">                writer.close();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            String ipAddr = RequestUtils.getIpAddr(request);</span><br><span class=\"line\">            String lockKey = request.getRequestURI() + <span class=\"string\">\"_\"</span>  + <span class=\"string\">\"_\"</span> + token;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> lock = redisTool.lock(lockKey, ipAddr, expireTime);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!lock) &#123;<span class=\"comment\">//</span></span><br><span class=\"line\">                log.error(<span class=\"string\">\"拦截表单重复提交\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//            throw new PoseidonException(\"请求太频繁\",PoseidonProperties.TOO_NUMBER_REQUEST);</span></span><br><span class=\"line\">                response.setContentType(<span class=\"string\">\"application/json;charset=UTF-8\"</span>);</span><br><span class=\"line\">                PrintWriter writer = response.getWriter();</span><br><span class=\"line\">                writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"5001\\\",\\\"msg\\\":\\\"请求太频繁\\\"&#125;\"</span>);</span><br><span class=\"line\">                writer.close();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        String requestURI = request.getRequestURI();</span></span><br><span class=\"line\"><span class=\"comment\">//        String lockKey = request.getRequestURI() + \"_\" + RequestUtils.getIpAddr(request);</span></span><br><span class=\"line\"><span class=\"comment\">//        redisTool.unlock(lockKey,getIpAddr(request));</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>项目使用了redis锁（redis锁原理和使用在其他文档中介绍）</p>\n<p>对于系统异常，如果是业务的异常，正常处理，如果是系统发生的异常比如空指针，数据库异常等我希望系统能马上通知，以便排查问题，所以我配置邮件异常通知(关于springboot邮件配置其他文档介绍)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestControllerAdvice</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RestExceptionHandlerController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    EmailService emailService;</span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;admin.email&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String adminEmail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(value = &#123;PoseidonException.class&#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ResultBean <span class=\"title\">poseidonExceptionHandler</span><span class=\"params\">(PoseidonException e, HttpServletRequest req)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultBean().setMsg(e.getMsg()).setCode(e.getCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(value = &#123;MethodArgumentNotValidException.class&#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ResultBean <span class=\"title\">MethodArgumentNotValidException</span><span class=\"params\">(MethodArgumentNotValidException e, HttpServletRequest req)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(e.getMessage());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultBean().setMsg(<span class=\"string\">\"数据未通过校验\"</span>).setCode(PoseidonProperties.COMMIT_DATA_ERROR);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(value = &#123;Exception.class&#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ResultBean <span class=\"title\">exceptionHandler</span><span class=\"params\">(Exception e, HttpServletRequest req)</span> </span>&#123;</span><br><span class=\"line\">        log.error(<span class=\"string\">\"系统异常：\"</span> + req.getMethod() + req.getRequestURI(), e);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">            EmailBean emailBean = <span class=\"keyword\">new</span> EmailBean();</span><br><span class=\"line\">            emailBean.setRecipient(adminEmail);</span><br><span class=\"line\">            emailBean.setSubject(<span class=\"string\">\"poseidon---系统异常\"</span>);</span><br><span class=\"line\">            emailBean.setContent(<span class=\"string\">\"系统异常：\"</span> + req.getMethod() + req.getRequestURI()+<span class=\"string\">\"----\"</span>+e.getMessage());</span><br><span class=\"line\"><span class=\"comment\">//            改良</span></span><br><span class=\"line\">            emailService.sendSimpleMail(emailBean);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultBean().setMsg(<span class=\"string\">\"系统异常，请联系管理员\"</span>).setCode(<span class=\"string\">\"500\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(value = &#123;HttpRequestMethodNotSupportedException.class&#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ResultBean <span class=\"title\">notsupported</span><span class=\"params\">(Exception e, HttpServletRequest req)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultBean().setMsg(<span class=\"string\">\"不支持的请求方式\"</span>).setCode(PoseidonProperties.NOT_SUPPORT_METHOD);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(value = &#123;NoHandlerFoundException.class&#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ResultBean <span class=\"title\">notFoundUrl</span><span class=\"params\">(Exception e, HttpServletRequest req)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultBean().setMsg(<span class=\"string\">\"请求路径不存在\"</span>).setCode(<span class=\"string\">\"404\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>项目架构信得<br>common 和core模块存在的意义</p>\n","site":{"data":{}},"excerpt":"<h5 id=\"作者：muggle\"><a href=\"#作者：muggle\" class=\"headerlink\" title=\"作者：muggle\"></a>作者：muggle</h5><p>Logback是由log4j创始人设计的另一个开源日志组件,分为三个模块：</p>\n<ol>\n<li><p>logback-core：其它两个模块的基础模块</p>\n</li>\n<li><p>logback-classic：它是log4j的一个改良版本，同时它完整实现了slf4j API使你可以很方便地更换成其它日志系统如log4j或JDK14 Logging</p>\n</li>\n<li><p>logback-access：访问模块与Servlet容器集成提供通过Http来访问日志的功能<br>在springboot中我们通过xml配置来操作logback</p>\n</li>\n</ol>","more":"<p>springboot中logback的默认配置文件名称为logback-spring.xml，若需要指定xml名称，需在application.properties（application.yml）中配置logging.config=xxxx.xml<br>现在贴出一份logback的xml配置，可直接使用，懒得看的小伙伴复制粘贴到你的项目中去体验吧<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">scan</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">scanPeriod</span>=<span class=\"string\">\"60 seconds\"</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jmxConfigurator</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"log_dir\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"logs\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxHistory\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"100\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"console\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.ConsoleAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">                %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %highlight([%-5level]) %logger - %msg%n</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logs\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">                $&#123;log_dir&#125;/%d&#123;yyyy-MM-dd&#125;-poseidon.log</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">maxHistory</span>&gt;</span>$&#123;maxHistory&#125;<span class=\"tag\">&lt;/<span class=\"name\">maxHistory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">                %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %highlight([%-5level]) %logger - %msg%n</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"runningTime-file\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>$&#123;log_dir&#125;/runningTime/%d&#123;yyyy-MM-dd&#125;-poseidon.log<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">maxHistory</span>&gt;</span>$&#123;maxHistory&#125;<span class=\"tag\">&lt;/<span class=\"name\">maxHistory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%-5level] %logger - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"runningTime-console\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.ConsoleAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">                %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%-5level] %logger - %msg%n</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"runningTime\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"info\"</span> <span class=\"attr\">additivity</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;appender-ref ref=\"runningTime-file\"/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"runningTime-console\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--  可能会抛出方言异常 两个解决方案 配置方言或者换连接池 换druid不会有这个异常--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"requestLog-db\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.db.DBAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">connectionSource</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.db.DataSourceConnectionSource\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.commons.dbcp.BasicDataSource\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">driverClassName</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">driverClassName</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>jdbc:mysql://xxx/xxxx?characterEncoding=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>xx<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>xxxx<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">connectionSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;sqlDialect class=\"ch.qos.logback.core.db.dialect.MySQLDialect\" /&gt;--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--异步配置--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;appender name=\"requestLog-file\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         &lt;rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">             &lt;fileNamePattern&gt;$&#123;log_dir&#125;/requestLog/%d&#123;yyyy-MM-dd&#125;-poseidon.log&lt;/fileNamePattern&gt;</span></span><br><span class=\"line\"><span class=\"comment\">             &lt;maxHistory&gt;$&#123;maxHistory&#125;&lt;/maxHistory&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         &lt;/rollingPolicy&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         &lt;encoder&gt;</span></span><br><span class=\"line\"><span class=\"comment\">             &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%-5level] %logger - %msg%n&lt;/pattern&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         &lt;/encoder&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     &lt;/appender&gt;--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;appender name=\"request-asyn\" class=\"ch.qos.logback.classic.AsyncAppender\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;appender-ref ref=\"requestLog-file\"/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/appender&gt; --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logs-asyn\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.AsyncAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"logs\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"requestLog\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"info\"</span> <span class=\"attr\">additivity</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;appender-ref ref=\"requestLog-file\"/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- DBAppender 查看可知其父类dbappenderbase继承了UnsynchronizedAppenderBase&lt;E&gt; 所以dbappender本身是异步的 无需配置异步--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"requestLog-db\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">\"info\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"console\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;appender-ref ref=\"logs\"/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"logs-asyn\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>我们可以看到xml中有四种节点<br>appender，logger，root,configuration</p>\n<h4 id=\"节点解读\"><a href=\"#节点解读\" class=\"headerlink\" title=\"节点解读\"></a>节点解读</h4><p>configuration包含三个属性：</p>\n<ol>\n<li>scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</li>\n<li>scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。</li>\n<li>debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。<br>4.<br>Logger作为日志的记录器，把它关联到应用的对应的context上后，主要用于存放日志对象，也可以定义日志类型、级别。</li>\n</ol>\n<p>Appender主要用于指定日志输出的目的地，目的地可以是控制台、文件、远程套接字服务器、 MySQL、PostreSQL、 Oracle和其他数据库、 JMS和远程UNIX Syslog守护进程等。</p>\n<p>root 就是最高级别logger,所有不被指定logger的日志都归root管理。</p>\n<p>在slf4j框架下我们使用log是这样的:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger logger= LoggerFactory.getLogger(xxx.class);</span><br></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger logger= LoggerFactory.getLogger(<span class=\"string\">\"xxxx\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>可以理解为代码中的getLogger() 方法就是获取xml配置中的logger,如果没有配置相应的logger则为root<br>比如我配置了：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hhh\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"info\"</span> <span class=\"attr\">additivity</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;appender-ref ref=\"requestLog-file\"/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"xxx\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>那我在获得一个logger时可以这样获得它：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger logger= LoggerFactory.getLogger(<span class=\"string\">\"hhh\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>我所输出的日志将被这个logger所管理<br>logger 上有三个配置 name level additivity<br>name就是这个logger的名称，level就是这个日志过滤的级别，低于这个级别的日志不输入到对应的appender中；additivity是否向上级logger传递打印信息，默认是true。logger中可以配置多个appender-ref，也就是可以指定多个输出地点。<br>而root只是特殊的logger，用法上无差别</p>\n<p>appender节点：<br>appender节点是logback配置的关键，其name属性指定其名称，class属性指定实现类，对应得实现类有<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch.qos.logback.core.ConsoleAppender <span class=\"comment\">// 以控制台作为输出</span></span><br><span class=\"line\">ch.qos.logback.core.rolling.RollingFileAppender<span class=\"comment\">//以日志文件作为输出</span></span><br><span class=\"line\">ch.qos.logback.classic.db.DBAppender<span class=\"comment\">//以数据库作为输出</span></span><br><span class=\"line\">net.logstash.logback.appender.LogstashTcpSocketAppender<span class=\"comment\">//以logstash作为输出需要引入如下依赖：</span></span><br><span class=\"line\">ch.qos.logback.classic.AsyncAppender<span class=\"comment\">//异步输出 需要定义appender-ref</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// logstash依赖</span></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;net.logstash.logback&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;logstash-logback-encoder&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;4.11&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>所有的appender 实现ch.qos.logback.core.Appender接口或者 ch.qos.logback.core.UnsynchronizedAppenderBase接口（异步），我们也可以自定义appender来指定日志输出；</p>\n<p>在Appender中可以定义哪些节点我们一个个来看：</p>\n<p>第一种： ConsoleAppender<br>如同它的名字一样，这个Appender将日志输出到console，更准确的说是System.out 或者System.err。<br>它包含的参数如下：</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Name    Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>encoder</td>\n<td>Encoder</td>\n<td>通常在其pattern里指定日志格式  如： %d{yyyy-MM-dd HH:mm:ss.SSS} %highlight([%-5level]) %logger - %msg%n表示 日期格式 日志级别（高亮）logger的名称 logger的message</td>\n</tr>\n<tr>\n<td>target</td>\n<td>String</td>\n<td>指定输出目标。可选值：System.out 或 System.err。默认值：System.out</td>\n</tr>\n<tr>\n<td>withJansi</td>\n<td>boolean</td>\n<td>是否支持ANSI color codes（类似linux中的shell脚本的输出字符串颜色控制代码）。默认为false。如果设置为true。例如：[31m 代表将前景色设置成红色。在windows中，需要提供”org.fusesource.jansi:jansi:1.9”，而在linux，mac os x中默认支持。</td>\n</tr>\n</tbody>\n</table>\n<p>第二种： FileAppender<br>将日志输出到文件当中，目标文件取决于file属性。是否追加输出，取决于append属性。</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Name    Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>append</td>\n<td>boolean</td>\n<td>是否以追加方式输出。默认为true。</td>\n</tr>\n<tr>\n<td>encoder</td>\n<td>Encoder</td>\n<td>See OutputStreamAppender properties.</td>\n</tr>\n<tr>\n<td>file</td>\n<td>String</td>\n<td>指定文件名。注意在windows当中，反斜杠 \\ 需要转义，或直接使用 / 也可以。例如 c:/temp/test.logor 或 c:\\temp\\test.log 都可以。没有默认值，如果上层目录不存在，FileAppender会自动创建。</td>\n</tr>\n<tr>\n<td>prudent</td>\n<td>boolean</td>\n<td>是否工作在谨慎模式下。在谨慎模式下，FileAppender将会安全写入日志到指定文件，即时在不同的虚拟机jvm中有另一个相同的FileAppender实例。默认值：fales;设置为true，意味着append会被自动设置成true。prudent依赖于文件排它锁。实验表明，使用文件锁，会增加3倍的日志写入消耗。比如说，当prudent模式为off，写入一条日志到文件只要10毫秒，但是prudent为真，则会接近30毫秒。prudent 模式实际上是将I/O请求序列化，因此在I/O数量较大，比如说100次/s或更多的时候，带来的延迟也会显而易见，所以应该避免。在networked file system（远程文件系统）中，这种消耗将会更大，可能导致死锁。</td>\n</tr>\n</tbody>\n</table>\n<p>第三个： RollingFileAppender</p>\n<p>RollingFileAppender继承自FileAppender，提供日志目标文件自动切换的功能。例如可以用日期作为日志分割的条件。<br>RollingFileAppender有两个重要属性，RollingPolicy负责怎么切换日志，TriggeringPolicy负责何时切换。为了使RollingFileAppender起作用，这两个属性必须设置，但是如果RollingPolicy的实现类同样实现了TriggeringPolicy接口，则也可以只设置RollingPolicy这个属性。<br>下面是它的参数：</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Name    Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>file</td>\n<td>String</td>\n<td>指定文件名。注意在windows当中，反斜杠 \\ 需要转义，或直接使用 / 也可以。例如 c:/temp/test.logor 或 c:\\temp\\test.log 都可以。没有默认值，如果上层目录不存在，FileAppender会自动创建。</td>\n</tr>\n<tr>\n<td>append</td>\n<td>boolean</td>\n<td>是否以追加方式输出。默认为true。</td>\n</tr>\n<tr>\n<td>encoder</td>\n<td>Encoder</td>\n<td>See OutputStreamAppender properties.</td>\n</tr>\n<tr>\n<td>rollingPolicy</td>\n<td>RollingPolicy</td>\n<td>当发生日志切换时，RollingFileAppender的切换行为。例如日志文件名的修改</td>\n</tr>\n<tr>\n<td>triggeringPolicy</td>\n<td>TriggeringPolicy</td>\n<td>决定什么时候发生日志切换，例如日期，日志文件大小到达一定值</td>\n</tr>\n<tr>\n<td>prudent</td>\n<td>boolean</td>\n<td>FixedWindowRollingPolicy 不支持prudent模式。TimeBasedRollingPolicy 支持prudent模式，但是需要满足一下两条约束：在prudent模式中，日志文件的压缩是不被允许，不被支持的。不能设置file属性。</td>\n</tr>\n</tbody>\n</table>\n<p>第四个：SocketAppender及SSLSocketAppender（未尝试过）</p>\n<p>到目前为止我们讲的appender都只能将日志输出到本地资源。与之相对的，SocketAppender就是被设计用来输出日志到远程实例中的。SocketAppender输出日志采用明文方式，SSLSocketAppender则采用加密方式传输日志。<br>被序列化的日志事件的类型是 LoggingEventVO 继承ILoggingEvent接口。远程日志记录并非是侵入式的。在反序列化接收后，日志事件就可以好像在本地生成的日志一样处理了。多个SockerAppender可以向同一台日志服务器发送日志。SocketAppender并不需要关联一个Layout，因为它只是发送序列化的日志事件给远程日志服务器。SocketAppender的发送操作是基于TCP协议的。因此如果远程服务器是可到达的，则日志会被其处理，如果远程服务器宕机或不可到达，那么日志将会被丢弃。等到远程服务器复活，日志发送将会透明的重新开始。这种透明式的重连，是通过一个“连接“线程周期性的尝试连接远程服务器实现的。<br>Logging events会由TCP协议实现自动缓冲。这意味着，如果网络速度比日志请求产生速度快，则网络速度并不会影响应用。但如果网络速度过慢，则网络速度则会变成限制，在极端情况下，如果远程日志服务器不可到达，则会导致应用最终阻塞。不过，如果服务器可到达，但是服务器宕机了，这种情况，应用不会阻塞，而只是丢失一些日志事件而已。<br>需要注意的是，即使SocketAppender没有被logger链接，它也不会被gc回收，因为他在connector thread中任然存在引用。一个connector thread 只有在网络不可达的情况下，才会退出。为了防止这个垃圾回收的问题，我们应该显示声明关闭SocketAppender。长久存活并创建/销毁大量的SocketAppender实例的应用，更应该注意这个问题。不过大多数应用可以忽略这个问题。如果JVM在SocketAppender关闭之前将其退出，又或者是被垃圾回收，这样子可能导致丢失一些还未被传输，在管道中等待的日志数据。为了防止避免日志丢失，经常可靠的办法就是调用SocketAppender的close方法，或者调用LoggerContext的stop方法，在退出应用之前。</p>\n<p>下面我们来看看SocketAppender的属性：</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Name    Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>includeCallerData</td>\n<td>boolean</td>\n<td>是否包含调用者的信息如果为true，则以下日志输出的 ?:? 会替换成调用者的文件名跟行号，为false，则为问号。2019-01-06 17:37:30,968 DEBUG [Thread-0] [?:?] chapters.appenders.socket.SocketClient2 - Hi</td>\n</tr>\n<tr>\n<td>port</td>\n<td>int</td>\n<td>端口号</td>\n</tr>\n<tr>\n<td>reconnectionDelay</td>\n<td>Duration</td>\n<td>重连延时，如果设置成“10 seconds”，就会在连接u武器失败后，等待10秒，再连接。默认值：“30 seconds”。如果设置成0，则关闭重连功能。</td>\n</tr>\n<tr>\n<td>queueSize</td>\n<td>int</td>\n<td>设置缓冲日志数，如果设置成0，日志发送是同步的，如果设置成大于0的值，会将日志放入队列，队列长度到达指定值，在统一发送。可以加大服务吞吐量。</td>\n</tr>\n<tr>\n<td>eventDelayLimit</td>\n<td>Duration</td>\n<td>设置日志超时丢弃时间。当设置“10 seconds”类似的值，如果日志队列已满，而服务器长时间来不及接收，当滞留时间超过10 seconds，日志就会被丢弃。默认值： 100 milliseconds</td>\n</tr>\n<tr>\n<td>remoteHost</td>\n<td>String</td>\n<td>远程日志服务器的IP</td>\n</tr>\n<tr>\n<td>ssl</td>\n<td>SSLConfiguration</td>\n<td>只在SSLSocketAppender包含该属性节点。提供SSL配置，详情见 Using SSL.</td>\n</tr>\n</tbody>\n</table>\n<p>标准的Logback Classic包含四个可供使用的Receiver用来接收来自SocketAppender的logging evnets。</p>\n<p>第五个： SMTPAppender</p>\n<p>SMTPAppender 可以将logging event存放在一个或多个固定大小的缓冲区中，然后在用户指定的event到来之时，将适当的大小的logging event以邮件方式发送给运维人员。<br>详细属性如下：</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Name    Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>smtpHost</td>\n<td>String</td>\n<td>SMTP server的地址，必需指定。如网易的SMTP服务器地址是： smtp.163.com</td>\n</tr>\n<tr>\n<td>smtpPort</td>\n<td>int</td>\n<td>SMTP server的端口地址。默认值：25</td>\n</tr>\n<tr>\n<td>to</td>\n<td>String</td>\n<td>指定发送到那个邮箱，可设置多个<to>属性，指定多个目的邮箱</to></td>\n</tr>\n<tr>\n<td>from</td>\n<td>String</td>\n<td>指定发件人名称。如果设置成“muggle &lt;<a href=\"mailto:hh@moral.org\" target=\"_blank\" rel=\"noopener\">hh@moral.org</a>&gt; ”，则邮件发件人将会是“muggle <a href=\"mailto:&#x68;&#104;&#64;&#109;&#111;&#114;&#x61;&#x6c;&#46;&#111;&#x72;&#x67;\" target=\"_blank\" rel=\"noopener\">&#x68;&#104;&#64;&#109;&#111;&#114;&#x61;&#x6c;&#46;&#111;&#x72;&#x67;</a> ”</td>\n</tr>\n<tr>\n<td>subject</td>\n<td>String</td>\n<td>指定emial的标题，它需要满足PatternLayout中的格式要求。如果设置成“Log: %logger - %msg”，就案例来讲，则发送邮件时，标题为“Log: com.foo.Bar - Hello World ”。 默认值：”%logger{20} - %m”.</td>\n</tr>\n<tr>\n<td>discriminator</td>\n<td>Discriminator</td>\n<td>通过Discriminator, SMTPAppender可以根据Discriminator的返回值，将到来的logging event分发到不同的缓冲区中。默认情况下，总是返回相同的值来达到使用一个缓冲区的目的。</td>\n</tr>\n<tr>\n<td>evaluator</td>\n<td>IEvaluator</td>\n<td>指定触发日志发送的条件。通过<evaluator class=\"...\">指定EventEvaluator接口的实现类。默认情况下SMTPAppeender使用的是OnErrorEvaluator，表示当发送ERROR或更高级别的日志请求时，发送邮件。Logback提供了几个evaluators：OnErrorEvaluator、OnMarkerEvaluator、JaninoEventEvaluator、GEventEvaluator（功能强大）</evaluator></td>\n</tr>\n<tr>\n<td>cyclicBufferTracker</td>\n<td>CyclicBufferTracker</td>\n<td>指定一个cyclicBufferTracker跟踪cyclic buffer。它是基于discriminator的实现的。如果你不指定，默认会创建一个CyclicBufferTracker ，默认设置cyclic buffer大小为256。你也可以手动指定使用默认的CyclicBufferTracker，并且通过<buffersize>属性修改默认的缓冲区接收多少条logging event。</buffersize></td>\n</tr>\n<tr>\n<td>username</td>\n<td>String</td>\n<td>发送邮件账号，默认为null</td>\n</tr>\n<tr>\n<td>password</td>\n<td>String</td>\n<td>发送邮件密码，默认为null</td>\n</tr>\n<tr>\n<td>STARTTLS</td>\n<td>boolean</td>\n<td>如果设置为true，appender会尝试使用STARTTLS命令，如果服务端支持，则会将明文连接转换成加密连接。需要注意的是，与日志服务器连接一开始是未加密的。默认值：false</td>\n</tr>\n<tr>\n<td>SSL</td>\n<td>boolean</td>\n<td>如果设置为true，appender将会使用SSL连接到日志服务器。 默认值：false</td>\n</tr>\n<tr>\n<td>charsetEncoding</td>\n<td>String</td>\n<td>指定邮件信息的编码格式 默认值：UTF-8</td>\n</tr>\n<tr>\n<td>localhost</td>\n<td>String</td>\n<td>如果smtpHost没有正确配置，比如说不是完整的地址。这时候就需要localhost这个属性提供服务器的完整路径（如同java中的完全限定名 ），详情参考com.sun.mail.smtp 中的mail.smtp.localhost属性</td>\n</tr>\n<tr>\n<td>asynchronousSending</td>\n<td>boolean</td>\n<td>这个属性决定email的发送是否是异步。默认：true，异步发送但是在某些情况下，需要以同步方式发送错误日志的邮件给管理人员，防止不能及时维护应用。</td>\n</tr>\n<tr>\n<td>includeCallerData</td>\n<td>boolean</td>\n<td>默认：false 指定是否包含callerData在日志中</td>\n</tr>\n<tr>\n<td>sessionViaJNDI</td>\n<td>boolean</td>\n<td>SMTPAppender依赖javax.mail.Session来发送邮件。默认情况下，sessionViaJNDI为false。javax.mail.Session实例的创建依赖于SMTPAppender本身的配置信息。如果设置为true，则Session的创建时通过JNDI获取引用。这样做的好处可以让你的代码复用更好，让配置更简洁。需要注意的是，如果使用JNDI获取Session对象，需要保证移除mail.jar以及activation.jar这两个jar包</td>\n</tr>\n<tr>\n<td>jndiLocation</td>\n<td>String</td>\n<td>如果sessionViaJNDI设置为true，则jndiLocation指定JNDI的资源名，默认值为：”java:comp/env/mail/Session”</td>\n</tr>\n</tbody>\n</table>\n<p>SMTPAppender只保留最近的256条logging events 在循环缓冲区中，当缓冲区慢，就会开始丢弃最老的logging event。因此不管什么时候，SMTPAppender一封邮件最多传递256条日志事件。SMTPAppender依赖于JavaMail API。而JavaMail API又依赖于IOC框架（依赖注入）。</p>\n<p>第六个：DBAppender</p>\n<p> DBAppender 可以将日志事件插入到3张数据表中。它们分别是logging_event，logging_event_property，logging_event_exception。这三张数据表必须在DBAppender工作之前存在。它们的sql脚本可以在 logback-classic/src/main/java/ch/qos/logback/classic/db/script folder 这个目录下找到。这个脚本对大部分SQL数据库都是有效的，除了少部分，少数语法有差异需要调整。<br>下面是logback与常见数据库的支持信息：</p>\n<table>\n<thead>\n<tr>\n<th>RDBMS</th>\n<th>tested version(s)</th>\n<th>tested JDBC driver version(s)</th>\n<th>supports getGeneratedKeys() method</th>\n<th>is a dialect provided by logback</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DB2</td>\n<td>untested</td>\n<td>untested</td>\n<td>unknown</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>H2</td>\n<td>–</td>\n<td>-</td>\n<td>unknown</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>HSQL</td>\n<td>–</td>\n<td>-</td>\n<td>NO</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>Microsoft SQL Server</td>\n<td>–</td>\n<td>–</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>MySQL</td>\n<td>5.7</td>\n<td></td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>PostgreSQL</td>\n<td>–</td>\n<td>–</td>\n<td>NO</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>Oracle</td>\n<td>–</td>\n<td>–</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>SQLLite</td>\n<td>–</td>\n<td>-</td>\n<td>unknown</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>Sybase</td>\n<td>–</td>\n<td>-</td>\n<td>unknown</td>\n<td>YES</td>\n</tr>\n</tbody>\n</table>\n<p>下面给出三张表的sql语句：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> logging_event_property;</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> logging_event_exception;</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> logging_event;</span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> logging_event</span><br><span class=\"line\">  (</span><br><span class=\"line\">    timestmp         <span class=\"built_in\">BIGINT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    formatted_message  <span class=\"built_in\">TEXT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    logger_name       <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">254</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    level_string      <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">254</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    thread_name       <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">254</span>),</span><br><span class=\"line\">    reference_flag    <span class=\"built_in\">SMALLINT</span>,</span><br><span class=\"line\">    arg0              <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">254</span>),</span><br><span class=\"line\">    arg1              <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">254</span>),</span><br><span class=\"line\">    arg2              <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">254</span>),</span><br><span class=\"line\">    arg3              <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">254</span>),</span><br><span class=\"line\">    caller_filename   <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">254</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    caller_class      <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">254</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    caller_method     <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">254</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    caller_line       <span class=\"built_in\">CHAR</span>(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    event_id          <span class=\"built_in\">BIGINT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT PRIMARY <span class=\"keyword\">KEY</span></span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> logging_event_property</span><br><span class=\"line\">  (</span><br><span class=\"line\">    event_id       <span class=\"built_in\">BIGINT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    mapped_key        <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">254</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    mapped_value      <span class=\"built_in\">TEXT</span>,</span><br><span class=\"line\">    PRIMARY <span class=\"keyword\">KEY</span>(event_id, mapped_key),</span><br><span class=\"line\">    <span class=\"keyword\">FOREIGN</span> <span class=\"keyword\">KEY</span> (event_id) <span class=\"keyword\">REFERENCES</span> logging_event(event_id)</span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> logging_event_exception</span><br><span class=\"line\">  (</span><br><span class=\"line\">    event_id         <span class=\"built_in\">BIGINT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    i                <span class=\"built_in\">SMALLINT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    trace_line       <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">254</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    PRIMARY <span class=\"keyword\">KEY</span>(event_id, i),</span><br><span class=\"line\">    <span class=\"keyword\">FOREIGN</span> <span class=\"keyword\">KEY</span> (event_id) <span class=\"keyword\">REFERENCES</span> logging_event(event_id)</span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure></p>\n<p>第七个： AsyncAppender</p>\n<p>AsyncAppender记录ILoggingEvents的方式是异步的。它仅仅相当于一个event分配器，因此需要配合其他appender才能有所作为。</p>\n<p>需要注意的是：AsyncAppender将event缓存在 BlockingQueue ，一个由AsyncAppender创建的工作线程，会一直从这个队列的头部获取events，然后将它们分配给与AsyncAppender唯一关联的Appender中。默认情况下，如果这个队列80%已经被占满，则AsyncAppender会丢弃等级为 TRACE，DEBUG，INFO这三个等级的日志事件。<br>在应用关闭或重新部署的时候，AsyncAppender一定要被关闭，目的是为了停止，回收再利用worker thread，和刷新缓冲队列中logging events。那如果关闭AsyncAppender呢？可以通过关闭LoggerContext来关闭所有appender，当然也包括AsyncAppender了。AsyncAppender会在maxFlushTime属性设置的时间内等待Worker thread刷新全部日志event。如果你发现缓冲的event在关闭LoggerContext的时候被丢弃，这时候你就也许需要增加等待的时间。将maxFlushTime设置成0，就是AsyncAppender一直等待直到工作线程将所有被缓冲的events全部刷新出去才执行才结束。<br>根据JVM退出的模式，工作线程worker thread处理被缓冲的events的工作是可以被中断的，这样就导致了剩余未处理的events被搁浅。这种现象通常的原因是当LoggerContext没有完全关闭，或者当JVM终止那些非典型的控制流（不明觉厉）。为了避免工作线程的因为这些情况而发生中断，一个shutdown hook（关闭钩子）可以被插入到JVM运行的时候，这个钩子的作用是在JVM开始shutdown刚开始的时候执行关闭 LoggerContext的任务。</p>\n<p>下面是AsyncAppender的属性表</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Name    Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>queueSize</td>\n<td>int</td>\n<td>设置blocking queue的最大容量，默认是256条events</td>\n</tr>\n<tr>\n<td>discardingThreshold</td>\n<td>int</td>\n<td>默认，当blocking queue被占用80%以上，AsyncAppender就会丢弃level为 TRACE，DEBUG，INFO的日志事件，如果要保留所有等级的日志，需要设置成0</td>\n</tr>\n<tr>\n<td>includeCallerData</td>\n<td>boolean</td>\n<td>提取CallerData代价比较昂贵，为了提高性能，caller data默认不提供。只有一些获取代价较低的数据，如线程名称，MDC值才会被保留。如果设置为true，就会包含caller data</td>\n</tr>\n<tr>\n<td>maxFlushTime</td>\n<td>int</td>\n<td>设置最大等待刷新事件，单位为miliseconds(毫秒)。当LoggerContext关闭的时候，AsyncAppender会在这个时间内等待工作线程完成events的flush工作，超时未处理的events将会被抛弃。</td>\n</tr>\n<tr>\n<td>neverBlock</td>\n<td>boolean</td>\n<td>默认为false，如果队列被填满，为了处理所有日志，就会阻塞的应用。如果为true，为了不阻塞你的应用，也会选择抛弃一些message。</td>\n</tr>\n</tbody>\n</table>\n<p>默认情况下，event queue最大的容量是256。如果队列被填充满那么就会阻塞你的应用，直到队列能够容纳新的logging event。所以当AsyncAppender工作在队列满的情况下，可以称作伪同步。<br>在以下四种情况下容易导致AsyncAppender伪同步状态的出现：</p>\n<ol>\n<li>应用中存在大量线程</li>\n<li>每秒产生大量的logging events</li>\n<li>每一个logging event都存在大量的数据</li>\n<li>子appender中存在很高的延迟</li>\n</ol>\n<p>为了避免伪同步的出现，提高queueSizes普遍有效，但是就消耗了应用的可用内存。</p>\n<p>下面列出一些 appender配置示例：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FILE\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.FileAppender\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>myapp.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%logger&#123;35&#125; - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ASYNC\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.AsyncAppender\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"FILE\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"ASYNC\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"DB\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.db.DBAppender\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">connectionSource</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.db.DataSourceConnectionSource\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dataSource</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">class</span>=<span class=\"string\">\"com.mchange.v2.c3p0.ComboPooledDataSource\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">driverClass</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">driverClass</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">jdbcUrl</span>&gt;</span>jdbc:mysql://$&#123;serverName&#125;:$&#123;port&#125;/$&#123;dbName&#125;<span class=\"tag\">&lt;/<span class=\"name\">jdbcUrl</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">user</span>&gt;</span>$&#123;user&#125;<span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>$&#123;password&#125;<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">connectionSource</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"DB\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"EMAIL\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.net.SMTPAppender\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">smtpHost</span>&gt;</span>smtp.gmail.com<span class=\"tag\">&lt;/<span class=\"name\">smtpHost</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">smtpPort</span>&gt;</span>465<span class=\"tag\">&lt;/<span class=\"name\">smtpPort</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">SSL</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">SSL</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>YOUR_USERNAME@gmail.com<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>YOUR_GMAIL_PASSWORD<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">to</span>&gt;</span>EMAIL-DESTINATION<span class=\"tag\">&lt;/<span class=\"name\">to</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">to</span>&gt;</span>ANOTHER_EMAIL_DESTINATION<span class=\"tag\">&lt;/<span class=\"name\">to</span>&gt;</span> <span class=\"comment\">&lt;!-- additional destinations are possible --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">from</span>&gt;</span>YOUR_USERNAME@gmail.com<span class=\"tag\">&lt;/<span class=\"name\">from</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">subject</span>&gt;</span>TESTING: %logger&#123;20&#125; - %m<span class=\"tag\">&lt;/<span class=\"name\">subject</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.PatternLayout\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%date %-5level %logger&#123;35&#125; - %message%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"EMAIL\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"EMAIL\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.net.SMTPAppender\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">smtpHost</span>&gt;</span>smtp.gmail.com<span class=\"tag\">&lt;/<span class=\"name\">smtpHost</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">smtpPort</span>&gt;</span>587<span class=\"tag\">&lt;/<span class=\"name\">smtpPort</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">STARTTLS</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">STARTTLS</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>YOUR_USERNAME@gmail.com<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>YOUR_GMAIL_xPASSWORD<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">to</span>&gt;</span>EMAIL-DESTINATION<span class=\"tag\">&lt;/<span class=\"name\">to</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">to</span>&gt;</span>ANOTHER_EMAIL_DESTINATION<span class=\"tag\">&lt;/<span class=\"name\">to</span>&gt;</span> <span class=\"comment\">&lt;!-- additional destinations are possible --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">from</span>&gt;</span>YOUR_USERNAME@gmail.com<span class=\"tag\">&lt;/<span class=\"name\">from</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">subject</span>&gt;</span>TESTING: %logger&#123;20&#125; - %m<span class=\"tag\">&lt;/<span class=\"name\">subject</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.PatternLayout\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%date %-5level %logger - %message%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"EMAIL\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">SimpleSocketServer需要两个命令行参数，port 和 configFile路径。(该方法待验证)</span><br><span class=\"line\">java ch.qos.logback.classic.net.SimpleSocketServer 6000 \\ src/main/java/chapters/appenders/socket/server1.xml</span><br><span class=\"line\"></span><br><span class=\"line\">客户端的SocketAppender的简单配置例子：</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"SOCKET\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.net.SocketAppender\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">remoteHost</span>&gt;</span>192.168.0.101<span class=\"tag\">&lt;/<span class=\"name\">remoteHost</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>8888<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">reconnectionDelay</span>&gt;</span>10000<span class=\"tag\">&lt;/<span class=\"name\">reconnectionDelay</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">includeCallerData</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">includeCallerData</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"SOCKET\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">在服务端使用SimpleSSLSocketServer</span><br><span class=\"line\">java -Djavax.net.ssl.keyStore=src/main/java/chapters/appenders/socket/ssl/keystore.jks \\ -Djavax.net.ssl.keyStorePassword=changeit \\ ch.qos.logback.classic.net.SimpleSSLSocketServer 6000 \\ src/main/java/chapters/appenders/socket/ssl/server.xml</span><br><span class=\"line\"></span><br><span class=\"line\">SSLSocketAppender配置</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"SOCKET\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.net.SSLSocketAppender\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">remoteHost</span>&gt;</span>$&#123;host&#125;<span class=\"tag\">&lt;/<span class=\"name\">remoteHost</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>$&#123;port&#125;<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">reconnectionDelay</span>&gt;</span>10000<span class=\"tag\">&lt;/<span class=\"name\">reconnectionDelay</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ssl</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">trustStore</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">location</span>&gt;</span>$&#123;truststore&#125;<span class=\"tag\">&lt;/<span class=\"name\">location</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>$&#123;password&#125;<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">trustStore</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ssl</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"SOCKET\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FILE\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.FileAppender\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>testFile.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">append</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">append</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- encoders are assigned the type</span></span><br><span class=\"line\"><span class=\"comment\">        ch.qos.logback.classic.encoder.PatternLayoutEncoder by default --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"FILE\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://blog.csdn.net/tianyaleixiaowu/article/details/73327752\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/tianyaleixiaowu/article/details/73327752</a></p>\n<p>下面基于logback配置做一个请求日志的的封装</p>\n<p>功能：记录每次请求的参数和用户ID存入数据库或者elk<br>问题：javaee规范中request输入输出流都只能被读取一次，所以如果用过滤器或者拦截器读取request中的流都会导致后面的controller无法接受到数据。<br>所以我们要用原生的aop获得请求参数，切点为controller，这就很好的避开了以上问题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.muggle.poseidon.core.aspect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.muggle.poseidon.manager.UserInfoManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.muggle.poseidon.utils.RequestUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.JoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@program</span>: hiram_erp</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 日志信息切面</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: muggle</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span>: 2019-02-21</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogMessageAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(<span class=\"string\">\"requestLog\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//    private final static Logger timeLog = LoggerFactory.getLogger(LogMessageAspect.class);</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;Long&gt; threadLocal = <span class=\"keyword\">new</span> ThreadLocal&lt;&gt;();</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(public * com.hiram.erp.controller.*.*(..))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">webLog</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在切点之前织入</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> joinPoint</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Throwable</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"webLog()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doBefore</span><span class=\"params\">(JoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(\"sssssssssssssssssssssssssssssssssssssssssssssssssssss\");</span></span><br><span class=\"line\">       <span class=\"comment\">/* // 开始打印请求日志</span></span><br><span class=\"line\"><span class=\"comment\">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span></span><br><span class=\"line\"><span class=\"comment\">        HttpServletRequest request = attributes.getRequest();</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        // 打印请求相关参数</span></span><br><span class=\"line\"><span class=\"comment\">        // 打印请求 url</span></span><br><span class=\"line\"><span class=\"comment\">        // 请求id</span></span><br><span class=\"line\"><span class=\"comment\">        Long userId=null;</span></span><br><span class=\"line\"><span class=\"comment\">        if (user!=null)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            userId=user.getUserInfo().getUserId();</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        logger.info(\"URL : &#123;&#125;, 登录id: &#123;&#125; ,HTTP Method: &#123;&#125;,ip :&#123;&#125;,Request Args : &#123;&#125;\", request.getRequestURL().toString(),userId, request.getMethod(),request.getRemoteAddr());</span></span><br><span class=\"line\"><span class=\"comment\">*/</span>    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在切点之后织入</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Throwable</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@After</span>(<span class=\"string\">\"webLog()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doAfter</span><span class=\"params\">(JoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 环绕</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> joinPoint</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Throwable</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Around</span>(<span class=\"string\">\"webLog()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">doAround</span><span class=\"params\">(ProceedingJoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> startTime = System.currentTimeMillis();</span><br><span class=\"line\">        Object result = joinPoint.proceed();</span><br><span class=\"line\">        <span class=\"comment\">// 打印出参</span></span><br><span class=\"line\"><span class=\"comment\">//        logger.info(\"Response Args  : &#123;&#125;,\", JSONObject.toJSONString(result),new Date());</span></span><br><span class=\"line\">        <span class=\"comment\">// 执行耗时</span></span><br><span class=\"line\">        <span class=\"comment\">// 开始打印请求日志</span></span><br><span class=\"line\">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class=\"line\">        HttpServletRequest request = attributes.getRequest();</span><br><span class=\"line\">        HttpServletResponse response = attributes.getResponse();</span><br><span class=\"line\">        String requestURL = request.getRequestURL().toString();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (requestURL.contains(<span class=\"string\">\"/sys/log_info/\"</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 打印请求相关参数</span></span><br><span class=\"line\">        <span class=\"comment\">// 打印请求 url</span></span><br><span class=\"line\">        <span class=\"comment\">// 请求id</span></span><br><span class=\"line\">        String userId = UserInfoManager.getUserId();</span><br><span class=\"line\"></span><br><span class=\"line\">        String url = request.getRequestURL().toString();</span><br><span class=\"line\">        String method = request.getMethod();</span><br><span class=\"line\">        String remoteAddr = RequestUtils.getIpAddr(request);</span><br><span class=\"line\">        Object[] args = joinPoint.getArgs();</span><br><span class=\"line\"><span class=\"comment\">//        List&lt;Object&gt; objects=new ArrayList&lt;&gt;();</span></span><br><span class=\"line\">        StringBuilder stringBuilder = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;args.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (args[i] <span class=\"keyword\">instanceof</span> Serializable||args[i] <span class=\"keyword\">instanceof</span> Number ||args[i] <span class=\"keyword\">instanceof</span> String)&#123;</span><br><span class=\"line\">                stringBuilder.append( args[i].toString());</span><br><span class=\"line\"><span class=\"comment\">//                objects.add(args[i]);</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"&#123;\\\"startTime\\\":\\\"&#123;&#125;\\\",\\\"url\\\":\\\"&#123;&#125;\\\",\\\"userId\\\":\\\"&#123;&#125;\\\" ,\\\"httpMethod\\\":\\\"&#123;&#125;\\\",\\\"ip\\\":\\\"&#123;&#125;\\\",\\\"requestArgs\\\":\\\"&#123;&#125;\\\",\\\"status\\\":&#123;&#125;&#125;\"</span>,startTime,url,userId,method,remoteAddr,stringBuilder.toString(),response.getStatus());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于数据库存储，如果我们希望log存在另外一个数据库中不存在项目里的数据库中，并且可以通过持久化框架查询数据库内信息。我们则可以配置多数据源，如果将日志放在同一个数据库中则直接配置appender就行了，很方便。<br>多数据源配置mybatis版：</p>\n<p>其原理是配置多个sessionfactory,然后根据不同的mapperscan来区分不同mapper对应的数据库</p>\n<p>以druid连接池为例</p>\n<p>application.yml</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log:</span><br><span class=\"line\">  datasource:</span><br><span class=\"line\">    druid:</span><br><span class=\"line\">      url: $&#123;mysql_url&#125;/log?useUnicode=<span class=\"keyword\">true</span>&amp;characterEncoding=UTF-<span class=\"number\">8</span>&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=<span class=\"keyword\">false</span>&amp;allowMultiQueries=<span class=\"keyword\">true</span>&amp;serverTimezone=GMT%<span class=\"number\">2</span>B8&amp;nullCatalogMeansCurrent=<span class=\"keyword\">true</span></span><br><span class=\"line\">      username:</span><br><span class=\"line\">      password:</span><br><span class=\"line\">      driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">      connectionProperties: druid.stat.mergeSql=<span class=\"keyword\">true</span>;druid.stat.slowSqlMillis=<span class=\"number\">5000</span></span><br><span class=\"line\">      filters: stat,wall</span><br><span class=\"line\">      initialSize: <span class=\"number\">5</span></span><br><span class=\"line\">      maxActive: <span class=\"number\">20</span></span><br><span class=\"line\">      maxPoolPreparedStatementPerConnectionSize: <span class=\"number\">20</span></span><br><span class=\"line\">      maxWait: <span class=\"number\">60000</span></span><br><span class=\"line\">      minIdle: <span class=\"number\">5</span></span><br><span class=\"line\">      poolPreparedStatements: <span class=\"keyword\">true</span></span><br><span class=\"line\">      testOnBorrow: <span class=\"keyword\">false</span></span><br><span class=\"line\">      testOnReturn: <span class=\"keyword\">false</span></span><br><span class=\"line\">      testWhileIdle: <span class=\"keyword\">true</span></span><br><span class=\"line\">      timeBetweenEvictionRunsMillis: <span class=\"number\">60000</span></span><br><span class=\"line\">      validationQuery: SELECT <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">spring:</span><br><span class=\"line\">  datasource:</span><br><span class=\"line\">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class=\"line\">    druid:</span><br><span class=\"line\">      url: $&#123;mysql_url&#125;/hiram_erp?useUnicode=<span class=\"keyword\">true</span>&amp;characterEncoding=UTF-<span class=\"number\">8</span>&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=<span class=\"keyword\">false</span>&amp;allowMultiQueries=<span class=\"keyword\">true</span>&amp;serverTimezone=GMT%<span class=\"number\">2</span>B8&amp;nullCatalogMeansCurrent=<span class=\"keyword\">true</span></span><br><span class=\"line\">      username:</span><br><span class=\"line\">      password:</span><br><span class=\"line\">      driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">      connectionProperties: druid.stat.mergeSql=<span class=\"keyword\">true</span>;druid.stat.slowSqlMillis=<span class=\"number\">5000</span></span><br><span class=\"line\">      filters: stat,wall</span><br><span class=\"line\">      initialSize: <span class=\"number\">5</span></span><br><span class=\"line\">      maxActive: <span class=\"number\">20</span></span><br><span class=\"line\">      maxPoolPreparedStatementPerConnectionSize: <span class=\"number\">20</span></span><br><span class=\"line\">      maxWait: <span class=\"number\">60000</span></span><br><span class=\"line\">      minIdle: <span class=\"number\">5</span></span><br><span class=\"line\">      poolPreparedStatements: <span class=\"keyword\">true</span></span><br><span class=\"line\">      testOnBorrow: <span class=\"keyword\">false</span></span><br><span class=\"line\">      testOnReturn: <span class=\"keyword\">false</span></span><br><span class=\"line\">      testWhileIdle: <span class=\"keyword\">true</span></span><br><span class=\"line\">      timeBetweenEvictionRunsMillis: <span class=\"number\">60000</span></span><br><span class=\"line\">      validationQuery: SELECT <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"comment\">// 主数据库配置 指定mapper位置</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan</span>(basePackages = &#123;<span class=\"string\">\"com.muggle.poseidon.mapper\"</span>&#125;, sqlSessionTemplateRef = <span class=\"string\">\"sqlSessionTemplate\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ManySourceDBConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"dataSource\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 读取application的配置信息</span></span><br><span class=\"line\">   <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.datasource.druid\"</span>)</span><br><span class=\"line\">   <span class=\"comment\">// 最高优先级，表示系统默认使用该配置</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">dataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        DruidDataSource druidDataSource = <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\"></span><br><span class=\"line\">        List filterList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        filterList.add(wallFilter());</span><br><span class=\"line\"></span><br><span class=\"line\">        druidDataSource.setProxyFilters(filterList);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> druidDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"sqlSessionFactory\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title\">sqlSessionFactory</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class=\"keyword\">new</span> SqlSessionFactoryBean();</span><br><span class=\"line\">        sqlSessionFactoryBean.setDataSource(<span class=\"keyword\">this</span>.dataSource());</span><br><span class=\"line\"></span><br><span class=\"line\">        Properties props = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        props.setProperty(<span class=\"string\">\"localCacheScope\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">        props.setProperty(<span class=\"string\">\"lazyLoadingEnabled\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">        props.setProperty(<span class=\"string\">\"aggressiveLazyLoading\"</span>, <span class=\"string\">\"false\"</span>);</span><br><span class=\"line\">        props.setProperty(<span class=\"string\">\"jdbcTypeForNull\"</span>, <span class=\"string\">\"NULL\"</span>);</span><br><span class=\"line\">        sqlSessionFactoryBean.setConfigurationProperties(props);</span><br><span class=\"line\">        sqlSessionFactoryBean.setVfs(SpringBootVFS.class);</span><br><span class=\"line\">        <span class=\"comment\">//pageHelper</span></span><br><span class=\"line\">        Properties properties = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        properties.setProperty(<span class=\"string\">\"reasonable\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">        properties.setProperty(<span class=\"string\">\"supportMethodsArguments\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">        properties.setProperty(<span class=\"string\">\"params\"</span>, <span class=\"string\">\"count=countSql\"</span>);</span><br><span class=\"line\">        properties.setProperty(<span class=\"string\">\"pageSizeZero\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">        PageInterceptor interceptor = <span class=\"keyword\">new</span> PageInterceptor();</span><br><span class=\"line\">        interceptor.setProperties(properties);</span><br><span class=\"line\">        sqlSessionFactoryBean.setPlugins(<span class=\"keyword\">new</span> Interceptor[]&#123;interceptor&#125;);</span><br><span class=\"line\">        sqlSessionFactoryBean.setTypeAliasesPackage(<span class=\"string\">\"com.muggle.poseidon.model\"</span>);</span><br><span class=\"line\">        PathMatchingResourcePatternResolver resolver = <span class=\"keyword\">new</span> PathMatchingResourcePatternResolver();</span><br><span class=\"line\">        sqlSessionFactoryBean.setMapperLocations(resolver.getResources(<span class=\"string\">\"classpath*:/mapper/*.xml\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sqlSessionFactoryBean.getObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"transactionManager\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PlatformTransactionManager <span class=\"title\">transactionManager</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceTransactionManager(<span class=\"keyword\">this</span>.dataSource());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"sqlSessionTemplate\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionTemplate <span class=\"title\">testSqlSessionTemplate</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"sqlSessionFactory\"</span>)</span> SqlSessionFactory sqlSessionFactory) <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SqlSessionTemplate(sqlSessionFactory);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">statViewServlet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ServletRegistrationBean druid = <span class=\"keyword\">new</span> ServletRegistrationBean();</span><br><span class=\"line\">        druid.setServlet(<span class=\"keyword\">new</span> StatViewServlet());</span><br><span class=\"line\">        druid.setUrlMappings(Collections.singletonList(<span class=\"string\">\"/druid/*\"</span>));</span><br><span class=\"line\">        Map&lt;String, String&gt; params = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        params.put(<span class=\"string\">\"loginUsername\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        params.put(<span class=\"string\">\"loginPassword\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        druid.setInitParameters(params);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> druid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">webStatFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        FilterRegistrationBean fitler = <span class=\"keyword\">new</span> FilterRegistrationBean();</span><br><span class=\"line\">        fitler.setFilter(<span class=\"keyword\">new</span> WebStatFilter());</span><br><span class=\"line\">        fitler.setUrlPatterns(Collections.singletonList(<span class=\"string\">\"/*\"</span>));</span><br><span class=\"line\">        fitler.addInitParameter(<span class=\"string\">\"exclusions\"</span>, <span class=\"string\">\"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fitler;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> WallFilter <span class=\"title\">wallFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        WallFilter wallFilter = <span class=\"keyword\">new</span> WallFilter();</span><br><span class=\"line\"></span><br><span class=\"line\">        wallFilter.setConfig(wallConfig());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> wallFilter;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> WallConfig <span class=\"title\">wallConfig</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        WallConfig config = <span class=\"keyword\">new</span> WallConfig();</span><br><span class=\"line\"></span><br><span class=\"line\">        config.setMultiStatementAllow(<span class=\"keyword\">true</span>);<span class=\"comment\">//允许一次执行多条语句</span></span><br><span class=\"line\"></span><br><span class=\"line\">        config.setNoneBaseStatementAllow(<span class=\"keyword\">true</span>);<span class=\"comment\">//允许非基本语句的其他语句</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> config;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ProcessEngineConfiguration <span class=\"title\">processEngineConfiguration</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ProcessEngineConfiguration pec = StandaloneProcessEngineConfiguration.createStandaloneProcessEngineConfiguration();</span><br><span class=\"line\">        pec.setDataSource(dataSource());</span><br><span class=\"line\">        <span class=\"comment\">//如果表不存在，自动创建表</span></span><br><span class=\"line\">        pec.setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">        <span class=\"comment\">//属性asyncExecutorActivate定义为true，工作流引擎在启动时就建立启动async executor线程池</span></span><br><span class=\"line\">        pec.setAsyncExecutorActivate(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pec;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ProcessEngine <span class=\"title\">processEngine</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> processEngineConfiguration().buildProcessEngine();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>log数据库配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@program</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: muggle</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span>: 2019-02-23</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"comment\">// 注意确保主配置无法扫描到这个包</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan</span>(basePackages = <span class=\"string\">\"com.muggle.poseidon.logmapper\"</span>, sqlSessionTemplateRef  = <span class=\"string\">\"test1SqlSessionTemplate\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogDBConfig</span>  </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"test1DataSource\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"log.datasource.druid\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">dataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        DruidDataSource druidDataSource = <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\"></span><br><span class=\"line\">        List filterList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        filterList.add(wallFilter());</span><br><span class=\"line\"></span><br><span class=\"line\">        druidDataSource.setProxyFilters(filterList);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> druidDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"test1SqlSessionFactory\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title\">testSqlSessionFactory</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"test1DataSource\"</span>)</span> DataSource dataSource) <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        SqlSessionFactoryBean bean = <span class=\"keyword\">new</span> SqlSessionFactoryBean();</span><br><span class=\"line\">        bean.setDataSource(dataSource);</span><br><span class=\"line\">        bean.setMapperLocations(<span class=\"keyword\">new</span></span><br><span class=\"line\">        <span class=\"comment\">// mapper位置，不要和主配置的mapper放到一起</span></span><br><span class=\"line\">         PathMatchingResourcePatternResolver().getResources(<span class=\"string\">\"classpath*:/mapper/log/*.xml\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean.getObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"test1TransactionManager\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSourceTransactionManager <span class=\"title\">testTransactionManager</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"test1DataSource\"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceTransactionManager(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"test1SqlSessionTemplate\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionTemplate <span class=\"title\">testSqlSessionTemplate</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"test1SqlSessionFactory\"</span>)</span> SqlSessionFactory sqlSessionFactory) <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SqlSessionTemplate(sqlSessionFactory);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> WallFilter <span class=\"title\">wallFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        WallFilter wallFilter = <span class=\"keyword\">new</span> WallFilter();</span><br><span class=\"line\"></span><br><span class=\"line\">        wallFilter.setConfig(wallConfig());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> wallFilter;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> WallConfig <span class=\"title\">wallConfig</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        WallConfig config = <span class=\"keyword\">new</span> WallConfig();</span><br><span class=\"line\"></span><br><span class=\"line\">        config.setMultiStatementAllow(<span class=\"keyword\">true</span>);<span class=\"comment\">//允许一次执行多条语句</span></span><br><span class=\"line\"></span><br><span class=\"line\">        config.setNoneBaseStatementAllow(<span class=\"keyword\">true</span>);<span class=\"comment\">//允许非基本语句的其他语句</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> config;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>多数据源jpa版<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.muggle.poseidon.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.jdbc.DataSourceBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Primary;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataSourceConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 扫描spring.datasource.primary开头的配置信息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 数据源配置信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"primaryDataSourceProperties\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.datasource\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSourceProperties <span class=\"title\">dataSourceProperties</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceProperties();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取主库数据源对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> properties 注入名为primaryDataSourceProperties的bean</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 数据源对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"primaryDataSource\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">dataSource</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"primaryDataSourceProperties\"</span>)</span> DataSourceProperties properties) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> properties.initializeDataSourceBuilder().build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 该方法仅在需要使用JdbcTemplate对象时选用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dataSource 注入名为primaryDataSource的bean</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 数据源JdbcTemplate对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"primaryJdbcTemplate\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JdbcTemplate <span class=\"title\">jdbcTemplate</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"primaryDataSource\"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JdbcTemplate(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.muggle.poseidon.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.orm.jpa.HibernateSettings;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Primary;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.orm.jpa.JpaTransactionManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.persistence.EntityManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.persistence.EntityManagerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableTransactionManagement</span></span><br><span class=\"line\"><span class=\"meta\">@EnableJpaRepositories</span>(</span><br><span class=\"line\">        <span class=\"comment\">// repository包名</span></span><br><span class=\"line\">        basePackages = <span class=\"string\">\"com.muggle.poseidon.repos\"</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 实体管理bean名称</span></span><br><span class=\"line\">        entityManagerFactoryRef = <span class=\"string\">\"primaryEntityManagerFactory\"</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 事务管理bean名称</span></span><br><span class=\"line\">        transactionManagerRef = <span class=\"string\">\"primaryTransactionManager\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainDataBaseConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 扫描spring.jpa.primary开头的配置信息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> jpa配置信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"primaryJpaProperties\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.jpa\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JpaProperties <span class=\"title\">jpaProperties</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JpaProperties();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取主库实体管理工厂对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> primaryDataSource 注入名为primaryDataSource的数据源</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jpaProperties     注入名为primaryJpaProperties的jpa配置信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> builder           注入EntityManagerFactoryBuilder</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 实体管理工厂对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"primaryEntityManagerFactory\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> LocalContainerEntityManagerFactoryBean <span class=\"title\">entityManagerFactory</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"primaryDataSource\"</span>)</span> DataSource primaryDataSource</span></span><br><span class=\"line\"><span class=\"function\">            , @<span class=\"title\">Qualifier</span><span class=\"params\">(<span class=\"string\">\"primaryJpaProperties\"</span>)</span> JpaProperties jpaProperties, EntityManagerFactoryBuilder builder) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder</span><br><span class=\"line\">                <span class=\"comment\">// 设置数据源</span></span><br><span class=\"line\">                .dataSource(primaryDataSource)</span><br><span class=\"line\">                <span class=\"comment\">// 设置jpa配置</span></span><br><span class=\"line\">                .properties(jpaProperties.getProperties())</span><br><span class=\"line\">                <span class=\"comment\">// 设置hibernate配置</span></span><br><span class=\"line\">                .properties(jpaProperties.getHibernateProperties(<span class=\"keyword\">new</span> HibernateSettings()))</span><br><span class=\"line\">                <span class=\"comment\">// 设置实体包名</span></span><br><span class=\"line\">                .packages(<span class=\"string\">\"com.muggle.poseidon.model\"</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 设置持久化单元名，用于@PersistenceContext注解获取EntityManager时指定数据源</span></span><br><span class=\"line\">                .persistenceUnit(<span class=\"string\">\"primaryPersistenceUnit\"</span>)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取实体管理对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> factory 注入名为primaryEntityManagerFactory的bean</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 实体管理对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"primaryEntityManager\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EntityManager <span class=\"title\">entityManager</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"primaryEntityManagerFactory\"</span>)</span> EntityManagerFactory factory) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> factory.createEntityManager();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取主库事务管理对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> factory 注入名为primaryEntityManagerFactory的bean</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 事务管理对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"primaryTransactionManager\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PlatformTransactionManager <span class=\"title\">transactionManager</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"primaryEntityManagerFactory\"</span>)</span> EntityManagerFactory factory) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JpaTransactionManager(factory);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">​```java</span><br><span class=\"line\"><span class=\"keyword\">package</span> com.muggle.poseidon.core.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.orm.jpa.HibernateSettings;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.orm.jpa.JpaTransactionManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.persistence.EntityManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.persistence.EntityManagerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableTransactionManagement</span></span><br><span class=\"line\"><span class=\"meta\">@EnableJpaRepositories</span>(</span><br><span class=\"line\">        <span class=\"comment\">// repository包名</span></span><br><span class=\"line\">        basePackages = <span class=\"string\">\"com.muggle.poseidon.logrep\"</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 实体管理bean名称</span></span><br><span class=\"line\">        entityManagerFactoryRef = <span class=\"string\">\"secondEntityManagerFactory\"</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 事务管理bean名称</span></span><br><span class=\"line\">        transactionManagerRef = <span class=\"string\">\"secondTransactionManager\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogDataBaseConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 扫描spring.jpa.second开头的配置信息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> jpa配置信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"secondJpaProperties\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.aa\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JpaProperties <span class=\"title\">jpaProperties</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JpaProperties();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取从库实体管理工厂对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> secondDataSource 注入名为secondDataSource的数据源</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jpaProperties    注入名为secondJpaProperties的jpa配置信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> builder          注入EntityManagerFactoryBuilder</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 实体管理工厂对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"secondEntityManagerFactory\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> LocalContainerEntityManagerFactoryBean <span class=\"title\">entityManagerFactory</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"secondDataSource\"</span>)</span> DataSource secondDataSource</span></span><br><span class=\"line\"><span class=\"function\">            , @<span class=\"title\">Qualifier</span><span class=\"params\">(<span class=\"string\">\"secondJpaProperties\"</span>)</span> JpaProperties jpaProperties, EntityManagerFactoryBuilder builder) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder</span><br><span class=\"line\">                <span class=\"comment\">// 设置数据源</span></span><br><span class=\"line\">                .dataSource(secondDataSource)</span><br><span class=\"line\">                <span class=\"comment\">// 设置jpa配置</span></span><br><span class=\"line\">                .properties(jpaProperties.getProperties())</span><br><span class=\"line\">                <span class=\"comment\">// 设置hibernate配置</span></span><br><span class=\"line\">                .properties(jpaProperties.getHibernateProperties(<span class=\"keyword\">new</span> HibernateSettings()))</span><br><span class=\"line\">                <span class=\"comment\">// 设置实体包名</span></span><br><span class=\"line\">                .packages(<span class=\"string\">\"com.muggle.poseidon.entity\"</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 设置持久化单元名，用于@PersistenceContext注解获取EntityManager时指定数据源</span></span><br><span class=\"line\">                .persistenceUnit(<span class=\"string\">\"secondPersistenceUnit\"</span>)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取实体管理对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> factory 注入名为secondEntityManagerFactory的bean</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 实体管理对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"secondEntityManager\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EntityManager <span class=\"title\">entityManager</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"secondEntityManagerFactory\"</span>)</span> EntityManagerFactory factory) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> factory.createEntityManager();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取从库事务管理对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> factory 注入名为secondEntityManagerFactory的bean</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 事务管理对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"secondTransactionManager\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PlatformTransactionManager <span class=\"title\">transactionManager</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"secondEntityManagerFactory\"</span>)</span> EntityManagerFactory factory) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JpaTransactionManager(factory);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.muggle.poseidon.core.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogDataConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 扫描spring.datasource.second开头的配置信息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 数据源配置信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"secondDataSourceProperties\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.ss\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSourceProperties <span class=\"title\">dataSourceProperties</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceProperties();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取从库数据源对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> properties 注入名为secondDataSourceProperties的beanf</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 数据源对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"secondDataSource\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">dataSource</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"secondDataSourceProperties\"</span>)</span> DataSourceProperties properties) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> properties.initializeDataSourceBuilder().build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 该方法仅在需要使用JdbcTemplate对象时选用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dataSource 注入名为secondDataSource的bean</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 数据源JdbcTemplate对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"secondJdbcTemplate\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JdbcTemplate <span class=\"title\">jdbcTemplate</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"secondDataSource\"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JdbcTemplate(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>application.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=<span class=\"number\">8080</span></span><br><span class=\"line\">spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class=\"line\">#spring.datasource.url = jdbc:mysql://localhost:3306/test</span><br><span class=\"line\">spring.datasource.driverClassName = com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">spring.datasource.url = jdbc:mysql:<span class=\"comment\">//119.23.75.58:3306/poseidon?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowMultiQueries=true</span></span><br><span class=\"line\">spring.datasource.username =</span><br><span class=\"line\">spring.datasource.password =</span><br><span class=\"line\">spring.datasource.max-active=<span class=\"number\">20</span></span><br><span class=\"line\">spring.datasource.max-idle=<span class=\"number\">8</span></span><br><span class=\"line\">spring.datasource.min-idle=<span class=\"number\">8</span></span><br><span class=\"line\">spring.datasource.initial-size=<span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\">spring.jpa.database=mysql</span><br><span class=\"line\">spring.jpa.show-sql = <span class=\"keyword\">true</span></span><br><span class=\"line\">#配置方言</span><br><span class=\"line\">spring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect</span><br><span class=\"line\"></span><br><span class=\"line\">spring.ss.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class=\"line\">#spring.datasource.url = jdbc:mysql://localhost:3306/test</span><br><span class=\"line\">spring.ss.driverClassName = com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">spring.ss.url = jdbc:mysql:<span class=\"comment\">//zzzzz/log?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowMultiQueries=true</span></span><br><span class=\"line\">spring.ss.username =</span><br><span class=\"line\">spring.ss.password =</span><br><span class=\"line\">spring.ss.max-active=<span class=\"number\">20</span></span><br><span class=\"line\">spring.ss.max-idle=<span class=\"number\">8</span></span><br><span class=\"line\">spring.ss.min-idle=<span class=\"number\">8</span></span><br><span class=\"line\">spring.ss.initial-size=<span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">spring.aa.database=mysql</span><br><span class=\"line\">spring.aa.show-sql = <span class=\"keyword\">true</span></span><br><span class=\"line\">#配置方言</span><br><span class=\"line\">spring.aa.database-platform=org.hibernate.dialect.MySQL5Dialect</span><br></pre></td></tr></table></figure>\n<p>以数据库作为输出配置就算完成了，接下来整合elk系统到我们日志系统中：</p>\n<p>先整合logstash</p>\n<p>logstash安装和配置：<br><a href=\"https://www.elastic.co/cn/downloads/logstash\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/cn/downloads/logstash</a> 选择zip包下载</p>\n<p>解压，进入bin目录 创建logstash.conf 并配置：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">    tcp &#123;</span><br><span class=\"line\">    ##host:port就是上面appender中的 destination，这里其实把logstash作为服务，开启9250端口接收logback发出的消息</span><br><span class=\"line\">    host =&gt; \"127.0.0.1\"</span><br><span class=\"line\">    port =&gt; 9100</span><br><span class=\"line\">    mode =&gt; \"server\"</span><br><span class=\"line\">    tags =&gt; [\"tags\"]</span><br><span class=\"line\">    codec =&gt; json_lines</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">    stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class=\"line\">    #输出到es</span><br><span class=\"line\">    #elasticsearch &#123; hosts =&gt; \"127.0.0.1:9200\" &#125;</span><br><span class=\"line\">        #输出到一个文件中</span><br><span class=\"line\">    file &#123;</span><br><span class=\"line\">       path =&gt; \"D:\\logs\\test.log\"</span><br><span class=\"line\">       codec =&gt; line</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我这里先配置输出到文件，后面再修改,创建文件：D:\\logs\\test.log</p>\n<p>启动：</p>\n<p>打开cmd（不要使用powershell），进入bin:<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\exe\\logstash-6.6.1\\logstash-6.6.1\\bin&gt;logstash -f logstash.conf</span><br></pre></td></tr></table></figure></p>\n<p>然后在我们的项目中进行相应的配置：<br>按这个来：<a href=\"https://github.com/logstash/logstash-logback-encoder\" target=\"_blank\" rel=\"noopener\">https://github.com/logstash/logstash-logback-encoder</a></p>\n<p>加入pom并指定logback版本：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 父pom中 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ch.qos.logback.version</span>&gt;</span>1.2.3<span class=\"tag\">&lt;/<span class=\"name\">ch.qos.logback.version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--  日志模块--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.logstash.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logstash-logback-encoder<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Your project must also directly depend on either logback-classic or logback-access.  For example: --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>配置apppender和logger</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"stash\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"net.logstash.logback.appender.LogstashTcpSocketAppender\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">destination</span>&gt;</span>127.0.0.1:9100<span class=\"tag\">&lt;/<span class=\"name\">destination</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">includeCallerData</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">includeCallerData</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">encoder</span> <span class=\"attr\">class</span>=<span class=\"string\">\"net.logstash.logback.encoder.LogstashEncoder\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">includeCallerData</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">includeCallerData</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logstash\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"info\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"stash\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>测试：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RestController</span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/public/log\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogTestController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger log = LoggerFactory.getLogger(<span class=\"string\">\"logstash\"</span>);</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    LoggingEventRepository repository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"sssssssssssssss\"</span>);</span><br><span class=\"line\">        Iterable&lt;LoggingEvent&gt; all = repository.findAll();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"sss\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>访问接口，logstash打印信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[2019-03-09T11:32:56,358][INFO ][logstash.outputs.file    ] Opening file &#123;:path=&gt;&quot;D:/logs/test.log&quot;&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">                  &quot;host&quot; =&gt; &quot;www.xmind.net&quot;,</span><br><span class=\"line\">                 &quot;level&quot; =&gt; &quot;INFO&quot;,</span><br><span class=\"line\">     &quot;caller_class_name&quot; =&gt; &quot;com.muggle.poseidon.controller.LogTestController&quot;,</span><br><span class=\"line\">            &quot;@timestamp&quot; =&gt; 2019-03-09T03:33:03.413Z,</span><br><span class=\"line\">           &quot;logger_name&quot; =&gt; &quot;logstash&quot;,</span><br><span class=\"line\">              &quot;@version&quot; =&gt; &quot;1&quot;,</span><br><span class=\"line\">           &quot;thread_name&quot; =&gt; &quot;http-nio-8080-exec-9&quot;,</span><br><span class=\"line\">               &quot;message&quot; =&gt; &quot;sssssssssssssss&quot;,</span><br><span class=\"line\">    &quot;caller_line_number&quot; =&gt; 22,</span><br><span class=\"line\">                  &quot;port&quot; =&gt; 58368,</span><br><span class=\"line\">           &quot;level_value&quot; =&gt; 20000,</span><br><span class=\"line\">      &quot;caller_file_name&quot; =&gt; &quot;LogTestController.java&quot;,</span><br><span class=\"line\">                  &quot;tags&quot; =&gt; [</span><br><span class=\"line\">        [0] &quot;tags&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;caller_method_name&quot; =&gt; &quot;test&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>test.log输出了文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-03-09T03:33:03.413Z www.xmind.net sssssssssssssss</span><br></pre></td></tr></table></figure>\n<p>接下来只要把输出路径换成ES就可以了，这属于logstash和es的整合，这里先不讲解；重新回归到我们的请求模块：</p>\n<p>我希望我的模块，对每次请求都能记录下来（请求日志），并将记录存到数据库或者ES，同时我要对所有接口都进行一个幂等性的保障；保障接口的幂等性有多种方法，比较简单的是数据库做唯一索引或者加拦截器，我这里加了一个拦截器来保障接口幂等和拦截前端数据的重复提交(关于接口幂等性在其他文档中介绍)：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestLockInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\">    RedisLock redisTool;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> expireTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RequestLockInterceptor</span><span class=\"params\">(<span class=\"keyword\">int</span> expireTime, RedislockImpl redisTool)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.expireTime = expireTime;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.redisTool = redisTool;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">\"post\"</span>.equalsIgnoreCase(request.getMethod()))&#123;</span><br><span class=\"line\">            String token = request.getParameter(<span class=\"string\">\"request_key\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (token==<span class=\"keyword\">null</span>||<span class=\"string\">\"\"</span>.equals(token))&#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">\"请求非法\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//            throw new PoseidonException(\"请求太频繁\",PoseidonProperties.TOO_NUMBER_REQUEST);</span></span><br><span class=\"line\">                response.setContentType(<span class=\"string\">\"application/json;charset=UTF-8\"</span>);</span><br><span class=\"line\">                PrintWriter writer = response.getWriter();</span><br><span class=\"line\">                writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"5001\\\",\\\"msg\\\":\\\"请求非法\\\"&#125;\"</span>);</span><br><span class=\"line\">                writer.close();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            String ipAddr = RequestUtils.getIpAddr(request);</span><br><span class=\"line\">            String lockKey = request.getRequestURI() + <span class=\"string\">\"_\"</span>  + <span class=\"string\">\"_\"</span> + token;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> lock = redisTool.lock(lockKey, ipAddr, expireTime);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!lock) &#123;<span class=\"comment\">//</span></span><br><span class=\"line\">                log.error(<span class=\"string\">\"拦截表单重复提交\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//            throw new PoseidonException(\"请求太频繁\",PoseidonProperties.TOO_NUMBER_REQUEST);</span></span><br><span class=\"line\">                response.setContentType(<span class=\"string\">\"application/json;charset=UTF-8\"</span>);</span><br><span class=\"line\">                PrintWriter writer = response.getWriter();</span><br><span class=\"line\">                writer.write(<span class=\"string\">\"&#123;\\\"code\\\":\\\"5001\\\",\\\"msg\\\":\\\"请求太频繁\\\"&#125;\"</span>);</span><br><span class=\"line\">                writer.close();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        String requestURI = request.getRequestURI();</span></span><br><span class=\"line\"><span class=\"comment\">//        String lockKey = request.getRequestURI() + \"_\" + RequestUtils.getIpAddr(request);</span></span><br><span class=\"line\"><span class=\"comment\">//        redisTool.unlock(lockKey,getIpAddr(request));</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>项目使用了redis锁（redis锁原理和使用在其他文档中介绍）</p>\n<p>对于系统异常，如果是业务的异常，正常处理，如果是系统发生的异常比如空指针，数据库异常等我希望系统能马上通知，以便排查问题，所以我配置邮件异常通知(关于springboot邮件配置其他文档介绍)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestControllerAdvice</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RestExceptionHandlerController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    EmailService emailService;</span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;admin.email&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String adminEmail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(value = &#123;PoseidonException.class&#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ResultBean <span class=\"title\">poseidonExceptionHandler</span><span class=\"params\">(PoseidonException e, HttpServletRequest req)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultBean().setMsg(e.getMsg()).setCode(e.getCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(value = &#123;MethodArgumentNotValidException.class&#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ResultBean <span class=\"title\">MethodArgumentNotValidException</span><span class=\"params\">(MethodArgumentNotValidException e, HttpServletRequest req)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(e.getMessage());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultBean().setMsg(<span class=\"string\">\"数据未通过校验\"</span>).setCode(PoseidonProperties.COMMIT_DATA_ERROR);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(value = &#123;Exception.class&#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ResultBean <span class=\"title\">exceptionHandler</span><span class=\"params\">(Exception e, HttpServletRequest req)</span> </span>&#123;</span><br><span class=\"line\">        log.error(<span class=\"string\">\"系统异常：\"</span> + req.getMethod() + req.getRequestURI(), e);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">            EmailBean emailBean = <span class=\"keyword\">new</span> EmailBean();</span><br><span class=\"line\">            emailBean.setRecipient(adminEmail);</span><br><span class=\"line\">            emailBean.setSubject(<span class=\"string\">\"poseidon---系统异常\"</span>);</span><br><span class=\"line\">            emailBean.setContent(<span class=\"string\">\"系统异常：\"</span> + req.getMethod() + req.getRequestURI()+<span class=\"string\">\"----\"</span>+e.getMessage());</span><br><span class=\"line\"><span class=\"comment\">//            改良</span></span><br><span class=\"line\">            emailService.sendSimpleMail(emailBean);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultBean().setMsg(<span class=\"string\">\"系统异常，请联系管理员\"</span>).setCode(<span class=\"string\">\"500\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(value = &#123;HttpRequestMethodNotSupportedException.class&#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ResultBean <span class=\"title\">notsupported</span><span class=\"params\">(Exception e, HttpServletRequest req)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultBean().setMsg(<span class=\"string\">\"不支持的请求方式\"</span>).setCode(PoseidonProperties.NOT_SUPPORT_METHOD);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(value = &#123;NoHandlerFoundException.class&#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ResultBean <span class=\"title\">notFoundUrl</span><span class=\"params\">(Exception e, HttpServletRequest req)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultBean().setMsg(<span class=\"string\">\"请求路径不存在\"</span>).setCode(<span class=\"string\">\"404\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>项目架构信得<br>common 和core模块存在的意义</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjvrruxrm0000vovma8jbyfj1","tag_id":"cjvrruxrt0002vovmd00e9x0v","_id":"cjvrruxrx0007vovm3wy8injb"},{"post_id":"cjvrruxrr0001vovmaq9wcgpc","tag_id":"cjvrruxrw0006vovmiet4076x","_id":"cjvrruxs2000cvovmc9yt5m9a"},{"post_id":"cjvrruxru0003vovmov9ypopc","tag_id":"cjvrruxrt0002vovmd00e9x0v","_id":"cjvrruxs5000gvovmcfmrm7wc"},{"post_id":"cjvrruxrv0004vovmi0ampak9","tag_id":"cjvrruxs4000evovmjb4daoo5","_id":"cjvrruxs9000kvovmoh6h6y1p"},{"post_id":"cjvrruxs6000hvovm5em8zrnv","tag_id":"cjvrruxs4000evovmjb4daoo5","_id":"cjvrruxsa000mvovmlyjvp5ov"},{"post_id":"cjvrruxrw0005vovmllrrh3kz","tag_id":"cjvrruxs7000ivovmgnnk4ml0","_id":"cjvrruxsc000pvovmq0rx2416"},{"post_id":"cjvrruxrx0008vovmlddtf8xf","tag_id":"cjvrruxsa000nvovm1z8qpdkh","_id":"cjvrruxse000tvovmzgmwxlia"},{"post_id":"cjvrruxsd000rvovmqjyik0lh","tag_id":"cjvrruxsa000nvovm1z8qpdkh","_id":"cjvrruxsf000vvovmo8w6l0n0"},{"post_id":"cjvrruxry0009vovmgau3pvhh","tag_id":"cjvrruxsd000svovmf05ytswx","_id":"cjvrruxsg000zvovms1fu47fz"},{"post_id":"cjvrruxs1000bvovmce2y55z0","tag_id":"cjvrruxsf000xvovm4lw1zqt2","_id":"cjvrruxsi0013vovm8mn6zw8l"},{"post_id":"cjvrruxs2000dvovm7ptg46ud","tag_id":"cjvrruxsf000xvovm4lw1zqt2","_id":"cjvrruxsk0017vovmru0dpnt7"},{"post_id":"cjvrruxsi0014vovm4hwf96vl","tag_id":"cjvrruxrt0002vovmd00e9x0v","_id":"cjvrruxsl0019vovm5lhfzqhw"},{"post_id":"cjvrruxsj0016vovmv61pdun2","tag_id":"cjvrruxrt0002vovmd00e9x0v","_id":"cjvrruxsm001cvovmxiuhu3fu"},{"post_id":"cjvrruxs4000fvovma9agdwvz","tag_id":"cjvrruxsa000nvovm1z8qpdkh","_id":"cjvrruxsn001evovmuwsttgyv"},{"post_id":"cjvrruxsk0018vovmny85p5kn","tag_id":"cjvrruxrt0002vovmd00e9x0v","_id":"cjvrruxsp001hvovmy8ex02sz"},{"post_id":"cjvrruxs8000jvovmx2sx3a7c","tag_id":"cjvrruxsl001avovm8bxbvxin","_id":"cjvrruxsq001jvovmdmyn6uwv"},{"post_id":"cjvrruxs9000lvovmfsoyzjak","tag_id":"cjvrruxsl001avovm8bxbvxin","_id":"cjvrruxss001mvovm45u4r99e"},{"post_id":"cjvrruxsp001ivovm5j4fzpxk","tag_id":"cjvrruxsa000nvovm1z8qpdkh","_id":"cjvrruxss001ovovms1d9bow5"},{"post_id":"cjvrruxsr001lvovmwps0cfr2","tag_id":"cjvrruxs7000ivovmgnnk4ml0","_id":"cjvrruxst001rvovmkkgl5uo5"},{"post_id":"cjvrruxsa000ovovmjklj2zhk","tag_id":"cjvrruxsl001avovm8bxbvxin","_id":"cjvrruxsu001tvovm011u92zf"},{"post_id":"cjvrruxss001nvovmzes4c2vf","tag_id":"cjvrruxs7000ivovmgnnk4ml0","_id":"cjvrruxsv001wvovm3n0o68n9"},{"post_id":"cjvrruxst001qvovmm5pvf2uq","tag_id":"cjvrruxsf000xvovm4lw1zqt2","_id":"cjvrruxsw001yvovmv7t2qno9"},{"post_id":"cjvrruxsc000qvovmp8gvk0ne","tag_id":"cjvrruxsl001avovm8bxbvxin","_id":"cjvrruxsx0021vovmolllu40e"},{"post_id":"cjvrruxsu001svovm6hg495b3","tag_id":"cjvrruxs7000ivovmgnnk4ml0","_id":"cjvrruxsx0022vovmm26kjtu9"},{"post_id":"cjvrruxse000uvovmafecre06","tag_id":"cjvrruxsl001avovm8bxbvxin","_id":"cjvrruxsy0024vovm5ilfnv04"},{"post_id":"cjvrruxsf000wvovmmsb0akjo","tag_id":"cjvrruxsw001zvovmsvvbkh3s","_id":"cjvrruxsy0025vovm6rnogg88"},{"post_id":"cjvrruxsg000yvovm706n4ktr","tag_id":"cjvrruxsy0023vovmxt50n3by","_id":"cjvrruxsy0027vovme5apgpor"},{"post_id":"cjvrruxsh0010vovmeu6n7f94","tag_id":"cjvrruxsy0026vovmykmwx1e4","_id":"cjvrruxsz0029vovm8l3cgfj7"},{"post_id":"cjvrruxsi0012vovm7yw1ftmc","tag_id":"cjvrruxsz0028vovmkpfhbq9b","_id":"cjvrruxsz002bvovmkaapi0a3"},{"post_id":"cjvrruxsl001bvovmpk841vce","tag_id":"cjvrruxsz002avovmfqciwog2","_id":"cjvrruxt0002dvovmqkmh50vc"},{"post_id":"cjvrruxsm001dvovmjhdf3yxu","tag_id":"cjvrruxsz002cvovmciesfos7","_id":"cjvrruxt0002fvovmj3468x0p"},{"post_id":"cjvrruxso001gvovmpxx61u5g","tag_id":"cjvrruxt0002evovm531pbv56","_id":"cjvrruxt0002hvovmgt657h5t"},{"post_id":"cjvrruxsv001vvovm85hpd4lp","tag_id":"cjvrruxt0002gvovmrxrvxuhg","_id":"cjvrruxt1002jvovm6katl8pd"},{"post_id":"cjvrruxsw001xvovmhsmqvhuk","tag_id":"cjvrruxt1002ivovm4dvzalkv","_id":"cjvrruxt1002lvovmrekkqve4"},{"post_id":"cjvrruxsx0020vovmyvjy5kyr","tag_id":"cjvrruxt1002ivovm4dvzalkv","_id":"cjvrruxt2002mvovmmqilbeol"},{"post_id":"cjvrruxt8002nvovmwo21yzkw","tag_id":"cjvrruxt1002ivovm4dvzalkv","_id":"cjvrruxt9002pvovmucjyv0hm"},{"post_id":"cjvrruxt9002ovovmka1mm6ox","tag_id":"cjvrruxt1002ivovm4dvzalkv","_id":"cjvrruxta002rvovmxz0wj5wt"},{"post_id":"cjvrruxta002qvovm23yaa6tg","tag_id":"cjvrruxs7000ivovmgnnk4ml0","_id":"cjvrruxtc002tvovmltnp9js7"},{"post_id":"cjvrruxtc002uvovmte041c79","tag_id":"cjvrruxt0002gvovmrxrvxuhg","_id":"cjvrruxte002xvovmt73jaz66"},{"post_id":"cjvrruxtd002wvovmm453ebsw","tag_id":"cjvrruxt0002gvovmrxrvxuhg","_id":"cjvrruxte002yvovmj75489h8"},{"post_id":"cjvrruxtb002svovmcq0ndzfl","tag_id":"cjvrruxtd002vvovms770b4ra","_id":"cjvrruxtf002zvovmou93mekp"},{"post_id":"cjvrruxtq0030vovmean0k5wn","tag_id":"cjvrruxsa000nvovm1z8qpdkh","_id":"cjvrruxts0032vovm1fjwn8ks"},{"post_id":"cjvrruxtr0031vovm1hdhnwyi","tag_id":"cjvrruxsz002cvovmciesfos7","_id":"cjvrruxtt0034vovmb9r0qobz"},{"post_id":"cjvrruxts0033vovmz1jwz6aa","tag_id":"cjvrruxsz002cvovmciesfos7","_id":"cjvrruxtt0035vovmjyv0rehd"},{"post_id":"cjvrruxu20036vovmzchdgxmg","tag_id":"cjvrruxsy0023vovmxt50n3by","_id":"cjvrruxu30037vovmklah3o83"}],"Tag":[{"name":"javase","_id":"cjvrruxrt0002vovmd00e9x0v"},{"name":"设计模式","_id":"cjvrruxrw0006vovmiet4076x"},{"name":"javaee","_id":"cjvrruxs4000evovmjb4daoo5"},{"name":"cloud","_id":"cjvrruxs7000ivovmgnnk4ml0"},{"name":"developing","_id":"cjvrruxsa000nvovm1z8qpdkh"},{"name":"苟？","_id":"cjvrruxsd000svovmf05ytswx"},{"name":"home","_id":"cjvrruxsf000xvovm4lw1zqt2"},{"name":"jvm","_id":"cjvrruxsl001avovm8bxbvxin"},{"name":"中间件","_id":"cjvrruxsw001zvovmsvvbkh3s"},{"name":"log","_id":"cjvrruxsy0023vovmxt50n3by"},{"name":"算法","_id":"cjvrruxsy0026vovmykmwx1e4"},{"name":"photo","_id":"cjvrruxsz0028vovmkpfhbq9b"},{"name":"springboot","_id":"cjvrruxsz002avovmfqciwog2"},{"name":"security","_id":"cjvrruxsz002cvovmciesfos7"},{"name":"spring","_id":"cjvrruxt0002evovm531pbv56"},{"name":"thread","_id":"cjvrruxt0002gvovmrxrvxuhg"},{"name":"tool","_id":"cjvrruxt1002ivovm4dvzalkv"},{"name":"netty","_id":"cjvrruxtd002vvovms770b4ra"}]}}